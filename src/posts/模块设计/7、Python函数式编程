---
icon: pen-to-square
date: 2024-05-06
category:
  - python
  - 函数式编程
tag:
  - 函数式编程
star: true
---

# 7、函数式编程



### 一、引言



我第一次对函数式编程有比较深入了解的时候是我在第一份工作的时候当时我们的领导，安排我做一个关于数据分析的项目。其中我们需要提供一系列基础的方法，方便别人进行函数的组装在构造来适配于他们的业务。当时对于这个函数式编程还是比较陌生的，后面在不断地了解有了自己的一些认识。

在python中函数是一等公民。这是流畅的python中的原话**在 Python 中，整数、字符串和字典都是一等对象——没什么特别的。**因此python中函数也是可以作为，参数，返回值使用的

作为参数：我们可以使用一个最简单的例子就是python中的内置函数sort,其中key就是可以传入一个函数。
作为返回值：Python的闭包也是一个很好的证明。

```tex
闭包是一个函数，以及该函数声明和调用的词法环境的组合。这包括任何在该函数外部定义但在函数体内部引用的变量。
在函数式编程中，闭包允许我们创建可以记住并访问其自己的词法环境（即使在该函数在原始词法环境之外执行）的函数。闭包在创建回调函数、实现装饰器等方面非常有用。
```



python中的函数式编程一个必要条件就是在 Python 中，整数、字符串和字典都是一等对象——没什么特别的。



### 二、定义



函数式编程，`函数式编程或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。`这是维基百科中的定义。
看起来是不是还是一头雾水。其实函数式编程只是一个思想，你需要把实现的过程封装成一个一个的函数。与面向对象编程（OOP）相比，OOP强调对象和类的概念，以及通过对象之间的交互和消息传递来实现功能。主要区别在于**数据可变性、状态管理和关注点分离**等方面。这么使用有什么好处呢？

我觉得最直接的好处就是处理逻辑更加清楚，但是带来的问题就是代码量会变得更多。
其实我觉得深层还有个不容易被发现的好处，避免类的滥用
举个例子：
如果你的代码只是读一串字符串进行通用的解析，那么写成一或多个函数是非常正确的； 如果你的代码需要区分不同类型的字符串，例如 HTML、YAML、JSON 等，
那么针对不同类型的字符串，定义一个对应类型的 parser 类，将解析的实现隐藏在这些类的内部，并在它们的基类中复用相同的逻辑，是通常的做法。

还有个好处，就是它的作用是透明的，一个输入就会得到一个输出，不存在一个输入对应多个输出，这个对于数据处理是非常有用的。这也是当时我的领导刻意要求我
使用函数式编程处理数据分析的原因。


#### 2.1、柯里化
提到函数式编程一定会出现一个名词就是**柯里化**
什么是柯里化呢，我借鉴《函数式编程指北》的说明。柯里化就是只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。我的理解就是

Python中，柯里化可以通过定义一个返回函数的函数来实现。柯里化是将一个多参数的函数转换成一系列使用一个参数的函数的技术。

在我们python中是不是也很常见，比如`partial`不就是这么实现的吗。再比如`sort`方法思路也是如此。

#### 2.2、代码组合

函数式编程中的代码组合是指将多个函数组合在一起以实现更复杂的功能。在函数式编程中，常见的代码组合技术包括函数组合、函数柯里化和高阶函数。

- **函数组合（Function Composition）**：函数组合是将多个函数按顺序组合在一起形成一个新的函数，其中每个函数的输出作为下一个函数的输入。

- **函数柯里化（Currying）**：函数柯里化是将接受多个参数的函数转换为一系列接受单一参数的函数的过程。通过柯里化，我们可以部分应用函数并将其用作参数传递给其他函数。
- **高阶函数（Higher-order Functions）**高阶函数是接受一个或多个函数作为参数，并返回一个新函数的函数。高阶函数常用于抽象通用的操作模式，例如映射、过滤和减少等。在函数式编程中，高阶函数被广泛使用。



### 三、函数一等公民



在Python中，函数式编程是一等公民，这意味着函数在Python中可以像其他数据类型一样被**传递、赋值、作为参数传递给其他函数以及作为函数的返回值返回**。

下面是一些示例说明：

1. **函数可以被赋值给变量**：

```python
pythonCopy codedef greet(name):
    return f"Hello, {name}!"

# 将函数赋值给变量
say_hello = greet

# 调用赋值后的变量
print(say_hello("Alice"))  # 输出：Hello, Alice!
```

1. **函数可以作为其他函数的参数传递**：

```python
pythonCopy codedef apply_operation(func, x, y):
    return func(x, y)

def add(x, y):
    return x + y

# 将函数作为参数传递给另一个函数
result = apply_operation(add, 3, 5)
print(result)  # 输出：8
```

1. **函数可以作为另一个函数的返回值返回**：

```python
pythonCopy codedef create_multiplier(factor):
    def multiplier(x):
        return x * factor
    return multiplier

# 返回一个新的函数
double = create_multiplier(2)

# 调用返回的函数
print(double(5))  # 输出：10
```



### 四、纯函数



纯函数是指具有以下两个特性的函数：

1. **相同的输入始终产生相同的输出**：对于相同的输入参数，纯函数总是返回相同的结果，不受外部环境的影响。这意味着纯函数不会依赖于外部状态或全局状态。
2. **没有副作用**：纯函数不会修改除了返回值以外的任何东西，包括输入参数、全局变量、文件等。它只是根据输入参数计算返回值。

在Python中，虽然函数式编程并不是Python的主要编程范式，但是你可以编写纯函数。下面是一个示例：

```python
pythonCopy codedef add(x, y):
    return x + y

result = add(3, 5)
print(result)  # 输出：8
```

这个 `add` 函数就是一个纯函数，它具有相同的输入产生相同的输出的特性，而且没有副作用。

另一个例子是 Python 中的 `sorted` 函数。`sorted` 函数接受一个可迭代对象作为输入，并返回一个新的已排序列表，而不会修改原始列表，因此它也是一个纯函数。

```python
pythonCopy codenumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
sorted_numbers = sorted(numbers)
print(sorted_numbers)  # 输出：[1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
print(numbers)  # 输出：[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
```

#### 4.1、不纯的副作用

副作用是指函数除**了返回值以外对其他外部状态的修改或操作**。在函数式编程中，副作用是被视为不纯的行为，因为它会影响到函数的行为，使其不再具备确定性，即相同的输入可能产生不同的输出。

以下是一些常见的副作用示例：

- 修改全局变量：

```python
pythonCopy codecount = 0

def increment():
    global count
    count += 1
```

- 修改可变对象：

```python
pythonCopy codemy_list = []

def add_to_list(item):
    my_list.append(item)
```

- 文件操作：

```python
pythonCopy codedef write_to_file(data):
    with open('output.txt', 'w') as f:
        f.write(data)
```

在函数式编程中，尽量避免副作用是很重要的。因为副作用会增加程序的复杂性，使代码难以理解和测试，并且可能引发意外的行为。

要避免副作用，可以采用以下方法：

1. **使用不可变数据结构**：不可变数据结构不会被修改，可以确保函数不会对其产生副作用。
2. **使用纯函数**：编写不依赖于外部状态的函数，确保函数的输出只取决于输入参数。
3. **将副作用隔离**：如果无法完全避免副作用，可以将其隔离在特定的函数或模块中，使其影响范围最小化。



#### 4.2、数据的纯

在函数式编程中，数据的纯指的是数据是不可变的。不可变的数据意味着数据一旦创建就不会被修改，任何对数据的操作都会返回一个新的数据对象，而不会改变原始数据对象。这样做的好处是可以避免数据的意外修改，提高代码的可维护性和可靠性。

可以通过使用不可变数据类型来实现函数式编程中数据的纯。Python提供了一些不可变数据类型，例如元组（tuple）和不可变集合（frozenset）。还比如整数，浮点数，字符串，复数。



### 五、python的函数式编程



#### 5.1、内置函数

- **map()**函数将一个函数应用于一个或多个可迭代对象的所有项，并返回一个迭代器，该迭代器包含应用函数后的结果。
- **filter()**函数用于过滤可迭代对象中的项，返回一个新的迭代器，其中只包含使给定函数返回True的项。
- **reduce()**函数将一个二元函数（即接受两个参数的函数）连续应用到可迭代对象的项上，从而将序列“缩减”为单个值。这些函数在处理集合数据时非常有用，可以简化常见的数据处理任务。

这些函数也可以叫做高阶函数。高阶函数是**接受一个或多个函数作为参数，或者返回一个函数的函数。**



#### 5.2、pandas 中的函数式编程

其实pandas才是我真正打开函数式编程的大门，我就是通过了解pandas才让我对于函数式编程有了更深的了解。接下来我来分享下我的理解。


Pandas 是一个用于数据分析和处理的流行 Python 库，它提供了丰富的功能和方法来操作数据。虽然 Pandas 不是一种纯粹的函数式编程库，但它在设计中借鉴了函数式编程的一些理念，并提供了一些函数式编程风格的方法。

下面是一些在 Pandas 中使用到的函数式编程的方法和技术：

1. **函数式操作**：Pandas 提供了一系列函数式操作，例如 `map`、`apply`、`applymap` 等，这些操作允许你对数据进行函数式的转换和处理。

   - `map`：对 Series 中的每个元素应用函数。

   ```python
   pythonCopy codeimport pandas as pd
   
   data = pd.Series([1, 2, 3, 4, 5])
   squared = data.map(lambda x: x ** 2)
   print(squared)
   ```

   - `apply`：对 DataFrame 的行或列应用函数。

   ```python
   pythonCopy codedata = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
   summed_rows = data.apply(sum, axis=1)
   print(summed_rows)
   ```

   

   

2. **函数式组合**：Pandas 中的一些方法支持函数式组合，例如 `pipe` 方法，它允许你按照一定顺序应用一系列函数。

   ```python
   pythonCopy codedef add_and_multiply(df):
       return df.add(1).multiply(2)
   
   result = data.pipe(add_and_multiply)
   print(result)
   ```