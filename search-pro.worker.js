const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":1442,\"nextId\":1442,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-8daa1a0e\",\"2\":\"v-43415232\",\"3\":\"v-43415232@0\",\"4\":\"v-43415232@1\",\"5\":\"v-2ec6ab6c\",\"6\":\"v-2ec6ab6c@0\",\"7\":\"v-2ec6ab6c@1\",\"8\":\"v-1bd7a45e\",\"9\":\"v-1bd7a45e@0\",\"10\":\"v-1bd7a45e@1\",\"11\":\"v-ae7bdada\",\"12\":\"v-ae7bdada@0\",\"13\":\"v-ae7bdada@1\",\"14\":\"v-b71d0cc0\",\"15\":\"v-b71d0cc0@0\",\"16\":\"v-b71d0cc0@1\",\"17\":\"v-766e6a0c\",\"18\":\"v-766e6a0c#一、什么是持续交付\",\"19\":\"v-766e6a0c#二、探索环和验证环\",\"20\":\"v-766e6a0c#探索环\",\"21\":\"v-766e6a0c#验证环\",\"22\":\"v-766e6a0c#三、关于验证环四个工作原则的思考\",\"23\":\"v-766e6a0c#_1、质量内建\",\"24\":\"v-766e6a0c#_2、消除等待\",\"25\":\"v-766e6a0c#_3、重复事务自动化\",\"26\":\"v-766e6a0c#_4、监测一切\",\"27\":\"v-766e6a0c@0\",\"28\":\"v-766e6a0c@1\",\"29\":\"v-21b61c0a\",\"30\":\"v-21b61c0a#一、持续交付不仅仅是工程师的事\",\"31\":\"v-21b61c0a#二、打破-孤岛-构建全员参与的交付生态\",\"32\":\"v-21b61c0a#三、组织文化的三大支柱-信任、透明与共享目标\",\"33\":\"v-21b61c0a#四、文化变革的挑战与实践路径\",\"34\":\"v-21b61c0a#五、我的观点-持续交付是组织进化的-照妖镜\",\"35\":\"v-21b61c0a@0\",\"36\":\"v-21b61c0a@1\",\"37\":\"v-3c147f36\",\"38\":\"v-3c147f36#一、流水线部署-持续交付的-技术骨架\",\"39\":\"v-3c147f36#_1-流水线的-三重价值\",\"40\":\"v-3c147f36#_2-流水线的-分层设计\",\"41\":\"v-3c147f36#二、流水线部署的挑战与实践启示\",\"42\":\"v-3c147f36#_1-自动化陷阱-工具-流程\",\"43\":\"v-3c147f36#_2-左移与右移-流水线中的全生命周期管理\",\"44\":\"v-3c147f36#_3-环境即代码-基础设施的自动化\",\"45\":\"v-3c147f36#_4-安全与合规的融入\",\"46\":\"v-3c147f36#三、我的观点-流水线部署是文化变革的-试金石\",\"47\":\"v-3c147f36@0\",\"48\":\"v-3c147f36@1\",\"49\":\"v-077f7be6\",\"50\":\"v-077f7be6#一、持续集成的核心-频繁集成-快速反馈\",\"51\":\"v-077f7be6#_1-频繁集成的意义\",\"52\":\"v-077f7be6#_2-自动化构建与测试-不可替代的-守门人\",\"53\":\"v-077f7be6#二、持续集成的挑战与实践启示\",\"54\":\"v-077f7be6#_1-自动化陷阱-工具-流程\",\"55\":\"v-077f7be6#_2-主干恐惧症-对频繁集成的抵触\",\"56\":\"v-077f7be6#_3-测试的深度与广度\",\"57\":\"v-077f7be6#_4-环境一致性-从开发到生产的无缝衔接\",\"58\":\"v-077f7be6#三、我的观点-持续集成是团队协作的-照妖镜\",\"59\":\"v-077f7be6@0\",\"60\":\"v-077f7be6@1\",\"61\":\"v-6c729868\",\"62\":\"v-6c729868#一、k8s的存储\",\"63\":\"v-6c729868#_1、必要条件安装nfs-utils\",\"64\":\"v-6c729868#_2、原生方式挂载\",\"65\":\"v-6c729868#二、pv和pvc\",\"66\":\"v-6c729868#_1、定义\",\"67\":\"v-6c729868#_2、步骤\",\"68\":\"v-6c729868#三、configmap\",\"69\":\"v-6c729868#定义\",\"70\":\"v-6c729868#创建configmap的方式\",\"71\":\"v-6c729868#配置configmap的四种方式\",\"72\":\"v-6c729868#使用configmap步骤\",\"73\":\"v-6c729868#示例\",\"74\":\"v-6c729868#挂载的-configmap-会被自动更新\",\"75\":\"v-6c729868#四、secret\",\"76\":\"v-6c729868#定义-1\",\"77\":\"v-6c729868#使用方式\",\"78\":\"v-6c729868#secret基本操作\",\"79\":\"v-6c729868#命令操作secret\",\"80\":\"v-6c729868#使用配置文件操作secret\",\"81\":\"v-6c729868#pod中使用secret\",\"82\":\"v-6c729868@0\",\"83\":\"v-6c729868@1\",\"84\":\"v-437d157e\",\"85\":\"v-437d157e#一、service\",\"86\":\"v-437d157e#定义\",\"87\":\"v-437d157e#service重要字段\",\"88\":\"v-437d157e#service的创建\",\"89\":\"v-437d157e#没有选择符的service\",\"90\":\"v-437d157e#多端口的service\",\"91\":\"v-437d157e#类型服务\",\"92\":\"v-437d157e#无头服务\",\"93\":\"v-437d157e#发布服务\",\"94\":\"v-437d157e#二、ingress\",\"95\":\"v-437d157e#定义-1\",\"96\":\"v-437d157e#安装ingress\",\"97\":\"v-437d157e#ingress资源\",\"98\":\"v-437d157e#默认后端\",\"99\":\"v-437d157e#资源后端\",\"100\":\"v-437d157e#路径类型\",\"101\":\"v-437d157e#简单示例\",\"102\":\"v-437d157e#三、calico网络组件\",\"103\":\"v-437d157e@0\",\"104\":\"v-437d157e@1\",\"105\":\"v-d148698e\",\"106\":\"v-d148698e#一、安装配置\",\"107\":\"v-d148698e#二、基础安装配置\",\"108\":\"v-d148698e#三、安装脚本\",\"109\":\"v-d148698e@0\",\"110\":\"v-d148698e@1\",\"111\":\"v-97b67016\",\"112\":\"v-97b67016#二、k8s对象\",\"113\":\"v-97b67016#对象的spec和status\",\"114\":\"v-97b67016#三、node对象\",\"115\":\"v-97b67016#四、pod对象\",\"116\":\"v-97b67016#五、service-和-label\",\"117\":\"v-97b67016#六、deployment-部署\",\"118\":\"v-97b67016#七、namespaces-名称空间\",\"119\":\"v-97b67016#八、annotation注解\",\"120\":\"v-97b67016#九、标签和选择器\",\"121\":\"v-97b67016@0\",\"122\":\"v-97b67016@1\",\"123\":\"v-d29a1b70\",\"124\":\"v-d29a1b70#一、命令概述\",\"125\":\"v-d29a1b70#二、简单示例\",\"126\":\"v-d29a1b70@0\",\"127\":\"v-d29a1b70@1\",\"128\":\"v-653cdf23\",\"129\":\"v-653cdf23#一、概念\",\"130\":\"v-653cdf23#_1-1、容器\",\"131\":\"v-653cdf23#_1-2-、容器镜像\",\"132\":\"v-653cdf23#_1-3、容器运行时\",\"133\":\"v-653cdf23#二、容器中字段解释\",\"134\":\"v-653cdf23#三、环境变量\",\"135\":\"v-653cdf23#四、生命周期钩子\",\"136\":\"v-653cdf23#五、资源限制\",\"137\":\"v-653cdf23@0\",\"138\":\"v-653cdf23@1\",\"139\":\"v-d749d7a4\",\"140\":\"v-d749d7a4#一、pod概念\",\"141\":\"v-d749d7a4#二、pod特点\",\"142\":\"v-d749d7a4#三、容器的生命周期\",\"143\":\"v-d749d7a4#四、pod的重启策略\",\"144\":\"v-d749d7a4#五、静态pod\",\"145\":\"v-d749d7a4#六、prode探针机制-健康检查机制\",\"146\":\"v-d749d7a4#三种探针\",\"147\":\"v-d749d7a4#prode配置\",\"148\":\"v-d749d7a4#七、停止pod\",\"149\":\"v-d749d7a4@0\",\"150\":\"v-d749d7a4@1\",\"151\":\"v-5e36c40a\",\"152\":\"v-5e36c40a#一、定义\",\"153\":\"v-5e36c40a#二、deployment的特点\",\"154\":\"v-5e36c40a#三、deployment规约\",\"155\":\"v-5e36c40a#副本-replicas\",\"156\":\"v-5e36c40a#选择符-selector\",\"157\":\"v-5e36c40a#策略-strategy\",\"158\":\"v-5e36c40a#重新创建-deployment-recreate\",\"159\":\"v-5e36c40a#滚动更新-deployment-rollingupdate\",\"160\":\"v-5e36c40a#进度期限秒数-progressdeadlineseconds\",\"161\":\"v-5e36c40a#最短就绪时间-minreadyseconds\",\"162\":\"v-5e36c40a#修订历史限制-revisionhistorylimit\",\"163\":\"v-5e36c40a#paused-暂停的\",\"164\":\"v-5e36c40a#四、deployment-回滚解释\",\"165\":\"v-5e36c40a#五、deployment更新机制\",\"166\":\"v-5e36c40a#_1-1-比例缩放\",\"167\":\"v-5e36c40a#_1-2-hpa-动态扩缩容\",\"168\":\"v-5e36c40a#_1-3-蓝绿部署\",\"169\":\"v-5e36c40a#概念\",\"170\":\"v-5e36c40a#基础步骤\",\"171\":\"v-5e36c40a#_1-4-金丝雀部署\",\"172\":\"v-5e36c40a#滚动发布的缺点-同时存在两个版本都能接受流量\",\"173\":\"v-5e36c40a@0\",\"174\":\"v-5e36c40a@1\",\"175\":\"v-4d82645a\",\"176\":\"v-4d82645a#一、什么是控制器\",\"177\":\"v-4d82645a#二、replicationcontroller-和-replicaset\",\"178\":\"v-4d82645a#相同点\",\"179\":\"v-4d82645a#不同点\",\"180\":\"v-4d82645a#三、典型的应用场景\",\"181\":\"v-4d82645a#四、例子\",\"182\":\"v-4d82645a@0\",\"183\":\"v-4d82645a@1\",\"184\":\"v-1be2a463\",\"185\":\"v-1be2a463#一、daemonset\",\"186\":\"v-1be2a463#_1、定义\",\"187\":\"v-1be2a463#_2、使用场景\",\"188\":\"v-1be2a463#二、statefulset\",\"189\":\"v-1be2a463#_1、定义-1\",\"190\":\"v-1be2a463#_2、特点\",\"191\":\"v-1be2a463#_3、使用场景\",\"192\":\"v-1be2a463@0\",\"193\":\"v-1be2a463@1\",\"194\":\"v-23f2098a\",\"195\":\"v-23f2098a#一、job\",\"196\":\"v-23f2098a#_1、定义\",\"197\":\"v-23f2098a#_2、特点\",\"198\":\"v-23f2098a#参数说明\",\"199\":\"v-23f2098a#二、cronjob\",\"200\":\"v-23f2098a#_1、定义-1\",\"201\":\"v-23f2098a#_2、特点-1\",\"202\":\"v-23f2098a#_3、参数\",\"203\":\"v-23f2098a#_4、实例\",\"204\":\"v-23f2098a@0\",\"205\":\"v-23f2098a@1\",\"206\":\"v-6acb8b1a\",\"207\":\"v-6acb8b1a@0\",\"208\":\"v-6acb8b1a@1\",\"209\":\"v-8fa0b3f8\",\"210\":\"v-8fa0b3f8#一、面试题\",\"211\":\"v-8fa0b3f8#二、缓存的定期淘汰策略\",\"212\":\"v-8fa0b3f8#三、缓存淘汰策略\",\"213\":\"v-8fa0b3f8#四、使用建议\",\"214\":\"v-8fa0b3f8@0\",\"215\":\"v-8fa0b3f8@1\",\"216\":\"v-430f738a\",\"217\":\"v-430f738a#一、定义\",\"218\":\"v-430f738a#二、优点\",\"219\":\"v-430f738a#三、zlentry实体结构解析\",\"220\":\"v-430f738a#四、hash的是实现方式之一\",\"221\":\"v-430f738a@0\",\"222\":\"v-430f738a@1\",\"223\":\"v-139ea882\",\"224\":\"v-139ea882#一、quicklist定义\",\"225\":\"v-139ea882#二、sds定义\",\"226\":\"v-139ea882#三、sds-代码的定义\",\"227\":\"v-139ea882#四、sds-与-c-字符串的区别\",\"228\":\"v-139ea882@0\",\"229\":\"v-139ea882@1\",\"230\":\"v-7655754e\",\"231\":\"v-7655754e#一、定义\",\"232\":\"v-7655754e#二、跳表的实现\",\"233\":\"v-7655754e#三、复杂度\",\"234\":\"v-7655754e#四、优缺点\",\"235\":\"v-7655754e@0\",\"236\":\"v-7655754e@1\",\"237\":\"v-4e7220ea\",\"238\":\"v-4e7220ea#一、定义\",\"239\":\"v-4e7220ea#二、作用\",\"240\":\"v-4e7220ea#三、特点\",\"241\":\"v-4e7220ea#四、使用场景\",\"242\":\"v-4e7220ea#五、布隆过滤器误判率\",\"243\":\"v-4e7220ea#特性\",\"244\":\"v-4e7220ea#六、优缺点\",\"245\":\"v-4e7220ea#七、使用建议\",\"246\":\"v-4e7220ea@0\",\"247\":\"v-4e7220ea@1\",\"248\":\"v-6a24e247\",\"249\":\"v-6a24e247#一、定义\",\"250\":\"v-6a24e247#二、缓存的设计\",\"251\":\"v-6a24e247#三、解决缓存击穿的问题\",\"252\":\"v-6a24e247#四、注意点\",\"253\":\"v-6a24e247@0\",\"254\":\"v-6a24e247@1\",\"255\":\"v-15efbc05\",\"256\":\"v-15efbc05#一、rdb机制\",\"257\":\"v-15efbc05#二、rdb执行流程\",\"258\":\"v-15efbc05#三、rdb的优缺点\",\"259\":\"v-15efbc05#四、aof-append-only-file-日志\",\"260\":\"v-15efbc05#_2-1-开启方式\",\"261\":\"v-15efbc05#_2-2-重写-rewrite-机制\",\"262\":\"v-15efbc05#_2-3-触发机制\",\"263\":\"v-15efbc05#_2-4-aof的优缺点\",\"264\":\"v-15efbc05#三、redis-4-0-混合持久化\",\"265\":\"v-15efbc05@0\",\"266\":\"v-15efbc05@1\",\"267\":\"v-04f5a9e1\",\"268\":\"v-04f5a9e1#_1、定义\",\"269\":\"v-04f5a9e1#_2、名称解释\",\"270\":\"v-04f5a9e1#_3、reactor\",\"271\":\"v-04f5a9e1@0\",\"272\":\"v-04f5a9e1@1\",\"273\":\"v-001b2e64\",\"274\":\"v-001b2e64#一、基本思路\",\"275\":\"v-001b2e64#二、canal简介\",\"276\":\"v-001b2e64#_1、定义\",\"277\":\"v-001b2e64#_2、作用\",\"278\":\"v-001b2e64#_3、工作原理\",\"279\":\"v-001b2e64#_4、基本操作\",\"280\":\"v-001b2e64#二-缓存数据的双写一致性探讨\",\"281\":\"v-001b2e64#_1、目的\",\"282\":\"v-001b2e64#_2、方案一-、先更新数据库-再更新缓存\",\"283\":\"v-001b2e64#_3、方案二、先删除缓存-再更新数据库\",\"284\":\"v-001b2e64#_4、方案三、-先更新mysql数据-最后删除缓存\",\"285\":\"v-001b2e64#_5、解决方案\",\"286\":\"v-001b2e64#_6、问题\",\"287\":\"v-001b2e64#三、总结\",\"288\":\"v-001b2e64#四、延迟双删策略\",\"289\":\"v-001b2e64#五、两种方式的对比\",\"290\":\"v-001b2e64@0\",\"291\":\"v-001b2e64@1\",\"292\":\"v-39f1fb8a\",\"293\":\"v-39f1fb8a#一、需求分析\",\"294\":\"v-39f1fb8a#二、问题点\",\"295\":\"v-39f1fb8a#三、架构设计\",\"296\":\"v-39f1fb8a@0\",\"297\":\"v-39f1fb8a@1\",\"298\":\"v-8713ea74\",\"299\":\"v-8713ea74#一、什么是分库分表\",\"300\":\"v-8713ea74#二、垂直分库\",\"301\":\"v-8713ea74#三、垂直分表\",\"302\":\"v-8713ea74#四、水平分库\",\"303\":\"v-8713ea74#五、水平分表\",\"304\":\"v-8713ea74#六、分库分表带来的问题\",\"305\":\"v-8713ea74@0\",\"306\":\"v-8713ea74@1\",\"307\":\"v-6772aa08\",\"308\":\"v-6772aa08#一、区别\",\"309\":\"v-6772aa08#二、myisam-适用场景\",\"310\":\"v-6772aa08#三、innodb-适用场景\",\"311\":\"v-6772aa08#四、两种引擎该如何选择\",\"312\":\"v-6772aa08#五、innodb的三大特征\",\"313\":\"v-6772aa08#_1、自适应索引\",\"314\":\"v-6772aa08#定义\",\"315\":\"v-6772aa08#优点\",\"316\":\"v-6772aa08#缺点\",\"317\":\"v-6772aa08#_2、buffer-pool\",\"318\":\"v-6772aa08#定义-1\",\"319\":\"v-6772aa08#如何判断一个页是否在bufferpool中缓存\",\"320\":\"v-6772aa08#_3、缓存双写\",\"321\":\"v-6772aa08#六、innodb存储引擎支持四种行格式\",\"322\":\"v-6772aa08#七、compact-行记录格式\",\"323\":\"v-6772aa08#记录额外信息部分\",\"324\":\"v-6772aa08#记录头信息\",\"325\":\"v-6772aa08#记录真实数据部分\",\"326\":\"v-6772aa08#什么是行溢出\",\"327\":\"v-6772aa08#compact中的行溢出机制\",\"328\":\"v-6772aa08@0\",\"329\":\"v-6772aa08@1\",\"330\":\"v-41bd2369\",\"331\":\"v-41bd2369#一、网络连接层\",\"332\":\"v-41bd2369#二、服务层-mysql-server\",\"333\":\"v-41bd2369#三、存储引擎层-pluggable-storage-engines\",\"334\":\"v-41bd2369#四、系统文件层-file-system\",\"335\":\"v-41bd2369@0\",\"336\":\"v-41bd2369@1\",\"337\":\"v-e4e83662\",\"338\":\"v-e4e83662#一、b-tree介绍\",\"339\":\"v-e4e83662#什么是b-tree的阶\",\"340\":\"v-e4e83662#b-tree结构存储索引的特点\",\"341\":\"v-e4e83662#b-tree的查找操作\",\"342\":\"v-e4e83662#b-tree总结\",\"343\":\"v-e4e83662#二、b-tree\",\"344\":\"v-e4e83662#b-tree的特征\",\"345\":\"v-e4e83662#b-tree的优势\",\"346\":\"v-e4e83662@0\",\"347\":\"v-e4e83662@1\",\"348\":\"v-3bf03162\",\"349\":\"v-3bf03162#一、explain字段的解释\",\"350\":\"v-3bf03162#二、type字段\",\"351\":\"v-3bf03162#三、extra主要指标\",\"352\":\"v-3bf03162@0\",\"353\":\"v-3bf03162@1\",\"354\":\"v-d9f17a68\",\"355\":\"v-d9f17a68#一、一条sql语句的执行过程详解\",\"356\":\"v-d9f17a68#整体流程\",\"357\":\"v-d9f17a68#mysql驱动\",\"358\":\"v-d9f17a68#数据库连接池\",\"359\":\"v-d9f17a68#sql-接口\",\"360\":\"v-d9f17a68#查询解析器\",\"361\":\"v-d9f17a68#mysql-查询优化器\",\"362\":\"v-d9f17a68#存储引擎\",\"363\":\"v-d9f17a68#执行器\",\"364\":\"v-d9f17a68@0\",\"365\":\"v-d9f17a68@1\",\"366\":\"v-04842045\",\"367\":\"v-04842045#一、mvcc\",\"368\":\"v-04842045#概念\",\"369\":\"v-04842045#行记录的三个隐藏字段\",\"370\":\"v-04842045#undo-log多版本链\",\"371\":\"v-04842045#二、readview\",\"372\":\"v-04842045#何时生成readview快照\",\"373\":\"v-04842045#快照读-snapshot-read-与当前读-current-read\",\"374\":\"v-04842045#三、总结\",\"375\":\"v-04842045@0\",\"376\":\"v-04842045@1\",\"377\":\"v-331fdcd3\",\"378\":\"v-331fdcd3#一、undo-log\",\"379\":\"v-331fdcd3#定义\",\"380\":\"v-331fdcd3#作用\",\"381\":\"v-331fdcd3#二、redo-log\",\"382\":\"v-331fdcd3#定义-1\",\"383\":\"v-331fdcd3#作用-类似于redis中的aof\",\"384\":\"v-331fdcd3#三、bin-log\",\"385\":\"v-331fdcd3#定义-2\",\"386\":\"v-331fdcd3#作用-1\",\"387\":\"v-331fdcd3#四、redo-log-和-undo-log的持久化策略\",\"388\":\"v-331fdcd3#redo-log持久化\",\"389\":\"v-331fdcd3#undo-log持久化\",\"390\":\"v-331fdcd3#五、bin-log与undo-log的区别\",\"391\":\"v-331fdcd3#六、mysql的binlog有几种日志格式\",\"392\":\"v-331fdcd3#日志有三种模式\",\"393\":\"v-331fdcd3#_1-row-row-based-replication-rbr\",\"394\":\"v-331fdcd3#_2-statment-statement-based-replication-sbr\",\"395\":\"v-331fdcd3#_3-mixed-mixed-based-replication-mbr\",\"396\":\"v-331fdcd3@0\",\"397\":\"v-331fdcd3@1\",\"398\":\"v-036394dd\",\"399\":\"v-036394dd#一、锁的分类\",\"400\":\"v-036394dd#_1、不同存储引擎支持不同的锁机制\",\"401\":\"v-036394dd#_2、按照数据操作的类型分\",\"402\":\"v-036394dd#_3、按照数据操作的粒度分\",\"403\":\"v-036394dd#_4、按照操作性能可分为乐观锁和悲观锁\",\"404\":\"v-036394dd#二、共享锁和排它锁\",\"405\":\"v-036394dd#三、行锁是如何实现\",\"406\":\"v-036394dd#四、死锁\",\"407\":\"v-036394dd#表级死锁\",\"408\":\"v-036394dd#行级锁死锁\",\"409\":\"v-036394dd@0\",\"410\":\"v-036394dd@1\",\"411\":\"v-46425985\",\"412\":\"v-46425985#一、索引的数据结构\",\"413\":\"v-46425985#myisamb-tree索引结构\",\"414\":\"v-46425985#innodb也使用b-tree作为索引结构\",\"415\":\"v-46425985#二、什么是覆盖索引\",\"416\":\"v-46425985#三、索引哪些情况下会失效情况\",\"417\":\"v-46425985#四、索引查询的机制\",\"418\":\"v-46425985#_4-1、聚簇索引的查询\",\"419\":\"v-46425985#_4-2、非聚簇索引\",\"420\":\"v-46425985#五、索引的一些特点\",\"421\":\"v-46425985#思考\",\"422\":\"v-46425985@0\",\"423\":\"v-46425985@1\",\"424\":\"v-19bf96c1\",\"425\":\"v-19bf96c1#一、mysql中事务的特性\",\"426\":\"v-19bf96c1@0\",\"427\":\"v-19bf96c1@1\",\"428\":\"v-78ce2134\",\"429\":\"v-78ce2134#一、mysql-5-7和8-0的区别\",\"430\":\"v-78ce2134#_1、mysql8-0的新特点\",\"431\":\"v-78ce2134#_2、缓存变化\",\"432\":\"v-78ce2134#二、mysql-和-pg-的区别\",\"433\":\"v-78ce2134#_2-1、pg-优势\",\"434\":\"v-78ce2134#_2-2、mysql-优势\",\"435\":\"v-78ce2134@0\",\"436\":\"v-78ce2134@1\",\"437\":\"v-47d711ee\",\"438\":\"v-47d711ee#一、答题思路\",\"439\":\"v-47d711ee#二、聚簇索引\",\"440\":\"v-47d711ee#三、非聚簇索引\",\"441\":\"v-47d711ee#四、聚簇索引的优点\",\"442\":\"v-47d711ee#五、聚簇索引的缺点\",\"443\":\"v-47d711ee#六、使用场景\",\"444\":\"v-47d711ee@0\",\"445\":\"v-47d711ee@1\",\"446\":\"v-00ba8cda\",\"447\":\"v-00ba8cda#普通索引\",\"448\":\"v-00ba8cda#唯一索引\",\"449\":\"v-00ba8cda#主键索引\",\"450\":\"v-00ba8cda#复合索引\",\"451\":\"v-00ba8cda#复合索引使用注意事项\",\"452\":\"v-00ba8cda@0\",\"453\":\"v-00ba8cda@1\",\"454\":\"v-e7c56372\",\"455\":\"v-e7c56372#概念\",\"456\":\"v-e7c56372#总结\",\"457\":\"v-e7c56372@0\",\"458\":\"v-e7c56372@1\",\"459\":\"v-6a8be52f\",\"460\":\"v-6a8be52f#一、什么是自适应-hash-索引\",\"461\":\"v-6a8be52f#二、hash-索引的优缺点\",\"462\":\"v-6a8be52f#优点\",\"463\":\"v-6a8be52f#缺点\",\"464\":\"v-6a8be52f@0\",\"465\":\"v-6a8be52f@1\",\"466\":\"v-fa5d7072\",\"467\":\"v-fa5d7072#一、什么是写失效\",\"468\":\"v-fa5d7072#_1、原因\",\"469\":\"v-fa5d7072#双写缓冲区-doublewrite-buffer\",\"470\":\"v-fa5d7072#什么是行溢出\",\"471\":\"v-fa5d7072@0\",\"472\":\"v-fa5d7072@1\",\"473\":\"v-1256aeb0\",\"474\":\"v-1256aeb0#可重复读-repeatable-read-定义\",\"475\":\"v-1256aeb0#mvcc\",\"476\":\"v-1256aeb0#undo-log-多版本链\",\"477\":\"v-1256aeb0#readview\",\"478\":\"v-1256aeb0#read-view-判断记录某个版本是否可见的规则如下\",\"479\":\"v-1256aeb0@0\",\"480\":\"v-1256aeb0@1\",\"481\":\"v-4a32f590\",\"482\":\"v-4a32f590#repeatable-read-解决了幻读问题吗\",\"483\":\"v-4a32f590@0\",\"484\":\"v-4a32f590@1\",\"485\":\"v-7daaf7ee\",\"486\":\"v-7daaf7ee#执行效果上\",\"487\":\"v-7daaf7ee#执行效率上\",\"488\":\"v-7daaf7ee#注意\",\"489\":\"v-7daaf7ee@0\",\"490\":\"v-7daaf7ee@1\",\"491\":\"v-2f15254b\",\"492\":\"v-2f15254b#一、主从复制的用途\",\"493\":\"v-2f15254b#二、主从部署必要条件\",\"494\":\"v-2f15254b#三、主从复制的原理\",\"495\":\"v-2f15254b@0\",\"496\":\"v-2f15254b@1\",\"497\":\"v-072c9de3\",\"498\":\"v-072c9de3#一、分页的实现\",\"499\":\"v-072c9de3#二、分页优化策略\",\"500\":\"v-072c9de3@0\",\"501\":\"v-072c9de3@1\",\"502\":\"v-55453a4a\",\"503\":\"v-55453a4a#一、慢查询开关\",\"504\":\"v-55453a4a#二、慢查询日志\",\"505\":\"v-55453a4a#三、慢查询-sql-优化思路\",\"506\":\"v-55453a4a#_1-sql-性能下降的原因\",\"507\":\"v-55453a4a#_2-慢查询优化思路\",\"508\":\"v-55453a4a@0\",\"509\":\"v-55453a4a@1\",\"510\":\"v-1b56d924\",\"511\":\"v-1b56d924#一、定义\",\"512\":\"v-1b56d924#二、什么是驱动表\",\"513\":\"v-1b56d924#三种-join-算法\",\"514\":\"v-1b56d924#四、join-优化总结\",\"515\":\"v-1b56d924@0\",\"516\":\"v-1b56d924@1\",\"517\":\"v-5381e496\",\"518\":\"v-5381e496#一、总结-从-explain-执行计划入手\",\"519\":\"v-5381e496#二、具体操作\",\"520\":\"v-5381e496#_1、小的结果集驱动大的结果集\",\"521\":\"v-5381e496#_2、尽可能在索引中完成排序\",\"522\":\"v-5381e496#_3、只获取自己需要的列\",\"523\":\"v-5381e496#_4、使用最有效的过滤条件\",\"524\":\"v-5381e496#_5、尽可能避免复杂的-join-和子查询\",\"525\":\"v-5381e496#_6、合理设计并利用索引\",\"526\":\"v-5381e496@0\",\"527\":\"v-5381e496@1\",\"528\":\"v-7b7582ae\",\"529\":\"v-7b7582ae#一、变量名\",\"530\":\"v-7b7582ae#二、导入\",\"531\":\"v-7b7582ae#三、注释\",\"532\":\"v-7b7582ae#四、异常处理\",\"533\":\"v-7b7582ae#五、函数设计\",\"534\":\"v-7b7582ae#六、类的设计\",\"535\":\"v-7b7582ae#_7、模块设计\",\"536\":\"v-7b7582ae#_8、其他\",\"537\":\"v-7b7582ae@0\",\"538\":\"v-7b7582ae@1\",\"539\":\"v-f8a1b55c\",\"540\":\"v-f8a1b55c#引言-代码即建筑-风格即设计\",\"541\":\"v-f8a1b55c#第一步-打地基——模块化设计是代码的-地基\",\"542\":\"v-f8a1b55c#为什么需要模块化\",\"543\":\"v-f8a1b55c#模块化设计的黄金法则\",\"544\":\"v-f8a1b55c#第二步-建房子——类与对象的-房间设计\",\"545\":\"v-f8a1b55c#类的两种角色-模型与逻辑\",\"546\":\"v-f8a1b55c#设计类的-黄金三角\",\"547\":\"v-f8a1b55c#第三步-装修——函数与注释的-细节打磨\",\"548\":\"v-f8a1b55c#_1-函数-代码的-家具\",\"549\":\"v-f8a1b55c#_2-注释-代码的-地图\",\"550\":\"v-f8a1b55c#_3-异常处理与日志-代码的-消防与监控\",\"551\":\"v-f8a1b55c#第四步-验房——测试驱动开发-tdd\",\"552\":\"v-f8a1b55c#测试的-质量验收\",\"553\":\"v-f8a1b55c#测试的-黄金标准\",\"554\":\"v-f8a1b55c#第五步-入住——devops自动化部署\",\"555\":\"v-f8a1b55c#从本地到生产-代码的-搬家指南\",\"556\":\"v-f8a1b55c#部署的-关键原则\",\"557\":\"v-f8a1b55c#结语-代码即建筑-风格即人品\",\"558\":\"v-f8a1b55c@0\",\"559\":\"v-f8a1b55c@1\",\"560\":\"v-46b2a8c0\",\"561\":\"v-46b2a8c0#一-什么是状态机\",\"562\":\"v-46b2a8c0#二-安装与快速入门\",\"563\":\"v-46b2a8c0#三-基础示例-交通灯状态机\",\"564\":\"v-46b2a8c0#四-核心功能详解\",\"565\":\"v-46b2a8c0#_4-1-状态转换的条件判断\",\"566\":\"v-46b2a8c0#_4-2-回调函数\",\"567\":\"v-46b2a8c0#五-可视化状态机\",\"568\":\"v-46b2a8c0#六-进阶用法\",\"569\":\"v-46b2a8c0#_6-1-分层状态机\",\"570\":\"v-46b2a8c0#_6-2-并发状态机\",\"571\":\"v-46b2a8c0#七-常见问题\",\"572\":\"v-46b2a8c0#q1-如何处理无效的事件\",\"573\":\"v-46b2a8c0#q2-如何自定义状态转换逻辑\",\"574\":\"v-46b2a8c0#八-总结\",\"575\":\"v-46b2a8c0@0\",\"576\":\"v-46b2a8c0@1\",\"577\":\"v-7d4be784\",\"578\":\"v-7d4be784#一、连接池特点\",\"579\":\"v-7d4be784#二、不同类型的连接池\",\"580\":\"v-7d4be784#三、可用连接被用尽的可能原因\",\"581\":\"v-7d4be784#连接池的上限小于程序中需要并发使用连接的请求的数目\",\"582\":\"v-7d4be784#连接没有被释放\",\"583\":\"v-7d4be784#程序试图执行一个运行时间很长的数据库事务-transaction\",\"584\":\"v-7d4be784@0\",\"585\":\"v-7d4be784@1\",\"586\":\"v-5d2eb745\",\"587\":\"v-5d2eb745#引言\",\"588\":\"v-5d2eb745#一、monkey-patch-all-是什么\",\"589\":\"v-5d2eb745#二、为什么要添加-monkey-patch-all\",\"590\":\"v-5d2eb745#_1-解决阻塞问题\",\"591\":\"v-5d2eb745#_2-兼容性与透明性\",\"592\":\"v-5d2eb745#_3-提升性能\",\"593\":\"v-5d2eb745#三、如何使用-monkey-patch-all\",\"594\":\"v-5d2eb745#_1-在程序入口尽早调用\",\"595\":\"v-5d2eb745#_2-选择性补丁-可选\",\"596\":\"v-5d2eb745#四、示例-对比补丁前后的效果\",\"597\":\"v-5d2eb745#场景-发送三个-http-请求\",\"598\":\"v-5d2eb745#补丁前后的区别\",\"599\":\"v-5d2eb745#五、注意事项\",\"600\":\"v-5d2eb745#六、总结\",\"601\":\"v-5d2eb745@0\",\"602\":\"v-5d2eb745@1\",\"603\":\"v-4a876332\",\"604\":\"v-4a876332#一、python中定时任务模块\",\"605\":\"v-4a876332#_1-celery\",\"606\":\"v-4a876332#_2-apscheduler-advanced-python-scheduler\",\"607\":\"v-4a876332#_3、celery-vs-apscheduler-对比表\",\"608\":\"v-4a876332#二、定时任务的实现原理\",\"609\":\"v-4a876332#_1-小顶堆算法\",\"610\":\"v-4a876332#_2-时间轮算法\",\"611\":\"v-4a876332#_3-分层时间轮\",\"612\":\"v-4a876332#_4-无限循环\",\"613\":\"v-4a876332#三、定时任务的类型\",\"614\":\"v-4a876332#四、定时任务设计的注意点\",\"615\":\"v-4a876332#_1-定时总开关——假期等时间点如何停止所有的定时任务\",\"616\":\"v-4a876332#_2-定时确认——有的定时任务是不是需要人工干预\",\"617\":\"v-4a876332#_3-结果通知——定时任务完成后的消息通知\",\"618\":\"v-4a876332#_4-可用时间-不可用时间——定时执行是否处于可用时间\",\"619\":\"v-4a876332#_5-日志记录——定时任务真的执行了吗\",\"620\":\"v-4a876332@0\",\"621\":\"v-4a876332@1\",\"622\":\"v-4af6799c\",\"623\":\"v-4af6799c#一、告警事故频发\",\"624\":\"v-4af6799c#二、告警设计关键点\",\"625\":\"v-4af6799c#_1-监控指标的选择\",\"626\":\"v-4af6799c#_2-告警触发条件与级别设定\",\"627\":\"v-4af6799c#_3-多样化的通知渠道\",\"628\":\"v-4af6799c#_4-数据分析与反馈循环\",\"629\":\"v-4af6799c#三、告警分类\",\"630\":\"v-4af6799c#_1、流程告警\",\"631\":\"v-4af6799c#_2、系统告警\",\"632\":\"v-4af6799c#_3、业务告警\",\"633\":\"v-4af6799c#四、告警展示\",\"634\":\"v-4af6799c#_1、-构建可视化仪表盘\",\"635\":\"v-4af6799c#_2、-实施智能告警\",\"636\":\"v-4af6799c#_3、设定明确的通知机制\",\"637\":\"v-4af6799c#_4、记录和回顾告警历史\",\"638\":\"v-4af6799c#五、告警通知\",\"639\":\"v-4af6799c#六、告警复盘\",\"640\":\"v-4af6799c#_1、告警复盘的关键点\",\"641\":\"v-4af6799c#_2、devops系统能够提供的支持\",\"642\":\"v-4af6799c@0\",\"643\":\"v-4af6799c@1\",\"644\":\"v-54a3a81e\",\"645\":\"v-54a3a81e#引言\",\"646\":\"v-54a3a81e#一、安装与配置\",\"647\":\"v-54a3a81e#_1-安装依赖\",\"648\":\"v-54a3a81e#_2-配置celery实例\",\"649\":\"v-54a3a81e#_3-启动celery-worker\",\"650\":\"v-54a3a81e#二、基本用法示例\",\"651\":\"v-54a3a81e#_1-定义任务\",\"652\":\"v-54a3a81e#_2-调用任务\",\"653\":\"v-54a3a81e#_3-获取任务结果\",\"654\":\"v-54a3a81e#三、任务队列配置\",\"655\":\"v-54a3a81e#四、常见问题与注意事项\",\"656\":\"v-54a3a81e#_1-任务未执行-检查以下几点\",\"657\":\"v-54a3a81e#_2-任务结果存储\",\"658\":\"v-54a3a81e#_3-任务幂等性与重试\",\"659\":\"v-54a3a81e#_4-性能优化\",\"660\":\"v-54a3a81e#_5-监控与日志\",\"661\":\"v-54a3a81e#五、最佳实践\",\"662\":\"v-54a3a81e#六、flask和celery结合\",\"663\":\"v-54a3a81e#八、celery中几种worker的区别\",\"664\":\"v-54a3a81e#_1-prefork-pool-默认\",\"665\":\"v-54a3a81e#_2-eventlet-pool\",\"666\":\"v-54a3a81e#_3-gevent-pool\",\"667\":\"v-54a3a81e#_4-solo-pool\",\"668\":\"v-54a3a81e#如何选择-worker-类型\",\"669\":\"v-54a3a81e#注意事项\",\"670\":\"v-54a3a81e#总结\",\"671\":\"v-54a3a81e@0\",\"672\":\"v-54a3a81e@1\",\"673\":\"v-7068e062\",\"674\":\"v-7068e062#一、什么是socket\",\"675\":\"v-7068e062#_1、socket-的关键特性\",\"676\":\"v-7068e062#_2、socket-的比喻理解\",\"677\":\"v-7068e062#二、flask中使用socket\",\"678\":\"v-7068e062#_1、安装flask-socket\",\"679\":\"v-7068e062#_2、创建falsk-namespace\",\"680\":\"v-7068e062#_2、运行socket-io\",\"681\":\"v-7068e062#三、前端使用socket\",\"682\":\"v-7068e062#四、注意事项\",\"683\":\"v-7068e062@0\",\"684\":\"v-7068e062@1\",\"685\":\"v-b47c63ac\",\"686\":\"v-b47c63ac#问题一、什么要认证\",\"687\":\"v-b47c63ac#问题二、为什么要token认证\",\"688\":\"v-b47c63ac#_1、http是一个无状态协议\",\"689\":\"v-b47c63ac#_2、cookie和session\",\"690\":\"v-b47c63ac#_3、token定义\",\"691\":\"v-b47c63ac#_4、token认证流程\",\"692\":\"v-b47c63ac#问题三、什么是jwt认证\",\"693\":\"v-b47c63ac#_1、jwt就是一个字符串-由三部分构成\",\"694\":\"v-b47c63ac#header\",\"695\":\"v-b47c63ac#_2、jwt的头部承载两个信息\",\"696\":\"v-b47c63ac#_3、payload\",\"697\":\"v-b47c63ac#_4、signature\",\"698\":\"v-b47c63ac#_5、jwt的特点\",\"699\":\"v-b47c63ac@0\",\"700\":\"v-b47c63ac@1\",\"701\":\"v-2308e293\",\"702\":\"v-2308e293#引言\",\"703\":\"v-2308e293#一、多进程的底层实现与原理\",\"704\":\"v-2308e293#_1-1-进程-vs-线程\",\"705\":\"v-2308e293#_1-2-python-多进程的实现机制\",\"706\":\"v-2308e293#_1-3-进程间通信-ipc\",\"707\":\"v-2308e293#二、多进程的实现方式与性能对比\",\"708\":\"v-2308e293#_2-1-multiprocessing-模块\",\"709\":\"v-2308e293#_2-2-concurrent-futures-processpoolexecutor\",\"710\":\"v-2308e293#_2-3-性能对比\",\"711\":\"v-2308e293#三、多进程的优缺点-深度分析\",\"712\":\"v-2308e293#_3-1-优点\",\"713\":\"v-2308e293#_3-2-缺点\",\"714\":\"v-2308e293#四、airflow-多进程架构解析\",\"715\":\"v-2308e293#五、多进程实战-常见问题与解决方案\",\"716\":\"v-2308e293#_5-1-进程间通信优化\",\"717\":\"v-2308e293#_5-2-进程安全与资源管理\",\"718\":\"v-2308e293#_5-3-跨平台兼容性\",\"719\":\"v-2308e293#六、多进程的典型应用场景与优化\",\"720\":\"v-2308e293#_6-1-科学计算加速\",\"721\":\"v-2308e293#_6-2-web服务器\",\"722\":\"v-2308e293#_6-3-分布式任务调度\",\"723\":\"v-2308e293#七、总结-多进程的适用场景与避坑指南\",\"724\":\"v-2308e293#适用场景\",\"725\":\"v-2308e293#避坑指南\",\"726\":\"v-2308e293@0\",\"727\":\"v-2308e293@1\",\"728\":\"v-656a917a\",\"729\":\"v-656a917a#一、debug功能\",\"730\":\"v-656a917a#二、迭代器和生成器\",\"731\":\"v-656a917a#_2-1、什么是迭代\",\"732\":\"v-656a917a#_2-2、迭代器的概念\",\"733\":\"v-656a917a#_2-3、生成器\",\"734\":\"v-656a917a#_2-4、迭代器和生成器的好处\",\"735\":\"v-656a917a#三、实现debug功能\",\"736\":\"v-656a917a#四、进阶话题-生成器和协程\",\"737\":\"v-656a917a@0\",\"738\":\"v-656a917a@1\",\"739\":\"v-1a3ec529\",\"740\":\"v-1a3ec529#一、异常处理\",\"741\":\"v-1a3ec529#二、基础捕获-try-except块\",\"742\":\"v-1a3ec529#简单异常捕获\",\"743\":\"v-1a3ec529#多异常处理\",\"744\":\"v-1a3ec529#异常链抛出\",\"745\":\"v-1a3ec529#三、with上下文管理\",\"746\":\"v-1a3ec529#自动资源管理\",\"747\":\"v-1a3ec529#四、捕获特定异常-else-finally块\",\"748\":\"v-1a3ec529#使用else语句\",\"749\":\"v-1a3ec529#finally确保代码执行\",\"750\":\"v-1a3ec529#五、自定义异常\",\"751\":\"v-1a3ec529#继承exception基类\",\"752\":\"v-1a3ec529#六、主动抛出异常\",\"753\":\"v-1a3ec529#主动抛出异常\",\"754\":\"v-1a3ec529#函数调用栈中的异常\",\"755\":\"v-1a3ec529#七、异常的绝杀——日志\",\"756\":\"v-1a3ec529#八、调试中的异常检查——assert\",\"757\":\"v-1a3ec529#九、异常装饰器\",\"758\":\"v-1a3ec529#_10、异常和性能\",\"759\":\"v-1a3ec529@0\",\"760\":\"v-1a3ec529@1\",\"761\":\"v-177e9296\",\"762\":\"v-177e9296#一、设计模式的六大原则\",\"763\":\"v-177e9296#二、单例模式的作用和意义\",\"764\":\"v-177e9296#三、工厂模式有哪些-有什么区别\",\"765\":\"v-177e9296#_3-1、简单工厂\",\"766\":\"v-177e9296#_3-2、工厂方法\",\"767\":\"v-177e9296#_3-3、抽象工厂模式\",\"768\":\"v-177e9296#四、装饰器和代理模式\",\"769\":\"v-177e9296#一、代理模式-proxy-design-pattern\",\"770\":\"v-177e9296#二、装饰器模式-decorator-pattern\",\"771\":\"v-177e9296#三、装饰器模式与代理模式的区别\",\"772\":\"v-177e9296@0\",\"773\":\"v-177e9296@1\",\"774\":\"v-46f4666c\",\"775\":\"v-46f4666c#一、定义\",\"776\":\"v-46f4666c#二、策略模式结构\",\"777\":\"v-46f4666c@0\",\"778\":\"v-46f4666c@1\",\"779\":\"v-0af57c16\",\"780\":\"v-0af57c16#一、定义\",\"781\":\"v-0af57c16#二、实现方式\",\"782\":\"v-0af57c16#_1、使用模块\",\"783\":\"v-0af57c16#_2、使用装饰器\",\"784\":\"v-0af57c16#_3、使用-new-方法\",\"785\":\"v-0af57c16@0\",\"786\":\"v-0af57c16@1\",\"787\":\"v-465f4a44\",\"788\":\"v-465f4a44#一、模式定义\",\"789\":\"v-465f4a44#二、实现方式\",\"790\":\"v-465f4a44#_1、简单工厂模式\",\"791\":\"v-465f4a44#_2、工厂方法模式\",\"792\":\"v-465f4a44#_3、抽象工厂模式\",\"793\":\"v-465f4a44#三、应用场景\",\"794\":\"v-465f4a44@0\",\"795\":\"v-465f4a44@1\",\"796\":\"v-aeb5fd80\",\"797\":\"v-aeb5fd80#一、定义\",\"798\":\"v-aeb5fd80#二、解决的问题\",\"799\":\"v-aeb5fd80#三、适配器模式结构\",\"800\":\"v-aeb5fd80#四、和其他模式的关系\",\"801\":\"v-aeb5fd80@0\",\"802\":\"v-aeb5fd80@1\",\"803\":\"v-561d2bf8\",\"804\":\"v-561d2bf8#一、定义\",\"805\":\"v-561d2bf8#二、责任链模式结构\",\"806\":\"v-561d2bf8#三、实现方式\",\"807\":\"v-561d2bf8#四、优缺点\",\"808\":\"v-561d2bf8#优点\",\"809\":\"v-561d2bf8#缺点\",\"810\":\"v-561d2bf8@0\",\"811\":\"v-561d2bf8@1\",\"812\":\"v-cff9f55c\",\"813\":\"v-cff9f55c#一、系统级别并发——多大的并发对于系统会有影响-接口\",\"814\":\"v-cff9f55c#二、数据级别的高并发——对于数据库的影响\",\"815\":\"v-cff9f55c#三、对于框架——高并发的选择的框架\",\"816\":\"v-cff9f55c#四、高并发就代表着数据量大\",\"817\":\"v-cff9f55c#五、网络安全\",\"818\":\"v-cff9f55c#六、静态资源——动静分离\",\"819\":\"v-cff9f55c@0\",\"820\":\"v-cff9f55c@1\",\"821\":\"v-08ef114a\",\"822\":\"v-08ef114a#一、为什么需要序列化\",\"823\":\"v-08ef114a#二、问题为什么对象不可以直接被序列化\",\"824\":\"v-08ef114a#_2-1、可以被json直接序列化的为dict类型-python对象如何转为dict\",\"825\":\"v-08ef114a#_2-2、对象的-dict-有什么用\",\"826\":\"v-08ef114a#三、自定义flask的序列化\",\"827\":\"v-08ef114a#一、指定flask的jsonencoder-重写jsonencoder的default方法\",\"828\":\"v-08ef114a#二、修改模型类\",\"829\":\"v-08ef114a@0\",\"830\":\"v-08ef114a@1\",\"831\":\"v-501baa07\",\"832\":\"v-501baa07#一、简单示例\",\"833\":\"v-501baa07#二、带有参数\",\"834\":\"v-501baa07#三、基于类的装饰器\",\"835\":\"v-501baa07#四、使用装饰器实现缓存\",\"836\":\"v-501baa07#_1-缓存算法\",\"837\":\"v-501baa07#_1-1-fifo算法\",\"838\":\"v-501baa07#_1-2-lfu算法\",\"839\":\"v-501baa07#_1-3-lru算法\",\"840\":\"v-501baa07@0\",\"841\":\"v-501baa07@1\",\"842\":\"v-a72fc72e\",\"843\":\"v-a72fc72e#一、问题引入\",\"844\":\"v-a72fc72e#二、源码分析\",\"845\":\"v-a72fc72e#_1、什么是with-上下文语句\",\"846\":\"v-a72fc72e#_2、什么情况下会声明上下文\",\"847\":\"v-a72fc72e#三、我们如何声明一个上下文管理器\",\"848\":\"v-a72fc72e#问题三、-exit-是否有返回值\",\"849\":\"v-a72fc72e#四、使用其他方法声明一个上下文管理器\",\"850\":\"v-a72fc72e@0\",\"851\":\"v-a72fc72e@1\",\"852\":\"v-b191c566\",\"853\":\"v-b191c566#一、问题-flask中会接收多个请求-那他们不会搞混吗\",\"854\":\"v-b191c566#二、local对象\",\"855\":\"v-b191c566#三、使用线程隔离和不适用线程隔离的区别\",\"856\":\"v-b191c566#四、线程隔离的栈-localstack\",\"857\":\"v-b191c566@0\",\"858\":\"v-b191c566@1\",\"859\":\"v-7ece2314\",\"860\":\"v-7ece2314#一、为什么要抽象基类\",\"861\":\"v-7ece2314#二、basemodel\",\"862\":\"v-7ece2314#三、base-view-基类\",\"863\":\"v-7ece2314#四、response-基类\",\"864\":\"v-7ece2314#五、基本使用\",\"865\":\"v-7ece2314#_1、创建模型类\",\"866\":\"v-7ece2314#_2、创建序列化类\",\"867\":\"v-7ece2314#_3、视图类\",\"868\":\"v-7ece2314@0\",\"869\":\"v-7ece2314@1\",\"870\":\"v-6ea55b22\",\"871\":\"v-6ea55b22#一、下载\",\"872\":\"v-6ea55b22#二、使用\",\"873\":\"v-6ea55b22#三、view登录界面\",\"874\":\"v-6ea55b22@0\",\"875\":\"v-6ea55b22@1\",\"876\":\"v-4916eb66\",\"877\":\"v-4916eb66#问题一\",\"878\":\"v-4916eb66#问题二\",\"879\":\"v-4916eb66#一、数据库基类设置\",\"880\":\"v-4916eb66#二、自定义-nested\",\"881\":\"v-4916eb66#三、序列化配置\",\"882\":\"v-4916eb66#四、实现结果\",\"883\":\"v-4916eb66@0\",\"884\":\"v-4916eb66@1\",\"885\":\"v-b35d06f4\",\"886\":\"v-b35d06f4#一、模型类\",\"887\":\"v-b35d06f4#二、序列化类\",\"888\":\"v-b35d06f4#三、视图类\",\"889\":\"v-b35d06f4@0\",\"890\":\"v-b35d06f4@1\",\"891\":\"v-ec9f7d82\",\"892\":\"v-ec9f7d82#_1、python中的鸭子对象\",\"893\":\"v-ec9f7d82#_2、python3和python2中for-in-xx-xx是什么-为什么要改变\",\"894\":\"v-ec9f7d82#_3、python中的深浅拷贝\",\"895\":\"v-ec9f7d82#_4、正则表达式的match方法和search方法有什么区别\",\"896\":\"v-ec9f7d82#_5、python中为什么没有函数重载\",\"897\":\"v-ec9f7d82#_6、python中为什么要引入全局解释器锁\",\"898\":\"v-ec9f7d82#_7、如何理解异步io\",\"899\":\"v-ec9f7d82#_8、异步io和事件循环的关系\",\"900\":\"v-ec9f7d82#_9、-new-方法是什么\",\"901\":\"v-ec9f7d82#_10、-init-方法是什么\",\"902\":\"v-ec9f7d82#_11、-new-的作用\",\"903\":\"v-ec9f7d82#_13、-init-与-new-的区别\",\"904\":\"v-ec9f7d82@0\",\"905\":\"v-ec9f7d82@1\",\"906\":\"v-391b2cdd\",\"907\":\"v-391b2cdd#一、python基础队列-列表\",\"908\":\"v-391b2cdd#_1-1-列表作为队列的简单应用\",\"909\":\"v-391b2cdd#_1-2-缺点与优化建议\",\"910\":\"v-391b2cdd#二、高效队列-collections-deque\",\"911\":\"v-391b2cdd#_2-1-deque介绍与优势\",\"912\":\"v-391b2cdd#_2-2-实现快速入队与出队\",\"913\":\"v-391b2cdd#三、并发安全-queue模块\",\"914\":\"v-391b2cdd#_3-1-多线程-进程安全队列\",\"915\":\"v-391b2cdd#_3-2-queue模块核心类解析\",\"916\":\"v-391b2cdd#_3-3-生产者消费者模型实例\",\"917\":\"v-391b2cdd#四、高级数据结构-堆与优先队列-priorityqueue\",\"918\":\"v-391b2cdd#_4-1-何为优先队列及其应用场景\",\"919\":\"v-391b2cdd#_4-2-使用heapq模块实现优先队列\",\"920\":\"v-391b2cdd#_4-3-自定义比较函数优化优先级处理\",\"921\":\"v-391b2cdd#_4-4-实时调度与top-k问题解决\",\"922\":\"v-391b2cdd#五、扩展视野-协程和asyncio-queue\",\"923\":\"v-391b2cdd#_5-1-协程基础与async-await\",\"924\":\"v-391b2cdd#_5-2-异步编程中的队列应用\",\"925\":\"v-391b2cdd#_5-3-提升i-o密集型任务性能\",\"926\":\"v-391b2cdd@0\",\"927\":\"v-391b2cdd@1\",\"928\":\"v-cbc66bee\",\"929\":\"v-cbc66bee#一、内置lru缓存\",\"930\":\"v-cbc66bee#functools-lru-cache参数说明\",\"931\":\"v-cbc66bee#二、wraps函数\",\"932\":\"v-cbc66bee#自省信息丢失\",\"933\":\"v-cbc66bee#修复自省信息\",\"934\":\"v-cbc66bee#三、偏函数partial\",\"935\":\"v-cbc66bee#常规实现\",\"936\":\"v-cbc66bee#偏函数实现\",\"937\":\"v-cbc66bee@0\",\"938\":\"v-cbc66bee@1\",\"939\":\"v-ab35ebac\",\"940\":\"v-ab35ebac#一、counter-统计对象的个数\",\"941\":\"v-ab35ebac#_1-创建\",\"942\":\"v-ab35ebac#_2-访问缺失的键\",\"943\":\"v-ab35ebac#_3-计数器更新\",\"944\":\"v-ab35ebac#_4-键的删除\",\"945\":\"v-ab35ebac#_5-elements\",\"946\":\"v-ab35ebac#_6-most-common-n\",\"947\":\"v-ab35ebac#_7-算术和集合操作\",\"948\":\"v-ab35ebac@0\",\"949\":\"v-ab35ebac@1\",\"950\":\"v-212ba0f6\",\"951\":\"v-212ba0f6#一、tcp三次握手和四次挥手过程\",\"952\":\"v-212ba0f6#二、为什么是三次握手不是两次\",\"953\":\"v-212ba0f6#三、tcp的四次挥手\",\"954\":\"v-212ba0f6#四、为什么需要四次挥手\",\"955\":\"v-212ba0f6#五、关于time-wait等待时间\",\"956\":\"v-212ba0f6#为什么需要这个状态\",\"957\":\"v-212ba0f6#六、tcp如何保证连接的可靠\",\"958\":\"v-212ba0f6#重传机制\",\"959\":\"v-212ba0f6#滑动窗口\",\"960\":\"v-212ba0f6#流量控制\",\"961\":\"v-212ba0f6#ack确认机制\",\"962\":\"v-212ba0f6#七、http协议-与-tcp协议-的区别\",\"963\":\"v-212ba0f6@0\",\"964\":\"v-212ba0f6@1\",\"965\":\"v-692ed992\",\"966\":\"v-692ed992#一、http是什么\",\"967\":\"v-692ed992#二、http常见的状态码\",\"968\":\"v-692ed992#三、http缓存技术\",\"969\":\"v-692ed992#强制缓存\",\"970\":\"v-692ed992#协商缓存\",\"971\":\"v-692ed992#四、http和https区别\",\"972\":\"v-692ed992#如何解决\",\"973\":\"v-692ed992#http和https区别\",\"974\":\"v-692ed992#五、http1-0-http2-0-http3-0之间的区别\",\"975\":\"v-692ed992#http-1-1-改进\",\"976\":\"v-692ed992#http-2改进\",\"977\":\"v-692ed992#http3-0改进\",\"978\":\"v-692ed992#六、队头阻塞\",\"979\":\"v-692ed992@0\",\"980\":\"v-692ed992@1\",\"981\":\"v-68ba5078\",\"982\":\"v-68ba5078#一、定义\",\"983\":\"v-68ba5078#二、局部作用域\",\"984\":\"v-68ba5078#三、嵌套作用域\",\"985\":\"v-68ba5078#四、全局作用域\",\"986\":\"v-68ba5078#五、内置作用域-系统内固定模块中定义的变量\",\"987\":\"v-68ba5078@0\",\"988\":\"v-68ba5078@1\",\"989\":\"v-e200f82a\",\"990\":\"v-e200f82a#一、定义\",\"991\":\"v-e200f82a#一、闭包的作用\",\"992\":\"v-e200f82a#二、闭包实例\",\"993\":\"v-e200f82a@0\",\"994\":\"v-e200f82a@1\",\"995\":\"v-2ed7bacb\",\"996\":\"v-2ed7bacb#一、简单示例\",\"997\":\"v-2ed7bacb#二、带有参数\",\"998\":\"v-2ed7bacb#三、基于类的装饰器\",\"999\":\"v-2ed7bacb#四、使用装饰器实现缓存\",\"1000\":\"v-2ed7bacb#_1-缓存算法\",\"1001\":\"v-2ed7bacb#_1-1-fifo算法\",\"1002\":\"v-2ed7bacb#_1-2-lfu算法\",\"1003\":\"v-2ed7bacb#_1-3-lru算法\",\"1004\":\"v-2ed7bacb@0\",\"1005\":\"v-2ed7bacb@1\",\"1006\":\"v-983b6396\",\"1007\":\"v-983b6396#一、什么是with-上下文语句\",\"1008\":\"v-983b6396#二、什么情况下会声明上下文\",\"1009\":\"v-983b6396#三、我们如何声明一个上下文管理器\",\"1010\":\"v-983b6396#四、使用其他方法声明一个上下文管理器\",\"1011\":\"v-983b6396@0\",\"1012\":\"v-983b6396@1\",\"1013\":\"v-e1501cf0\",\"1014\":\"v-e1501cf0#一、定义\",\"1015\":\"v-e1501cf0#二、定义迭代器\",\"1016\":\"v-e1501cf0#三、stopiteration\",\"1017\":\"v-e1501cf0#四、迭代器的判断\",\"1018\":\"v-e1501cf0@0\",\"1019\":\"v-e1501cf0@1\",\"1020\":\"v-363ad75c\",\"1021\":\"v-363ad75c#一、定义\",\"1022\":\"v-363ad75c#二、特点\",\"1023\":\"v-363ad75c#三、生成器表达式\",\"1024\":\"v-363ad75c#四、生成器函数\",\"1025\":\"v-363ad75c#五、生成器的本质\",\"1026\":\"v-363ad75c@0\",\"1027\":\"v-363ad75c@1\",\"1028\":\"v-62f0d7ea\",\"1029\":\"v-62f0d7ea#一、定义\",\"1030\":\"v-62f0d7ea#二、python多线程的实现\",\"1031\":\"v-62f0d7ea#三、线程锁lock\",\"1032\":\"v-62f0d7ea#锁的分类\",\"1033\":\"v-62f0d7ea#同步锁介绍\",\"1034\":\"v-62f0d7ea#死锁\",\"1035\":\"v-62f0d7ea#event事件\",\"1036\":\"v-62f0d7ea#四、线程池\",\"1037\":\"v-62f0d7ea@0\",\"1038\":\"v-62f0d7ea@1\",\"1039\":\"v-5ee7e953\",\"1040\":\"v-5ee7e953#详情还是要看文档\",\"1041\":\"v-5ee7e953#事件循环\",\"1042\":\"v-5ee7e953@0\",\"1043\":\"v-5ee7e953@1\",\"1044\":\"v-4040957c\",\"1045\":\"v-4040957c#问题引入\",\"1046\":\"v-4040957c#一、两点疑问\",\"1047\":\"v-4040957c#问题1-为什么使用contextvar\",\"1048\":\"v-4040957c#问题2-flask是不是不再使用栈的方式进行处理应用上下文了\",\"1049\":\"v-4040957c#二、线程隔离\",\"1050\":\"v-4040957c#三、flask是不是不再使用localstock来处理上下文了\",\"1051\":\"v-4040957c#_1、第一实现多线程、协程数据隔离-我们可以使用的方式\",\"1052\":\"v-4040957c#_2、那之前为什么要使用栈呢\",\"1053\":\"v-4040957c#_3、现在为什么不使用栈了\",\"1054\":\"v-4040957c@0\",\"1055\":\"v-4040957c@1\",\"1056\":\"v-61ef7e85\",\"1057\":\"v-61ef7e85#一、实例化对象的过程\",\"1058\":\"v-61ef7e85#二、flask实例化过程\",\"1059\":\"v-61ef7e85#flask类的构造\",\"1060\":\"v-61ef7e85#_01、初始化\",\"1061\":\"v-61ef7e85#_02、配置信息\",\"1062\":\"v-61ef7e85#_03、定义处理函数\",\"1063\":\"v-61ef7e85#_04、定义视图函数\",\"1064\":\"v-61ef7e85#_05、app-run\",\"1065\":\"v-61ef7e85#三、总结\",\"1066\":\"v-61ef7e85@0\",\"1067\":\"v-61ef7e85@1\",\"1068\":\"v-3f841b40\",\"1069\":\"v-3f841b40#一-为什么迁移到-contextvars\",\"1070\":\"v-3f841b40#二-flask-3-0-2-上下文的核心变化\",\"1071\":\"v-3f841b40#_2-1-上下文对象的实现\",\"1072\":\"v-3f841b40#_2-2-核心代码对比\",\"1073\":\"v-3f841b40#旧版-基于-werkzeug-的-localstack\",\"1074\":\"v-3f841b40#新版-基于-contextvars\",\"1075\":\"v-3f841b40#三-上下文的生命周期与管理\",\"1076\":\"v-3f841b40#_3-1-应用上下文-app-context\",\"1077\":\"v-3f841b40#示例代码\",\"1078\":\"v-3f841b40#_3-2-请求上下文-request-context\",\"1079\":\"v-3f841b40#异步示例\",\"1080\":\"v-3f841b40#四-contextvars-的核心机制\",\"1081\":\"v-3f841b40#_4-1-contextvar-的基本用法\",\"1082\":\"v-3f841b40#_4-2-flask-如何使用-contextvar\",\"1083\":\"v-3f841b40#五-源码关键路径-flask-3-0\",\"1084\":\"v-3f841b40#_6-1-请求处理流程\",\"1085\":\"v-3f841b40#_6-2-appcontext-的-push-pop-实现\",\"1086\":\"v-3f841b40#六-优势与最佳实践\",\"1087\":\"v-3f841b40#_6-1-主要优势\",\"1088\":\"v-3f841b40#_6-2-最佳实践\",\"1089\":\"v-3f841b40#七-总结\",\"1090\":\"v-3f841b40@0\",\"1091\":\"v-3f841b40@1\",\"1092\":\"v-23b5c7bc\",\"1093\":\"v-23b5c7bc#一、路由\",\"1094\":\"v-23b5c7bc#二、endpoint\",\"1095\":\"v-23b5c7bc#三、flask如何利用endpoint实现请求分发\",\"1096\":\"v-23b5c7bc@0\",\"1097\":\"v-23b5c7bc@1\",\"1098\":\"v-04d7a41f\",\"1099\":\"v-04d7a41f#一、上下文操作\",\"1100\":\"v-04d7a41f#_1、基本操作\",\"1101\":\"v-04d7a41f#_2、请求上下文和应用上下文的关系\",\"1102\":\"v-04d7a41f#_3、请求上下文和应用上下文的生命周期\",\"1103\":\"v-04d7a41f#二、处理函数运行\",\"1104\":\"v-04d7a41f#三、生命周期\",\"1105\":\"v-04d7a41f@0\",\"1106\":\"v-04d7a41f@1\",\"1107\":\"v-3959cfe6\",\"1108\":\"v-3959cfe6#一、自定义扩展点概述\",\"1109\":\"v-3959cfe6#二、flask信号\",\"1110\":\"v-3959cfe6#_1、所有信号\",\"1111\":\"v-3959cfe6#_2、信号的定义\",\"1112\":\"v-3959cfe6#_3、信号的使用\",\"1113\":\"v-3959cfe6#_4、信号的总结\",\"1114\":\"v-3959cfe6#request-started\",\"1115\":\"v-3959cfe6#request-finished\",\"1116\":\"v-3959cfe6#before-render-template\",\"1117\":\"v-3959cfe6#template-rendered\",\"1118\":\"v-3959cfe6#got-request-exception\",\"1119\":\"v-3959cfe6#request-tearing-down\",\"1120\":\"v-3959cfe6#appcontext-tearing-down\",\"1121\":\"v-3959cfe6#appcontext-pushed\",\"1122\":\"v-3959cfe6#appcontext-popped\",\"1123\":\"v-3959cfe6#message-flashed\",\"1124\":\"v-3959cfe6#三、flask请求处理函数\",\"1125\":\"v-3959cfe6#四、总结\",\"1126\":\"v-3959cfe6#_1、flask信号\",\"1127\":\"v-3959cfe6#request-started-1\",\"1128\":\"v-3959cfe6#request-finished-1\",\"1129\":\"v-3959cfe6#before-render-template-1\",\"1130\":\"v-3959cfe6#template-rendered-1\",\"1131\":\"v-3959cfe6#got-request-exception-1\",\"1132\":\"v-3959cfe6#request-tearing-down-1\",\"1133\":\"v-3959cfe6#appcontext-tearing-down-1\",\"1134\":\"v-3959cfe6#appcontext-pushed-1\",\"1135\":\"v-3959cfe6#appcontext-popped-1\",\"1136\":\"v-3959cfe6#message-flashed-1\",\"1137\":\"v-3959cfe6#_2、请求处理函数\",\"1138\":\"v-3959cfe6@0\",\"1139\":\"v-3959cfe6@1\",\"1140\":\"v-3625920c\",\"1141\":\"v-3625920c#一、为什么需要-class-based-views-cbv-和-restful-api\",\"1142\":\"v-3625920c#_1-1-函数视图的局限性\",\"1143\":\"v-3625920c#_1-2-class-based-views-cbv-的优势\",\"1144\":\"v-3625920c#_1-3-restful-api-的核心原则\",\"1145\":\"v-3625920c#二、flask-restx-restful-api-的终极解决方案\",\"1146\":\"v-3625920c#_2-1-flask-restx-是什么\",\"1147\":\"v-3625920c#_2-2-安装与快速入门\",\"1148\":\"v-3625920c#三、flask-restx-核心功能详解\",\"1149\":\"v-3625920c#_3-1-资源定义-resource\",\"1150\":\"v-3625920c#_3-2-请求参数校验\",\"1151\":\"v-3625920c#_3-3-自动文档生成\",\"1152\":\"v-3625920c#_3-4-命名空间-namespace\",\"1153\":\"v-3625920c#四、flask-restx-的优势与最佳实践\",\"1154\":\"v-3625920c#_4-1-优势总结\",\"1155\":\"v-3625920c#_4-2-最佳实践\",\"1156\":\"v-3625920c#_5-3-与-flask-restful-的对比\",\"1157\":\"v-3625920c@0\",\"1158\":\"v-3625920c@1\",\"1159\":\"v-5f1654a8\",\"1160\":\"v-5f1654a8#一、wsgi-和-asgi-的核心区别\",\"1161\":\"v-5f1654a8#_1-同步-vs-异步\",\"1162\":\"v-5f1654a8#_2-协议支持\",\"1163\":\"v-5f1654a8#_3-性能\",\"1164\":\"v-5f1654a8#_4-兼容性\",\"1165\":\"v-5f1654a8#_5-示例代码对比\",\"1166\":\"v-5f1654a8#wsgi-示例\",\"1167\":\"v-5f1654a8#asgi-示例\",\"1168\":\"v-5f1654a8#二、主流框架与服务器的接口支持\",\"1169\":\"v-5f1654a8#_1-使用-wsgi-的框架\",\"1170\":\"v-5f1654a8#_2-使用-asgi-的框架\",\"1171\":\"v-5f1654a8#_3-服务器对比\",\"1172\":\"v-5f1654a8#三、如何选择\",\"1173\":\"v-5f1654a8#四、总结\",\"1174\":\"v-5f1654a8@0\",\"1175\":\"v-5f1654a8@1\",\"1176\":\"v-f573c820\",\"1177\":\"v-f573c820#一、访问者模式\",\"1178\":\"v-f573c820#应用场景\",\"1179\":\"v-f573c820#主要步骤\",\"1180\":\"v-f573c820#二、定义访问者\",\"1181\":\"v-f573c820#三、robot如何使用访问者模式\",\"1182\":\"v-f573c820#访问者\",\"1183\":\"v-f573c820#被访问者\",\"1184\":\"v-f573c820@0\",\"1185\":\"v-f573c820@1\",\"1186\":\"v-0e00d1ce\",\"1187\":\"v-0e00d1ce#一、获取关键字\",\"1188\":\"v-0e00d1ce#二、运行关键字\",\"1189\":\"v-0e00d1ce#三、个人实现\",\"1190\":\"v-0e00d1ce@0\",\"1191\":\"v-0e00d1ce@1\",\"1192\":\"v-2fd3a592\",\"1193\":\"v-2fd3a592#一、robotframework类构造\",\"1194\":\"v-2fd3a592#二、运行逻辑\",\"1195\":\"v-2fd3a592@0\",\"1196\":\"v-2fd3a592@1\",\"1197\":\"v-ed24d8d6\",\"1198\":\"v-ed24d8d6#_659-分割数组为连续子序列\",\"1199\":\"v-ed24d8d6@0\",\"1200\":\"v-ed24d8d6@1\",\"1201\":\"v-487e7e98\",\"1202\":\"v-487e7e98#_221-最大正方形——正方形最大面积\",\"1203\":\"v-487e7e98#lcr-040-最大矩形——最大矩形\",\"1204\":\"v-487e7e98@0\",\"1205\":\"v-487e7e98@1\",\"1206\":\"v-1dfbce7b\",\"1207\":\"v-1dfbce7b#_300-最长递增子序列\",\"1208\":\"v-1dfbce7b#_673-最长递增子序列的个数\",\"1209\":\"v-1dfbce7b#_354-俄罗斯套娃信封问题\",\"1210\":\"v-7631edc4\",\"1211\":\"v-7631edc4@0\",\"1212\":\"v-7631edc4@1\",\"1213\":\"v-e5f23b20\",\"1214\":\"v-e5f23b20@0\",\"1215\":\"v-e5f23b20@1\",\"1216\":\"v-d9bd3c1c\",\"1217\":\"v-d9bd3c1c#一、图的逻辑结构\",\"1218\":\"v-d9bd3c1c#二、图的相关概念\",\"1219\":\"v-d9bd3c1c#三、图的分类\",\"1220\":\"v-d9bd3c1c#四、图的遍历\",\"1221\":\"v-d9bd3c1c#五、题目实践——797-所有可能的路径\",\"1222\":\"v-d9bd3c1c@0\",\"1223\":\"v-d9bd3c1c@1\",\"1224\":\"v-b69b7200\",\"1225\":\"v-b69b7200#一、基础概念\",\"1226\":\"v-b69b7200#路径压缩\",\"1227\":\"v-b69b7200#二、并查集的实现\",\"1228\":\"v-b69b7200#三、经典例题\",\"1229\":\"v-b69b7200#_1971-寻找图中是否存在路径\",\"1230\":\"v-b69b7200#_684-冗余连接\",\"1231\":\"v-b69b7200@0\",\"1232\":\"v-b69b7200@1\",\"1233\":\"v-252afd42\",\"1234\":\"v-252afd42#一、二分图的定义\",\"1235\":\"v-252afd42#二分图的判定方法\",\"1236\":\"v-252afd42#_785-判断二分图\",\"1237\":\"v-252afd42#_886-可能的二分法——有向图-需要自己构造图\",\"1238\":\"v-252afd42@0\",\"1239\":\"v-252afd42@1\",\"1240\":\"v-139a9f3e\",\"1241\":\"v-139a9f3e#一、环检测——207-课程表\",\"1242\":\"v-139a9f3e#_210-课程表-ii——拓扑排序\",\"1243\":\"v-139a9f3e@0\",\"1244\":\"v-139a9f3e@1\",\"1245\":\"v-8ae5fa14\",\"1246\":\"v-8ae5fa14@0\",\"1247\":\"v-8ae5fa14@1\",\"1248\":\"v-bb365362\",\"1249\":\"v-bb365362@0\",\"1250\":\"v-bb365362@1\",\"1251\":\"v-5fb9288a\",\"1252\":\"v-5fb9288a@0\",\"1253\":\"v-5fb9288a@1\",\"1254\":\"v-249362c3\",\"1255\":\"v-249362c3#一、概念\",\"1256\":\"v-249362c3#二、经典题目\",\"1257\":\"v-249362c3#_15-三数之和\",\"1258\":\"v-249362c3#_344-反转字符串\",\"1259\":\"v-249362c3#_5-最长回文子串\",\"1260\":\"v-249362c3@0\",\"1261\":\"v-249362c3@1\",\"1262\":\"v-e7059964\",\"1263\":\"v-e7059964#一、概念\",\"1264\":\"v-e7059964#二、经典例题\",\"1265\":\"v-e7059964#_27-移除元素\",\"1266\":\"v-e7059964#_26-删除有序数组中的重复项\",\"1267\":\"v-e7059964@0\",\"1268\":\"v-e7059964@1\",\"1269\":\"v-9f88cc8c\",\"1270\":\"v-9f88cc8c#一、01-背包\",\"1271\":\"v-9f88cc8c#二维数组\",\"1272\":\"v-9f88cc8c#代码\",\"1273\":\"v-9f88cc8c#一维滚动数组\",\"1274\":\"v-9f88cc8c#_01背包的变形\",\"1275\":\"v-9f88cc8c#二、完全背包\",\"1276\":\"v-9f88cc8c#完全背包排列组合问题总结\",\"1277\":\"v-9f88cc8c@0\",\"1278\":\"v-9f88cc8c@1\",\"1279\":\"v-34834d16\",\"1280\":\"v-34834d16#_198-打家劫舍\",\"1281\":\"v-34834d16#_740-删除并获得点数\",\"1282\":\"v-34834d16#_1388-3n-块披萨\",\"1283\":\"v-34834d16@0\",\"1284\":\"v-34834d16@1\",\"1285\":\"v-26259cad\",\"1286\":\"v-26259cad#_300-最长递增子序列——子序列可以是不连续\",\"1287\":\"v-26259cad#_674-最长连续递增序列——最长联系递增子序列\",\"1288\":\"v-26259cad#_673-最长递增子序列的个数——最长递增子序列个数\",\"1289\":\"v-26259cad#_334-递增的三元子序列——递增三元子序列\",\"1290\":\"v-26259cad@0\",\"1291\":\"v-26259cad@1\",\"1292\":\"v-0166d6c6\",\"1293\":\"v-0166d6c6@0\",\"1294\":\"v-0166d6c6@1\",\"1295\":\"v-64035e40\",\"1296\":\"v-64035e40#一、定义\",\"1297\":\"v-64035e40#二、验证回文串\",\"1298\":\"v-64035e40#思路\",\"1299\":\"v-64035e40#回文子串和子序列问题\",\"1300\":\"v-64035e40#构造回文串\",\"1301\":\"v-64035e40@0\",\"1302\":\"v-64035e40@1\",\"1303\":\"v-c17aed84\",\"1304\":\"v-c17aed84@0\",\"1305\":\"v-c17aed84@1\",\"1306\":\"v-2de8dd77\",\"1307\":\"v-2de8dd77#_718-最长重复子数组——连续子序列\",\"1308\":\"v-2de8dd77#_1143-最长公共子序列——非连续子序列\",\"1309\":\"v-2de8dd77#_1035-不相交的线——换皮题-最长子序列\",\"1310\":\"v-2de8dd77@0\",\"1311\":\"v-2de8dd77@1\",\"1312\":\"v-67e39170\",\"1313\":\"v-67e39170#_392-判断子序列——入门题-公共子序列问题\",\"1314\":\"v-67e39170#_115-不同的子序列——出现个数\",\"1315\":\"v-67e39170@0\",\"1316\":\"v-67e39170@1\",\"1317\":\"v-06001ea9\",\"1318\":\"v-06001ea9@0\",\"1319\":\"v-06001ea9@1\",\"1320\":\"v-82eed30e\",\"1321\":\"v-82eed30e#一、基本概念\",\"1322\":\"v-82eed30e#与\",\"1323\":\"v-82eed30e#或\",\"1324\":\"v-82eed30e#异或\",\"1325\":\"v-82eed30e#取反\",\"1326\":\"v-82eed30e#左移\",\"1327\":\"v-82eed30e#右移\",\"1328\":\"v-82eed30e#二、常用技巧\",\"1329\":\"v-82eed30e#_1、打印32位的二进制的数字\",\"1330\":\"v-82eed30e#_2、交换顺序-a需要不等于b\",\"1331\":\"v-82eed30e#_3、面试题-17-04-消失的数字\",\"1332\":\"v-82eed30e#_4、判断奇数偶数\",\"1333\":\"v-82eed30e#_5、找到右边第一个为1的数字\",\"1334\":\"v-82eed30e#三、经典题目\",\"1335\":\"v-82eed30e#面试题-17-04-消失的数字\",\"1336\":\"v-82eed30e#_136-只出现一次的数字\",\"1337\":\"v-82eed30e#思路一\",\"1338\":\"v-82eed30e#思路二\",\"1339\":\"v-82eed30e#_137-只出现一次的数字-ii\",\"1340\":\"v-82eed30e#_260-只出现一次的数字-iii\",\"1341\":\"v-82eed30e#_2595-奇偶位数\",\"1342\":\"v-82eed30e@0\",\"1343\":\"v-82eed30e@1\",\"1344\":\"v-48a7f23a\",\"1345\":\"v-48a7f23a#一、基础概念\",\"1346\":\"v-48a7f23a#二、dfs其他\",\"1347\":\"v-48a7f23a#_2-1、dfs和递归\",\"1348\":\"v-48a7f23a#_2-1、dfs和回溯\",\"1349\":\"v-48a7f23a@0\",\"1350\":\"v-48a7f23a@1\",\"1351\":\"v-8e7d78de\",\"1352\":\"v-8e7d78de#_200-岛屿数量\",\"1353\":\"v-8e7d78de#_695-岛屿的最大面积\",\"1354\":\"v-8e7d78de#_1020-飞地的数量\",\"1355\":\"v-8e7d78de@0\",\"1356\":\"v-8e7d78de@1\",\"1357\":\"v-1cdcf296\",\"1358\":\"v-1cdcf296#一、什么是贪心\",\"1359\":\"v-1cdcf296#二、什么时候使用贪心\",\"1360\":\"v-1cdcf296#三、贪心的一般解题步骤\",\"1361\":\"v-1cdcf296@0\",\"1362\":\"v-1cdcf296@1\",\"1363\":\"v-8b1b274c\",\"1364\":\"v-8b1b274c#_455-分发饼干——常识题-使用小饼干来满足小胃口的孩子\",\"1365\":\"v-8b1b274c#_1005-k-次取反后最大化的数组和——常识题-负值取反为正-正值取最小数\",\"1366\":\"v-8b1b274c#_860-柠檬水找零——模拟题\",\"1367\":\"v-8b1b274c@0\",\"1368\":\"v-8b1b274c@1\",\"1369\":\"v-317fe668\",\"1370\":\"v-317fe668@0\",\"1371\":\"v-317fe668@1\",\"1372\":\"v-cb63a816\",\"1373\":\"v-cb63a816@0\",\"1374\":\"v-cb63a816@1\",\"1375\":\"v-11b535ba\",\"1376\":\"v-11b535ba#_605-种花问题——种花问题\",\"1377\":\"v-11b535ba#_11-盛最多水的容器\",\"1378\":\"v-11b535ba#_881-救生艇\",\"1379\":\"v-11b535ba#_611-有效三角形的个数\",\"1380\":\"v-11b535ba#_524-通过删除字母匹配到字典里最长单词\",\"1381\":\"v-11b535ba@0\",\"1382\":\"v-11b535ba@1\",\"1383\":\"v-4699c65a\",\"1384\":\"v-4699c65a#_1090-受标签影响的最大值\",\"1385\":\"v-4699c65a#_763-划分字母区间\",\"1386\":\"v-4699c65a@0\",\"1387\":\"v-4699c65a@1\",\"1388\":\"v-733a551b\",\"1389\":\"v-733a551b#一、二分查找定义\",\"1390\":\"v-733a551b#二、二分查找的算法步骤\",\"1391\":\"v-733a551b#三、二分查找中的注意点\",\"1392\":\"v-733a551b#_3-1、区间的开闭问题\",\"1393\":\"v-733a551b#_3-2、mid的取值问题\",\"1394\":\"v-733a551b#_3-4-搜索区间范围的选择\",\"1395\":\"v-733a551b#三、经典例题\",\"1396\":\"v-733a551b@0\",\"1397\":\"v-733a551b@1\",\"1398\":\"v-06cd05be\",\"1399\":\"v-06cd05be#_35-搜索插入位置\",\"1400\":\"v-06cd05be#_34-在排序数组中查找元素的第一个和最后一个位置\",\"1401\":\"v-06cd05be@0\",\"1402\":\"v-2d1e43d8\",\"1403\":\"v-2d1e43d8#_275-h-指数-ii\",\"1404\":\"v-2d1e43d8@0\",\"1405\":\"v-2d1e43d8@1\",\"1406\":\"v-721eae90\",\"1407\":\"v-721eae90@0\",\"1408\":\"v-721eae90@1\",\"1409\":\"v-050dd09d\",\"1410\":\"v-e1e3da16\",\"1411\":\"v-49713774\",\"1412\":\"v-228a052e\",\"1413\":\"v-3158f1bc\",\"1414\":\"v-08fbeeeb\",\"1415\":\"v-74bd6ed8\",\"1416\":\"v-3374ac8c\",\"1417\":\"v-3bc0db96\",\"1418\":\"v-bc4bbbc4\",\"1419\":\"v-4eea2ae6\",\"1420\":\"v-38bd1c48\",\"1421\":\"v-2a0ddf6d\",\"1422\":\"v-2fa94cd4\",\"1423\":\"v-05396b19\",\"1424\":\"v-656c3e86\",\"1425\":\"v-380d4646\",\"1426\":\"v-2428b250\",\"1427\":\"v-14f19974\",\"1428\":\"v-477754dc\",\"1429\":\"v-fca6c8f2\",\"1430\":\"v-2512648e\",\"1431\":\"v-ce837cb2\",\"1432\":\"v-dbd106c6\",\"1433\":\"v-724a3cf6\",\"1434\":\"v-6bf91e55\",\"1435\":\"v-052e6565\",\"1436\":\"v-8d26ddfe\",\"1437\":\"v-1bae6eea\",\"1438\":\"v-0e98f058\",\"1439\":\"v-628bae03\",\"1440\":\"v-07fc9052\",\"1441\":\"v-cffcb4ce\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,12],\"1\":[1,30],\"2\":[3],\"3\":[null,null,3],\"4\":[null,null,2],\"5\":[2],\"6\":[null,null,2],\"7\":[null,null,1],\"8\":[3],\"9\":[null,null,2],\"10\":[null,null,1],\"11\":[2],\"12\":[null,null,2],\"13\":[null,null,1],\"14\":[2],\"15\":[null,null,2],\"16\":[null,null,1],\"17\":[2],\"18\":[2,39],\"19\":[2,12],\"20\":[1,29],\"21\":[1,27],\"22\":[2,6],\"23\":[2,14],\"24\":[2,13],\"25\":[2,11],\"26\":[2,26],\"27\":[null,null,1],\"28\":[null,null,1],\"29\":[2],\"30\":[2,46],\"31\":[4,44],\"32\":[4,63],\"33\":[2,40],\"34\":[5,24],\"35\":[null,null,1],\"36\":[null,null,1],\"37\":[2,17],\"38\":[5,11],\"39\":[4,21],\"40\":[4,25],\"41\":[2,5],\"42\":[5,15],\"43\":[3,20],\"44\":[3,13],\"45\":[3,10],\"46\":[5,57],\"47\":[null,null,1],\"48\":[null,null,1],\"49\":[3,14],\"50\":[4,9],\"51\":[2,19],\"52\":[5,27],\"53\":[2,4],\"54\":[5,15],\"55\":[3,17],\"56\":[3,16],\"57\":[3,13],\"58\":[5,39],\"59\":[null,null,1],\"60\":[null,null,1],\"61\":[2],\"62\":[2],\"63\":[3,48],\"64\":[2,32],\"65\":[2],\"66\":[2,9],\"67\":[2,61],\"68\":[2],\"69\":[1,23],\"70\":[1,23],\"71\":[1,6],\"72\":[1,22],\"73\":[1,109],\"74\":[3,30],\"75\":[2],\"76\":[1,20],\"77\":[1,6],\"78\":[1],\"79\":[1,28],\"80\":[1,22],\"81\":[1,27],\"82\":[null,null,2],\"83\":[null,null,1],\"84\":[2],\"85\":[2],\"86\":[1,24],\"87\":[1,74],\"88\":[1,23],\"89\":[1,12],\"90\":[1,34],\"91\":[1],\"92\":[1,14],\"93\":[1,96],\"94\":[2],\"95\":[1,17],\"96\":[1,36],\"97\":[1,38],\"98\":[1,17],\"99\":[1,14],\"100\":[1,36],\"101\":[1,34],\"102\":[2],\"103\":[null,null,2],\"104\":[null,null,1],\"105\":[2],\"106\":[2,4],\"107\":[2,18],\"108\":[2,254],\"109\":[null,null,2],\"110\":[null,null,2],\"111\":[2,6],\"112\":[2,23],\"113\":[1,16],\"114\":[2,40],\"115\":[2,60],\"116\":[4,30],\"117\":[4,64],\"118\":[3,47],\"119\":[2,14],\"120\":[2,53],\"121\":[null,null,2],\"122\":[null,null,1],\"123\":[2],\"124\":[2,125],\"125\":[2,120],\"126\":[null,null,2],\"127\":[null,null,1],\"128\":[2],\"129\":[2],\"130\":[2,15],\"131\":[3,12],\"132\":[3,2],\"133\":[2,61],\"134\":[2,13],\"135\":[2,78],\"136\":[2,27],\"137\":[null,null,2],\"138\":[null,null,1],\"139\":[2],\"140\":[2,10],\"141\":[2,7],\"142\":[2,10],\"143\":[2,15],\"144\":[2,8],\"145\":[4],\"146\":[1,21],\"147\":[1,99],\"148\":[2,15],\"149\":[null,null,2],\"150\":[null,null,1],\"151\":[2],\"152\":[2,2],\"153\":[2,33],\"154\":[2,9],\"155\":[2,23],\"156\":[2,15],\"157\":[2],\"158\":[3,10],\"159\":[3,71],\"160\":[2,22],\"161\":[2,12],\"162\":[2,30],\"163\":[3,13],\"164\":[3,11],\"165\":[2,71],\"166\":[2,7],\"167\":[5,1],\"168\":[3],\"169\":[1,21],\"170\":[1,3],\"171\":[3,29],\"172\":[3,10],\"173\":[null,null,2],\"174\":[null,null,1],\"175\":[2],\"176\":[2,14],\"177\":[4,36],\"178\":[1,9],\"179\":[1,2],\"180\":[2,4],\"181\":[2,28],\"182\":[null,null,2],\"183\":[null,null,1],\"184\":[2],\"185\":[2],\"186\":[2,13],\"187\":[3,3],\"188\":[2],\"189\":[2,4],\"190\":[2,35],\"191\":[2,16],\"192\":[null,null,2],\"193\":[null,null,1],\"194\":[2],\"195\":[2],\"196\":[2,7],\"197\":[2,42],\"198\":[1,110],\"199\":[2],\"200\":[2,28],\"201\":[2,10],\"202\":[2,64],\"203\":[2,35],\"204\":[null,null,2],\"205\":[null,null,1],\"206\":[2],\"207\":[null,null,1],\"208\":[null,null,1],\"209\":[2],\"210\":[2,34],\"211\":[2,8],\"212\":[2,15],\"213\":[2,2],\"214\":[null,null,1],\"215\":[null,null,1],\"216\":[2],\"217\":[2,12],\"218\":[2,45],\"219\":[2,28],\"220\":[2,9],\"221\":[null,null,1],\"222\":[null,null,3],\"223\":[2],\"224\":[2,9],\"225\":[2,17],\"226\":[3,16],\"227\":[5,152],\"228\":[null,null,1],\"229\":[null,null,2],\"230\":[3],\"231\":[2,12],\"232\":[2,2],\"233\":[2,5],\"234\":[2,13],\"235\":[null,null,1],\"236\":[null,null,3],\"237\":[2],\"238\":[2,2],\"239\":[2,3],\"240\":[2,11],\"241\":[2,2],\"242\":[2,16],\"243\":[1,6],\"244\":[2,9],\"245\":[2,12],\"246\":[null,null,1],\"247\":[null,null,1],\"248\":[2],\"249\":[2,17],\"250\":[2,1],\"251\":[2,9],\"252\":[2,4],\"253\":[null,null,1],\"254\":[null,null,1],\"255\":[2,20],\"256\":[2,55],\"257\":[2,28],\"258\":[2,19],\"259\":[6,9],\"260\":[3,107],\"261\":[4,42],\"262\":[3,38],\"263\":[3,16],\"264\":[5,61],\"265\":[null,null,1],\"266\":[null,null,1],\"267\":[2,7],\"268\":[2,44],\"269\":[2,37],\"270\":[2,45],\"271\":[null,null,1],\"272\":[null,null,1],\"273\":[2],\"274\":[2,3],\"275\":[2],\"276\":[2,2],\"277\":[2,3],\"278\":[2,25],\"279\":[2,3],\"280\":[2],\"281\":[2,1],\"282\":[4,3],\"283\":[4,54],\"284\":[4,5],\"285\":[2,21],\"286\":[2,5],\"287\":[2,21],\"288\":[2,7],\"289\":[2,11],\"290\":[null,null,1],\"291\":[null,null,1],\"292\":[2],\"293\":[2,8],\"294\":[2,5],\"295\":[2,15],\"296\":[null,null,1],\"297\":[null,null,1],\"298\":[2],\"299\":[2,36],\"300\":[2,7],\"301\":[2,23],\"302\":[2,16],\"303\":[2,23],\"304\":[2,12],\"305\":[null,null,1],\"306\":[null,null,1],\"307\":[2],\"308\":[2,46],\"309\":[3,7],\"310\":[3,8],\"311\":[3,14],\"312\":[2,12],\"313\":[2],\"314\":[1,24],\"315\":[1,8],\"316\":[1,8],\"317\":[3],\"318\":[1,24],\"319\":[2,13],\"320\":[2,42],\"321\":[2,15],\"322\":[3,10],\"323\":[1,31],\"324\":[1,67],\"325\":[1,41],\"326\":[2,21],\"327\":[1,11],\"328\":[null,null,1],\"329\":[null,null,3],\"330\":[2],\"331\":[2,12],\"332\":[5,67],\"333\":[6,9],\"334\":[5,116],\"335\":[null,null,1],\"336\":[null,null,2],\"337\":[2],\"338\":[3,30],\"339\":[3,11],\"340\":[2,17],\"341\":[2,11],\"342\":[2,14],\"343\":[2,5],\"344\":[1,5],\"345\":[1,34],\"346\":[null,null,1],\"347\":[null,null,2],\"348\":[2,5],\"349\":[2,171],\"350\":[2,34],\"351\":[2,30],\"352\":[null,null,1],\"353\":[null,null,2],\"354\":[2],\"355\":[2,1],\"356\":[1,18],\"357\":[1,1],\"358\":[1,18],\"359\":[2,6],\"360\":[1,14],\"361\":[2,44],\"362\":[1,6],\"363\":[1,6],\"364\":[null,null,1],\"365\":[null,null,1],\"366\":[2],\"367\":[2],\"368\":[1,34],\"369\":[1,19],\"370\":[2,6],\"371\":[2,66],\"372\":[3,14],\"373\":[6,35],\"374\":[2,22],\"375\":[null,null,1],\"376\":[null,null,2],\"377\":[2,5],\"378\":[3],\"379\":[1,11],\"380\":[1,31],\"381\":[3],\"382\":[1,18],\"383\":[3,16],\"384\":[3],\"385\":[1,20],\"386\":[1,7],\"387\":[6],\"388\":[2,65],\"389\":[2,41],\"390\":[4,79],\"391\":[2],\"392\":[1],\"393\":[7,12],\"394\":[7,19],\"395\":[7,20],\"396\":[null,null,1],\"397\":[null,null,2],\"398\":[2],\"399\":[2],\"400\":[2,5],\"401\":[2,9],\"402\":[2,18],\"403\":[2,13],\"404\":[2,54],\"405\":[2,103],\"406\":[2],\"407\":[1,29],\"408\":[1,57],\"409\":[null,null,1],\"410\":[null,null,1],\"411\":[2],\"412\":[2,8],\"413\":[1,31],\"414\":[1,47],\"415\":[2,38],\"416\":[2,48],\"417\":[2],\"418\":[3,2],\"419\":[3,4],\"420\":[2,38],\"421\":[1,4],\"422\":[null,null,1],\"423\":[null,null,1],\"424\":[2],\"425\":[2,132],\"426\":[null,null,1],\"427\":[null,null,1],\"428\":[2],\"429\":[6],\"430\":[4,33],\"431\":[2,33],\"432\":[5],\"433\":[4,19],\"434\":[3,26],\"435\":[null,null,1],\"436\":[null,null,2],\"437\":[2],\"438\":[2,6],\"439\":[2,25],\"440\":[2,9],\"441\":[2,9],\"442\":[2,11],\"443\":[2,3],\"444\":[null,null,1],\"445\":[null,null,2],\"446\":[2],\"447\":[1,14],\"448\":[1,18],\"449\":[1,13],\"450\":[1,17],\"451\":[1,19],\"452\":[null,null,1],\"453\":[null,null,1],\"454\":[2],\"455\":[1,61],\"456\":[1,21],\"457\":[null,null,1],\"458\":[null,null,2],\"459\":[4],\"460\":[4,86],\"461\":[3,30],\"462\":[1,10],\"463\":[1,11],\"464\":[null,null,1],\"465\":[null,null,1],\"466\":[3],\"467\":[2],\"468\":[2,21],\"469\":[3,97],\"470\":[1],\"471\":[null,null,1],\"472\":[null,null,2],\"473\":[2],\"474\":[5,3],\"475\":[1,23],\"476\":[3,21],\"477\":[1,59],\"478\":[3,43],\"479\":[null,null,1],\"480\":[null,null,5],\"481\":[3],\"482\":[3,167],\"483\":[null,null,1],\"484\":[null,null,2],\"485\":[6,10],\"486\":[2,10],\"487\":[2,31],\"488\":[2,11],\"489\":[null,null,1],\"490\":[null,null,1],\"491\":[2],\"492\":[2,6],\"493\":[2,6],\"494\":[2,39],\"495\":[null,null,1],\"496\":[null,null,1],\"497\":[2],\"498\":[2,49],\"499\":[2,45],\"500\":[null,null,1],\"501\":[null,null,2],\"502\":[2],\"503\":[2,107],\"504\":[2,60],\"505\":[4],\"506\":[3,26],\"507\":[2,124],\"508\":[null,null,1],\"509\":[null,null,2],\"510\":[3],\"511\":[2,10],\"512\":[3,9],\"513\":[3,155],\"514\":[3,14],\"515\":[null,null,1],\"516\":[null,null,1],\"517\":[2],\"518\":[5,5],\"519\":[2],\"520\":[2,21],\"521\":[2,11],\"522\":[2,5],\"523\":[2,4],\"524\":[4,10],\"525\":[2,27],\"526\":[null,null,1],\"527\":[null,null,1],\"528\":[2],\"529\":[2,42],\"530\":[2,29],\"531\":[2,55],\"532\":[2,23],\"533\":[2,87],\"534\":[2,47],\"535\":[2,4],\"536\":[2,23],\"537\":[null,null,1],\"538\":[null,null,1],\"539\":[2],\"540\":[3,17],\"541\":[5],\"542\":[2,58],\"543\":[1,13],\"544\":[5],\"545\":[2,33],\"546\":[3,12],\"547\":[5],\"548\":[5,33],\"549\":[5,37],\"550\":[5,40],\"551\":[5],\"552\":[3,43],\"553\":[3,21],\"554\":[3],\"555\":[4,74],\"556\":[3,9],\"557\":[3,32],\"558\":[null,null,1],\"559\":[null,null,1],\"560\":[2,19],\"561\":[3,21],\"562\":[2,5],\"563\":[3,43],\"564\":[2],\"565\":[3,43],\"566\":[3,34],\"567\":[2,47],\"568\":[2],\"569\":[3,38],\"570\":[3,40],\"571\":[2],\"572\":[3,14],\"573\":[3,16],\"574\":[2,12],\"575\":[null,null,2],\"576\":[null,null,1],\"577\":[2],\"578\":[2,60],\"579\":[2,84],\"580\":[2,19],\"581\":[1,9],\"582\":[1,14],\"583\":[3,7],\"584\":[null,null,1],\"585\":[null,null,1],\"586\":[5],\"587\":[2,7],\"588\":[6,27],\"589\":[6],\"590\":[2,36],\"591\":[2,21],\"592\":[2,21],\"593\":[6],\"594\":[2,16],\"595\":[4,12],\"596\":[3],\"597\":[4,33],\"598\":[1,14],\"599\":[2,27],\"600\":[2,24],\"601\":[null,null,1],\"602\":[null,null,1],\"603\":[2],\"604\":[2],\"605\":[2,19],\"606\":[6,17],\"607\":[5,75],\"608\":[2],\"609\":[2,15],\"610\":[2,18],\"611\":[2,13],\"612\":[2,7],\"613\":[2,16],\"614\":[2],\"615\":[3,9],\"616\":[3,8],\"617\":[3,9],\"618\":[4,6],\"619\":[3,13],\"620\":[null,null,2],\"621\":[null,null,1],\"622\":[2],\"623\":[2,17],\"624\":[2,8],\"625\":[2,14],\"626\":[2,12],\"627\":[2,13],\"628\":[2,10],\"629\":[2,15],\"630\":[2,28],\"631\":[2,30],\"632\":[2,17],\"633\":[2,6],\"634\":[2,10],\"635\":[2,12],\"636\":[2,8],\"637\":[2,4],\"638\":[2,32],\"639\":[2,5],\"640\":[2,38],\"641\":[2,26],\"642\":[null,null,2],\"643\":[null,null,1],\"644\":[2],\"645\":[1,19],\"646\":[2],\"647\":[2,13],\"648\":[2,28],\"649\":[3,7],\"650\":[2],\"651\":[2,16],\"652\":[2,17],\"653\":[2,22],\"654\":[2,23],\"655\":[2],\"656\":[3,17],\"657\":[2,17],\"658\":[2,26],\"659\":[2,15],\"660\":[2,25],\"661\":[2,39],\"662\":[2,171],\"663\":[2],\"664\":[5,51],\"665\":[3,45],\"666\":[3,37],\"667\":[3,25],\"668\":[4,23],\"669\":[1,24],\"670\":[1,10],\"671\":[null,null,1],\"672\":[null,null,1],\"673\":[3,15],\"674\":[2,12],\"675\":[3,18],\"676\":[3,21],\"677\":[2,4],\"678\":[3,13],\"679\":[3,84],\"680\":[3,66],\"681\":[2,83],\"682\":[2,27],\"683\":[null,null,2],\"684\":[null,null,2],\"685\":[3],\"686\":[2,6],\"687\":[2,3],\"688\":[3,6],\"689\":[2,29],\"690\":[2,12],\"691\":[2,10],\"692\":[4,12],\"693\":[4,7],\"694\":[1],\"695\":[3,3],\"696\":[2,35],\"697\":[2,7],\"698\":[3,33],\"699\":[null,null,2],\"700\":[null,null,1],\"701\":[2],\"702\":[2,5],\"703\":[2],\"704\":[4,14],\"705\":[4,34],\"706\":[5,57],\"707\":[2],\"708\":[4,27],\"709\":[4,27],\"710\":[3,14],\"711\":[3],\"712\":[3,47],\"713\":[3,54],\"714\":[3,30],\"715\":[3],\"716\":[3,37],\"717\":[3,44],\"718\":[3,11],\"719\":[2],\"720\":[3,30],\"721\":[3,11],\"722\":[3,25],\"723\":[3],\"724\":[1,10],\"725\":[1,71],\"726\":[null,null,2],\"727\":[null,null,1],\"728\":[2],\"729\":[2,16],\"730\":[2,6],\"731\":[3,28],\"732\":[2,49],\"733\":[3,29],\"734\":[3,13],\"735\":[2,68],\"736\":[3,31],\"737\":[null,null,2],\"738\":[null,null,1],\"739\":[2],\"740\":[2,6],\"741\":[4],\"742\":[1,22],\"743\":[1,19],\"744\":[1,19],\"745\":[2,4],\"746\":[1,35],\"747\":[4],\"748\":[1,24],\"749\":[1,22],\"750\":[2],\"751\":[1,38],\"752\":[2],\"753\":[1,23],\"754\":[1,21],\"755\":[3,51],\"756\":[3,43],\"757\":[2,47],\"758\":[2,82],\"759\":[null,null,1],\"760\":[null,null,1],\"761\":[2],\"762\":[2,123],\"763\":[2,4],\"764\":[3,6],\"765\":[3,19],\"766\":[3,14],\"767\":[2,28],\"768\":[2],\"769\":[6,43],\"770\":[5,19],\"771\":[2,34],\"772\":[null,null,1],\"773\":[null,null,1],\"774\":[2],\"775\":[2,11],\"776\":[2,194],\"777\":[null,null,1],\"778\":[null,null,2],\"779\":[2],\"780\":[2,9],\"781\":[2,3],\"782\":[2,27],\"783\":[2,30],\"784\":[4,42],\"785\":[null,null,1],\"786\":[null,null,2],\"787\":[2],\"788\":[2,13],\"789\":[2],\"790\":[2,35],\"791\":[2,29],\"792\":[2,33],\"793\":[2,8],\"794\":[null,null,1],\"795\":[null,null,2],\"796\":[2],\"797\":[2,39],\"798\":[2,8],\"799\":[2,74],\"800\":[2,14],\"801\":[null,null,1],\"802\":[null,null,2],\"803\":[2],\"804\":[2,20],\"805\":[2,22],\"806\":[2,89],\"807\":[2],\"808\":[1,11],\"809\":[1,9],\"810\":[null,null,1],\"811\":[null,null,2],\"812\":[2],\"813\":[5,10],\"814\":[3,5],\"815\":[3,5],\"816\":[2,1],\"817\":[2],\"818\":[3],\"819\":[null,null,1],\"820\":[null,null,2],\"821\":[2],\"822\":[2,28],\"823\":[2],\"824\":[9,27],\"825\":[5,25],\"826\":[2],\"827\":[5,75],\"828\":[2,30],\"829\":[null,null,2],\"830\":[null,null,1],\"831\":[2,29],\"832\":[2,22],\"833\":[2,34],\"834\":[2,25],\"835\":[2],\"836\":[2,4],\"837\":[2,13],\"838\":[4,9],\"839\":[4,76],\"840\":[null,null,2],\"841\":[null,null,1],\"842\":[3],\"843\":[2,41],\"844\":[2,100],\"845\":[3,7],\"846\":[2,13],\"847\":[2,54],\"848\":[3,46],\"849\":[2,128],\"850\":[null,null,2],\"851\":[null,null,2],\"852\":[2],\"853\":[5,17],\"854\":[2,43],\"855\":[2,49],\"856\":[3,124],\"857\":[null,null,2],\"858\":[null,null,1],\"859\":[4],\"860\":[2,13],\"861\":[2,98],\"862\":[4,129],\"863\":[3,64],\"864\":[2],\"865\":[2,22],\"866\":[2,8],\"867\":[2,18],\"868\":[null,null,2],\"869\":[null,null,3],\"870\":[2,2],\"871\":[2,6],\"872\":[2,88],\"873\":[2,59],\"874\":[null,null,2],\"875\":[null,null,1],\"876\":[4],\"877\":[2,7],\"878\":[2,12],\"879\":[2,98],\"880\":[3,59],\"881\":[2,34],\"882\":[2,26],\"883\":[null,null,1],\"884\":[null,null,2],\"885\":[3],\"886\":[2,62],\"887\":[2,67],\"888\":[2,55],\"889\":[null,null,2],\"890\":[null,null,2],\"891\":[2],\"892\":[2,18],\"893\":[9,15],\"894\":[2,44],\"895\":[3,5],\"896\":[2,10],\"897\":[2,43],\"898\":[2,59],\"899\":[2,52],\"900\":[4,60],\"901\":[4,21],\"902\":[3,41],\"903\":[5,20],\"904\":[null,null,1],\"905\":[null,null,1],\"906\":[2],\"907\":[3],\"908\":[2,41],\"909\":[3,20],\"910\":[4],\"911\":[4,34],\"912\":[2,38],\"913\":[3],\"914\":[4,12],\"915\":[3,28],\"916\":[2,66],\"917\":[4],\"918\":[3,11],\"919\":[3,48],\"920\":[3,44],\"921\":[3,46],\"922\":[4],\"923\":[4,21],\"924\":[3,66],\"925\":[4,61],\"926\":[null,null,1],\"927\":[null,null,1],\"928\":[2],\"929\":[2,35],\"930\":[3,29],\"931\":[2],\"932\":[1,34],\"933\":[1,30],\"934\":[2,9],\"935\":[1,21],\"936\":[1,14],\"937\":[null,null,1],\"938\":[null,null,1],\"939\":[2],\"940\":[3,9],\"941\":[2,48],\"942\":[2,15],\"943\":[2,28],\"944\":[2,15],\"945\":[3,23],\"946\":[5,23],\"947\":[2,26],\"948\":[null,null,1],\"949\":[null,null,1],\"950\":[1],\"951\":[2,48],\"952\":[2,42],\"953\":[2,45],\"954\":[2,21],\"955\":[3,9],\"956\":[2,7],\"957\":[2,1],\"958\":[1,9],\"959\":[1,47],\"960\":[1,1],\"961\":[1],\"962\":[5,54],\"963\":[null,null,2],\"964\":[null,null,1],\"965\":[1],\"966\":[2,15],\"967\":[2,32],\"968\":[2],\"969\":[1,15],\"970\":[1,6],\"971\":[2,39],\"972\":[1,10],\"973\":[1,2],\"974\":[6],\"975\":[4,13],\"976\":[3,14],\"977\":[3,28],\"978\":[2,16],\"979\":[null,null,2],\"980\":[null,null,1],\"981\":[2],\"982\":[2,7],\"983\":[2,13],\"984\":[2,15],\"985\":[2,35],\"986\":[3,91],\"987\":[null,null,1],\"988\":[null,null,1],\"989\":[2],\"990\":[2,6],\"991\":[2,4],\"992\":[2,42],\"993\":[null,null,1],\"994\":[null,null,1],\"995\":[2,4],\"996\":[2,22],\"997\":[2,34],\"998\":[2,25],\"999\":[2],\"1000\":[2,4],\"1001\":[2,13],\"1002\":[4,9],\"1003\":[4,76],\"1004\":[null,null,1],\"1005\":[null,null,1],\"1006\":[3],\"1007\":[3,7],\"1008\":[2,13],\"1009\":[2,79],\"1010\":[2,128],\"1011\":[null,null,1],\"1012\":[null,null,2],\"1013\":[2],\"1014\":[2,12],\"1015\":[2,18],\"1016\":[2,7],\"1017\":[2,17],\"1018\":[null,null,1],\"1019\":[null,null,1],\"1020\":[2],\"1021\":[2,22],\"1022\":[2,14],\"1023\":[2,27],\"1024\":[2,22],\"1025\":[2,11],\"1026\":[null,null,1],\"1027\":[null,null,1],\"1028\":[2],\"1029\":[2,27],\"1030\":[2,25],\"1031\":[2,11],\"1032\":[1,15],\"1033\":[1,51],\"1034\":[1,10],\"1035\":[1,34],\"1036\":[2,46],\"1037\":[null,null,1],\"1038\":[null,null,1],\"1039\":[2],\"1040\":[1,87],\"1041\":[1,7],\"1042\":[null,null,1],\"1043\":[null,null,1],\"1044\":[2],\"1045\":[1,39],\"1046\":[2],\"1047\":[2],\"1048\":[2,20],\"1049\":[2,129],\"1050\":[2,157],\"1051\":[4,25],\"1052\":[3,19],\"1053\":[3,6],\"1054\":[null,null,2],\"1055\":[null,null,2],\"1056\":[2],\"1057\":[2,75],\"1058\":[2],\"1059\":[1,157],\"1060\":[2,32],\"1061\":[2,25],\"1062\":[2,22],\"1063\":[2,115],\"1064\":[3,85],\"1065\":[2,5],\"1066\":[null,null,2],\"1067\":[null,null,2],\"1068\":[2],\"1069\":[4,32],\"1070\":[6],\"1071\":[3,30],\"1072\":[2],\"1073\":[6,23],\"1074\":[4,23],\"1075\":[2],\"1076\":[6,18],\"1077\":[1,18],\"1078\":[6,19],\"1079\":[1,13],\"1080\":[3],\"1081\":[4,22],\"1082\":[5,14],\"1083\":[6],\"1084\":[3,21],\"1085\":[7,14],\"1086\":[2],\"1087\":[3,15],\"1088\":[3,37],\"1089\":[2,17],\"1090\":[null,null,2],\"1091\":[null,null,2],\"1092\":[3],\"1093\":[2,15],\"1094\":[2,188],\"1095\":[2],\"1096\":[null,null,2],\"1097\":[null,null,2],\"1098\":[2,63],\"1099\":[2],\"1100\":[2,98],\"1101\":[2,38],\"1102\":[2,67],\"1103\":[2,117],\"1104\":[2,74],\"1105\":[null,null,2],\"1106\":[null,null,2],\"1107\":[2],\"1108\":[2,15],\"1109\":[2],\"1110\":[2,33],\"1111\":[2,58],\"1112\":[2,76],\"1113\":[2],\"1114\":[2,5],\"1115\":[2,5],\"1116\":[3,6],\"1117\":[2,5],\"1118\":[3,6],\"1119\":[3,7],\"1120\":[3,7],\"1121\":[2,5],\"1122\":[2,5],\"1123\":[2,7],\"1124\":[2,54],\"1125\":[2,4],\"1126\":[2],\"1127\":[2,5],\"1128\":[2,5],\"1129\":[3,6],\"1130\":[2,5],\"1131\":[3,6],\"1132\":[3,7],\"1133\":[3,7],\"1134\":[2,5],\"1135\":[2,5],\"1136\":[2,7],\"1137\":[2,18],\"1138\":[null,null,2],\"1139\":[null,null,2],\"1140\":[6,10],\"1141\":[9],\"1142\":[2,20],\"1143\":[7,25],\"1144\":[5,29],\"1145\":[6],\"1146\":[6,27],\"1147\":[2,70],\"1148\":[4],\"1149\":[5,22],\"1150\":[3,25],\"1151\":[2,24],\"1152\":[5,18],\"1153\":[4],\"1154\":[3,11],\"1155\":[3,26],\"1156\":[6,20],\"1157\":[null,null,2],\"1158\":[null,null,3],\"1159\":[4],\"1160\":[5],\"1161\":[4,34],\"1162\":[2,22],\"1163\":[2,12],\"1164\":[2,32],\"1165\":[2],\"1166\":[2,19],\"1167\":[2,24],\"1168\":[2],\"1169\":[4,22],\"1170\":[4,14],\"1171\":[2,17],\"1172\":[3,31],\"1173\":[2,23],\"1174\":[null,null,2],\"1175\":[null,null,3],\"1176\":[1],\"1177\":[2,22],\"1178\":[2,7],\"1179\":[2,8],\"1180\":[2,56],\"1181\":[2],\"1182\":[1,25],\"1183\":[1,27],\"1184\":[null,null,3],\"1185\":[null,null,3],\"1186\":[1,8],\"1187\":[2,103],\"1188\":[2,118],\"1189\":[2,85],\"1190\":[null,null,2],\"1191\":[null,null,2],\"1192\":[1],\"1193\":[3,37],\"1194\":[2,210],\"1195\":[null,null,2],\"1196\":[null,null,2],\"1197\":[2],\"1198\":[2,129],\"1199\":[null,null,2],\"1200\":[null,null,2],\"1201\":[1,15],\"1202\":[3,61],\"1203\":[3,44],\"1204\":[null,null,3],\"1205\":[null,null,2],\"1206\":[1],\"1207\":[2,131],\"1208\":[2,85],\"1209\":[2,77],\"1210\":[2],\"1211\":[null,null,2],\"1212\":[null,null,1],\"1213\":[2],\"1214\":[null,null,2],\"1215\":[null,null,1],\"1216\":[2],\"1217\":[2,49],\"1218\":[2,24],\"1219\":[2,16],\"1220\":[2,81],\"1221\":[4,94],\"1222\":[null,null,2],\"1223\":[null,null,1],\"1224\":[2],\"1225\":[2,105],\"1226\":[1,36],\"1227\":[2,43],\"1228\":[3],\"1229\":[2,113],\"1230\":[2,96],\"1231\":[null,null,2],\"1232\":[null,null,1],\"1233\":[2],\"1234\":[2,21],\"1235\":[1,27],\"1236\":[2,106],\"1237\":[4,89],\"1238\":[null,null,2],\"1239\":[null,null,1],\"1240\":[2,22],\"1241\":[4,111],\"1242\":[4,97],\"1243\":[null,null,2],\"1244\":[null,null,2],\"1245\":[2],\"1246\":[null,null,1],\"1247\":[null,null,1],\"1248\":[2],\"1249\":[null,null,3],\"1250\":[null,null,1],\"1251\":[2],\"1252\":[null,null,3],\"1253\":[null,null,1],\"1254\":[1],\"1255\":[2,16],\"1256\":[2],\"1257\":[2,69],\"1258\":[2,49],\"1259\":[2,48],\"1260\":[null,null,2],\"1261\":[null,null,1],\"1262\":[1],\"1263\":[2,19],\"1264\":[2],\"1265\":[2,57],\"1266\":[2,81],\"1267\":[null,null,2],\"1268\":[null,null,1],\"1269\":[2],\"1270\":[3,24],\"1271\":[1,46],\"1272\":[1,25],\"1273\":[1,63],\"1274\":[1,171],\"1275\":[2,116],\"1276\":[1,135],\"1277\":[null,null,1],\"1278\":[null,null,3],\"1279\":[2],\"1280\":[2,96],\"1281\":[2,76],\"1282\":[3,99],\"1283\":[null,null,1],\"1284\":[null,null,3],\"1285\":[2],\"1286\":[3,67],\"1287\":[3,60],\"1288\":[3,67],\"1289\":[3,68],\"1290\":[null,null,1],\"1291\":[null,null,3],\"1292\":[2,205],\"1293\":[null,null,1],\"1294\":[null,null,3],\"1295\":[2],\"1296\":[2,5],\"1297\":[2,86],\"1298\":[2,32],\"1299\":[1,152],\"1300\":[1,86],\"1301\":[null,null,1],\"1302\":[null,null,3],\"1303\":[2,190],\"1304\":[null,null,1],\"1305\":[null,null,4],\"1306\":[2],\"1307\":[3,90],\"1308\":[3,76],\"1309\":[4,80],\"1310\":[null,null,1],\"1311\":[null,null,3],\"1312\":[2],\"1313\":[5,93],\"1314\":[3,57],\"1315\":[null,null,1],\"1316\":[null,null,4],\"1317\":[1],\"1318\":[null,null,2],\"1319\":[null,null,1],\"1320\":[2],\"1321\":[2,10],\"1322\":[2,3],\"1323\":[1,4],\"1324\":[2,23],\"1325\":[2,9],\"1326\":[2,11],\"1327\":[1,5],\"1328\":[2,16],\"1329\":[2,22],\"1330\":[3,8],\"1331\":[5,31],\"1332\":[2,9],\"1333\":[2,4],\"1334\":[2],\"1335\":[4,53],\"1336\":[2,23],\"1337\":[1,21],\"1338\":[1,33],\"1339\":[3,71],\"1340\":[3,66],\"1341\":[2,68],\"1342\":[null,null,2],\"1343\":[null,null,1],\"1344\":[2],\"1345\":[2,54],\"1346\":[2],\"1347\":[3,8],\"1348\":[3,62],\"1349\":[null,null,2],\"1350\":[null,null,1],\"1351\":[1],\"1352\":[2,67],\"1353\":[2,83],\"1354\":[2,115],\"1355\":[null,null,2],\"1356\":[null,null,1],\"1357\":[2],\"1358\":[2,16],\"1359\":[2,14],\"1360\":[2,6],\"1361\":[null,null,1],\"1362\":[null,null,2],\"1363\":[2],\"1364\":[4,61],\"1365\":[6,53],\"1366\":[3,86],\"1367\":[null,null,1],\"1368\":[null,null,2],\"1369\":[2],\"1370\":[null,null,2],\"1371\":[null,null,1],\"1372\":[2],\"1373\":[null,null,2],\"1374\":[null,null,1],\"1375\":[2],\"1376\":[2,89],\"1377\":[2,65],\"1378\":[2,53],\"1379\":[2,78],\"1380\":[2,69],\"1381\":[null,null,1],\"1382\":[null,null,3],\"1383\":[2],\"1384\":[2,88],\"1385\":[2,71],\"1386\":[null,null,1],\"1387\":[null,null,3],\"1388\":[2],\"1389\":[2,10],\"1390\":[2,97],\"1391\":[2,25],\"1392\":[3,11],\"1393\":[3,82],\"1394\":[3,19],\"1395\":[2,108],\"1396\":[null,null,2],\"1397\":[null,null,1],\"1398\":[2],\"1399\":[2,54],\"1400\":[2,57],\"1401\":[null,null,1],\"1402\":[2],\"1403\":[4,111],\"1404\":[null,null,2],\"1405\":[null,null,1],\"1406\":[1],\"1407\":[null,null,2],\"1408\":[null,null,1],\"1409\":[1],\"1410\":[1],\"1411\":[1],\"1412\":[1],\"1413\":[1],\"1414\":[1],\"1415\":[1],\"1416\":[1],\"1417\":[1],\"1418\":[1],\"1419\":[1],\"1420\":[1],\"1421\":[1],\"1422\":[1],\"1423\":[1],\"1424\":[1],\"1425\":[1],\"1426\":[1],\"1427\":[1],\"1428\":[1],\"1429\":[1],\"1430\":[1],\"1431\":[1],\"1432\":[1],\"1433\":[1],\"1434\":[1],\"1435\":[1],\"1436\":[1],\"1437\":[1],\"1438\":[1],\"1439\":[1],\"1440\":[1],\"1441\":[1]},\"averageFieldLength\":[2.3280981008969763,31.080457780288654,1.3245259593730343],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"python工程师，也略懂前端\",\"在做一个python自动化框架，项目叫orderlines，愿望是让业务流程尽可能自动化、让业务流程井然有序。\",\"目前已经支持测试API、UI、桌面基本自动化操作，Devops才是我的最终目标。朋友们一起加油！！！\"]},\"1\":{\"h\":\"博客\",\"t\":[\"This is a blog home page demo.\",\"To use this layout, you should set both layout: BlogHome and home: true in the page front matter.\",\"For related configuration docs, please see blog homepage.\"]},\"2\":{\"h\":\"1、Sonar Qube基础使用\"},\"3\":{\"c\":[\"devops\",\"sonar qube\"]},\"4\":{\"c\":[\"sonar qebe\"]},\"5\":{\"h\":\"2、不仅是代码仓的Gitlab\"},\"6\":{\"c\":[\"devops\",\"gitlab\"]},\"7\":{\"c\":[\"gitlab\"]},\"8\":{\"h\":\"3、Jenkins创建和Jenkins pipeline\"},\"9\":{\"c\":[\"devops\",\"jenkins\"]},\"10\":{\"c\":[\"jenkins\"]},\"11\":{\"h\":\"4、Jfrog和制品仓\"},\"12\":{\"c\":[\"devops\",\"jfrog\"]},\"13\":{\"c\":[\"jfrog\"]},\"14\":{\"h\":\"5、docker基础使用\"},\"15\":{\"c\":[\"devops\",\"docker\"]},\"16\":{\"c\":[\"docker\"]},\"17\":{\"h\":\"6、持续交付中的探索验证环\"},\"18\":{\"h\":\"一、什么是持续交付\",\"t\":[\"《持续交付2.0》是一本由乔梁所著的书籍，它深入探讨了如何在现代软件开发环境中实施持续交付。\",\"持续交付是建立在“可持续地快速发布软件服务”和“最小化可行产品”两种理念基础之上，强调要以业务为导向，从一开始就将业务问题进行分解，并通过不断的科学探索与快速验证，减少浪费的同时，快速找到正确的业务前进方向。其涉及组织中的多个团队，需要各个团队之间紧密合作。\",\"“持续交付”的4个核心工作原则是坚持少做、持续分解问题、坚持快速反馈和持续改进并衡量。只有这样，才能不断缩短持续交付“8”字环的运行周期，提升用户反馈速度，从而提高业务的敏捷性。这要求管理者跳出原有软件交付管理思维模式，摆脱“害怕失败”的恐惧感，拥抱“科学探索—快速验证”思维方法，快速试错，提升持续交付能力，进而发展现有业务，并快速开创新业务。\"]},\"19\":{\"h\":\"二、探索环和验证环\",\"t\":[\"image-20250317101651068\",\"阅读《持续交付2.0》，我对DevOps文化和持续交付有了更深层次的理解，尤其是书中提出的探索验证8字环模型，给我留下了深刻的印象。这个模型不仅提供了一种新的视角来看待软件开发过程，而且也揭示了如何有效地结合DevOps实践来加速价值传递，同时确保产品质量。\"]},\"20\":{\"h\":\"探索环\",\"t\":[\"探索环中的四个关键环节——提问、锚定、共创和精炼，为团队提供了一个结构化的方法来识别问题并寻找解决方案。首先，“提问”鼓励团队质疑现状，识别出需要改进的地方；其次，“锚定”帮助设定明确的目标，让团队有一个清晰的方向；然后，“共创”促进团队成员之间的合作，利用各自的专业知识共同设计解决方案；最后，“精炼”则是对这些方案进行优化和完善，确保它们能够被实际应用。\",\"探索环中有3个基本原则分别为\",\"分解并快速试错。将大问题分解为小问题，快速试错\",\"一次验证一点。每次只验证一个假设，避免过度复杂\",\"允许失败。勇于尝试，从失败中学习\"]},\"21\":{\"h\":\"验证环\",\"t\":[\"与探索环相辅相成的是验证环，它包括构建、测试、部署和监控等步骤。这一环强调了通过自动化的手段来加快软件从开发到上线的过程，并通过实时监控来保证系统的稳定性和可靠性。这种闭环式的反馈机制使得团队能够快速响应变化，及时调整策略以适应新的需求或挑战。\",\"构建环节是将自然语言的描述转换成计算机可执行的软件，即“质量达标的软件包”\",\"运行环节的任务就是将软件包部署于生产环境，并让它对外提供服务\",\"监测环节收集数据，并统计展现结果、及时发现生产系统问题以及业务指标的异常波动，并做出适当的反应\",\"决策是指收到真实的业务数据反馈结果后，根据探索环中已确定的相应衡量指标进行对比分析，从而验证是否符合最初的预期\",\"验证环的目标是让质量可靠的解决方案以最快的速度到达客户手中，从而收集并分析真实的反馈。验证环的主要工作内容是将最小可行性解决方案从描述性语言转换成可运行的软件包，并将其部署到生产环境中运行，准确收集相关数据并呈现，以便团队根据相关数据做出判断和决策。\"]},\"22\":{\"h\":\"三、关于验证环四个工作原则的思考\",\"t\":[\"质量内建、消除等待、重复事务自动化和监测一切是验证环的四个工作原则。这些原则不仅为提高软件交付的速度和效率提供了指导，同时也强调了确保产品和服务质量的重要性。\"]},\"23\":{\"h\":\"1、质量内建\",\"t\":[\"书中提到的第一个原则是“质量内建”，这一理念彻底改变了我对软件质量的看法。传统上，质量保证往往被视为开发流程的最后一环，通常由专门的测试团队来执行。然而，《持续交付2.0》提出应该从项目的最初阶段就将质量作为核心考虑因素，并通过全员参与的方式在整个开发过程中持续关注和提升产品质量。这种方法不仅能够减少后期修复错误的成本，还能显著提高客户的满意度。\"]},\"24\":{\"h\":\"2、消除等待\",\"t\":[\"第二个原则是“消除等待”。任何项目中不可避免地会存在各种各样的等待时间，比如等待代码审查、等待环境准备或是等待测试结果等。这些等待时间不仅降低了工作效率，还可能导致团队士气低落。书中提倡通过优化流程、增加并行任务以及利用技术手段（如自动化）来尽可能地减少或消除这些不必要的等待时间，从而加快整个交付过程。\"]},\"25\":{\"h\":\"3、重复事务自动化\",\"t\":[\"第三个原则，“重复事务自动化”，则是指对于那些重复性高且容易出错的任务应尽量实现自动化。这包括但不限于构建、部署、测试等环节。自动化的引入不仅能极大提高工作效率，降低人为错误的可能性，同时也有助于建立一个可靠且可重复的交付流程，这对于快速迭代和响应市场变化至关重要。\"]},\"26\":{\"h\":\"4、监测一切\",\"t\":[\"最后一个原则是“监测一切”。在这个数据驱动的时代，有效的监控系统对于及时发现问题、快速定位故障原因以及保障服务稳定性具有不可替代的作用。书中强调了不仅要监测应用本身的性能指标，还需要关注基础设施健康状况、用户行为等多个维度的数据。通过对这些信息的分析，可以帮助团队做出更加明智的决策，进一步提升产品质量和服务水平。\",\"总的来说，《持续交付2.0》为我们提供了一套非常实用的工作指南，尤其是验证环的四个工作原则，它们不仅是理论上的建议，更是可以直接应用于日常工作中的有效策略。这本书使我认识到，在追求高效交付的同时，保持高质量标准同样重要，而这一切都需要团队成员之间的紧密协作以及对最新技术和工具的灵活运用。通过学习这些原则，我相信可以更好地应对未来的挑战，推动软件开发向更高的层次发展。\"]},\"27\":{\"c\":[\"devops\"]},\"28\":{\"c\":[\"devops\"]},\"29\":{\"h\":\"7、持续交付是大家的事\"},\"30\":{\"h\":\"一、持续交付不仅仅是工程师的事\",\"t\":[\"阅读《持续交付2.0》后，我深刻意识到，持续交付绝不仅仅是一个技术方案或流程工具，而是一场需要全员参与的组织文化革命。我建立了流水线就是持续交付了吗？我建立了完整的开发测试运维团队就是devops了吗？写了自动化就是devops了吗？\",\"“持续交付双环模型”涉及企业内多个部门与角色的合作，需要相适应的企业文化。企业领导者必须成为这一变革的领导者，建立与之相适应的企业文化。说白了，如果一个工程师有很多的想法，如果领导保守不允许失败，那么这件事是必然失败的。\",\"**失败是安全的：**组织应建立允许失败的文化，试验结果不应该用于直接评判个人，否则会使组织成员在设计方案时倾向于“为了证真而设计”，而非“为了证伪”。\",\"**相互信任：**相互信任是高效合作的基础，也是组织凝聚力和成员士气的基础。如果组织成员之间缺乏信任，那么很容易出现相互猜忌、相互指责的现象，用不了多久，就会影响成员在组织内的安全感，降低工作效率。\",\"**持续改善：**持续改善文化的特点是“人人参与”和“时时改善”。“人人参与”是指“持续改善”不应该只是组织中某个角色的责任，而应该是所有人的责任。“时时改善”是指“持续改善”应该是一项日常工作，而不应该只在特定时间或条件下才发生。\"]},\"31\":{\"h\":\"二、打破“孤岛”，构建全员参与的交付生态\",\"t\":[\"在传统开发模式中，软件交付往往被割裂为“开发-测试-运维”的线性流程，每个环节由不同团队负责，彼此之间缺乏有效沟通。这种“孤岛文化”导致需求理解偏差、交付周期冗长、质量问题频发。而持续交付的核心，正是要打破这种割裂，将交付视为一个端到端的价值流，需要所有角色共同参与。\",\"例如：\",\"产品团队需明确需求并优先级排序，避免“半成品”进入开发；\",\"开发团队需编写可测试、可维护的代码，并主动参与自动化构建；\",\"运维团队需提供稳定环境，与开发协作实现基础设施即代码；\",\"测试团队需将测试左移，与开发共同设计自动化测试用例；\",\"客户与市场团队需及时反馈用户需求与使用数据，形成闭环。\",\"这种全员参与的模式，本质上是将“交付”从技术部门的“单打独斗”转变为全组织的“共同责任”。正如书中所言：“持续交付的失败，往往始于‘这不是我的问题’的思维。”\"]},\"32\":{\"h\":\"三、组织文化的三大支柱：信任、透明与共享目标\",\"t\":[\"持续交付的落地，需要组织文化提供三根“支柱”作为支撑：\",\"信任文化：从“问责”到“共担” 传统组织中，一旦出现故障，往往习惯于“问责”某个人或部门。而在持续交付文化中，故障被视为改进的机会，而非指责的借口。例如，当部署失败时，团队更关注如何通过自动化回滚、日志分析等手段快速恢复，而非追究责任。这种“共担风险”的信任，能消除部门间的推诿，鼓励团队主动暴露问题并协作解决。\",\"透明文化：信息共享与可视化 持续交付依赖于实时、透明的信息流动。通过构建可视化价值流（如看板、仪表盘），团队可以清晰看到代码提交、构建状态、测试结果、部署进度等全流程信息。这种透明不仅让每个人了解自己的工作如何影响整体交付，也便于快速定位瓶颈。例如，若测试环节持续阻塞交付，团队可立即分析是测试用例不足，还是环境配置问题，而非等待“责任人”汇报。\",\"共享目标：从“局部最优”到“全局成功” 在持续交付中，所有角色的目标必须统一：快速、安全地将价值交付给用户。这要求打破部门KPI的割裂，例如：\",\"运维团队不再以“系统稳定”为唯一目标，而需在稳定性与交付速度间找到平衡；\",\"测试团队不再追求“缺陷数量最大化”，而是与开发协作减少缺陷的产生；\",\"产品经理需理解技术债务对交付的影响，合理规划迭代范围。\"]},\"33\":{\"h\":\"四、文化变革的挑战与实践路径\",\"t\":[\"尽管理念清晰，但推动“持续交付是大家的事”绝非易事。常见的阻力包括：\",\"惯性思维：团队习惯于“我的职责仅限于此”，不愿跨出舒适区；\",\"工具依赖误区：认为引入CI/CD工具即可实现持续交付，忽视文化变革；\",\"短期利益冲突：某些部门可能因短期效率或成本压力，拒绝参与协作。\",\"对此，我总结了以下实践建议：\",\"从“小步快跑”开始：选择一个关键项目或团队试点，通过快速交付的成果证明协作的价值，形成示范效应；\",\"建立共同语言：通过培训、工作坊让全员理解持续交付的目标与方法论，例如用“价值流映射”工具暴露协作中的痛点；\",\"领导层的躬身入局：高管需以身作则，例如参与回顾会议、为跨部门协作扫清障碍，而非仅停留在口号层面；\",\"奖励协作而非个人英雄主义：将团队交付速度、稳定性等指标纳入绩效考核，而非仅奖励个人技术能力。\"]},\"34\":{\"h\":\"五、我的观点：持续交付是组织进化的“照妖镜”\",\"t\":[\"我认为，“持续交付是大家的事”不仅是方法论，更是一面“照妖镜”，照出组织文化中隐藏的短板。例如：\",\"若交付流程中频繁出现阻塞，可能是信息不透明或责任不清；\",\"若自动化程度低，可能是团队对技术投资缺乏共识；\",\"若质量反复出现问题，可能是质量内建文化尚未建立。\",\"因此，持续交付的真正价值，不在于缩短了多少交付时间，而在于它迫使组织直面文化问题，通过持续改进实现整体进化。正如书中所言：“持续交付是一面镜子，映照出团队的协作能力、工具链的成熟度，以及组织文化的健康程度。”\"]},\"35\":{\"c\":[\"devops\"]},\"36\":{\"c\":[\"devops\"]},\"37\":{\"h\":\"8、流水线是持续交付的心脏\",\"t\":[\"在阅读《持续交付2.0》的过程中，书中对“流水线的部署”的阐述让我深刻意识到：自动化部署流水线不仅是技术工具，更是持续交付体系的“心脏”。它将开发、测试、交付等环节串联为一个无缝衔接的价值流，是实现“持续交付是大家的事”这一理念的核心载体。\"]},\"38\":{\"h\":\"一、流水线部署：持续交付的“技术骨架”\",\"t\":[\"书中指出，流水线的部署是验证环中的关键环节，它通过自动化将代码从开发到生产环境的路径标准化、可重复化。这一过程本质上是将“交付”从手工操作转化为机器可执行的流程，从而消除人为失误、缩短交付周期、提升可靠性。\"]},\"39\":{\"h\":\"1. 流水线的“三重价值”\",\"t\":[\"标准化：定义统一的构建、测试、部署规则，确保不同环境（开发、测试、生产）的一致性，避免“在我的机器上能跑”这类经典问题。\",\"加速反馈：通过快速构建和测试，让团队在代码提交后几分钟内就能看到结果，减少等待时间，加速问题定位。\",\"降低风险：将部署过程转化为可回滚的、可追溯的自动化操作，减少人为干预导致的意外故障。\"]},\"40\":{\"h\":\"2. 流水线的“分层设计”\",\"t\":[\"书中提到，流水线通常分为多个阶段：\",\"构建阶段：编译代码、生成可执行文件；\",\"测试阶段：单元测试、集成测试、性能测试；\",\"部署阶段：将代码推送到测试环境、预生产环境、生产环境；\",\"监控阶段：部署后的健康检查与指标追踪。\",\"这种分层设计体现了“质量内建”的原则——在早期阶段拦截缺陷，避免问题蔓延到生产环境。例如，若单元测试失败，流水线立即停止，避免资源浪费。\"]},\"41\":{\"h\":\"二、流水线部署的挑战与实践启示\",\"t\":[\"尽管流水线部署的理论清晰，但在实际落地中，仍面临诸多挑战，书中对此也提供了深刻的洞见：\"]},\"42\":{\"h\":\"1. “自动化陷阱”：工具 ≠ 流程\",\"t\":[\"误区：许多团队误以为安装了Jenkins、GitLab CI或GitHub Actions等工具就完成了流水线部署，却忽视了流程设计、环境一致性、权限管理等关键问题。\",\"启示：流水线的成败取决于流程的合理性与团队协作。例如，若测试环境与生产环境配置不一致，即使流水线自动化程度再高，也无法保证部署的可靠性。\"]},\"43\":{\"h\":\"2. “左移与右移”：流水线中的全生命周期管理\",\"t\":[\"左移（Shift-Left）：将测试、验证环节尽可能左移到开发阶段，例如通过静态代码分析、单元测试减少后期问题。\",\"右移（Shift-Right）：在部署后持续监控生产环境，通过日志、指标、用户行为数据快速反馈，形成闭环。\",\"书中观点：流水线不仅是“代码到生产”的单向流程，更是贯穿整个软件生命周期的反馈环。\"]},\"44\":{\"h\":\"3. “环境即代码”：基础设施的自动化\",\"t\":[\"书中强调，流水线的部署必须与基础设施的自动化结合（如IaC，Infrastructure as Code）。例如，通过Terraform或CloudFormation定义环境配置，确保每次部署的环境一致性，避免“环境雪崩”问题。\"]},\"45\":{\"h\":\"4. “安全与合规的融入”\",\"t\":[\"现代流水线还需将安全扫描（如SAST/DAST）、合规检查（如数据隐私政策）嵌入到流程中，确保交付的不仅是功能，更是安全、合规的价值。\"]},\"46\":{\"h\":\"三、我的观点：流水线部署是文化变革的“试金石”\",\"t\":[\"在我看来，流水线的部署不仅是技术实践，更加是组织文化的体现。流水线的结果也就是软件包既是持续集成的结束，也是持续交互的开始。测试从流水线中拿到软件包进行测试，测试完成后进行部署。所以流水线必须要快速体现结果，稳定运行，结果可信。因此我觉得流水线要有以下几个特点\",\"**一次部署，多次使用：**当某个部署流水线的一次运行实例构建出制品，如果需要，它就应该直接被用于该流水线后续阶段的构建过程，而不是在后续阶段中被再次重复构建。\",\"**并行化原则：**并行首先会节省时间，节省团队对于结果的等待时间，持续交互中最重要的一点就是节省等待。\",\"**快速反馈优先：**在资源不足的情况下，部署流水线应该让那些提供快速反馈的任务尽早执行。\",\"**重要反馈优先：**对于反馈机制，不能只因其执行速度慢，就把它放在后面执行。\",\"当部署完成流水线后如何才能让开发自己触发流水线，并且自己可以快速分析流水线结果，如果是开发的问题，开发如何快速排查，快速定位，定位完成后如果需要流水线开发人员快速修改，这里其实是非常重要的。\",\"《持续交付2.0》让我深刻认识到，流水线的部署绝非简单的“工具堆砌”，而是一场技术与文化的双重革命。它要求团队以终为始，将交付视为一个可预测、可信赖的过程，并通过自动化、标准化和透明化，让“持续交付是大家的事”从口号变为现实。\",\"流水线的部署，正是这场竞争的基石——它不仅是技术的胜利，更是组织敏捷性的终极体现。正如书中所言：“流水线的每一次绿色通过，都是团队协作与文化进化的勋章。”\"]},\"47\":{\"c\":[\"devops\"]},\"48\":{\"c\":[\"devops\"]},\"49\":{\"h\":\"9、持续集成、快速反馈\",\"t\":[\"持续集成（Continuous Integration, CI）不仅是技术实践，更是构建高质量软件和高效团队协作的基石。它通过频繁的代码集成、自动化构建与测试，将开发过程中的风险前置，为持续交付奠定了坚实的基础。以下结合书中观点与个人思考，思考持续集成的意义、挑战与启示。\"]},\"50\":{\"h\":\"一、持续集成的核心：频繁集成，快速反馈\",\"t\":[\"书中指出，持续集成的核心原则是开发人员每天多次将代码集成到主干，并通过自动化构建和测试快速验证代码的正确性。这一过程打破了传统开发中“各自为战”的模式，将分散的代码变更整合为一个稳定、可运行的整体。\"]},\"51\":{\"h\":\"1. 频繁集成的意义\",\"t\":[\"减少冲突与技术债务：频繁合并代码可以避免因长时间分支隔离导致的代码冲突，减少合并时的修复成本。例如，书中提到，若开发人员每周才合并一次代码，可能因大量变更堆积而难以定位问题。\",\"早期暴露缺陷：通过自动化测试在代码提交后立即运行，能快速发现兼容性、逻辑错误等问题，避免问题在后期蔓延到更复杂的系统中。\",\"提升代码质量：持续集成迫使团队关注代码的可测试性、可维护性，例如通过单元测试、静态代码分析等手段，推动代码质量的持续改进。\"]},\"52\":{\"h\":\"2. 自动化构建与测试：不可替代的“守门人”\",\"t\":[\"书中强调，持续集成的自动化流程是关键。无论是编译、打包、单元测试，还是集成测试，都需通过工具（如Jenkins、GitLab CI、GitHub Actions等）实现标准化和可重复化。例如：\",\"构建标准化：确保所有开发人员在相同环境中构建代码，避免“在我的机器上能跑”的问题；\",\"测试左移：将测试嵌入到开发早期阶段，例如通过TDD（测试驱动开发）或BDD（行为驱动开发），让测试成为设计的一部分。\"]},\"53\":{\"h\":\"二、持续集成的挑战与实践启示\",\"t\":[\"尽管持续集成的理念清晰，但在实际落地中仍面临诸多挑战，书中对此提供了深刻的洞见：\"]},\"54\":{\"h\":\"1. “自动化陷阱”：工具 ≠ 流程\",\"t\":[\"误区：许多团队将CI工具的安装等同于持续集成的实现，却忽视了流程设计、测试覆盖率、团队协作等关键问题。例如，若测试用例不足或质量低下，即使工具自动化程度再高，也无法保障代码质量。\",\"启示：持续集成的成败取决于流程与文化的结合。例如，团队需共同制定代码提交规范、测试标准，并通过代码审查确保代码风格和质量的一致性。\"]},\"55\":{\"h\":\"2. “主干恐惧症”：对频繁集成的抵触\",\"t\":[\"书中提到，部分团队因害怕频繁集成导致主干不稳定，而选择长期维护分支。这种“主干恐惧症”暴露了团队对自动化测试和代码质量的不自信。破解这一困境需要：\",\"建立“可合并文化”：通过自动化测试和代码审查，让团队相信“通过测试的代码是安全的”；\",\"小步快跑：鼓励开发人员将大功能拆分为小增量，逐步集成，降低风险。\"]},\"56\":{\"h\":\"3. “测试的深度与广度”\",\"t\":[\"持续集成的测试需在效率与覆盖之间取得平衡。书中建议：\",\"分层测试策略：单元测试（快速、高频）保障代码模块正确性，集成测试验证模块间协作，性能测试确保系统负载能力；\",\"避免“测试过载”：若测试执行时间过长，会拖慢反馈速度，需通过并行测试、优化测试用例等方式提升效率。\"]},\"57\":{\"h\":\"4. “环境一致性”：从开发到生产的无缝衔接\",\"t\":[\"书中强调，持续集成需与基础设施的自动化结合（如IaC，基础设施即代码），确保开发、测试、生产环境的一致性。例如，通过Docker容器或云平台模板定义环境配置，避免“环境雪崩”问题。\"]},\"58\":{\"h\":\"三、我的观点：持续集成是团队协作的“照妖镜”\",\"t\":[\"在我看来，持续集成不仅是技术实践，更是团队协作的“照妖镜”，它暴露了开发流程中的深层问题：\",\"代码质量的放大镜：若频繁集成导致构建失败率高，可能反映团队对测试重视不足或代码设计缺陷；\",\"沟通的放大器：若集成失败后团队互相推诿，而非共同解决问题，说明协作文化亟待改进；\",\"流程的优化者：通过分析构建失败的类型和频率，可以定位流程中的瓶颈（如测试用例不足、依赖管理混乱）。\",\"我的上一份工作也就是持续集成部门。我们的领导说过一句话我至今都印象非常深刻。他说“因为人就算再细心都会犯错，所以为我们需要流程来规范每个同事，一旦犯错我们可以考虑流程的优化，而不是把问题归结为个人，这既是对于人的保护，也是流程的建立和优化”。持续集成这个部门干的不就是这件事吗？\",\"代码发布，版本变更这是对于一个公司来说非常重要的一件事，每个人都需要非常认真的对待版本，要有一颗敬畏版本的心，无论是代码提交时的代码质量流水线，还是提交合并的代码审查，以及流水线的冒烟用例，还是后面测试团队的测试，哪一步都是非常重要的。我至今还记得每一次提交我都是保持着一颗敬畏之心，都是测试很多遍才肯定提交代码。\"]},\"59\":{\"c\":[\"devops\"]},\"60\":{\"c\":[\"devops\"]},\"61\":{\"h\":\"10、存储和配置\"},\"62\":{\"h\":\"一、k8s的存储\"},\"63\":{\"h\":\"1、必要条件安装nfs-utils\",\"t\":[\"所有节点\",\"# 所有机器安装nfs-utils apt install -y nfs-utils \",\"主节点\",\"#nfs主节点 echo \\\"/nfs/data/ *(insecure,rw,sync,no_root_squash)\\\" > /etc/exports mkdir -p /nfs/data systemctl enable rpcbind --now systemctl enable nfs-server --now #配置生效 exportfs -r \",\"从节点\",\"showmount -e 主节点ip #执行以下命令挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount mkdir -p /nfs/data mount -t nfs 172.31.0.4:/nfs/data /nfs/data # 写入一个测试文件 echo \\\"hello nfs server\\\" > /nfs/data/test.txt \"]},\"64\":{\"h\":\"2、原生方式挂载\",\"t\":[\"apiVersion: apps/v1 kind: Deployment metadata: labels: app: nginx-pv-demo name: nginx-pv-demo spec: replicas: 2 selector: matchLabels: app: nginx-pv-demo template: metadata: labels: app: nginx-pv-demo spec: containers: - image: nginx name: nginx volumeMounts: - name: html mountPath: /usr/share/nginx/html volumes: - name: html nfs: server: 主节点ip path: /nfs/data/nginx-pv \"]},\"65\":{\"h\":\"二、pv和pvc\"},\"66\":{\"h\":\"1、定义\",\"t\":[\"pv：持久卷（Persistent Volume），将应用需要持久化的数据保存到指定位置\",\"pvc：持久卷申明（Persistent Volume Claim），申明需要使用的持久卷规格\"]},\"67\":{\"h\":\"2、步骤\",\"t\":[\"创建pv池\",\"#nfs主节点 mkdir -p /nfs/data/01 mkdir -p /nfs/data/02 mkdir -p /nfs/data/03 \",\"apiVersion: v1 kind: PersistentVolume metadata: name: pv01-10m spec: capacity: storage: 10M accessModes: - ReadWriteMany storageClassName: nfs nfs: path: /nfs/data/01 server: 主机ip --- apiVersion: v1 kind: PersistentVolume metadata: name: pv02-30M spec: capacity: storage: 30M accessModes: - ReadWriteMany storageClassName: nfs nfs: path: /nfs/data/02 server: 主机ip --- apiVersion: v1 kind: PersistentVolume metadata: name: pv03-80Mi spec: capacity: storage: 80Mi accessModes: - ReadWriteMany storageClassName: nfs nfs: path: /nfs/data/03 server: 主机ip \",\"pvc创建和绑定\",\"创建pvc\",\"kind: PersistentVolumeClaim apiVersion: v1 metadata: name: nginx-pvc spec: accessModes: - ReadWriteMany resources: requests: storage: 5Mi storageClassName: nfs \",\"创建pod绑定pvc\",\"apiVersion: apps/v1 kind: Deployment metadata: labels: app: nginx-deploy-pvc name: nginx-deploy-pvc spec: replicas: 2 selector: matchLabels: app: nginx-deploy-pvc template: metadata: labels: app: nginx-deploy-pvc spec: containers: - image: nginx name: nginx volumeMounts: - name: html mountPath: /usr/share/nginx/html volumes: - name: html persistentVolumeClaim: claimName: nginx-pvc \"]},\"68\":{\"h\":\"三、 configMap\"},\"69\":{\"h\":\"定义\",\"t\":[\"configMap卷提供了向 Pod 注入配置数据的方法。 ConfigMap 对象中存储的数据可以被 configMap 类型的卷引用，然后被 Pod 中运行的容器化应用使用。\",\"引用 configMap 对象时，你可以在卷中通过它的名称来引用。 你可以自定义 ConfigMap 中特定条目所要使用的路径。 下面的配置显示了如何将名为 log-config 的 ConfigMap 挂载到名为 configmap-pod 的 Pod 中：\"]},\"70\":{\"h\":\"创建configMap的方式\",\"t\":[\"使用yaml文件\",\"使用命令行方式 from-literal\",\"kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm \",\"使用文件的方式 from-file\",\"kubectl create configmap game-config-3 --from-file=<我的键名>=<文件路径> kubectl create configmap game-config-3 --from-file=game-special-key=configure-pod-container/configmap/game.properties \",\"使用挂载的方式\"]},\"71\":{\"h\":\"配置configMap的四种方式\",\"t\":[\"在容器命令和参数内\",\"容器的环境变量\",\"在只读卷中添加一个文件，让应用来读取\",\"编写代码在pod中运行，让k8s读取configMap\"]},\"72\":{\"h\":\"使用configMap步骤\",\"t\":[\"创建一个configMap对象或者使用现有的configMap对象，多个pod可以使用同一个configMap\",\"修改pod在spec.volumns下添加一个卷，将spec.volumns.configMap.name设置为所要使用configMap对象的引用\",\"为每个需要该configMap的容器添加一个spec.containers,volumeMounts.设置 .spec.containers[].volumeMounts[].readOnly=true 并将 .spec.containers[].volumeMounts[].mountPath 设置为一个未使用的目录名， ConfigMap 的内容将出现在该目录中。\",\"更改你的镜像或者命令行，使得程序能够从该目录中查找文件，configMap中每一个data键会变成mountPath下面的一个文件名\"]},\"73\":{\"h\":\"示例\",\"t\":[\"创建configMap对象\",\"apiVersion: v1 kind: ConfigMap # 类型为configmap metadata: name: configmap-base # 实际的配置信息是放在data中的 data: appVersion: 1.0.0 jdkVersion: \\\"1.8\\\" #不能是number，如果符合number类型就加个引号 env: prod logDir: /var/data logLevel: info 1err_config: err #定义一个不合规范的key，看能否使用,貌似现在可以以数字开头了 \",\"# 创建configmap kubectl create -f configmap-base.yaml # 查看configmap kubectl get configMap configmap-base \",\"创建pod对象使用configmap\",\"apiVersion: v1 kind: Pod metadata: name: configmap-valuefrom spec: containers: - name: configmap-base-busybox image: busybox imagePullPolicy: IfNotPresent command: [\\\"/bin/sh\\\",\\\"-c\\\",\\\"env\\\"] # 环境变量中使用configmap env: - name: APP_VERSION valueFrom: configMapKeyRef: name: configmap-base key: appVersion - name: LOG_LEVEL valueFrom: configMapKeyRef: name: configmap-base key: logLevel - name: LOG_LEVEL valueFrom: configMapKeyRef: name: configmap-base key: logLevel restartPolicy: Never \",\"# 创建pod对象 kubectl create -f kube-configMap-valueFrom.yaml \",\"查看环境变量\",\"[root@master config]# kubectl logs configmap-valuefrom MY_NGINX_SERVICE_PORT=8848 MY_NGINX_PORT=tcp://10.96.190.196:8848 KUBERNETES_SERVICE_PORT=443 KUBERNETES_PORT=tcp://10.96.0.1:443 LOG_LEVEL=info HOSTNAME=configmap-valuefrom MY_NGINX_PORT_8848_TCP_ADDR=10.96.190.196 SHLVL=1 PHP_APACHE_PORT_80_TCP=tcp://10.96.64.244:80 HOME=/root MY_NGINX_PORT_8848_TCP_PORT=8848 MY_NGINX_PORT_8848_TCP_PROTO=tcp MY_NGINX_PORT_8848_TCP=tcp://10.96.190.196:8848 KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1 PHP_APACHE_SERVICE_HOST=10.96.64.244 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin KUBERNETES_PORT_443_TCP_PORT=443 KUBERNETES_PORT_443_TCP_PROTO=tcp PHP_APACHE_SERVICE_PORT=80 PHP_APACHE_PORT=tcp://10.96.64.244:80 KUBERNETES_SERVICE_PORT_HTTPS=443 KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443 MY_NGINX_SERVICE_HOST=10.96.190.196 KUBERNETES_SERVICE_HOST=10.96.0.1 PHP_APACHE_PORT_80_TCP_ADDR=10.96.64.244 PWD=/ PHP_APACHE_PORT_80_TCP_PORT=80 PHP_APACHE_PORT_80_TCP_PROTO=tcp APP_VERSION=1.0.0 \",\"使用envFrom一次性将所有的配置问价内容写到环境变量\",\"apiVersion: v1 kind: Pod metadata: name: configmap-envfrom spec: containers: - name: configmap-base-busybox image: busybox imagePullPolicy: IfNotPresent command: [\\\"/bin/sh\\\",\\\"-c\\\",\\\"env\\\"] envFrom: - configMapRef: name: configmap-base restartPolicy: Never \"]},\"74\":{\"h\":\"挂载的 ConfigMap 会被自动更新\",\"t\":[\"当已挂载的 ConfigMap 被更新时，所投射的内容最终也会被更新。 这适用于 Pod 启动后可选引用的 ConfigMap 重新出现的情况。\",\"Kubelet 在每次定期同步时都会检查所挂载的 ConfigMap 是否是最新的。 然而，它使用其基于 TTL 机制的本地缓存来获取 ConfigMap 的当前值。 因此，从 ConfigMap 更新到新键映射到 Pod 的总延迟可能与 kubelet 同步周期（默认为1分钟）+ kubelet 中 ConfigMap 缓存的 TTL（默认为1分钟）一样长。 你可以通过更新 Pod 的一个注解来触发立即刷新。\",\"configmap使用参考\"]},\"75\":{\"h\":\"四、Secret\"},\"76\":{\"h\":\"定义\",\"t\":[\"Secret 是一种包含少量敏感信息例如密码、令牌或密钥的对象。 这样的信息可能会被放在 Pod 规约中或者镜像中。 使用 Secret 意味着你不需要在应用程序代码中包含机密数据。\",\"由于创建 Secret 可以独立于使用它们的 Pod， 因此在创建、查看和编辑 Pod 的工作流程中暴露 Secret（及其数据）的风险较小。 Kubernetes 和在集群中运行的应用程序也可以对 Secret 采取额外的预防措施， 例如避免将机密数据写入非易失性存储。\"]},\"77\":{\"h\":\"使用方式\",\"t\":[\"挂载文件——作为挂载到一个或者多个容器卷中的文件\",\"容器变量——作为容器的变量\",\"拉取镜像——由kubelet在pod拉去镜像时使用\"]},\"78\":{\"h\":\"secret基本操作\"},\"79\":{\"h\":\"命令操作secret\",\"t\":[\"创建secret\",\"kubectl create secret generic db-user-pass \\\\ --from-literal=username=admin \\\\ --from-literal=password='S!B\\\\*d$zDsb=' \",\"验证secret\",\"kubectl get secrets # 查看 Secret 的细节： kubectl describe secret db-user-pass \",\"编辑secret\",\"kubectl edit secrets <secret-name> \",\"删除secret\",\"kubectl delete secret db-user-pass \"]},\"80\":{\"h\":\"使用配置文件操作secret\",\"t\":[\"创建yaml文件\",\"apiVersion: v1 kind: Secret metadata: name: mysecret type: Opaque data: username: YWRtaW4= password: MWYyZDFlMmU2N2Rm \",\"使用secret\",\"kubectl apply -f ./secret.yaml \"]},\"81\":{\"h\":\"pod中使用secret\",\"t\":[\"##命令格式 kubectl create secret docker-registry my_secret \\\\ --docker-server=<你的镜像仓库服务器> \\\\ --docker-username=<你的用户名> \\\\ --docker-password=<你的密码> \\\\ --docker-email=<你的邮箱地址> \",\"apiVersion: v1 kind: Pod metadata: name: private-nginx spec: containers: - name: private-nginx image: leifengyang/guignginx:v1.0 imagePullSecrets: - name: my_secret \"]},\"82\":{\"c\":[\"k8s\",\"部署\"]},\"83\":{\"c\":[\"devops\"]},\"84\":{\"h\":\"11、网络Service\"},\"85\":{\"h\":\"一、service\"},\"86\":{\"h\":\"定义\",\"t\":[\"Kubernetes 中 Service 是 将运行在一个或一组 Pod 上的网络应用程序公开为网络服务的方法。\",\"Service API 是 Kubernetes 的组成部分，它是一种抽象，帮助你通过网络暴露 Pod 组合。 每个 Service 对象定义一个逻辑组的端点（通常这些端点是 Pod）以及如何才能访问这些 Pod 的策略。\",\"Service 定义的抽象能够解耦这种关联。\",\"Service 针对的这组 Pod 通常由你定义的选择算符来确定。 若想了解定义 Service 端点的其他方式，可以查阅不带选择算符的 Service。\"]},\"87\":{\"h\":\"service重要字段\",\"t\":[\"FIELDS: allocateLoadBalancerNodePorts <boolean> 定义是否自动使用NodePorts，为LoadBalancer类型的服务分配。默认为true clusterIP <string> clusterIP是服务的IP地址，通常会被分配随机。 clusterIPs <[]string> ClusterIPs是分配给该服务的IP地址列表，是通常是随机分配的。 ports <[]Object> 服务公开的端口列表 appProtocol <string>该端口的应用协议。 name <string> service 名称 nodePort <integer> 当type为时，该服务在其上公开的每个节点上的端口NodePort或LoadBalancer。 port <integer> -required- 此服务将公开的端口。 protocol <string> 该端口的IP协议。支持“TCP”、“UDP”、“SCTP”。默认的TCP。 targetPort <string>服务所针对的pods上要访问的端口编号或名称。 selector <map[string]string> 将服务流量路由到与此匹配的标签键和值的pod选择器。 如果为空或不存在，则假定服务具有外部进程管理其端点，Kubernetes不会修改。 只适用于ClusterIP、NodePort和LoadBalancer类型 type <string> ExternalName, ClusterIP, NodePort, and LoadBalancer ClusterIP分配一个用于负载均衡的集群内部IP地址port。port由选择器决定 clusterIP为None，表示没有分配虚拟IP端点被发布为一组port，而不是虚拟IP。 NodePort构建在ClusterIP上，并在每个节点上分配一个端口路由到与clusterIP相同的端点。 LoadBalancer”是在此基础上构建的NodePort并创建一个外部负载平衡器(如果当前支持 ExternalName将此服务别名化为指定的externalName。 https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types \"]},\"88\":{\"h\":\"service的创建\",\"t\":[\"yaml文件创建\",\"apiVersion: v1 kind: Service metadata: name: my-service spec: selector: app.kubernetes.io/name: MyApp ports: - protocol: TCP port: 80 targetPort: 9376 \"]},\"89\":{\"h\":\"没有选择符的service\",\"t\":[\"希望在生产环境中使用外部的数据库集群，但测试环境使用自己的数据库。\",\"希望服务指向另一个 名字空间（Namespace） 中或其它集群中的服务。\",\"你正在将工作负载迁移到 Kubernetes。在评估该方法时，你仅在 Kubernetes 中运行一部分后端。\"]},\"90\":{\"h\":\"多端口的service\",\"t\":[\"对于某些服务，你需要公开多个端口。 Kubernetes 允许你在 Service 对象上配置多个端口定义。 为服务使用多个端口时，必须提供所有端口名称，以使它们无歧义\",\"apiVersion: v1 kind: Service metadata: name: my-service spec: selector: app.kubernetes.io/name: MyApp ports: - name: http protocol: TCP port: 80 targetPort: 9376 - name: https protocol: TCP port: 443 targetPort: 9377 \"]},\"91\":{\"h\":\"类型服务\"},\"92\":{\"h\":\"无头服务\",\"t\":[\"有时不需要或不想要负载均衡，以及单独的 Service IP。 遇到这种情况，可以通过指定 Cluster IP（spec.clusterIP）的值为 \\\"None\\\" 来创建 Headless Service。\"]},\"93\":{\"h\":\"发布服务\",\"t\":[\"对一些应用的某些部分（如前端），可能希望将其暴露给 Kubernetes 集群外部的 IP 地址。\",\"Type 的取值以及行为如下：\",\"ClusterIP：通过集群的内部 IP 暴露服务，选择该值时服务只能够在集群内部访问。 这也是你没有为服务显式指定 type 时使用的默认值。 你可以使用 Ingress 或者 Gateway API 向公众暴露服务。\",\"NodePort：通过每个节点上的 IP 和静态端口（NodePort）暴露服务。 为了让节点端口可用，Kubernetes 设置了集群 IP 地址，这等同于你请求 type: ClusterIP 的服务。\",\"LoadBalancer：使用云提供商的负载均衡器向外部暴露服务。 外部负载均衡器可以将流量路由到自动创建的 NodePort 服务和 ClusterIP 服务上。\",\"ExternalName：通过返回 CNAME 记录和对应值，可以将服务映射到 externalName 字段的内容（例如，foo.bar.example.com）。 无需创建任何类型代理。\",\"nodeport\",\"apiVersion: v1 kind: Service metadata: name: my-service spec: type: NodePort selector: app.kubernetes.io/name: MyApp ports: # 默认情况下，为了方便起见，`targetPort` 被设置为与 `port` 字段相同的值。 - port: 80 targetPort: 80 # 可选字段 # 默认情况下，为了方便起见，Kubernetes 控制平面会从某个范围内分配一个端口号（默认：30000-32767） nodePort: 30007 \",\"LoadBalancer 类型\",\"apiVersion: v1 kind: Service metadata: name: my-service spec: selector: app.kubernetes.io/name: MyApp ports: - protocol: TCP port: 80 targetPort: 9376 clusterIP: 10.0.171.239 type: LoadBalancer status: loadBalancer: ingress: - ip: 192.0.2.127 \"]},\"94\":{\"h\":\"二、ingress\"},\"95\":{\"h\":\"定义\",\"t\":[\"Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。\",\"Ingress 公开从集群外部到集群内服务的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。\",\"image-20230401173426576\"]},\"96\":{\"h\":\"安装ingress\",\"t\":[\"wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml #修改镜像 vi deploy.yaml #将image的值改为如下值： registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/ingress-nginx-controller:v0.46.0 # 检查安装的结果 kubectl get pod,svc -n ingress-nginx # 最后别忘记把svc暴露的端口要放行 \"]},\"97\":{\"h\":\"ingress资源\",\"t\":[\"每个rules都包含以下规则\",\"host 可选。提供了 host（例如 foo.bar.com），则 rules 适用于该 host。\",\"路径列表。每个路径都有一个由 service.name 和 service.port.name 或 service.port.number 定义的关联后端。 在负载均衡器将流量定向到引用的服务之前，主机和路径都必须匹配传入请求的内容。\",\"backend。是 Service 文档中所述的服务和端口名称的组合， 或者是通过 CRD 方式来实现的自定义资源后端。 与规则的 host 和 path 匹配的对 Ingress 的 HTTP（和 HTTPS ）请求将发送到列出的 backend。\"]},\"98\":{\"h\":\"默认后端\",\"t\":[\"没有设置规则的 Ingress 将所有流量发送到同一个默认后端，而 .spec.defaultBackend 则是在这种情况下处理请求的那个默认后端。 defaultBackend 通常是 Ingress 控制器的配置选项， 而非在 Ingress 资源中指定。 如果未设置任何的 .spec.rules，那么必须指定 .spec.defaultBackend。 如果未设置 defaultBackend，那么如何处理所有与规则不匹配的流量将交由 Ingress 控制器决定\"]},\"99\":{\"h\":\"资源后端\",\"t\":[\"Resource 后端是一个引用，指向同一命名空间中的另一个 Kubernetes 资源，将其作为 Ingress 对象。 Resource 后端与 Service 后端是互斥的，在二者均被设置时会无法通过合法性检查。 Resource 后端的一种常见用法是将所有入站数据导向带有静态资产的对象存储后端。\"]},\"100\":{\"h\":\"路径类型\",\"t\":[\"Ingress 中的每个路径都需要有对应的路径类型（Path Type）。未明确设置 pathType 的路径无法通过合法性检查。当前支持的路径类型有三种：\",\"ImplementationSpecific：对于这种路径类型，匹配方法取决于 IngressClass。 具体实现可以将其作为单独的 pathType 处理或者与 Prefix 或 Exact 类型作相同处理。\",\"Exact：精确匹配 URL 路径，且区分大小写。\",\"Prefix：基于以 / 分隔的 URL 路径前缀匹配。匹配区分大小写，并且对路径中的元素逐个完成。 路径元素指的是由 / 分隔符分隔的路径中的标签列表。 如果每个 p 都是请求路径 p 的元素前缀，则请求与路径 p 匹配。\"]},\"101\":{\"h\":\"简单示例\",\"t\":[\"apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: minimal-ingress annotations: nginx.ingress.kubernetes.io/rewrite-target: / spec: ingressClassName: nginx-example rules: # http 规则 - http: paths: - path: /testpath pathType: Prefix backend: service: name: test port: number: 80 \"]},\"102\":{\"h\":\"三、calico网络组件\"},\"103\":{\"c\":[\"k8s\",\"部署\"]},\"104\":{\"c\":[\"devops\"]},\"105\":{\"h\":\"1、安装配置\"},\"106\":{\"h\":\"一、安装配置\",\"t\":[\"3台linux服务器，centos服务器本地设置2核4g\",\"三台机器设置组内互信可以互相ping通\",\"关闭机器的防火墙\"]},\"107\":{\"h\":\"二、基础安装配置\",\"t\":[\"修改hostname\",\"# 三台机器都要设置 hostnamectl set-hostname k8s-01 # 设置 hostname 解析 echo \\\"127.0.0.1 $(hostname)\\\" >> /etc/hosts \"]},\"108\":{\"h\":\"三、安装脚本\",\"t\":[\"1.1创建k8s.sh并运行\",\"#/bin/sh #######################开始设置环境##################################### \\\\n printf \\\"##################正在配置所有基础环境信息################## \\\\n\\\" printf \\\"##################关闭selinux################## \\\\n\\\" sed -i 's/enforcing/disabled/' /etc/selinux/config setenforce 0 printf \\\"##################关闭swap################## \\\\n\\\" swapoff -a sed -ri 's/.*swap.*/#&/' /etc/fstab printf \\\"##################配置路由转发################## \\\\n\\\" cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.d/k8s.conf ## 必须 ipv6流量桥接 echo 'net.bridge.bridge-nf-call-ip6tables = 1' >> /etc/sysctl.d/k8s.conf ## 必须 ipv4流量桥接 echo 'net.bridge.bridge-nf-call-iptables = 1' >> /etc/sysctl.d/k8s.conf echo \\\"net.ipv6.conf.all.disable_ipv6 = 1\\\" >> /etc/sysctl.d/k8s.conf echo \\\"net.ipv6.conf.default.disable_ipv6 = 1\\\" >> /etc/sysctl.d/k8s.conf echo \\\"net.ipv6.conf.lo.disable_ipv6 = 1\\\" >> /etc/sysctl.d/k8s.conf echo \\\"net.ipv6.conf.all.forwarding = 1\\\" >> /etc/sysctl.d/k8s.conf modprobe br_netfilter sudo sysctl --system printf \\\"##################配置ipvs################## \\\\n\\\" cat <<EOF | sudo tee /etc/sysconfig/modules/ipvs.modules #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF chmod 755 /etc/sysconfig/modules/ipvs.modules sh /etc/sysconfig/modules/ipvs.modules printf \\\"##################安装ipvsadm相关软件################## \\\\n\\\" yum install -y ipset ipvsadm printf \\\"##################安装docker容器环境################## \\\\n\\\" sudo yum remove docker* sudo yum install -y yum-utils sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum install -y docker-ce-19.03.9 docker-ce-cli-19.03.9 containerd.io systemctl enable docker systemctl start docker sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://uzp8w2vr.mirror.aliyuncs.com\\\"] } EOF sudo systemctl daemon-reload sudo systemctl restart docker printf \\\"##################安装k8s核心包 kubeadm kubelet kubectl################## \\\\n\\\" cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF ###指定k8s安装版本 yum install -y kubelet-1.21.0 kubeadm-1.21.0 kubectl-1.21.0 ###要把kubelet立即启动。 systemctl enable kubelet systemctl start kubelet printf \\\"##################下载api-server等核心镜像################## \\\\n\\\" sudo tee ./images.sh <<-'EOF' #!/bin/bash images=( kube-apiserver:v1.21.0 kube-proxy:v1.21.0 kube-controller-manager:v1.21.0 kube-scheduler:v1.21.0 coredns:v1.8.0 etcd:3.4.13-0 pause:3.4.1 ) for imageName in ${images[@]} ; do docker pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/$imageName done ## 全部完成后重新修改coredns镜像 docker tag registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/coredns:v1.8.0 registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/coredns/coredns:v1.8.0 EOF chmod +x ./images.sh && ./images.sh ### k8s的所有基本环境全部完成 \",\"2、使用kubeadm引导集群（参照初始化master继续做）\",\"#### --apiserver-advertise-address 的地址一定写成自己master机器的ip地址 #### 以下的只在master节点执行 kubeadm init \\\\ --apiserver-advertise-address=192.168.70.10 \\\\ --image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \\\\ --kubernetes-version v1.21.0 \\\\ --service-cidr=10.96.0.0/16 \\\\ --pod-network-cidr=192.168.0.0/16 \",\"3、按照控制台引导继续往下\",\"## 第一步 mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config ##第二步 export KUBECONFIG=/etc/kubernetes/admin.conf ##第三步 部署网络插件,这里有可能下载失败，因为版本问题 kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml ##第四步，用控制台打印的kubeadm join 去其他node节点执行 kubeadm join 10.170.11.8:6443 --token cnb7x2.lzgz7mfzcjutn0nk \\\\ --discovery-token-ca-cert-hash sha256:00c9e977ee52632098aadb515c90076603daee94a167728110ef8086d0d5b37d \",\"4、验证集群\",\"kubectl get node -A \",\"5、设置kube-proxy的ipvs模式\",\"##修改kube-proxy默认的配置 kubectl edit cm kube-proxy -n kube-system ## 修改mode: \\\"ipvs\\\" ##改完以后重启kube-proxy ### 查到所有的kube-proxy kubectl get pod -n kube-system |grep kube-proxy ### 删除之前的即可 kubectl delete pod 【用自己查出来的kube-proxy-dw5sf kube-proxy-hsrwp kube-proxy-vqv7n】 -n kube-system \"]},\"109\":{\"c\":[\"k8s\",\"部署\"]},\"110\":{\"c\":[\"k8s\",\"devops\"]},\"111\":{\"h\":\"2、基础概念\",\"t\":[\"Kubernetes 也称为 K8s，是用于自动部署、扩缩和管理容器化应用程序的开源系统。\",\"详细信息参阅官网\"]},\"112\":{\"h\":\"二、k8s对象\",\"t\":[\"k8s里面操作的资源实体就是k8s的对象，可以使用yaml来声明对象，然后让k8s根据yaml的声明来创建出这个对象。Kubernetes对象指的是Kubernetes系统的持久化实体，所有这些对象合起来，代表了你集群的实际情况。常规的应用里，我们把应用程序的数据存储在数据库中，Kubernetes将其数据以Kubernetes对象的形式通过 api server存储在 etcd 中。\",\"集群中运行了哪些容器化应用程序\",\"集群中对应用程序可用的资源（网络，存储等）\",\"应用程序相关的策略定义，例如，重启策略、升级策略、容错策略\",\"其他Kubernetes管理应用程序时所需要的信息\"]},\"113\":{\"h\":\"对象的spec和status\",\"t\":[\"每一个 Kubernetes 对象都包含了两个重要的字段：\",\"spec 必须由您来提供，描述了您对该对象所期望的 目标状态\",\"status 只能由 Kubernetes 系统来修改，描述了该对象在 Kubernetes 系统中的 实际状态\",\"Kubernetes通过对应的 控制器，不断地使实际状态趋向于您期望的目标状态\"]},\"114\":{\"h\":\"三、node对象\",\"t\":[\"**Pod（容器组）**总是在 Node（节点） 上运行。Node（节点）是 kubernetes 集群中的计算机，可以是虚拟机或物理机。每个 Node（节点）都由 master 管理。一个 Node（节点）可以有多个Pod（容器组），kubernetes master 会根据每个 Node（节点）上可用资源的情况，自动调度 Pod（容器组）到最佳的 Node（节点）上。\",\"每个 Kubernetes Node（节点）至少运行：\",\"Kubelet，负责 master 节点和 worker 节点之间通信的进程；管理 Pod（容器组）和 Pod（容器组）内运行的 Container（容器）。\",\"kube-proxy，负责进行流量转发\",\"容器运行环境（如Docker）负责下载镜像、创建和运行容器等。\"]},\"115\":{\"h\":\"四、pod对象\",\"t\":[\"Pod （容器组） 是一个k8s中一个抽象的概念，用于存放一组 container（可包含一个或多个 container 容器，即图上正方体)，以及这些 container （容器）的一些共享资源。这些资源包括：\",\"共享存储，称为卷(Volumes)，即图上紫色圆柱\",\"网络，每个 Pod（容器组）在集群中有个唯一的 IP，pod（容器组）中的 container（容器）共享该IP地址\",\"container（容器）的基本信息，例如容器的镜像版本，对外暴露的端口等\",\"Pod（容器组）是 k8s 集群上的最基本的单元。当我们在 k8s 上创建 Deployment 时，会在集群上创建包含容器的 Pod (而不是直接创建容器)。每个Pod都与运行它的 worker 节点（Node）绑定，并保持在那里直到终止或被删除。如果节点（Node）发生故障，则会在群集中的其他可用节点（Node）上运行相同的 Pod（从同样的镜像创建 Container，使用同样的配置，IP 地址不同，Pod 名字不同）。\",\"TIP\",\"重要：\",\"Pod 是一组容器（可包含一个或多个应用程序容器），以及共享存储（卷 Volumes）、IP 地址和有关如何运行容器的信息。\",\"如果多个容器紧密耦合并且需要共享磁盘等资源，则他们应该被部署在同一个Pod（容器组）中。\"]},\"116\":{\"h\":\"五、Service 和 Label\",\"t\":[\"Service 通过一组 Pod 路由通信。Service 是一种抽象，它允许 Pod 死亡并在 Kubernetes 中复制，而不会影响应用程序。在依赖的 Pod (如应用程序中的前端和后端组件)之间进行发现和路由是由Kubernetes Service 处理的。\",\"Service 匹配一组 Pod 是使用 标签(Label)和选择器(Selector), 它们是允许对 Kubernetes 中的对象进行逻辑操作的一种分组原语。标签(Label)是附加在对象上的键/值对，可以以多种方式使用:\",\"指定用于开发，测试和生产的对象\",\"嵌入版本标签\",\"使用 Label 将对象进行分类\"]},\"117\":{\"h\":\"六、Deployment（部署）\",\"t\":[\"在k8s中，通过发布 Deployment，可以创建应用程序 (docker image) 的实例 (docker container)，这个实例会被包含在称为 Pod 的概念中，Pod 是 k8s 中最小可管理单元。\",\"在 k8s 集群中发布 Deployment 后，Deployment 将指示 k8s 如何创建和更新应用程序的实例，master 节点将应用程序实例调度到集群中的具体的节点上。\",\"创建应用程序实例后，Kubernetes Deployment Controller 会持续监控这些实例。如果运行实例的 worker 节点关机或被删除，则 Kubernetes Deployment Controller 将在群集中资源最优的另一个 worker 节点上重新创建一个新的实例。这提供了一种自我修复机制来解决机器故障或维护问题。\",\"在容器编排之前的时代，各种安装脚本通常用于启动应用程序，但是不能够使应用程序从机器故障中恢复。通过创建应用程序实例并确保它们在集群节点中的运行实例个数，Kubernetes Deployment 提供了一种完全不同的方式来管理应用程序。\",\"Deployment 处于 master 节点上，通过发布 Deployment，master 节点会选择合适的 worker 节点创建 Container（即图中的正方体），Container 会被包含在 Pod （即蓝色圆圈）里。\",\"自愈：针对使用Deployment等部署的应用。\",\"kubectl run ：直接启动一个pod； 不会产生一次部署信息。所以删除就没\",\"kubectl create deploy： 启动一个Pod，以及记录这次部署信息。所以，这个pod即使挂了，这次部署信息有，就会强制同步到这次部署信息期望的最终结果；kubectl get deploy,pod 都有内容\"]},\"118\":{\"h\":\"七、namespaces 名称空间\",\"t\":[\"kubectl get namespaces kubectl describe namespaces <name> #隔离 mysql mapper.xml--》dao. \",\"Kubernetes 安装成功后，默认有初始化了三个名称空间：\",\"default 默认名称空间，如果 Kubernetes 对象中不定义 metadata.namespace 字段，该对象将放在此名称空间下\",\"kube-system Kubernetes系统创建的对象放在此名称空间下\",\"kube-public 此名称空间自动在安装集群是自动创建，并且所有用户都是可以读取的（即使是那些未登录的用户）。主要是为集群预留的，例如，某些情况下，某些Kubernetes对象应该被所有集群用户看到。\",\"名称空间未来如何隔离\",\"1）、基于环境隔离（prod,test）\",\"​ prod：部署的所有应用\",\"​ test：部署的所有应用\",\"​\",\"2）、基于产品线的名称空间（商城，android，ios，backend）；\",\"3）、基于团队隔离\"]},\"119\":{\"h\":\"八、annotation注解\",\"t\":[\"注解（annotation）可以用来向 Kubernetes 对象的 metadata.annotations 字段添加任意的信息。Kubernetes 的客户端或者自动化工具可以存取这些信息以实现其自定义的逻辑。\",\"metadata: annotations: key1: value1 key2: value2 \"]},\"120\":{\"h\":\"九、标签和选择器\",\"t\":[\"标签（Label）是附加在Kubernetes对象上的一组名值对，其意图是按照对用户有意义的方式来标识Kubernetes对象，同时，又不对Kubernetes的核心逻辑产生影响。标签可以用来组织和选择一组Kubernetes对象。您可以在创建Kubernetes对象时为其添加标签，也可以在创建以后再为其添加标签。每个Kubernetes对象可以有多个标签，同一个对象的标签的 Key 必须唯一，例如：\",\"metadata: labels: key1: value1 key2: value2 \",\"使用标签（Label）可以高效地查询和监听Kubernetes对象，在Kubernetes界面工具（如 Kubenetes Dashboard 或 Kuboard）和 kubectl 中，标签的使用非常普遍。那些非标识性的信息应该记录在 注解（annotation）\",\"为什么要使用标签\",\"使用标签，用户可以按照自己期望的形式组织 Kubernetes 对象之间的结构，而无需对 Kubernetes 有任何修改。\",\"应用程序的部署或者批处理程序的部署通常都是多维度的（例如，多个高可用分区、多个程序版本、多个微服务分层）。管理这些对象时，很多时候要针对某一个维度的条件做整体操作，例如，将某个版本的程序整体删除，这种情况下，如果用户能够事先规划好标签的使用，再通过标签进行选择，就会非常地便捷。\"]},\"121\":{\"c\":[\"k8s\",\"部署\"]},\"122\":{\"c\":[\"devops\"]},\"123\":{\"h\":\"3、基础命令\"},\"124\":{\"h\":\"一、命令概述\",\"t\":[\"# 初学者掌握的命令 Basic Commands (Beginner): create 从文件或stdin中创建资源。 expose 获取一个复制控制器、服务、部署或pod # k8s服务 Kubernetes Service run 在集群上运行一个特定的映像 set 设置对象的具体特性 Basic Commands (Intermediate): 基础命令 explain 资源文档 get 显示一个或多个资源 edit 编辑服务器上的资源 delete 按文件名、stdin、资源和名称或按资源和标签删除资源 selector 选择器 Deploy Commands: #部署用的命令 rollout 管理资源的回滚 scale 为部署控制器、复制集控制器或复制控制器设置新的大小 autoscale 自动缩放Deployment、ReplicaSet、StatefulSet或ReplicationController Cluster Management Commands: #集群管理的命令 certificate 修改证书资源。 cluster-info 显示集群信息 top 显示资源(CPU/内存)使用率。 cordon 将节点标记为不可调度 uncordon 将节点标记为可调度的 drain 排水节点，为维护做好准备 taint 更新一个或多个节点上的污点 Troubleshooting and Debugging Commands: # debug的命令 describe 打印pod中容器的日志 logs 打印pod中容器的日志 attach 附着在运行中的容器上 exec 在容器中执行命令 port-forward 将一个或多个本地端口转发到pod proxy 向Kubernetes API服务器运行代理 cp 在容器中拷贝文件和目录。 auth 检查授权 debug 为故障排除工作负载和节点创建调试会话 Advanced Commands: # 高阶命令 diff 实际版本与潜在应用版本的差异 apply 通过文件名或stdin将配置应用到资源 patch patch资源的更新字段 replace 用文件名或标准输入替换资源 kustomize 从一个目录或URL构建一个定制目标。 Settings Commands: # 设置 label 更新资源标签 annotate 更新资源的注解 completion 输出指定shell (bash或zsh) #的shell补全代码 Other Commands: #其他 api-resources 打印服务器上支持的API资源 api-versions 打印服务器上支持的API版本，格式为\\\"group/version\\\" config 修改kubecconfig文件 plugin 提供与插件交互的实用程序。 version 打印客户端和服务器版本信息 \"]},\"125\":{\"h\":\"二、简单示例\",\"t\":[\"创建和部署\",\"#1、部署 kubectl apply -f deployment.yaml #2、移除 kubectl delete -f deployment.yaml \",\"kubectl get 显示资源列表\",\"# kubectl get 资源类型 #获取类型为Deployment的资源列表 kubectl get deployments #获取类型为Pod的资源列表 kubectl get pods #获取类型为Node的资源列表 kubectl get nodes # 查看所有名称空间的 Deployment kubectl get deployments -A kubectl get deployments --all-namespaces # 查看 kube-system 名称空间的 Deployment kubectl get deployments -n kube-system # 查看pod详细信息 kubectl get pods -o wide # 以yaml形式查看pod kubectl get pod pod_name -o yaml \",\"kubectl create 创建k8s集群中的一些对象\",\"# kubectl create 创建k8s集群中的一些对象 kubectl create --help kubectl create deployment 这次部署的名字 --image=应用的镜像 kubectl create deployment my-nginx --image=nginx ##最终在一个机器上有pod、这个pod其实本质里面就是一个容器 k8s_nginx_my-nginx-6b74b79f57-snlr4_default_dbeac79e-1ce9-42c9-bc59-c8ca0412674b_0 ### k8s_镜像(nginx)_pod名(my-nginx-6b74b79f57-snlr4)_容器名(default_dbeac79e-1ce9-42c9-bc59-c8ca0412674b_0) # Create a deployment with command kubectl create deployment my-nginx --image=nginx -- date # Create a deployment named my-nginx that runs the nginx image with 3 replicas. kubectl create deployment my-nginx --image=nginx --replicas=3 # Create a deployment named my-nginx that runs the nginx image and expose port 80. kubectl create deployment my-nginx --image=nginx --port=80 \",\"kubectl describe显示有关资源的详细信息\",\"# kubectl describe 资源类型 资源名称 #查看名称为nginx-XXXXXX的Pod的信息 kubectl describe pod pod_name #查看名称为nginx的Deployment的信息 kubectl describe deployment deploy_name \",\"kubectl logs 查看pod中的容器的打印日志\",\"kubectl logs -f pod_name \",\"kubectl exec 在pod中的容器环境内执行命令\",\"# kubectl exec Pod名称 操作命令,类似docker exec kubectl exec -it pod_name /bin/bash \",\"kubectl run 可以独立跑一个Pod\",\"kubectl run nginx --image=nginx \",\"kubectl expose 暴露，形成一个负载均衡网络\",\" kubectl expose deployment tomcat6 --port=8912 --target-port=8080 --type=NodePort ## --port：集群内访问service的端口 8912 ## --target-port： pod容器的端口 8080 ## --nodePort： 每个机器开发的端口 30403 \",\"kubectl rollout 回滚操作\",\"### 查看历史记录 kubectl rollout history deployment.apps/tomcat6 kubectl rollout history deploy tomcat6 ### 回滚到指定版本 kubectl rollout undo deployment.apps/tomcat6 --to-revision=1 kubectl rollout undo deploy tomcat6 --to-revision=1 \"]},\"126\":{\"c\":[\"k8s\",\"部署\"]},\"127\":{\"c\":[\"devops\"]},\"128\":{\"h\":\"4、运行容器\"},\"129\":{\"h\":\"一、概念\"},\"130\":{\"h\":\"1.1、容器\",\"t\":[\"每个运行的容器都是可重复的； 包含依赖环境在内的标准，意味着无论你在哪里运行它都会得到相同的行为。\",\"容器将应用程序从底层的主机设施中解耦。 这使得在不同的云或 OS 环境中部署更加容易。\",\"Kubernetes 集群中的每个节点都会运行容器， 这些容器构成分配给该节点的 Pod。 单个 Pod 中的容器会在共同调度下，于同一位置运行在相同的节点上。\"]},\"131\":{\"h\":\"1.2 、容器镜像\",\"t\":[\"容器镜像是一个随时可以运行的软件包， 包含运行应用程序所需的一切：代码和它需要的所有运行时、应用程序和系统库，以及一些基本设置的默认值。\",\"容器旨在设计成无状态且不可变的： 你不应更改已经运行的容器的代码。如果有一个容器化的应用程序需要修改， 正确的流程是：先构建包含更改的新镜像，再基于新构建的镜像重新运行容器。\"]},\"132\":{\"h\":\"1.3、容器运行时\",\"t\":[\"容器运行环境是负责运行容器的软件。\"]},\"133\":{\"h\":\"二、容器中字段解释\",\"t\":[\"FIELDS: args <[]string>给command进行运行的参数 command <[]string>运行命令 env <[]Object>环境变量 envFrom <[]Object> image <string>镜像名称 imagePullPolicy <string>镜像下载方式 Always, Never, IfNotPresent. Defaults to Always lifecycle <Object>生命周期 livenessProbe <Object>生存探针 name <string> -required-容器名称 ports <[]Object>要暴漏的端口 readinessProbe <Object>就绪探针 resources <Object>资源限制 securityContext <Object>安全策略 startupProbe <Object>启动探针 stdin <boolean> 该容器是否应该为容器中的stdin分配缓冲区 运行时。如果没有设置，从容器中的stdin读取将始终导致EOF。默认为false。 stdinOnce <boolean> terminationMessagePath <string>容器终止到的文件的路径将要写入的消息被安装到容器的文件系统中。 terminationMessagePolicy <string> 指示应该如何填充终止消息。 tty <boolean>这个容器是否应该为自己分配一个TTY，也需要'stdin'是真的 volumeDevices <[]Object>是容器要使用的卷的列表。 volumeMounts <[]Object>将Pod卷安装到容器的文件系统中。不能更新。 workingDir <string>容器的工作目录。 \"]},\"134\":{\"h\":\"三、环境变量\",\"t\":[\"使用环境变量来设置参数\",\"env: - name: MESSAGE value: \\\"hello world\\\" command: [\\\"/bin/echo\\\"] args: [\\\"$(MESSAGE)\\\"] \"]},\"135\":{\"h\":\"四、生命周期钩子\",\"t\":[\"Kubernetes中为容器提供了两个 hook（钩子函数）：\",\"PostStart\",\"此钩子函数在容器创建后将立刻执行。但是，并不能保证该钩子函数在容器的 ENTRYPOINT 之前执行。该钩子函数没有输入参数。\",\"PreStop\",\"此钩子函数在容器被 terminate（终止）之前执行，例如：\",\"通过接口调用删除容器所在 Pod\",\"某些管理事件的发生：健康检查失败、资源紧缺等\",\"如果容器已经被关闭或者进入了 completed 状态，preStop 钩子函数的调用将失败。该函数的执行是同步的，即，kubernetes 将在该函数完成执行之后才删除容器。该钩子函数没有输入参数。\",\"apiVersion: v1 kind: Pod metadata: name: lifecycle-demo spec: containers: - name: lifecycle-demo-container image: alpine command: [\\\"/bin/sh\\\", \\\"-c\\\", \\\"echo hello; \\\"] volumeMounts: - name: mount1 mountPath: /app lifecycle: postStart: exec: command: [\\\"/bin/sh\\\", \\\"-c\\\", \\\"echo world;\\\"] preStop: exec: command: [\\\"/bin/sh\\\",\\\"-c\\\",\\\"echo 66666;\\\"] \",\"在容器启动后立刻发送 postStart 事件，但是并不能确保 postStart 事件处理程序在容器的 EntryPoint 之前执行。postStart 事件处理程序相对于容器中的进程来说是异步的（同时执行），然而，Kubernetes 在管理容器时，将一直等到 postStart 事件处理程序结束之后，才会将容器的状态标记为 Running。\",\"Kubernetes 在决定关闭容器时，立刻发送 preStop 事件，并且，将一直等到 preStop 事件处理程序结束或者 Pod 的 --grace-period 超时，才删除容器\"]},\"136\":{\"h\":\"五、资源限制\",\"t\":[\"apiVersion: v1 kind: Pod metadata: name: qos-demo namespace: qos-example spec: containers: - name: qos-demo-ctr image: nginx resources: # limits: # 限制最大大小 -Xmx memory: \\\"200Mi\\\" cpu: \\\"700m\\\" # 启动默认给分配的大小 -Xms requests: memory: \\\"200Mi\\\" cpu: \\\"700m\\\" \"]},\"137\":{\"c\":[\"k8s\",\"部署\"]},\"138\":{\"c\":[\"devops\"]},\"139\":{\"h\":\"5、什么叫pod\"},\"140\":{\"h\":\"一、pod概念\",\"t\":[\"Pod是一组（一个或多个） 容器（docker容器）的集合 （就像在豌豆荚中）；这些容器共享存储、网络、以及怎样运行这些容器的声明。\"]},\"141\":{\"h\":\"二、pod特点\",\"t\":[\"pod对于容器有自律能力（pod自动重启失败的容器）\",\"pod不能恢复自己\",\"pod分为单容器和多容器\",\"pod为其成员容器提供两种共享资源：网络和存储\",\"一个pod由一个pause容器设置好整个pod里面所有的容器的网络和名称空间等信息\"]},\"142\":{\"h\":\"三、容器的生命周期\",\"t\":[\"pod启动，会依次启动所有的初始化容器，有一个失败，则pod都不能启动\",\"接下来启动所有的应用容器（每一个应用容器都必须能一直运行起来），Pod开始正式工作，一个启动失败就会尝试重启Pod内的这个容器，Pod只要是NotReady，Pod就不对外提供服务了\"]},\"143\":{\"h\":\"四、pod的重启策略\",\"t\":[\"Pod 的 spec 中包含一个 restartPolicy 字段，其可能取值包括 Always、OnFailure 和 Never。默认值是 Always。\",\"restartPolicy 适用于 Pod 中的所有容器。\"]},\"144\":{\"h\":\"五、静态pod\",\"t\":[\"在 /etc/kubernetes/manifests 位置放的所有Pod.yaml文件，机器启动kubelet自己就把他启动起来。\",\"静态Pod一直守护在他的这个机器上\"]},\"145\":{\"h\":\"六、prode探针机制（健康检查机制）\"},\"146\":{\"h\":\"三种探针\",\"t\":[\"启动探针：一次性成功探针，只要启动了就不用了\",\"# 功能 用来检测应用是否成功启动。如果启动就可以进行后续的检查。满容器一定要指定启动探针 # 特点 一旦启动后续就不用了，剩下存活探针和就绪探针持续运行 \",\"存货探针：用于检查容器是否正常存活，如果检查失败就会重新启动这个容器\",\"# 功能 用于检查容器是否正常存活，如果检查失败就会重启这个容器 \",\"就绪探针：用于检查容器是否准备好了可以接受流量\",\"# 功能 用于检查容器是否准备好接收流量，当一个pod中所有容器都准备好，才接受流量，否则将service负载均衡中剔除 \"]},\"147\":{\"h\":\"prode配置\",\"t\":[\"initialDelaySeconds：容器启动后要等待多少秒后存活和就绪探测器才被初始化，默认是 0 秒，最小值是 0。这是针对以前没有\",\"periodSeconds：执行探测的时间间隔（单位是秒）。默认是 10 秒。最小值是 1。\",\"successThreshold：探测器在失败后，被视为成功的最小连续成功数。默认值是 1。 \",\"存活和启动探针的这个值必须是 1。最小值是 1。\",\"failureThreshold：当探测失败时，Kubernetes 的重试次数。 存活探测情况下的放弃就意味着重新启动容器。 就绪探测情况下的放弃 Pod 会被打上未就绪的标签。默认值是 3。最小值是 1。\",\"timeoutSeconds：探测的超时时间。默认值是 1 秒。最小值是 1。\",\"使用yaml测试探针机制\",\"apiVersion: v1 kind: Pod metadata: name: \\\"nginx-start-probe02\\\" namespace: default labels: app: \\\"nginx-start-probe02\\\" spec: volumes: - name: nginx-vol hostPath: path: /app - name: nginx-html hostPath: path: /html containers: - name: nginx image: \\\"nginx\\\" ports: - containerPort: 80 # 启动探针 startupProbe: exec: command: [\\\"/bin/sh\\\",\\\"-c\\\",\\\"cat /app/abc\\\"] ## 返回不是0，那就是探测失败 # initialDelaySeconds: 20 ## 指定的这个秒以后才执行探测 periodSeconds: 5 ## 每隔几秒来运行这个 timeoutSeconds: 5 ##探测超时，到了超时时间探测还没返回结果说明失败 successThreshold: 1 ## 成功阈值，连续几次成才算成功 failureThreshold: 3 ## 失败阈值，连续几次失败才算真失败 volumeMounts: - name: nginx-vol mountPath: /app - name: nginx-html mountPath: /usr/share/nginx/html # 存活探针 livenessProbe: ## nginx容器有没有 /abc.html， # 方式一，发送http请求 # httpGet: # host: 127.0.0.1 # path: /abc.html # port: 80 # scheme: HTTP # periodSeconds: 5 ## 每隔几秒来运行这个 # successThreshold: 1 ## 成功阈值，连续几次成才算成功 # failureThreshold: 5 ## 失败阈值，连续几次失败才算真失败 # 方式二，运行sh命令 exec: command: [\\\"/bin/sh\\\",\\\"-c\\\",\\\"cat /usr/share/nginx/html/abc.html\\\"] ## 返回不是0，那就是探测失败 # initialDelaySeconds: 20 ## 指定的这个秒以后才执行探测 periodSeconds: 5 ## 每隔几秒来运行这个 timeoutSeconds: 5 ##探测超时，到了超时时间探测还没返回结果说明失败 successThreshold: 1 ## 成功阈值，连续几次成才算成功 failureThreshold: 3 ## 失败阈值，连续几次失败才算真失败 # 就绪探针 readinessProbe: ##就绪检测，都是http httpGet: path: /abc.html ## 给容器发请求 port: 80 scheme: HTTP ## 返回不是0，那就是探测失败 initialDelaySeconds: 2 ## 指定的这个秒以后才执行探测 periodSeconds: 5 ## 每隔几秒来运行这个 timeoutSeconds: 5 ##探测超时，到了超时时间探测还没返回结果说明失败 successThreshold: 3 ## 成功阈值，连续几次成才算成功 failureThreshold: 5 ## 失败阈值，连续几次失败才算真失败 # livenessProbe: # exec: [\\\"/bin/sh\\\",\\\"-c\\\",\\\"sleep 30;abc \\\"] ## 返回不是0，那就是探测失败 # initialDelaySeconds: 20 ## 指定的这个秒以后才执行探测 # periodSeconds: 5 ## 每隔几秒来运行这个 # timeoutSeconds: 5 ##探测超时，到了超时时间探测还没返回结果说明失败 # successThreshold: 5 ## 成功阈值，连续几次成才算成功 # failureThreshold: 5 ## 失败阈值，连续几次失败才算真失败 \"]},\"148\":{\"h\":\"七、停止pod\",\"t\":[\"pod.spec.terminationGracePeriodSeconds = 30s 优雅停机；给一个缓冲时间\",\"健康检查+优雅停机 = 0宕机\",\"start完成以后，liveness和readness并存。   liveness失败导致重启。readness失败导致不给Service负载均衡网络中加，不接受流量。\"]},\"149\":{\"c\":[\"k8s\",\"部署\"]},\"150\":{\"c\":[\"devops\"]},\"151\":{\"h\":\"6、完成一次部署\"},\"152\":{\"h\":\"一、定义\",\"t\":[\"deployment为pod是和replicaSets提供声明式更新的能力。Delpoyment就是将实际状态变为期望状态的能力\"]},\"153\":{\"h\":\"二、deployment的特点\",\"t\":[\"赋予Pod自愈和故障转移能力\",\"水平扩容\",\"灰度发布\",\"滚动更新\",\"三、deployment-spec的字段\",\"FIELDS: minReadySeconds <integer> 新创建的pod应准备就绪的最小秒数 paused <boolean> 表示部署暂停。 progressDeadlineSeconds <integer> 部署进展之前的最长时间(以秒为单位)。默认为600s。 replicas <integer> 所需的pod。默认值为1。 revisionHistoryLimit <integer> 要保留以允许回滚的旧ReplicaSets的数量。默认为10. selector <Object> -required- 标签选择器。 strategy <Object> 用于用新pod替换现有pod的部署策略。 template <Object> -required- 模板描述了将要创建的pod。 \"]},\"154\":{\"h\":\"三、deployment规约\",\"t\":[\"Pod 模板 template\",\".spec 中只有 .spec.template 和 .spec.selector 是必需的字段。 \"]},\"155\":{\"h\":\"副本 replicas\",\"t\":[\".spec.replicas 是指定所需 Pod 的可选字段。它的默认值是1。 如果你对某个 Deployment 执行了手动扩缩操作（例如，通过 kubectl scale deployment deployment --replicas=X）， 之后基于清单对 Deployment 执行了更新操作（例如通过运行 kubectl apply -f deployment.yaml），那么通过应用清单而完成的更新会覆盖之前手动扩缩所作的变更。 \"]},\"156\":{\"h\":\"选择符 selector\",\"t\":[\".spec.selector 是指定本 Deployment 的 Pod 标签选择算符的必需字段。 .spec.selector 必须匹配 .spec.template.metadata.labels，否则请求会被 API 拒绝。 \"]},\"157\":{\"h\":\"策略 strategy\"},\"158\":{\"h\":\"重新创建 Deployment：Recreate\",\"t\":[\"如果 .spec.strategy.type==Recreate，在创建新 Pod 之前，所有现有的 Pod 会被杀死。 \"]},\"159\":{\"h\":\"滚动更新 Deployment：RollingUpdate\",\"t\":[\"Deployment 会在 .spec.strategy.type==RollingUpdate时，采取 滚动更新的方式更新 Pod。你可以指定 maxUnavailable 和 maxSurge 来控制滚动更新 过程。 # 最大不可用 .spec.strategy.rollingUpdate.maxUnavailable 是一个可选字段，用来指定 更新过程中不可用的 Pod 的个数上限。该值可以是绝对数字（例如，5），也可以是所需 Pod 的百分比（例如，10%）。百分比值会转换成绝对数并去除小数部分。 如果 .spec.strategy.rollingUpdate.maxSurge 为 0，则此值不能为 0。 默认值为 25%。 例如，当此值设置为 30% 时，滚动更新开始时会立即将旧 ReplicaSet 缩容到期望 Pod 个数的70%。 新 Pod 准备就绪后，可以继续缩容旧有的 ReplicaSet，然后对新的 ReplicaSet 扩容， 确保在更新期间可用的 Pod 总数在任何时候都至少为所需的 Pod 个数的 70%。 # 最大峰值 .spec.strategy.rollingUpdate.maxSurge 是一个可选字段，用来指定可以创建的超出期望 Pod 个数的 Pod 数量。此值可以是绝对数（例如，5）或所需 Pod 的百分比（例如，10%）。 如果 MaxUnavailable 为 0，则此值不能为 0。百分比值会通过向上取整转换为绝对数。 此字段的默认值为 25%。 例如，当此值为 30% 时，启动滚动更新后，会立即对新的 ReplicaSet 扩容，同时保证新旧 Pod 的总数不超过所需 Pod 总数的 130%。一旦旧 Pod 被杀死，新的 ReplicaSet 可以进一步扩容， 同时确保更新期间的任何时候运行中的 Pod 总数最多为所需 Pod 总数的 130%。 \"]},\"160\":{\"h\":\"进度期限秒数 progressDeadlineSeconds\",\"t\":[\".spec.progressDeadlineSeconds 是一个可选字段，用于指定系统在报告 Deployment 进展失败 之前等待 Deployment 取得进展的秒数。 这类报告会在资源状态中体现为 type: Progressing、status: False、 reason: ProgressDeadlineExceeded。Deployment 控制器将在默认 600 毫秒内持续重试 Deployment。 将来，一旦实现了自动回滚，Deployment 控制器将在探测到这样的条件时立即回滚 Deployment。 \"]},\"161\":{\"h\":\"最短就绪时间 minReadySeconds\",\"t\":[\".spec.minReadySeconds 是一个可选字段，用于指定新创建的 Pod 在没有任意容器崩溃情况下的最小就绪时间， 只有超出这个时间 Pod 才被视为可用。默认值为 0（Pod 在准备就绪后立即将被视为可用）。 \"]},\"162\":{\"h\":\"修订历史限制 revisionHistoryLimit\",\"t\":[\"Deployment 的修订历史记录存储在它所控制的 ReplicaSets 中。 .spec.revisionHistoryLimit 是一个可选字段，用来设定出于回滚目的所要保留的旧 ReplicaSet 数量。 这些旧 ReplicaSet 会消耗 etcd 中的资源，并占用 kubectl get rs 的输出。 每个 Deployment 修订版本的配置都存储在其 ReplicaSets 中；因此，一旦删除了旧的 ReplicaSet， 将失去回滚到 Deployment 的对应修订版本的能力。 默认情况下，系统保留 10 个旧 ReplicaSet \"]},\"163\":{\"h\":\"paused（暂停的）\",\"t\":[\".spec.paused 是用于暂停和恢复 Deployment 的可选布尔字段。 暂停的 Deployment 和未暂停的 Deployment 的唯一区别是，Deployment 处于暂停状态时， PodTemplateSpec 的任何修改都不会触发新的上线。 Deployment 在创建时是默认不会处于暂停状态。 \"]},\"164\":{\"h\":\"四、deployment 回滚解释\",\"t\":[\"一个deployment产生三个资源\",\"deployment资源：Deployment控制RS，RS控制Pod的副本数。每部署一个新版本就会创建一个新的副本集，利用他记录状态，回滚也是直接让指定的rs生效\",\"ReplicaSet： 只提供了副本数量的控制功能\",\"Pod资源：这次部署实际的运行的内容\"]},\"165\":{\"h\":\"五、deployment更新机制\",\"t\":[\"仅当 Deployment Pod 模板（即 .spec.template）发生改变时，例如模板的标签或容器镜像被更新， 才会触发 Deployment 上线。 其他更新（如对 Deployment 执行扩缩容的操作）不会触发上线动作。\",\"上线动作 原理： 创建新的rs，准备就绪后，替换旧的rs（此时不会删除，因为revisionHistoryLimit 指定了保留几个版本）\",\"部署回滚常用命令\",\"################更新################################# #kubectl set image deployment资源名 容器名=镜像名 kubectl set image deployment.apps/nginx-deployment php-redis=tomcat:8 --record ## yaml提取可更新的关键所有字段计算的hash。 web---- /hello postman aservice- /hello #或者直接修改定义也行 kubectl edit deployment.v1.apps/nginx-deployment #查看状态 kubectl rollout status deployment.v1.apps/nginx-deployment ################查看历史并回滚#################################### #查看更新历史-看看我们设置的历史总记录数是否生效了 kubectl rollout history deployment.v1.apps/nginx-deployment #回滚 kubectl rollout undo deployment.v1.apps/nginx-deployment --to-revision=2 ###############累计更新############## #暂停记录版本 kubectl rollout pause deployment.v1.apps/nginx-deployment #多次更新操作。 ##比如更新了资源限制 kubectl set resources deployment.v1.apps/nginx-deployment -c=nginx --limits=cpu=200m,memory=512Mi ##比如更新了镜像版本 kubectl set image deployment.apps/nginx-deployment php-redis=tomcat:8 ##在继续操作多次 ##看看历史版本有没有记录变化 kubectl rollout history deployment.v1.apps/nginx-deployment #让多次累计生效 kubectl rollout resume deployment.v1.apps/nginx-deployment \"]},\"166\":{\"h\":\"1.1 比例缩放\",\"t\":[\"maxSurge（最大增量）：除当前数量外还要添加多少个实例。\",\"maxUnavailable（最大不可用量）：滚动更新过程中的不可用实例数。\"]},\"167\":{\"h\":\"1.2 HPA（动态扩缩容）\",\"t\":[\"参考官网\"]},\"168\":{\"h\":\"1.3 蓝绿部署\"},\"169\":{\"h\":\"概念\",\"t\":[\"蓝绿发布，是在生产环境稳定集群之外，额外部署一个与稳定集群规模相同的新集群，并通过流量控制，逐步引入流量至新集群直至 100%，原先稳定集群将与新集群同时保持在线一段时间，期间发生任何异常，可立刻将所有流量切回至原稳定集群，实现快速回滚。直到全部验证成功后，下线老的稳定集群，新集群成为新的稳定集群。 \",\"Kubernetes 集群中需要部署 Nginx Ingress 作为 Ingress Controller，并且对外暴露了统一的流量入口。\"]},\"170\":{\"h\":\"基础步骤\",\"t\":[\"新集群部署\",\"切换流量\",\"下线老集群\"]},\"171\":{\"h\":\"1.4 金丝雀部署\",\"t\":[\"在金丝雀发布开始后，先启动一个新版本应用，但是并不直接将流量切过来，而是测试人员对新版本进行线上测试，启动的这个新版本应用，就是我们的金丝雀。如果没有问题，那么可以将少量的用户流量导入到新版本上，然后再对新版本做运行状态观察，收集各种运行时数据，如果此时对新旧版本做各种数据对比，就是所谓的A/B测试。\",\"当确认新版本运行良好后，再逐步将更多的流量导入到新版本上，在此期间，还可以不断地调整新旧两个版本的运行的服务器副本数量，以使得新版本能够承受越来越大的流量压力。直到将100%的流量都切换到新版本上，最后关闭剩下的老版本服务，完成金丝雀发布。\",\"如果在金丝雀发布过程中（灰度期）发现了新版本有问题，就应该立即将流量切回老版本上，这样，就会将负面影响控制在最小范围内。\"]},\"172\":{\"h\":\"滚动发布的缺点？（同时存在两个版本都能接受流量）\",\"t\":[\"没法控制流量 ； 6 4， 8 2 ，3 7\",\"滚动发布短时间就直接结束，不能直接控制新老版本的存活时间。\"]},\"173\":{\"c\":[\"k8s\",\"部署\"]},\"174\":{\"c\":[\"devops\"]},\"175\":{\"h\":\"7、RC和RS\"},\"176\":{\"h\":\"一、什么是控制器\",\"t\":[\"kubernetes中内建了很多controller（控制器），这些相当于一个状态机，用来控制pod的具体状态和行为。\",\"部分控制器类型如下：\",\"ReplicationController 和 ReplicaSet\",\"Deployment\",\"DaemonSet\",\"StatefulSet\",\"Job/CronJob\",\"HorizontalPodAutoscaler\"]},\"177\":{\"h\":\"二、ReplicationController 和 ReplicaSet\",\"t\":[\"ReplicationController (RC)用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的pod来替代；而异常多出来的容器也会自动回收。\",\"在新版的Kubernetes中建议使用ReplicaSet (RS)来取代ReplicationController。ReplicaSet跟ReplicationController没有本质的不同，只是名字不一样，但ReplicaSet支持集合式selector。\",\"虽然 ReplicaSets 可以独立使用，但如今它主要被Deployments 用作协调 Pod 的创建、删除和更新的机制。当使用 Deployment 时，你不必担心还要管理它们创建的 ReplicaSet，Deployment 会拥有并管理它们的 ReplicaSet。\",\"ReplicaSet 是下一代的 Replication Controller。 ReplicaSet 和 Replication Controller 的唯一区别是选择器的支持。ReplicaSet 支持新的基于集合的选择器需求，这在标签用户指南中有描述。而 Replication Controller 仅支持基于相等选择器的需求。\"]},\"178\":{\"h\":\"相同点\",\"t\":[\"作用：用于确保容器的应用副本数始终保持在用户定义的副本数，容器发生异常可以自动创建新的容器，异常容器会自动回收\",\"出现：都是deployment用于协调pod的创建，删除，更新。\"]},\"179\":{\"h\":\"不同点\",\"t\":[\"rs支持新的基于集合的选择器需求，rc仅支持基于相等选择器的需求\"]},\"180\":{\"h\":\"三、典型的应用场景\",\"t\":[\"滚动升级，回滚应用\",\"扩缩容\",\"暂停和继续deployment\"]},\"181\":{\"h\":\"四、 例子\",\"t\":[\"多 Deployment 动态更新\",\"假设创建一个 Deployment 以创建 nginx:1.7.9 的 5 个副本， 然后更新 Deployment 以创建 5 个 nginx:1.9.1 的副本， 而此时只有 3 个nginx:1.7.9 的副本已创建。在这种情况下， Deployment 会立即开始杀死3个 nginx:1.7.9 Pods，并 开始创建 nginx:1.9.1 Pods。它不等待nginx:1.7.9的 5 个副本完成后再更新为nginx:1.9.1。 \"]},\"182\":{\"c\":[\"k8s\",\"部署\"]},\"183\":{\"c\":[\"devops\"]},\"184\":{\"h\":\"8、DaemonSet和StatefulSet\"},\"185\":{\"h\":\"一、DaemonSet\"},\"186\":{\"h\":\"1、定义\",\"t\":[\"DaemonSet 控制器确保所有（或一部分）的节点都运行了一个指定的 Pod 副本。\",\"每当向集群中添加一个节点时，指定的 Pod 副本也将添加到该节点上\",\"当节点从集群中移除时，Pod 也就被垃圾回收了\",\"删除一个 DaemonSet 可以清理所有由其创建的 Pod\"]},\"187\":{\"h\":\"2、使用场景：\",\"t\":[\"在每个节点上运行集群的存储守护进程\",\"在每个节点上运行日志收集守护进程\",\"在每个节点上运行监控守护进程\"]},\"188\":{\"h\":\"二、StatefulSet\"},\"189\":{\"h\":\"1、定义\",\"t\":[\"有状态副本集；Deployment等属于无状态的应用部署（stateless）\"]},\"190\":{\"h\":\"2、特点\",\"t\":[\"给定 Pod 的存储必须由 PersistentVolume 驱动 基于所请求的 storage class 来提供，或者由管理员预先提供\",\"删除或者收缩 StatefulSet 并不会删除它关联的存储卷\",\"StatefulSet 当前需要无头服务 来负责 Pod 的网络标识。\",\"当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。 为了实现 StatefulSet 中的 Pod 可以有序地且体面地终止，可以在删除之前将 StatefulSet 缩放为 0。\",\"在默认 Pod 管理策略(OrderedReady) 时使用 滚动更新，可能进入需要人工干预 才能修复的损坏状态。\",\"按照顺序进行创建和删除pod\"]},\"191\":{\"h\":\"3、使用场景\",\"t\":[\"稳定、唯一的网络标识（dnsname）\",\"StatefulSet通过与其相关的无头服务为每个pod提供DNS解析条目\",\"稳定的、持久的存储；【每个Pod始终对应各自的存储路径（PersistantVolumeClaimTemplate）】\",\"有序的、优雅的部署和缩放。【按顺序地增加副本、减少副本，并在减少副本时执行清理】\",\"有序的、自动的滚动更新。【按顺序自动地执行滚动更新】\"]},\"192\":{\"c\":[\"k8s\",\"部署\"]},\"193\":{\"c\":[\"devops\"]},\"194\":{\"h\":\"9、任务和定时任务\"},\"195\":{\"h\":\"一、JOB\"},\"196\":{\"h\":\"1、定义\",\"t\":[\"kubernetes中的 Job 对象将创建一个或多个 Pod，并确保指定数量的 Pod 可以成功执行到进程正常结束：\"]},\"197\":{\"h\":\"2、特点\",\"t\":[\"当 Job 创建的 Pod 执行成功并正常结束时，Job 将记录成功结束的 Pod 数量\",\"当成功结束的 Pod 达到指定的数量时，Job 将完成执行\",\"删除 Job 对象时，将清理掉由 Job 创建的 Pod\",\"apiVersion: batch/v1 kind: Job metadata: name: pi spec: template: spec: containers: - name: pi image: perl command: [ \\\"perl\\\", \\\"-Mbignum=bpi\\\", \\\"-wle\\\", \\\"print bpi(2000)\\\" ] restartPolicy: Never #Job情况下，不支持Always backoffLimit: 4 #任务4次都没成，认为失败 activeDeadlineSeconds: 10 \"]},\"198\":{\"h\":\"参数说明\",\"t\":[\"#参数说明 kubectl explain job.spec activeDeadlineSeconds：10 总共维持10s #该字段限定了 Job 对象在集群中的存活时长，一旦达到 .spec.activeDeadlineSeconds 指定的时长，该 Job 创建的所有的 Pod 都将被终止。但是Job不会删除，Job需要手动删除，或者使用ttl进行清理 backoffLimit #设定 Job 最大的重试次数。该字段的默认值为 6；一旦重试次数达到了 backoffLimit 中的值，Job 将被标记为失败，且尤其创建的所有 Pod 将被终止； completions #Job结束需要成功运行的Pods。默认为1 manualSelector parallelism: 1 #并行运行的Pod个数，默认为1 ttlSecondsAfterFinished: 0 #在job执行完时马上删除 ttlSecondsAfterFinished: 100 #在job执行完后，等待100s再删除 #除了 CronJob 之外，TTL 机制是另外一种自动清理已结束Job（Completed 或 Finished）的方式： #TTL 机制由 TTL 控制器 提供，ttlSecondsAfterFinished 字段可激活该特性 #当 TTL 控制器清理 Job 时，TTL 控制器将删除 Job 对象，以及由该 Job 创建的所有 Pod 对象。 # job超时以后 已经完成的不删，正在运行的Pod就删除 #单个Pod时，Pod成功运行，Job就结束了 #如果Job中定义了多个容器，则Job的状态将根据所有容器的执行状态来变化。 #Job任务不建议去运行nginx，tomcat，mysql等阻塞式的，否则这些任务永远完不了。 #如果Job定义的容器中存在http server、mysql等长期的容器和一些批处理容器， #则Job状态不会发生变化（因为长期运行的容器不会主动结束）。此时可以通过Pod的. #status.containerStatuses获取指定容器的运行状态。 manualSelector： - job同样可以指定selector来关联pod。需要注意的是job目前可以使用两个API组来操作，batch/v1和extensions/v1beta1。当用户需要自定义selector时，使用两种API组时定义的参数有所差异。 - 使用batch/v1时，用户需要将jod的spec.manualSelector设置为true，才可以定制selector。默认为false。 - 使用extensions/v1beta1时，用户不需要额外的操作。因为extensions/v1beta1的spec.autoSelector默认为false，该项与batch/v1的spec.manualSelector含义正好相反。换句话说，使用extensions/v1beta1时，用户不想定制selector时，需要手动将spec.autoSelector设置为true。 \"]},\"199\":{\"h\":\"二、cronJob\"},\"200\":{\"h\":\"1、定义\",\"t\":[\"CronJob 按照预定的时间计划（schedule）创建 Job（注意：启动的是Job不是Deploy，rs）。一个 CronJob 对象类似于 crontab (cron table) 文件中的一行记录。该对象根据 Cron 格式定义的时间计划，周期性地创建 Job 对象。\",\"Schedule 所有 CronJob 的 `schedule` 中所定义的时间，都是基于 master 所在时区来进行计算的 \"]},\"201\":{\"h\":\"2、特点\",\"t\":[\"当以下两个条件都满足时，Job 将至少运行一次：\",\"startingDeadlineSeconds 被设置为一个较大的值，或者不设置该值（默认值将被采纳）\",\"concurrencyPolicy 被设置为 Allow\"]},\"202\":{\"h\":\"3、参数\",\"t\":[\"# kubectl explain cronjob.spec concurrencyPolicy：并发策略 \\\"Allow\\\" (允许，default): \\\"Forbid\\\" (禁止): forbids；前个任务没执行完，要并发下一个的话，下一个会被跳过 \\\"Replace\\\"(替换): 新任务，替换当前运行的任务 failedJobsHistoryLimit：记录失败数的上限，Defaults to 1. successfulJobsHistoryLimit： 记录成功任务的上限。 Defaults to 3. #指定了 CronJob 应该保留多少个 completed 和 failed 的 Job 记录。将其设置为 0，则 CronJob 不会保留已经结束的 Job 的记录。 jobTemplate： job怎么定义（与前面我们说的job一样定义法） schedule： cron 表达式； startingDeadlineSeconds： 表示如果Job因为某种原因无法按调度准时启动， 在spec.startingDeadlineSeconds时间段之内，CronJob仍然试图重新启动Job， 如果在.spec.startingDeadlineSeconds时间之内没有启动成功，则不再试图重新启动。 如果spec.startingDeadlineSeconds的值没有设置，则没有按时启动的任务不会被尝试重新启动。 suspend 暂停定时任务，对已经执行了的任务，不会生效； Defaults to false. \"]},\"203\":{\"h\":\"4、实例\",\"t\":[\"apiVersion: batch/v1beta1 kind: CronJob metadata: name: hello spec: schedule: \\\"*/1 * * * *\\\" #分、时、日、月、周 jobTemplate: spec: template: spec: containers: - name: hello image: busybox args: - /bin/sh - -c - date; echo Hello from the Kubernetes cluster restartPolicy: OnFailure \"]},\"204\":{\"c\":[\"k8s\",\"部署\"]},\"205\":{\"c\":[\"devops\"]},\"206\":{\"h\":\"redis10、分布式锁\"},\"207\":{\"c\":[\"redis\"]},\"208\":{\"c\":[\"IO多路复用\"]},\"209\":{\"h\":\"11、缓存淘汰和过期删除\"},\"210\":{\"h\":\"一、面试题\",\"t\":[\"redis 默认的内存是多少？在哪里查看？如何设置和修改？\",\"查看redis最大占用内存？ config get maxmemory 打开redis配置文件，设置maxmemory参数，maxmemory是bytes字节类型，注意转换。 redis默认内存多少可用？ redis.h 里我们可以看到最大可用内存 REDIS_DEFAULT_MAXMEMORY 的默认值是0，即最大可用内存默认没有设置最大值 64系统下不限制内存大小，32位操作系统最多可以使用3G 生产环境如何设置？ 设置为内存为最大内存的3/4 什么命令查看redis的内存使用情况？ info memory \",\"如果redis的内存使用超出了设置的最大值会怎么样？\",\"存不进去，没有加上过期时间就会导致数据写满maxmemory 为了避免类似情况，引出下一章内存淘汰策略 \"]},\"211\":{\"h\":\"二、缓存的定期淘汰策略\",\"t\":[\"三种策略\",\"立即删除 对于cpu不友好\",\"惰性删除 对于内存不友好\",\"定期删除 定期抽样，会有漏网之鱼\"]},\"212\":{\"h\":\"三、缓存淘汰策略\",\"t\":[\"noeviction: 不会驱逐任何key\",\"allkeys-lru: 对所有key使用LRU算法进行删除\",\"volatile-lru: 对所有设置了过期时间的key使用LRU算法进行删除\",\"allkeys-random: 对所有key随机删除\",\"volatile-random: 对所有设置了过期时间的key随机删除\",\"volatile-ttl: 删除马上要过期的key\",\"allkeys-lfu: 对所有key使用LFU算法进行删除\",\"volatile-lfu: 对所有设置了过期时间的key使用LFU算法进行删除\"]},\"213\":{\"h\":\"四、使用建议\",\"t\":[\"一般使用定期删除加上allkeys_lru\"]},\"214\":{\"c\":[\"redis\"]},\"215\":{\"c\":[\"缓存淘汰和过期删除\"]},\"216\":{\"h\":\"1、数据结构ziplist\"},\"217\":{\"h\":\"一、定义\",\"t\":[\"ziplist是一个经过特殊编码的双向链表，它不存储指向上一个链表节点和指向下一个链表节点的指针，而是存储上一个节点长度和当前节点长度，通过牺牲部分读写性能，来换取高效的内存空间利用率，节约内存，是一种时间换空间的思想。只用在字段个数少，字段值小的场景里面\",\"image-20230422094056447.png\"]},\"218\":{\"h\":\"二、优点\",\"t\":[\"时间换空间\",\"普通的双向链表会有两个指针，在存储数据很小的情况下，我们存储的实际数据的大小可能还没有指针占用的内存大，得不偿失。ziplist 是一个特殊的双向链表没有维护双向指针:prev next；而是存储上一个 entry的长度和 当前entry的长度，通过长度推算下一个元素在什么地方。牺牲读取的性能，获得高效的存储空间，因为(简短字符串的情况)存储指针比存储entry长度更费内存。这是典型的“时间换空间”。\",\"紧凑的数据结构\",\"链表在内存中一般是不连续的，遍历相对比较慢，而ziplist可以很好的解决这个问题，普通数组的遍历是根据数组里存储的数据类型找到下一个元素的(例如int类型的数组访问下一个元素时每次只需要移动一个sizeof(int)就行)，但是ziplist的每个节点的长度是可以不一样的，而我们面对不同长度的节点又不可能直接sizeof(entry)，所以ziplist只好将一些必要的偏移量信息记录在了每一个节点里，使之能跳到上一个节点或下一个节点。\",\"O(1)的获取获取数据length\",\"头节点里有头节点里同时还有一个参数 len，和string类型提到的 SDS 类似，这里是用来记录链表长度的。因此获取链表长度时不用再遍历整个链表，直接拿到len值就可以了，这个时间复杂度是 O(1)\"]},\"219\":{\"h\":\"三、zlentry实体结构解析\",\"t\":[\"压缩列表zlentry节点结构：每个zlentry由前一个节点的长度、encoding和entry-data三部分组成\",\"前节点：(前节点占用的内存字节数)表示前1个zlentry的长度，prev_len有两种取值情况：1字节或5字节。取值1字节时，表示上一个entry的长度小于254字节。虽然1字节的值能表示的数值范围是0到255，但是压缩列表中zlend的取值默认是255，因此，就默认用255表示整个压缩列表的结束，其他表示长度的地方就不能再用255这个值了。所以，当上一个entry长度小于254字节时，prev_len取值为1字节，否则，就取值为5字节。 enncoding：记录节点的content保存数据的类型和长度。 content：保存实际数据内容\",\"图像.png\"]},\"220\":{\"h\":\"四、hash的是实现方式之一\",\"t\":[\"哈希对象保存的键值对数量小于 512 个——ziplist\",\"所有的键值对的健和值的字符串长度都小于等于 64byte（一个英文字母一个字节） 时用ziplist，反之用hashtable\"]},\"221\":{\"c\":[\"redis\"]},\"222\":{\"c\":[\"zip list\",\"数据结构\"]},\"223\":{\"h\":\"2、quickList和SDS\"},\"224\":{\"h\":\"一、quickList定义\",\"t\":[\"list用quicklist来存储，quicklist存储了一个双向链表，每个节点都是一个ziplist\",\"img\",\"在低版本的Redis中，list采用的底层数据结构是ziplist+linkedList；\",\"高版本的Redis中底层数据结构是quicklist(它替换了ziplist+linkedList)，而quicklist也用到了ziplist\"]},\"225\":{\"h\":\"二、SDS定义\",\"t\":[\"Redis 没有直接使用 C 语言传统的字符串表示（以空字符结尾的字符数组，以下简称 C 字符串）， 而是自己构建了一种名为简单动态字符串（simple dynamic string，SDS）的抽象类型， 并将 SDS 用作 Redis 的默认字符串表示。\"]},\"226\":{\"h\":\"三、SDS 代码的定义\",\"t\":[\"struct sdshdr { // 记录 buf 数组中已使用字节的数量 // 等于 SDS 所保存字符串的长度 int len; // 记录 buf 数组中未使用字节的数量 int free; // 字节数组，用于保存字符串 char buf[]; }; \"]},\"227\":{\"h\":\"四、SDS 与 C 字符串的区别\",\"t\":[\"常数复杂度获取字符串长度\",\"因为 C 字符串并不记录自身的长度信息， 所以为了获取一个 C 字符串的长度， 程序必须遍历整个字符串， 对遇到的每个字符进行计数， 直到遇到代表字符串结尾的空字符为止， 这个操作的复杂度为 O(N) 。 和 C 字符串不同， 因为 SDS 在 len 属性中记录了 SDS 本身的长度， 所以获取一个 SDS 长度的复杂度仅为 O(1) 。 \",\"杜绝缓冲区溢出\",\"除了获取字符串长度的复杂度高之外， C 字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow）。 因为 C 字符串不记录自身的长度， 所以 strcat 假定用户在执行这个函数时， 已经为 dest 分配了足够多的内存， 可以容纳 src 字符串中的所有内容， 而一旦这个假定不成立时， 就会产生缓冲区溢出。 \",\"减少修改字符串时带来的内存重分配次数\",\"如果程序执行的是增长字符串的操作， 比如拼接操作（append）， 那么在执行这个操作之前， 程序需要先通过内存重分配来扩展底层数组的空间大小 —— 如果忘了这一步就会产生缓冲区溢出。 如果程序执行的是缩短字符串的操作， 比如截断操作（trim）， 那么在执行这个操作之后， 程序需要通过内存重分配来释放字符串不再使用的那部分空间 —— 如果忘了这一步就会产生内存泄漏。 为了避免 C 字符串的这种缺陷， SDS 通过未使用空间解除了字符串长度和底层数组长度之间的关联： 在 SDS 中， buf 数组的长度不一定就是字符数量加一， 数组里面可以包含未使用的字节， 而这 些字节的数量就由 SDS 的 free 属性记录。 通过未使用空间， SDS 实现了空间预分配和惰性空间释放两种优化策略。 \",\"惰性空间释放\",\"惰性空间释放用于优化 SDS 的字符串缩短操作： 当 SDS 的 API 需要缩短 SDS 保存的字符串时， 程序并不立即使用内存重分配来回收缩短后多出来的字节， 而是使用 free 属性将这些字节的数量 记录起来， 并等待将来使用。 \",\"空间预分配\",\"空间预分配用于优化 SDS 的字符串增长操作： 当 SDS 的 API 对一个 SDS 进行修改， 并且需 要对SDS 进行空间扩展的时候， 程序不仅会为 SDS 分配修改所必须要的空间， 还会为 SDS 分配 额外的未使用空间。 其中， 额外分配的未使用空间数量由以下公式决定： 如果对 SDS 进行修改之后， SDS 的长度（也即是 len 属性的值）将小于 1 MB ， 那么程序分 配和 len 属性同样大小的未使用空间， 这时 SDS len 属性的值将和 free 属性的值相同。 \",\"举个例子， 如果进行修改之后， SDS 的 len 将变成 13 字节， 那么程序也会分配 13 字节的未 使用空间， SDS 的 buf 数组的实际长度将变成 13 + 13 + 1 = 27 字节（额外的一字节用于保存空字符）。\",\"如果对 SDS 进行修改之后， SDS 的长度将大于等于 1 MB ， 那么程序会分配 1 MB 的未使用空间。 举个例子， 如果进行修改之后， SDS 的 len 将变成 30 MB ， 那么程序会分配 1 MB 的未使用空间， SDS 的 buf 数组的实际长度将为 30 MB + 1 MB + 1 byte 。\",\"二进制安全\",\" 字符串中的字符必须符合某种编码（比如 ASCII）， 并且除了字符串的末尾之外， 字符串里面不能包含空字符， 否则最先被程序读入的空字符将被误认为是字符串结尾 —— 这些限制使得 C 字符串只能保存文本数据， 而不能保 存像图片、音频、视频、压缩文件这样的二进制数据。 \",\"举个例子， 如果有一种使用空字符来分割多个单词的特殊数据格式， 如图 2-17 所示， 那么这种格式就不能使\\n用 C 字符串来保存， 因为 C 字符串所用的函数只会识别出其中的 \\\"Redis\\\" ， 而忽略之后的 \\\"Cluster\\\" 。\"]},\"228\":{\"c\":[\"redis\"]},\"229\":{\"c\":[\"quickList\",\"SDS\"]},\"230\":{\"h\":\"3、skip-list跳表\"},\"231\":{\"h\":\"一、定义\",\"t\":[\"跳表是可以实现二分查找的有序链表，跳表=链表+多级索引\",\"skiplist是一种以空间换取时间的结构。由于链表，无法进行二分查找，因此借鉴数据库索引的思想，提取出链表中关键节点（索引），先在关键节点上查找，再进入下层链表查找。提取多层关键节点，就形成了跳跃表\"]},\"232\":{\"h\":\"二、跳表的实现\",\"t\":[\"image-20230422100426672\"]},\"233\":{\"h\":\"三、复杂度\",\"t\":[\"时间负载度 Olog(N)\",\"空间复杂度O(N)\"]},\"234\":{\"h\":\"四、优缺点\",\"t\":[\"优点\",\"跳表是一个最典型的空间换时间解决方案，而且只有在数据量较大的情况下才能体现出来优势。而且应该是读多写少的情况下才能使用，所以它的适用范围应该还是比较有限的\",\"缺点\",\"维护成本相对要高 - 新增或者删除时需要把所有索引都更新一遍；\\n最后在新增和删除的过程中的更新，时间复杂度也是O(log n)\"]},\"235\":{\"c\":[\"redis\"]},\"236\":{\"c\":[\"skip list\",\"数据结构\"]},\"237\":{\"h\":\"4、布隆过滤器\"},\"238\":{\"h\":\"一、定义\",\"t\":[\"由一个初值都为零的bit数组和多个哈希函数构成，用来快速判断某个数据是否存在\"]},\"239\":{\"h\":\"二、作用\",\"t\":[\"本质就是判断具体数据存不存在一个大的集合中\",\"布隆过滤器是一种类似set的数据结构，只是统计结果不太准确\"]},\"240\":{\"h\":\"三、特点\",\"t\":[\"高效地插入和查询，占用空间少，返回的结果是不确定性的。\",\"一个元素如果判断结果为存在的时候元素不一定存在，但是判断结果为不存在的时候则一定不存在。\",\"布隆过滤器可以添加元素，但是不能删除元素。因为删掉元素会导致误判率增加。\",\"误判只会发生在过滤器没有添加过的元素，对于添加过的元素不会发生误判。\"]},\"241\":{\"h\":\"四、使用场景\",\"t\":[\"解决缓存穿透\",\"黑名单校验\"]},\"242\":{\"h\":\"五、布隆过滤器误判率\",\"t\":[\"布隆过滤器的误判是指多个输入经过哈希之后在相同的bit位置1了，这样就无法判断究竟是哪个输入产生的， 因此误判的根源在于相同的 bit 位被多次映射且置 1。\",\"这种情况也造成了布隆过滤器的删除问题，因为布隆过滤器的每一个 bit 并不是独占的，很有可能多个元素共享了某一位。 如果我们直接删除这一位的话，会影响其他的元素\",\"这里是和发生hash冲突的数据结构有关，发生了hash冲突，冲突的数据组合为一个链表，一个key可能对应着多个数据\"]},\"243\":{\"h\":\"特性\",\"t\":[\"一个元素判断结果为没有时则一定没有， 如果判断结果为存在的时候元素不一定存在。\",\"布隆过滤器可以添加元素，但是不能删除元素。因为删掉元素会导致误判率增加。\"]},\"244\":{\"h\":\"六、优缺点\",\"t\":[\"优点\",\"高效的插入和查询，占用更少的空间\",\"缺点\",\"不能删除数据，可能会增加误判率\",\"存在误判，发生hash冲突，不同的数据可能会出现相同的值\"]},\"245\":{\"h\":\"七、使用建议\",\"t\":[\"当实际元素数量超过初始化数量时，应该对布隆过滤器进行重建，重新分配一个 size 更大的过滤器，再将所有的历史元素批量 add 进行\",\"原因是因为布隆过滤器不能删除数据，删除数据可能会造成删除多个值，使得误判率增加 \"]},\"246\":{\"c\":[\"redis\"]},\"247\":{\"c\":[\"布隆过滤器\"]},\"248\":{\"h\":\"5、缓存击穿\"},\"249\":{\"h\":\"一、定义\",\"t\":[\"大量的请求同时查询一个 key 时，此时这个key正好失效了，就会导致大量的请求都打到数据库上面去。\",\"redis的高QPS特性,可以很好的解决查数据库很慢的问题。但是如果我们系统的并发很高,在某个时间节点,突然缓存失效,这时候有大量的请求打过来，那么由于redis没有缓存数据,这时候我们的请求会全部去查一遍数据库，这时候我们的数据库服务会面临非常大的风险,要么连接被占满，要么其他业务不可用，这种情况就是redis的缓存击穿\"]},\"250\":{\"h\":\"二、缓存的设计\",\"t\":[\"redis简单缓存设计\"]},\"251\":{\"h\":\"三、解决缓存击穿的问题\",\"t\":[\"定时任务主动刷新缓存\",\"多级缓存模式\",\"设置两个redis缓存值，两个缓冲设置不同的过期时间，然后利用定时任务主动刷新缓存，当其中一个缓冲过期后，立马查询另外一个缓冲数据这样可以有效的避免缓冲击穿的现象 \",\"image-20230422104209647\"]},\"252\":{\"h\":\"四、注意点\",\"t\":[\"设置缓存的差异时间要大于数据插入到缓冲B的时间\",\"缓存的创建和查询顺序\",\"先更新B再更新A\",\"查询先查缓存A再查询缓存B\"]},\"253\":{\"c\":[\"redis\"]},\"254\":{\"c\":[\"缓存击穿\"]},\"255\":{\"h\":\"6、持久化机制\",\"t\":[\"Redis 的数据全部在内存里，如果突然宕机，数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。\",\"Redis 的持久化机制有两种，第一种是RDB快照，第二种是 AOF 日志。快照是一次全量备份，AOF 日志是连续的增量备份。快照是内存数据的二进制序列化形式，在存储上非常紧凑，而 AOF 日志记录的是内存数据修改的指令记录文本。\"]},\"256\":{\"h\":\"一、RDB机制\",\"t\":[\"RDB快照是某个时间点的一次全量数据备份，是二进制文件，在存储上非常紧凑。\",\"RDB持久化触发机制分为：手动触发和自动触发手动触发\",\"save命令：会阻塞当前服务器，直到RDB完成为止，如果数据量大的话会造成长时间的阻塞，线上环境一般禁止使用 save命令：就是background save，执行bgsave命令时Redis主进程会fork一个子进程来完成RDB的过程，完成后自动结束（操作系统的多进程Copy On Write机制，简称COW）。所以Redis主进程阻塞时间只有fork阶段的那一下。相对于save，阻塞时间很短。\",\"自动触发\",\"场景一：配置redis.conf，触发规则，自动执行\",\"# 当在规定的时间内，Redis发生了写操作的个数满足条件，会触发发生BGSAVE命令。 # save <seconds> <changes> # 当用户设置了多个save的选项配置，只要其中任一条满足，Redis都会触发一次BGSAVE操作 save 900 1 save 300 10 save 60 10000 # 以上配置的含义：900秒之内至少一次写操作、300秒之内至少发生10次写操作、 # 60秒之内发生至少10000次写操作，只要满足任一条件，均会触发bgsave \",\"场景二：执行shutdown命令关闭服务器时，如果没有开启AOF持久化功能，那么会自动执行一次bgsave\",\"场景三：主从同步（slave和master建立同步机制）\",\"img\"]},\"257\":{\"h\":\"二、RDB执行流程\",\"t\":[\"Redis 使用操作系统的多进程 cow(Copy On Write) 机制来实现RDB快照持久化\",\"执行bgsave命令的时候，Redis主进程会检查是否有子进程在执行RDB/AOF持久化任务，如果有的话，直接返回\",\"Redis主进程会fork一个子进程来执行执行RDB操作，fork操作会对主进程造成阻塞（影响Redis的读写），fork操作完成后会发消息给主进程，从而不再阻塞主进程。（阻塞仅指主进程fork子进程的过程，后续子进程执行操作时不会阻塞）\",\"RDB子进程会根据Redis主进程的内存生成临时的快照文件，持久化完成后会使用临时快照文件替换掉原来的RDB文件。（该过程中主进程的读写不受影响，但Redis的写操作不会同步到主进程的主内存中，而是会写到一个临时的内存区域作为一个副本）\",\"子进程完成RDB持久化后会发消息给主进程，通知RDB持久化完成（将上阶段内存副本中的增量写数据同步到主内存）\"]},\"258\":{\"h\":\"三、RDB的优缺点\",\"t\":[\"优点\",\"RDB文件小，非常适合定时备份，用于灾难恢复\",\"Redis加载RDB文件的速度比AOF快很多，因为RDB文件中直接存储的时内存数据，而AOF文件中存储的是一条条命令，需要重演命令。\",\"缺点\",\"RDB无法做到实时持久化，若在两次bgsave间宕机，则会丢失区间（分钟级）的增量数据，不适用于实时性要求较高的场景\",\"RDB的cow机制中，fork子进程属于重量级操作，并且会阻塞redis主进程\",\"存在老版本的Redis不兼容新版本RDB格式文件的问题\"]},\"259\":{\"h\":\"四、AOF（append only file）日志\",\"t\":[\"AOF日志是持续增量的备份，是基于写命令存储的可读的文本文件。AOF日志会在持续运行中持续增大，由于Redis重启过程需要优先加载AOF日志进行指令重放以恢复数据，恢复时间会无比漫长。所以需要定期进行AOF重写，对AOF日志进行瘦身。目前AOF是Redis持久化的主流方式。\"]},\"260\":{\"h\":\"2.1 开启方式\",\"t\":[\"AOF默认是关闭的，通过redis.conf配置文件进行开启\",\"## 此选项为aof功能的开关，默认为“no”，可以通过“yes”来开启aof功能 ## 只有在“yes”下，aof重写/文件同步等特性才会生效 appendonly yes ## 指定aof文件名称 appendfilename appendonly.aof ## 指定aof操作中文件同步策略，有三个合法值：always everysec no,默认为everysec appendfsync everysec ## 在aof-rewrite期间，appendfsync是否暂缓文件同步，\\\"no\\\"表示“不暂缓”，“yes”表示“暂缓”，默认为“no” no-appendfsync-on-rewrite no ## aof文件rewrite触发的最小文件尺寸(mb,gb),只有大于此aof文件大于此尺寸是才会触发rewrite，默认“64mb”，建议“512mb” auto-aof-rewrite-min-size 64mb ## 相对于“上一次”rewrite，本次rewrite触发时aof文件应该增长的百分比 ## 每一次rewrite之后，redis都会记录下此时“新aof”文件的大小(例如A) ## aof文件增长到A*(1 + p)之后，触发下一次rewrite，每一次aof记录的添加，都会检测当前aof文件的尺寸。 auto-aof-rewrite-percentage 100 \",\"AOF是文件操作，对于变更操作比较密集的server，那么将造成磁盘IO的负荷加重。此外linux对文件操作采取了“延迟写入”手段，即并非每次write操作都会触发实际磁盘操作，而是进入了buffer中，当buffer数据达到阀值时触发实际写入(也有其他时机)，这是linux对文件系统的优化。\",\"Linux 的glibc提供了fsync(int fd)函数可以将指定文件的内容强制从内核缓存刷到磁盘。只要 Redis 进程实时调用 fsync 函数就可以保证 aof 日志不丢失。但是 fsync 是一个磁盘 IO 操作，它很慢！如果 Redis 执行一条指令就要 fsync 一次，那么 Redis 高性能的地位就不保了。\",\"因此在上述配置文件中，可观察到Redis中提供了3中AOF记录同步选项：\",\"always：每一条AOF记录都立即同步到文件，性能很低，但较为安全。\",\"everysec：每秒同步一次，性能和安全都比较中庸的方式，也是redis推荐的方式。如果遇到物理服务器故障，可能导致最多1秒的AOF记录丢失。\",\"no：Redis永不直接调用文件同步，而是让操作系统来决定何时同步磁盘。性能较好，但很不安全。\"]},\"261\":{\"h\":\"2.2 重写（rewrite）机制\",\"t\":[\"AOF日志会在持续运行中持续增大，需要定期进行AOF重写，对AOF日志进行瘦身。\",\"AOF Rewrite 虽然是“压缩”AOF文件的过程，但并非采用“基于原AOF文件”来重写或压缩，而是采取了类似RDB快照的方式：基于Copy On Write，全量遍历内存中数据，然后逐个序列到AOF文件中。因此AOF rewrite能够正确反应当前内存数据的状态。\",\"AOF重写（bgrewriteaof）和RDB快照写入（bgsave）过程类似，二者都消耗磁盘IO。Redis采取了“schedule”策略：无论是“人工干预”还是系统触发，快照和重写需要逐个被执行。\",\"重写过程中，对于新的变更操作将仍然被写入到原AOF文件中，同时这些新的变更操作也会被Redis收集起来。当内存中的数据被全部写入到新的AOF文件之后，收集的新的变更操作也将被一并追加到新的AOF文件中。然后将新AOF文件重命名为appendonly.aof，使用新AOF文件替换老文件，此后所有的操作都将被写入新的AOF文件。\"]},\"262\":{\"h\":\"2.3 触发机制\",\"t\":[\"和RDB类似，AOF触发机制也分为：手动触发和自动触发\",\"手动触发 直接调用bgrewriteaof命令\",\"redis-cli -h ip -p port bgrewriteaof \",\"自动触发\",\"根据auto-aof-rewrite-min-size和auto-aof-rewrite-percentage参数确定自动触发时机\",\"auto-aof-rewrite-min-size:表示运行AOF重写时文件最小体积，默认为64MB（我们线上是512MB）。 auto-aof-rewrite-percentage:代表当前AOF文件空间（aof_current_size）和上一次重写后AOF文件空间（aof_base_size）的值 \",\"自动触发时机：\",\"(aof_current_size > auto-aof-rewrite-min-size ) && (aof_current_size - aof_base_size) / aof_base_size >= auto-aof-rewrite-percentage \",\"其中aof_current_size和aof_base_size可以在info Persistence统计信息中查看。\"]},\"263\":{\"h\":\"2.4 AOF的优缺点\",\"t\":[\"优点 AOF只是追加写日志文件，对服务器性能影响较小，速度比RDB要快，消耗的内存较少\",\"缺点\",\"AOF方式生成的日志文件太大，需要不断AOF重写，进行瘦身。\",\"即使经过AOF重写瘦身，由于文件是文本文件，文件体积较大（相比于RDB的二进制文件）。\",\"AOF重演命令式的恢复数据，速度显然比RDB要慢。\"]},\"264\":{\"h\":\"三、Redis 4.0 混合持久化\",\"t\":[\"仅使用RDB快照方式恢复数据，由于快照时间粒度较大，时回丢失大量数据。\",\"仅使用AOF重放方式恢复数据，日志性能相对 rdb 来说要慢。在 Redis 实例很大的情况下，启动需要花费很长的时间。\",\"Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。将 rdb 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是自持久化开始到持久化结束的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小。相当于：\",\"大量数据使用粗粒度（时间上）的rdb快照方式，性能高，恢复时间快。\",\"增量数据使用细粒度（时间上）的AOF日志方式，尽量保证数据的不丢失。\",\"在 Redis 重启的时候，可以先加载 rdb 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。\",\"问题：混合持久化是最佳方式吗？\",\"不一定。\",\"首先，混合持久化是Redis 4.0才引入的特性，现在很多 公司可能都还在使用3.x版本。使用不了这一特性。\",\"另外，可以使用下面这种方式。Master使用AOF，Slave使用RDB快照，master需要首先确保数据完整性，它作为数据备份的第一选择；slave提供只读服务或仅作为备机，它的主要目的就是快速响应客户端read请求或灾切换。\"]},\"265\":{\"c\":[\"redis\"]},\"266\":{\"c\":[\"持久化方式\"]},\"267\":{\"h\":\"7、IO多路复用\",\"t\":[\"问题redis单线程如何处理多并发客户端连接，为什么单线程还可以这么快\",\"redis使用epoll来实现IO多路复用，将连接信息和事件放到队列中，一次性的放到文件事件分派器中，事件分配器分发给事件处理器 \"]},\"268\":{\"h\":\"1、定义\",\"t\":[\"Redis 是跑在单线程中的，所有的操作都是按照顺序线性执行的，但是由于读写操作等待用户输入或输出都是阻塞的，所以 I/O 操作在一般情况下往往不能直接返回，这会导致某一文件的 I/O 阻塞导致整个进程无法对其它客户提供服务，而 I/O 多路复用就是为了解决这个问题而出现\",\"所谓 I/O 多路复用机制，就是说通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。这种机制的使用需要 select 、 poll 、 epoll 来配合。多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。\",\"Redis 服务采用 Reactor 的方式来实现文件事件处理器（每一个网络连接其实都对应一个文件描述符） Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器。它的组成结构为4部分：\",\"多个套接字、\",\"IO多路复用程序、\",\"文件事件分派器、\",\"事件处理器。\",\"因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型\"]},\"269\":{\"h\":\"2、名称解释\",\"t\":[\"I/O ：网络 I/O\",\"多路：多个客户端连接（连接就是套接字描述符，即 socket 或者 channel）\",\"复用：复用一个或几个线程。也就是说一个或一组线程处理多个 TCP 连接,使用单进程就能够实现同时处理多个客户端的连接\",\" 所谓 I/O 多路复用机制指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程，就是说通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。这种机制的使用需要 select 、 poll 、 epoll 来配合。 多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。 当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。 \"]},\"270\":{\"h\":\"3、Reactor\",\"t\":[\"基于 I/O 复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。\",\"Reactor 模式，是指通过一个或多个输入同时传递给服务处理器的服务请求的事件驱动处理模式。服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor 模式也叫 Dispatcher 模式。即 I/O 多了复用统一监听事件，收到事件后分发(Dispatch 给某进程)，是编写高性能网络服务器的必备技术。\",\"image-20230422110407573\",\"Reactor 模式中有 2 个关键组成：\\n1）Reactor：Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 IO 事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；\\n2）Handlers：处理程序执行 I/O 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际办理人。Reactor 通过调度适当的处理程序来响应 I/O 事件，处理程序执行非阻塞操作。\"]},\"271\":{\"c\":[\"redis\"]},\"272\":{\"c\":[\"IO多路复用\"]},\"273\":{\"h\":\"8、缓存双写一致性\"},\"274\":{\"h\":\"一、基本思路\",\"t\":[\"redis中有数据需要和数据库中的数据一致\",\"redis中没有数据，数据库中的值要是最终值\"]},\"275\":{\"h\":\"二、canal简介\"},\"276\":{\"h\":\"1、定义\",\"t\":[\"canal是基于msyql binlog日志的增量订阅和消费的组件\"]},\"277\":{\"h\":\"2、作用\",\"t\":[\"数据库镜像\",\"数据库实时备份\",\"带有业务逻辑的增量数据处理\"]},\"278\":{\"h\":\"3、工作原理\",\"t\":[\"canal 工作原理 canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议 MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal ) canal 解析 binary log 对象(原始为 byte 流) \"]},\"279\":{\"h\":\"4、基本操作\",\"t\":[\"开启mysql的binlog写入功能\",\"授权cannal连接msyql\",\"重启mysql\"]},\"280\":{\"h\":\"二，缓存数据的双写一致性探讨\"},\"281\":{\"h\":\"1、目的\",\"t\":[\"要达到缓存数据和mysql数据最终一致\"]},\"282\":{\"h\":\"2、方案一 、先更新数据库，再更新缓存\",\"t\":[\"问题有可能更新缓存失败，造成缓存数据为旧数据，缓存数据和mysql数据不一致\"]},\"283\":{\"h\":\"3、方案二、先删除缓存，再更新数据库\",\"t\":[\"问题一、缓冲数据和mysql数据不一致\",\"A线程先删除缓存数据，再去更新mysql，此时来了一个请求B线程，B线程查询缓存没有查到，然后从数据库查询，查询结束将查到的数据写到缓存中，后面再来请求，发生缓存数据和mysql数据不一致，有可能一直脏下去\",\"总结流程： （1）请求A进行写操作，删除缓存后，工作正在进行中......A还么有彻底更新完 （2）请求B开工，查询redis发现缓存不存在 （3）请求B继续，去数据库查询得到了myslq中的旧值 （4）请求B将旧值写入redis缓存 （5）请求A将新值写入mysql数据库 上述情况就会导致不一致的情形出现。\",\"时间\",\"线程A\",\"线程B\",\"出现的问题\",\"t1\",\"请求A进行写操作，删除缓存后，工作正在进行中......\",\"t2\",\"1 缓存中读取不到，立刻读mysql，由于A还没有对mysql更新完，读到的是旧值。2 还把从mysql读取的旧值，写回了redis\",\"1 A还更新完mysql，导致B读到了旧值2 线程B遵守回写机制，把旧值写回redis，导致其它请求读取的还是旧值，A白干了。\",\"t3\",\"更新mysql数据库的值，over\",\"redis是被B写回的旧值，mysql是被A更新的新值。出现了，数据不一致问题。\"]},\"284\":{\"h\":\"4、方案三、 先更新mysql数据，最后删除缓存\",\"t\":[\"假如缓存失败，或者是删除未完成，导致请求再次访问，redis命中缓存，读取的还是旧值\"]},\"285\":{\"h\":\"5、解决方案\",\"t\":[\"image-20230422140030329\",\"总结来说\",\"第一步、更新完成数据库的时候，删除缓存数据\",\"第二步、此时如果来了一个请求查询，此时缓存无数据，查询数据库，但是查询数据库的时候加个锁（for update）并且休眠一段时间（这个时间为缓存数据插入到数据库的两倍）\",\"第三步、将缓存数据保存的任务放到消息队列中（celery）,设置异常重试策略，如果多次插入失败，通知运维人员\"]},\"286\":{\"h\":\"6、问题\",\"t\":[\"为什么要加休眠时间\",\"这个休眠时间为了保证将数据写入到缓存中 \",\"为什么要加锁\",\"加锁的原因是为了在此期间数据再次发生变化 \"]},\"287\":{\"h\":\"三、总结\",\"t\":[\"在大多数业务场景下，我们会把Redis作为只读缓存使用。假如定位是只读缓存来说， 理论上我们既可以先删除缓存值再更新数据库，也可以先更新数据库再删除缓存，但是没有完美方案，两害相衡趋其轻的原则\",\"个人建议是，优先使用先更新数据库，再删除缓存的方案。理由如下：\",\"1 先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力，严重导致打满mysql。\",\"2 如果业务应用中读取数据库和写缓存的时间不好估算，那么，延迟双删中的等待时间就不好设置。\"]},\"288\":{\"h\":\"四、延迟双删策略\",\"t\":[\"线程A更新数据库，然后删除缓存休眠一段时间，再删除缓存\",\"线程B查询，缓存中没有数据，然后写缓存，\",\"这个时候数据不一致的窗口期为两次删除缓存之间的时间间隔\"]},\"289\":{\"h\":\"五、两种方式的对比\",\"t\":[\"方式一，更新数据库删除缓存，查询数据库的时候进行加锁，防止写入缓存的时候会降低并发性，延误并发时间为插入数据库的时间，没有缓存数据和mysql数据不一致的时候\",\"方式二，更新数据库删除缓存，休眠后再次删除缓存，这种的话会出现不一致的时间窗口，但是时间间隔为两次删除之间的时间间隔。保证的高并发的要求\"]},\"290\":{\"c\":[\"redis\"]},\"291\":{\"c\":[\"缓存双写一致性\"]},\"292\":{\"h\":\"9、抢红包\"},\"293\":{\"h\":\"一、需求分析\",\"t\":[\"节假日发红包抢红包，高并发业务\",\"一个大红包分为多个小红包\",\"每个人只可以抢一次，抢完一个就不能再抢，直到总数为0\",\"红包过期，红包退回\"]},\"294\":{\"h\":\"二、问题点\",\"t\":[\"拆分算法如何\",\"每个人只可以抢一次，次数限制\",\"原子性，没抢到一个红包就要减少一个库存\"]},\"295\":{\"h\":\"三、架构设计\",\"t\":[\"发红包 \",\"拆分红包 \",\"金额总和为红包金额\",\"每个人都可以抢到红包\",\"保证每个人的金额几率相等\",\"抢红包\",\"记红包\",\"红包的拆分算法、红包的存储使用list，并设置红包的过期时间\",\"用户抢红包使用Lpush 把红包从redis中出列\",\"记红包使用hash,记录用户的id和红包金额\",\"用户抢过之后不能在抢\"]},\"296\":{\"c\":[\"redis\"]},\"297\":{\"c\":[\"抢红包\"]},\"298\":{\"h\":\"10、分库分表和带来的问题\"},\"299\":{\"h\":\"一、什么是分库分表\",\"t\":[\"简单来说，就是指通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主机）上面，以达到分散单台设备负载的效果。\",\"image.png\",\"分库分表解决的问题\",\"分库分表的目的是为了解决由于数据量过大而导致数据库性能降低的问题，将原来单体服务的数据库进行拆分.将数据大表拆分成若干数据表组成，使得单一数据库、单一数据表的数据量变小，从而达到提升数据库性能的目的。\",\"什么情况下需要分库分表\",\"单机存储容量遇到瓶颈.\",\"连接数,处理能力达到上限.\",\"注意:\",\"分库分表之前,要根据项目的实际情况 确定我们的数据量是不是够大,并发量是不是够大,来决定是否分库分表.\",\"数据量不够就不要分表,单表数据量超过1000万或100G的时候, 速度就会变慢(官方测试),\",\"分库分表包括： 垂直分库、垂直分表、水平分库、水平分表 四种方式。\"]},\"300\":{\"h\":\"二、垂直分库\",\"t\":[\"数据库中不同的表对应着不同的业务，垂直切分是指按照业务的不同将表进行分类,分布到不同的数据库上面\",\"将数据库部署在不同服务器上，从而达到多个服务器共同分摊压力的效果\",\"image.png\"]},\"301\":{\"h\":\"三、垂直分表\",\"t\":[\"表中字段太多且包含大字段的时候，在查询时对数据库的IO、内存会受到影响，同时更新数据时，产生的binlog文件会很大，MySQL在主从同步时也会有延迟的风险\",\"将一个表按照字段分成多表，每个表存储其中一部分字段。\",\"对职位表进行垂直拆分, 将职位基本信息放在一张表, 将职位描述信息存放在另一张表\",\"image.png\",\"垂直拆分带来的一些提升 \",\"解决业务层面的耦合，业务清晰\",\"能对不同业务的数据进行分级管理、维护、监控、扩展等\",\"高并发场景下，垂直分库一定程度的提高访问性能\",\"垂直拆分没有彻底解决单表数据量过大的问题\"]},\"302\":{\"h\":\"四、水平分库\",\"t\":[\"将单张表的数据切分到多个服务器上去，每个服务器具有相应的库与表，只是表中数据集合不同。 水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源等的瓶颈.\",\"简单讲就是根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库（主机）上面, 例如将订单表 按照id是奇数还是偶数, 分别存储在不同的库中。\",\"image.png\"]},\"303\":{\"h\":\"五、水平分表\",\"t\":[\"针对数据量巨大的单张表（比如订单表），按照规则把一张表的数据切分到多张表里面去。 但是这些表还是在同一个库中，所以库级别的数据库操作还是有IO瓶颈。\",\"image.png\",\"总结\",\"垂直分表: 将一个表按照字段分成多表，每个表存储其中一部分字段。\",\"垂直分库: 根据表的业务不同,分别存放在不同的库中,这些库分别部署在不同的服务器.\",\"水平分库: 把一张表的数据按照一定规则,分配到不同的数据库,每一个库只有这张表的部分数据.\",\"水平分表: 把一张表的数据按照一定规则,分配到同一个数据库的多张表中,每个表只有这个表的部分数据.\"]},\"304\":{\"h\":\"六、分库分表带来的问题\",\"t\":[\"全局主键避重问题，主键id的选择\",\"事务一致性问题\",\"跨节点关联查询 join 问题\",\"跨节点分页、排序、函数问题\",\"ER分片\",\"数据迁移、扩容问题\"]},\"305\":{\"c\":[\"mysql\"]},\"306\":{\"c\":[\"分库分表\"]},\"307\":{\"h\":\"11、innoDB和MyISAM\"},\"308\":{\"h\":\"一、区别\",\"t\":[\"InnoDB和MyISAM是使用MySQL时最常用的两种引擎类型，我们重点来看下两者区别。\",\"事务和外键 InnoDB支持事务和外键，具有安全性和完整性，适合大量insert或update操作 MyISAM不支持事务和外键，它提供高速存储和检索，适合大量的select查询操作\",\"锁机制 InnoDB支持行级锁，锁定指定记录。基于索引来加锁实现。 MyISAM支持表级锁，锁定整张表。\",\"索引结构 InnoDB使用聚集索引（聚簇索引），索引和记录在一起存储，既缓存索引，也缓存记录。 MyISAM使用非聚集索引（非聚簇索引），索引和记录分开。\",\"并发处理能力 MyISAM使用表锁，会导致写操作并发率低，读之间并不阻塞，读写阻塞。 InnoDB读写阻塞可以与隔离级别有关，可以采用多版本并发控制（MVCC）来支持高并发\",\"存储文件 InnoDB表对应两个文件，一个.frm表结构文件，一个.ibd数据文件。InnoDB表最大支持64TB； MyISAM表对应三个文件，一个.frm表结构文件，一个MYD表数据文件，一个.MYI索引文件。从MySQL5.0开始默认限制是256TB。\",\"image.png\"]},\"309\":{\"h\":\"二、MyISAM 适用场景\",\"t\":[\"不需要事务支持（不支持）\",\"并发相对较低（锁定机制问题）\",\"数据修改相对较少，以读为主\",\"数据一致性要求不高\"]},\"310\":{\"h\":\"三、InnoDB 适用场景\",\"t\":[\"需要事务支持（具有较好的事务特性）\",\"行级锁定对高并发有很好的适应能力\",\"数据更新较为频繁的场景\",\"数据一致性要求较高\",\"硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，减少磁盘IO\"]},\"311\":{\"h\":\"四、两种引擎该如何选择？\",\"t\":[\"是否需要事务？有，InnoDB\",\"是否存在并发修改？有，InnoDB\",\"是否追求快速查询，且数据修改少？是，MyISAM\",\"在绝大多数情况下，推荐使用InnoDB\",\"扩展资料：各个存储引擎特性对比\",\"image.png\"]},\"312\":{\"h\":\"五、innoDB的三大特征\",\"t\":[\"自适应Hash索引（Adatptive Hash Index，内部简称AHI）是InnoDB的三大特性之一，还有两个是 Buffer Pool简称BP、双写缓冲区（Doublewrite Buffer）。\"]},\"313\":{\"h\":\"1、自适应索引\"},\"314\":{\"h\":\"定义\",\"t\":[\"1、自适应即我们不需要自己处理，当InnoDB引擎根据查询统计发现某一查询满足hash索引的数据结构特点，就会给其建立一个hash索引；\",\"2、hash索引底层的数据结构是散列表（Hash表），其数据特点就是比较适合在内存中使用，自适应Hash索引存在于InnoDB架构中的缓存中（不存在于磁盘架构中），见下面的InnoDB架构图。\",\"3、自适应hash索引只适合搜索等值的查询，如select * from table where index_col='xxx'，而对于其他查找类型，如范围查找，是不能使用的；\"]},\"315\":{\"h\":\"优点\",\"t\":[\"**适合等值查询。**有哈希冲突的情况下,等值查询访问哈希索引的数据非常快.(如果发生Hash冲突,存储引擎必须遍历链表中的所有行指针,逐行进行比较,直到找到所有符合条件的行).\"]},\"316\":{\"h\":\"缺点\",\"t\":[\"不支持排序和范围列查找 \",\"不是按照索引值进行存储的，无法用于排序和范围\",\"会出现hash冲突 \",\"如果发生Hash冲突,存储引擎必须遍历链表中的所有行指针,逐行进行比较,直到找到所有符合条件的行\"]},\"317\":{\"h\":\"2、buffer pool\"},\"318\":{\"h\":\"定义\",\"t\":[\"Buffer Pool：缓冲池，简称BP。其作用是用来缓存表数据与索引数据，减少磁盘IO操作，提升效率。\",\"Buffer Pool由缓存数据页(Page) 和 对缓存数据页进行描述的控制块 组成, 控制块中存储着对应缓存页的所属的 表空间、数据页的编号、以及对应缓存页在Buffer Pool中的地址等信息.\",\"Buffer Pool默认大小是128M, 以Page页为单位，Page页默认大小16K，而控制块的大小约为数据页的5%，大 概是800字节。\"]},\"319\":{\"h\":\"如何判断一个页是否在BufferPool中缓存 ?\",\"t\":[\"MySQl中有一个哈希表数据结构，它使用表空间号+数据页号，作为一个key，然后缓冲页对应的控制块作为value。\",\"image.png\",\"当需要访问某个页的数据时，先从哈希表中根据表空间号+页号看看是否存在对应的缓冲页。\",\"如果有，则直接使用；如果没有，就从free链表中选出一个空闲的缓冲页，然后把磁盘中对应的页加载到该缓冲页的位置\"]},\"320\":{\"h\":\"3、缓存双写\",\"t\":[\"为了解决写失效问题，InnoDB实现了double write buffer Files, 它位于系统表空间，是一个存储区域。\",\"在BufferPool的page页刷新到磁盘真正的位置前，会先将数据存在Doublewrite 缓冲区。这样在宕机重启时，如果出现数据页损坏，那么在应用redo log之前，需要通过该页的副本来还原该页，然后再进行redo log重做，double write实现了InnoDB引擎数据页的可靠性.\",\"image.png\",\"step1：当进行缓冲池中的脏页刷新到磁盘的操作时,并不会直接写磁盘,每次脏页刷新必须要先写double write .\",\"step2：通过memcpy函数将脏页复制到内存中的double write buffer .\",\"step3: double write buffer再分两次、每次1MB, 顺序写入共享表空间的物理磁盘上, 第一次写.\",\"step4: 在完成double write页的写入后，再将double wirite buffer中的页写入各个表的独立表空间文件中(数据文件 .ibd), 第二次写。\"]},\"321\":{\"h\":\"六、InnoDB存储引擎支持四种行格式\",\"t\":[\"Redundant\",\"Compact Compact ：设计目标是高效地存储数据，一个页中存放的行数据越多，其性能就越高。Compact行记录由两部分组成: 记录放入额外信息 和 记录的真实数据.\",\"Dynamic\",\"Compressed .\",\"InnoDB存储引擎支持四种行格式：Redundant、Compact、Dynamic 和 Compressed .\",\"查询MySQL使用的行格式,默认为: dynamic\"]},\"322\":{\"h\":\"七、COMPACT 行记录格式\",\"t\":[\"Compact 设计目标是高效地存储数据，一个页中存放的行数据越多，其性能就越高。\",\"Compact行记录由两部分组成: 记录放入额外信息 和 记录的真实数据.\",\"image.png\"]},\"323\":{\"h\":\"记录额外信息部分\",\"t\":[\"服务器为了描述一条记录而添加了一些额外信息(元数据信息)，这些额外信息分为3类，分别是: 变长字段长度列表、NULL值列表和记录头信息.\",\"变长字段长度列表\",\"MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、各种TEXT类型，各种BLOB类型，这些变长的数据类型占用的存储空间分为两部分：\",\"真正的数据内容\",\"占用的字节数\",\"变长字段的长度是不固定的，所以在存储数据的时候要把这些数据占用的字节数也存起来，读取数据的时候才能根据这个长度列表去读取对应长度的数据。\",\"在 Compact行格式中，把所有变长类型的列的长度都存放在记录的开头部位形成一个列表，按照列的顺序逆序存放,这个列表就是 变长字段长度列表。\",\"NULL值列表\",\"表中的某些列可能会存储NULL值，如果把这些NULL值都放到记录的真实数据中会比较浪费空间，所以Compact行格式把这些值为NULL的列存储到NULL值列表中。( 如果表中所有列都不允许为 NULL，就不存在NULL值列表 )\"]},\"324\":{\"h\":\"记录头信息\",\"t\":[\"记录头信息是由固定的5个字节组成，5个字节也就是40个二进制位，不同的位代表不同的意思，这些头信息会在后面的一些功能中看到。\",\"名称\",\"大小(单位:bit)\",\"描述\",\"预留位1\",\"1\",\"没有使用\",\"预留位2\",\"1\",\"没有使用\",\"delete_mask\",\"1\",\"标记该记录是否被删除\",\"min_rec_mask\",\"1\",\"标记该记录是否是本层B+树的非叶子节点中的最小记录\",\"n_owned\",\"4\",\"表示当前分组中管理的记录数\",\"heap_no\",\"13\",\"表示当前记录在记录堆中的位置信息\",\"record_type\",\"3\",\"表示当前记录的类型:0 表示普通记录,1 表示B+树非叶子节点记录,2 表示最小记录,3表示最大记录\",\"next_record\",\"16\",\"表示下一条记录的相对位置\",\"delete_mask\",\"这个属性标记着当前记录是否被删除，占用1个二进制位，值为0 的时候代表记录并没有被删除，为1 的时候代表记录被删除掉了\",\"min_rec_mask\",\"B+树的每层非叶子节点中的最小记录都会添加该标记。\",\"n_owned\",\"代表每个分组里，所拥有的记录的数量，一般是分组里主键最大值才有的。\",\"heap_no\",\"在数据页的User Records中插入的记录是一条一条紧凑的排列的，这种紧凑排列的结构又被称为堆。为了便于管理这个堆，把记录在堆中的相对位置给定一个编号——heap_no。所以heap_no这个属性表示当前记录在本页中的位置。\",\"record_type\",\"这个属性表示当前记录的类型，一共有4种类型的记录， 0 表示普通用户记录， 1 表示B+树非叶节点记录， 2 表示最小记录， 3 表示最大记录。\",\"next_record\",\"表示从当前记录的真实数据到下一条记录的真实数据的地址偏移量，可以理解为指向下一条记录地址的指针。值为正数说明下一条记录在当前记录后面，为负数说明下一条记录在当前记录的前面。\"]},\"325\":{\"h\":\"记录真实数据部分\",\"t\":[\"记录的真实数据除了插入的那些列的数据，MySQL会为每个记录默认的添加一些列（也称为隐藏列），具体的列如下：\",\"image.png\",\"列名\",\"是否必须\",\"占用空间\",\"描述\",\"row_id\",\"否\",\"6字节\",\"行ID,唯一标识一条记录\",\"transaction_id\",\"是\",\"6字节\",\"事务ID\",\"roll_pointer\",\"是\",\"7字节\",\"回滚指针\",\"生成隐藏主键列的方式有:\",\"服务器会在内存中维护一个全局变量，每当向某个包含隐藏的row_id列的表中插入一条记录时，就会把该变量的值当作新记录的row_id列的值，并且把该变量自增1。\",\"每当这个变量的值为256的倍数时，就会将该变量的值刷新到系统表空间的页号为7的页面中一个Max Row ID的属性处。\",\"当系统启动时，会将页中的Max Row ID属性加载到内存中，并将该值加上256之后赋值给全局变量，因为在上次关机时该全局变量的值可能大于页中Max Row ID属性值。\"]},\"326\":{\"h\":\"什么是行溢出 ?\",\"t\":[\"MySQL中是以页为基本单位,进行磁盘与内存之间的数据交互的,我们知道一个页的大小是16KB,16KB = 16384字节.而一个varchar(m) 类型列最多可以存储65532个字节,一些大的数据类型比如TEXT可以存储更多.\",\"如果一个表中存在这样的大字段,那么一个页就无法存储一条完整的记录.这时就会发生行溢出,多出的数据就会存储在另外的溢出页中.\",\"总结: 如果某些字段信息过长，无法存储在B树节点中，这时候会被单独分配空间，此时被称为溢出页，该字段被称为页外列。\"]},\"327\":{\"h\":\"Compact中的行溢出机制\",\"t\":[\"InnoDB 规定一页至少存储两条记录(B+树特点)，如果页中只能存放下一条记录，InnoDB存储引擎会自动将行数据存放到溢出页中. 当发生行溢出时，数据页只保存了前768字节的前缀数据，接着是20个字节的偏移量，指向行溢出页.\",\"image.png\"]},\"328\":{\"c\":[\"mysql\"]},\"329\":{\"c\":[\"InnoDB\",\"MyISAM\",\"存储引擎\"]},\"330\":{\"h\":\"1、mysql的体系\"},\"331\":{\"h\":\"一、网络连接层\",\"t\":[\"客户端连接器（Client Connectors）：提供与MySQL服务器建立的支持。目前几乎支持所有主流的服务端编程技术，例如常见的 Java、C、Python、.NET等，它们通过各自API技术与MySQL建立连接。\"]},\"332\":{\"h\":\"二、服务层（MySQL Server）\",\"t\":[\"服务层是MySQL Server的核心，主要包含系统管理和控制工具、连接池、SQL接口、解析器、查询优化器和缓存六个部分。\",\"连接池（Connection Pool）：负责存储和管理客户端与数据库的连接，一个线程负责管理一个连接。\",\"系统管理和控制工具（Management Services & Utilities）：例如备份恢复、安全管理、集群管理等\",\"SQL接口（SQL Interface）：用于接受客户端发送的各种SQL命令，并且返回用户需要查询的结果。比如DML、DDL、存储过程、视图、触发器等。\",\"解析器（Parser）：负责将请求的SQL解析生成一个\\\"解析树\\\"。然后根据一些MySQL规则进一步检查解析树是否合法。\",\"查询优化器（Optimizer）：当“解析树”通过解析器语法检查后，将交由优化器将其转化成执行计划，然后与存储引擎交互。\",\"select uid,name from user where gender=1;\",\"选取--》投影--》联接 策略\",\"1）select先根据where语句进行选取，并不是查询出全部数据再过滤\",\"2）select查询根据uid和name进行属性投影，并不是取出所有字段\",\"3）将前面选取和投影联接起来最终生成查询结果\",\"缓存（Cache&Buffer）： 缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，权限缓存，引擎缓存等。如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。\"]},\"333\":{\"h\":\"三、存储引擎层（Pluggable Storage Engines）\",\"t\":[\"存储引擎负责MySQL中数据的存储与提取，与底层系统文件进行交互。MySQL存储引擎是插件式的，服务器中的查询执行引擎通过接口与存储引擎进行通信，接口屏蔽了不同存储引擎之间的差异 。现在有很多种存储引擎，各有各的特点，最常见的是MyISAM和InnoDB。\"]},\"334\":{\"h\":\"四、系统文件层（File System）\",\"t\":[\"该层负责将数据库的数据和日志存储在文件系统之上，并完成与存储引擎的交互，是文件的物理存储层。主要包含日志文件，数据文件，配置文件，pid 文件，socket 文件等。\",\"日志文件 \",\"错误日志（Error log） 默认开启，show variables like '%log_error%'\",\"通用查询日志（General query log） 记录一般查询语句，show variables like '%general%';\",\"二进制日志（binary log） 记录了对MySQL数据库执行的更改操作，并且记录了语句的发生时间、执行时长；但是它不记录select、show等不修改数据库的SQL。主要用于数据库恢复和主从复制。 show variables like '%log_bin%'; //是否开启 show variables like '%binlog%'; //参数查看 show binary logs;//查看日志文件\",\"慢查询日志（Slow query log） 记录所有执行时间超时的查询SQL，默认是10秒。 show variables like '%slow_query%'; //是否开启 show variables like ' %long_query_time%'; //时长\",\"配置文件 用于存放MySQL所有的配置信息文件，比如my.cnf、my.ini等。\",\"数据文件 \",\"db.opt 文件：记录这个库的默认使用的字符集和校验规则。\",\"frm 文件：存储与表相关的元数据（meta）信息，包括表结构的定义信息等，每一张表都会有一个frm 文件。\",\"MYD 文件：MyISAM 存储引擎专用，存放 MyISAM 表的数据（data)，每一张表都会有一个 .MYD 文件。\",\"MYI 文件：MyISAM 存储引擎专用，存放 MyISAM 表的索引相关信息，每一张 MyISAM 表对应一个 .MYI 文件。\",\"ibd文件和 IBDATA 文件：存放 InnoDB 的数据文件（包括索引）。InnoDB 存储引擎有两种表空间方式：独享表空间和共享表空间。独享表空间使用 .ibd 文件来存放数据，且每一张 InnoDB 表对应一个 .ibd 文件。共享表空间使用 .ibdata 文件，所有表共同使用一个（或多个，自行配置）.ibdata 文件。\",\"ibdata1 文件：系统表空间数据文件，存储表元数据、Undo日志等 。\",\"ib_logfile0、ib_logfile1 文件：Redo log 日志文件。\",\"pid 文件 pid 文件是 mysqld 应用程序在 Unix/Linux 环境下的一个进程文件，和许多其他 Unix/Linux 服务端程序一样，它存放着自己的进程 id。\",\"socket 文件 socket 文件也是在 Unix/Linux 环境下才有的，用户在 Unix/Linux 环境下客户端连接可以不通过 TCP/IP 网络而直接使用 Unix Socket 来连接 MySQL。\"]},\"335\":{\"c\":[\"mysql\"]},\"336\":{\"c\":[\"mysql\",\"基础知识\"]},\"337\":{\"h\":\"2、B树和B加树的区别\"},\"338\":{\"h\":\"一、B-Tree介绍\",\"t\":[\"B-Tree是一种平衡的多路查找树,B树允许一个节点存放多个数据. 这样可以在尽可能减少树的深度的同时,存放更多的数据(把瘦高的树变的矮胖).\",\"B-Tree中所有节点的子树个数的最大值称为B-Tree的阶,用m表示.一颗m阶的B树,如果不为空,就必须满足以下条件.\",\"m阶的B-Tree满足以下条件:\",\"每个节点最多拥有m-1个关键字(根节点除外),也就是m个子树\",\"根节点至少有两个子树(可以没有子树,有就必须是两个)\",\"分支节点至少有(m/2)颗子树 (除去根节点和叶子节点其他都是分支节点)\",\"所有叶子节点都在同一层,并且以升序排序\",\"image.png\"]},\"339\":{\"h\":\"什么是B-Tree的阶 ?\",\"t\":[\"所有节点中，节点【60,70,90】拥有的子节点数目最多，四个子节点（灰色节点），所以上面的B-Tree为4阶B树。\"]},\"340\":{\"h\":\"B-Tree结构存储索引的特点\",\"t\":[\"为了描述B-Tree首先定义一条记录为一个键值对[key, data] ，key为记录的键值，对应表中的主键值(聚簇索引)，data为一行记录中除主键外的数据。对于不同的记录，key值互不相同\",\"索引值和data数据分布在整棵树结构中\",\"白色块部分是指针,存储着子节点的地址信息。\",\"每个节点可以存放多个索引值及对应的data数据\",\"树节点中的多个索引值从左到右升序排列\",\"image.png\"]},\"341\":{\"h\":\"B-Tree的查找操作\",\"t\":[\"B-Tree的每个节点的元素可以视为一次I/O读取，树的高度表示最多的I/O次数，在相同数量的总元素个数下，每个节点的元素个数越多，高度越低，查询所需的I/O次数越少.\"]},\"342\":{\"h\":\"B-Tree总结\",\"t\":[\"优点: B树可以在内部节点存储键值和相关记录数据，因此把频繁访问的数据放在靠近根节点的位置将大大提高热点数据的查询效率。\",\"缺点: B树中每个节点不仅包含数据的key值,还有data数据. 所以当data数据较大时,会导致每个节点存储的key值减少,并且导致B树的层数变高.增加查询时的IO次数.\",\"使用场景: B树主要应用于文件系统以及部分数据库索引，如MongoDB，大部分关系型数据库索引则是使用B+树实现\"]},\"343\":{\"h\":\"二、B+Tree\",\"t\":[\"B+Tree是在B-Tree基础上的一种优化，使其更适合实现存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。\"]},\"344\":{\"h\":\"B+Tree的特征\",\"t\":[\"非叶子节点只存储键值信息.\",\"所有叶子节点之间都有一个链指针.\",\"数据记录都存放在叶子节点中.\",\"image.png\"]},\"345\":{\"h\":\"B+Tree的优势\",\"t\":[\"B+Tree是B Tree的变种，B Tree能解决的问题，B+Tree也能够解决（降低树的高度，增大节点存储数据量）\",\"B+Tree扫库和扫表能力更强，如果我们要根据索引去进行数据表的扫描，对B Tree进行扫描，需要把整棵树遍历一遍，而B+Tree只需要遍历他的所有叶子节点即可（叶子节点之间有引用）。\",\"B+Tree磁盘读写能力更强，他的根节点和支节点不保存数据区，所有根节点和支节点同样大小的情况下，保存的关键字要比B Tree要多。而叶子节点不保存子节点引用。所以，B+Tree读写一次磁盘加载的关键字比B Tree更多。\",\"B+Tree排序能力更强，如上面的图中可以看出，B+Tree天然具有排序功能。\",\"B+Tree查询效率更加稳定，每次查询数据，查询IO次数一定是稳定的。当然这个每个人的理解都不同，因为在B Tree如果根节点命中直接返回，确实效率更高。\"]},\"346\":{\"c\":[\"mysql\"]},\"347\":{\"c\":[\"explain\",\"mysql调优\"]},\"348\":{\"h\":\"3、explain执行计划\",\"t\":[\"explain 模拟优化器来执行sql查询，分析出查询语句或者是表结构的性能瓶颈\",\"image.png\"]},\"349\":{\"h\":\"一、explain字段的解释\",\"t\":[\"id：SELECT 查询的序列标识。当使用 JOIN 查询时，涉及多个 select：\",\"当 id 相同时，执行顺序 由上向下。\",\"当 id 不同时，表示包含子查询，id 值会递增。id 值越大，优先级越高，越先执行。\",\"select type：\",\"SIMPLE：简单查询，不包含 UNION 或者子查询。\",\"PRIMARY：查询中如果包含子查询或其他部分，外层的 SELECT 将被标记为 PRIMARY。\",\"SUBQUERY：子查询中的第一个 SELECT。\",\"UNION：在 UNION 语句中，UNION 之后出现的 SELECT。\",\"DERIVED：在 FROM 中出现的子查询将被标记为 DERIVED。\",\"UNION RESULT：UNION 查询的结果。\",\"table: 当前查询执行的数据表。\",\"partitions: 查询所匹配记录所在的分区，对于未分区的表，值为 NULL。\",\"type:\",\"system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\",\"system 表中只有一行数据，是 const 的一种特例。\",\"const表中最多只有一行匹配的记录，一次查询就可以找到，常用于使用主键或唯一索引的所有字段作为查询条件。\",\"eq_ref当连表查询时，前一张表的行在当前这张表中只有一行与之对应。是除了 system 与 const 之外最好的 join 方式，常用于使用主键或唯一索引的所有字段作为连表条件。\",\"ref使用普通索引作为查询条件，查询结果可能找到多个符合条件的行。\",\"fulltext 查询使用到了全文索引。\",\"ref_or_null类似于 ref，MySQL 在执行时还查询了值为 NULL 的行。\",\"index_merge当查询条件使用了多个索引时，表示开启了 Index Merge 优化，此时执行计划中的 key 列列出了使用到的索引；ken_len 列列出了所使用的索引的长度。\",\"unique_subquery替代了 eq_ref。在一些使用 IN 子查询中，使用唯一索引\",\"index_subquery 与 unique_subquery 类似，在 IN 子查询中，使用普通索引\",\"range 对索引列进行范围查询，执行计划中的 key 列表示哪个索引被使用了，key_len 列表示使用的索引的长度。\",\"index查询遍历了整棵索引树，与 ALL 类似，只不过扫描的是索引，而索引一般在内存中，速度更快。\",\"ALL查询遍历全表，很可能要读磁盘，速度最慢。\",\"possible_keys 列出查询中可能被使用到的一个或多个索引，不一定被查询实际使用。\",\"key 查询中实际使用到的索引。如果为 NULL，则表示未建立索引或索引失效。\",\"key_len 表示查询索引时使用的字节数，在满足需求的前提下越短越好。\",\"ref 表示在查询索引时，哪些列或者常量被用来与索引的值进行比较。\",\"rows 展示 MySQL 估算出的查询时需要遍历的行数，越少越好。\",\"filtered 表示估算的经过查询条件删选出的列数的百分比。例如 rows 是 1000，filtered 是 50（50%），则实际筛选出的列数为 1000 * 50% = 500。\",\"Extra\",\"Using filesort在排序时使用了外部的索引排序，没有用到表内索引进行排序。\",\"Using temporary MySQL 需要创建临时表来存储查询的结果，常见于 ORDER BY 和 GROUP BY。\",\"Using index 表明查询使用了覆盖索引，不用回表，查询效率非常高。\",\"Using where 表明查询使用了 WHERE 子句进行条件过滤。一般在没有使用到索引的时候会出现。\",\"Impossible WHERE 表示 WHERE 子句的结果总是 false 且无法查到任意行。\",\"Using join buffer (Block Nested Loop) 连表查询的方式，表示当被驱动表的没有使用索引的时候，MySQL 会先将驱动表读出来放到 join buffer 中，再遍历被驱动表与驱动表进行查询，具体见 MySQL JOIN 的内容。\",\"Using join buffer (Batched Key Access) 连表查询的方式，与 Using join buffer (Block Nested Loop) 类似。\"]},\"350\":{\"h\":\"二、type字段\",\"t\":[\"下面介绍type字段不同值表示的含义:\",\"type类型\",\"解释\",\"system\",\"不进行磁盘IO,查询系统表,仅仅返回一条数据\",\"const\",\"查找主键索引,最多返回1条或0条数据. 属于精确查找\",\"eq_ref\",\"查找唯一性索引,返回数据最多一条, 属于精确查找\",\"ref\",\"查找非唯一性索引,返回匹配某一条件的多条数据,属于精确查找,数据返回可能是多条.\",\"range\",\"查找某个索引的部分索引,只检索给定范围的行,属于范围查找. 比如: > 、 < 、in 、between\",\"index\",\"查找所有索引树,比ALL快一些,因为索引文件要比数据文件小.\",\"ALL\",\"不使用任何索引,直接进行全表扫描\"]},\"351\":{\"h\":\"三、Extra主要指标\",\"t\":[\"Extra 是 EXPLAIN 输出中另外一个很重要的列，该列显示MySQL在查询过程中的一些详细信息\",\"extra类型\",\"解释\",\"Using filesort\",\"MySQL中无法利用索引完成的排序操作称为 “文件排序”\",\"Using index\",\"表示直接访问索引就能够获取到所需要的数据（覆盖索引），不需要通过索引回表\",\"Using index condition\",\"搜索条件中虽然出现了索引列，但是有部分条件无法使用索引，会根据能用索引的条件先搜索一遍再匹配无法使用索引的条件。\",\"Using join buffer\",\"使用了连接缓存, 会显示join连接查询时,MySQL选择的查询算法\",\"Using temporary\",\"表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询\",\"Using where\",\"意味着全表扫描或者在查找使用索引的情况下，但是还有查询条件不在索引字段当中\"]},\"352\":{\"c\":[\"mysql\"]},\"353\":{\"c\":[\"explain\",\"mysql调优\"]},\"354\":{\"h\":\"4、sql的执行过程\"},\"355\":{\"h\":\"一、一条sql语句的执行过程详解\",\"t\":[\"img\"]},\"356\":{\"h\":\"整体流程\",\"t\":[\"1、用户通过通信协议发送请求到数据库连接池 2、5.6版本查询缓存/8.0,交给sql接口 3、sql解析为mysql可以识别的语言 4、交给sql查询优化器，经过优化器的计算，根据io成本和cpu成本计算出一条条的执行计划 5、将执行计划交给存储引擎进行执行 6、将结果返回给客户端 \"]},\"357\":{\"h\":\"mysql驱动\",\"t\":[\"img\"]},\"358\":{\"h\":\"数据库连接池\",\"t\":[\"系统在访问 MySQL 数据库的时候，建立的连接并不是每次请求都会去创建的，而是从数据库连接池中去获取，这样就解决了因为反复的创建和销毁连接而带来的性能损耗问题了。不过这里有个小问题，业务系统是并发的，而 MySQL 接受请求的线程呢，只有一个？\",\"其实 MySQL 的架构体系中也已经提供了这样的一个池子，也是数据库连池。双方都是通过数据库连接池来管理各个连接的，这样一方面线程之前不需要是争抢连接，更重要的是不需要反复的创建的销毁连接。\",\"系统在访问 MySQL 数据库的时候，建立的连接并不是每次请求都会去创建的，而是从数据库连接池中去获取，这样就解决了因为反复的创建和销毁连接而带来的性能损耗问题了。不过这里有个小问题，业务系统是并发的，而 MySQL 接受请求的线程呢，只有一个？\",\"其实 MySQL 的架构体系中也已经提供了这样的一个池子，也是数据库连池。双方都是通过数据库连接池来管理各个连接的，这样一方面线程之前不需要是争抢连接，更重要的是不需要反复的创建的销毁连接。\",\"img\"]},\"359\":{\"h\":\"SQL 接口\",\"t\":[\"MySQL 中处理请求的线程在获取到请求以后获取 SQL 语句去交给 SQL 接口去处理。\"]},\"360\":{\"h\":\"查询解析器\",\"t\":[\"但是这个 SQL 是写给我们人看的，机器哪里知道你在说什么？这个时候解析器就上场了。他会将 SQL 接口传递过来的 SQL 语句进行解析，翻译成 MySQL 自己能认识的语言，具体可以看MySQL - MySQL中SQL是如何解析的。\"]},\"361\":{\"h\":\"MySQL 查询优化器\",\"t\":[\"查询优化器内部具体怎么实现的我们不需要是关心，我需要知道的是 MySQL 会帮我去使用他自己认为的最好的方式去优化这条 SQL 语句，并生成一条条的执行计划，比如你创建了多个索引，MySQL 会依据成本最小原则来选择使用对应的索引，这里的成本主要包括两个方面, IO 成本和 CPU 成本\",\"IO 成本: 即从磁盘把数据加载到内存的成本，默认情况下，读取数据页的 IO 成本是 1，MySQL 是以页的形式读取数据的，即当用到某个数据时，并不会只读取这个数据，而会把这个数据相邻的数据也一起读到内存中，这就是有名的程序局部性原理，所以 MySQL 每次会读取一整页，一页的成本就是 1。所以 IO 的成本主要和页的大小有关\",\"CPU 成本：将数据读入内存后，还要检测数据是否满足条件和排序等 CPU 操作的成本，显然它与行数有关，默认情况下，检测记录的成本是 0.2。\",\"MySQL 优化器 会计算 「IO 成本 + CPU」 成本最小的那个索引来执行\",\"img\",\"优化器执行选出最优索引等步骤后，会去调用存储引擎接口，开始去执行被 MySQL 解析过和优化过的 SQL 语句\"]},\"362\":{\"h\":\"存储引擎\",\"t\":[\"查询优化器会调用存储引擎的接口，去执行 SQL，也就是说真正执行 SQL 的动作是在存储引擎中完成的。数据是被存放在内存或者是磁盘中的\"]},\"363\":{\"h\":\"执行器\",\"t\":[\"执行器是一个非常重要的组件，因为前面那些组件的操作最终必须通过执行器去调用存储引擎接口才能被执行。执行器最终最根据一系列的执行计划去调用存储引擎的接口去完成 SQL 的执行\",\"img\"]},\"364\":{\"c\":[\"mysql\"]},\"365\":{\"c\":[\"mvcc\"]},\"366\":{\"h\":\"5、MVCC\"},\"367\":{\"h\":\"一、mvcc\"},\"368\":{\"h\":\"概念\",\"t\":[\"被称为多版本并发控制，在数据库中为了实现高并发的数据访问，对于数据进行多版本的处理，通过事务的可见性保证事务\",\"最大的好处就是不加锁，读写不冲突，极大提升系统的并发性。目前mvcc只可以在rc和rr两种级别下工作\",\"* MVCC，多版本并发控制, 用于实现**读已提交**和**可重复读**隔离级别。 * MVCC的核心就是 Undo log多版本链 + Read view， “MV”就是通过 Undo log来保存数据的历史版本，实现多版本的管理， “CC”是通过 Read-view来实现管理， 通过 Read-view原则来决定数据是否显示。同时针对不同的隔离级别， Read view的生成策略不同，也就实现了不同的隔离级别。 \"]},\"369\":{\"h\":\"行记录的三个隐藏字段\",\"t\":[\"image-20230416192111694.png\",\"DB_ROW_ID： 一般为表的定义的主键，表中也没有定义唯一索引，innodb会自动为表添加一个row_id的隐藏列作为主键\",\"DB_TRX_ID ：事务对于某条记录做增删改操作时，会将这个事务的id写到trx_id中\",\"DB_ROLL_PTR: 回滚指针,指向undo log的指针\"]},\"370\":{\"h\":\"undo log多版本链\",\"t\":[\"每一条数据都有多个版本,版本之间通过undo log链条进行连接\",\"image-20230416193055777.png\"]},\"371\":{\"h\":\"二、ReadView\",\"t\":[\"Read View是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现.\",\"Read View简单理解就是对数据在每个时刻的状态拍成照片记录下来。那么之后获取某时刻的数据时就还是原来的照片上的数据，是不会变的.\",\"Read View中比较重要的字段有4个:\",\"m_ids : 用来表示MySQL中哪些事务正在执行,但是没有提交.\",\"min_trx_id: 就是m_ids里最小的值.\",\"max_trx_id : 下一个要生成的事务id值,也就是最大事务id\",\"creator_trx_id: 就是你这个事务的id\",\"通过Read View判断记录的某个版本是否可见的方式总结:\",\"trx_id = creator_trx_id 如果被访问版本的trx_id,与readview中的creator_trx_id值相同,表明当前事务在访问自己修改过的记录,该版本可以被当前事务访问.\",\"trx_id < min_trx_id 如果被访问版本的trx_id,小于readview中的min_trx_id值,表明生成该版本的事务在当前事务生成readview前已经提交,该版本可以被当前事务访问.\",\"trx_id >= max_trx_id 如果被访问版本的trx_id,大于或等于readview中的max_trx_id值,表明生成该版本的事务在当前事务生成readview后才开启,该版本不可以被当前事务访问.\",\"trx_id > min_trx_id && trx_id < max_trx_id 如果被访问版本的trx_id,值在readview的min_trx_id和max_trx_id之间，就需要判断trx_id属性值是不是在m_ids列表中？\",\"在：说明创建readview时生成该版本的事务还是活跃的,该版本不可以被访问\",\"不在：说明创建readview时生成该版本的事务已经被提交,该版本可以被访问\"]},\"372\":{\"h\":\"何时生成 ReadView 快照\",\"t\":[\"在 读已提交（Read Committed， 简称RC） 隔离级别下，每一次读取数据前都生成一个ReadVIew。\",\"在 可重复读 （Repeatable Read，简称RR）隔离级别下，在一个事务中，只在 第一次读取数据前生成一个ReadVIew。\"]},\"373\":{\"h\":\"快照读（ Snapshot Read ）与当前读 （ Current Read ）\",\"t\":[\"在 MVCC 并发控制中，读操作可以分为两类: 快照读（Snapshot Read）与当前读 （Current Read）。\",\"快照读 快照读是指读取数据时不是读取最新版本的数据，而是基于历史版本读取的一个快照信息（mysql读取undo log历史版本) ，快照读可以使普通的SELECT 读取数据时不用对表数据进行加锁，从而解决了因为对数据库表的加锁而导致的两个如下问题\",\"解决了因加锁导致的修改数据时无法对数据读取问题.\",\"解决了因加锁导致读取数据时无法对数据进行修改的问题.\",\"当前读 当前读是读取的数据库最新的数据，当前读和快照读不同，因为要读取最新的数据而且要保证事务的隔离性，所以当前读是需要对数据进行加锁的（Update delete insert select ....lock in share mode , select for update 为当前读）\"]},\"374\":{\"h\":\"三、总结\",\"t\":[\"并发环境下，写-写操作有加锁解决方案，但为了提高性能，InnoDB存储引擎提供MVCC，目的是为了解决读-写，写-读操作下不加锁仍能安全进行。\",\"MVCC的过程，本质就是访问版本链，并判断哪个版本可见的过程。该判断算法是通过版本上的trx_id与快照ReadView的若干个信息进行对比。\",\"快照生成的时机因隔离级别不同，读已提交隔离级别下，每一次读取前都会生成一个快照ReadView；而可重复读则仅在一个事务中，第一次读取前生成一个快照。\",\"| Using where           | 意味着全表扫描或者在查找使用索引的情况下，但是还有查询条件不在索引字段当中 |\"]},\"375\":{\"c\":[\"mysql\"]},\"376\":{\"c\":[\"explain\",\"mysql调优\"]},\"377\":{\"h\":\"6、mysql日志类型\",\"t\":[\"explain 模拟优化器来执行sql查询，分析出查询语句或者是表结构的性能瓶颈\",\"image.png\"]},\"378\":{\"h\":\"一、undo log\"},\"379\":{\"h\":\"定义\",\"t\":[\"undo log用于撤销回退的日志，事务开始之前，mysql会先记录更新前的数据到undo log日志文件中，当事务回滚时使用undo log 进行回退\",\"undo log也会产生redo log 因为undo log也要实现持久性保护\"]},\"380\":{\"h\":\"作用\",\"t\":[\"提供回滚操作（实现事务的原子性）\",\"在数据修改的时候，不仅记录了redo log还记录了对应的undo log可以进行回滚 *undo log 和 redo log 记录物理日志不一样，它是*逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的delete记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。 \",\"提供多版本控制(MVCC)【undo log实现多版本并发控制（MVCC）】\",\"MVCC，即多版本控制。在MySQL数据库InnoDB存储引擎中，用undo Log来实现多版本并发控制(MVCC)。当读取的某一行被其他事务锁定时，它可以从undo log中分析出该行记录以前的数据版本是怎样的，从而让用户能够读取到当前事务操作之前的数据【快照读】。 \"]},\"381\":{\"h\":\"二、redo log\"},\"382\":{\"h\":\"定义\",\"t\":[\"InnoDB引擎对数据的更新，是先将更新记录写入redo log日志，然后会在系统空闲的时候或者是按照设定的更新策略再将日志中的内容更新到磁盘之中。这就是所谓的预写式技术（Write Ahead logging）。这种技术可以大大减少IO操作的频率，提升数据刷新的效率。\",\"redo log：被称作重做日志, 包括两部分：一个是内存中的日志缓冲： redo log buffer，另一个是磁盘上的日志文件： redo log file\"]},\"383\":{\"h\":\"作用（类似于redis中的aof）\",\"t\":[\"mysql 每执行一条 DML 语句，先将记录写入 redo log buffer 。后续某个时间点再一次性将多个操作记录写到 redo log file 。当故障发生致使内存数据丢失后，InnoDB会在重启时，经过重放 redo，将Page恢复到崩溃之前的状态 **通过Redo log可以实现事务的持久性\"]},\"384\":{\"h\":\"三、bin log\"},\"385\":{\"h\":\"定义\",\"t\":[\"binlog是一个二进制格式的文件，用于记录用户对数据库更新的SQL语句信息，例如更改数据库表和更改内容的SQL语句都会记录到binlog里，但是不会记录SELECT和SHOW这类操作。\",\"binlog在MySQL的Server层实现(引擎共用)\",\"binlog为逻辑日志,记录的是一条SQL语句的原始逻辑\",\"binlog不限制大小,追加写入,不会覆盖以前的日志.\",\"默认情况下，binlog日志是二进制格式的，不能使用查看文本工具的命令（比如，cat，vi等）查看，而使用mysqlbinlog解析查看。\"]},\"386\":{\"h\":\"作用\",\"t\":[\"主从复制：在主库中开启Binlog功能，这样主库就可以把Binlog传递给从库，从库拿到Binlog后实现数据恢复达到主从数据一致性。\",\"数据恢复：通过mysqlbinlog工具来恢复数据。\"]},\"387\":{\"h\":\"四、redo log 和 undo log的持久化策略\"},\"388\":{\"h\":\"redo log持久化\",\"t\":[\"缓冲区数据一般情况下是无法直接写入磁盘的，中间必须经过操作系统缓冲区( OS Buffer )。因此， redo log buffer 写入 redo logfile 实际上是先写入 OS Buffer，然后再通过系统调用 fsync() 将其刷到 redo log file.\",\"Redo Buffer 持久化到 redo log 的策略，可通过 Innodb_flush_log_at_trx_commit 设置：\",\"参数值\",\"含义\",\"0 (延迟写)\",\"事务提交时不会将 redo log buffer中日志写入到 os buffer， 而是每秒写入 os buffer并调用 fsync()写入到 redo log file中。 也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据。\",\"1 (实时写,实时刷)\",\"事务每次提交都会将 redo log buffer中的日志写入 os buffer并 调用 fsync()刷到 redo log file中。这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO的性能较差。\",\"2 (实时写, 延时刷)\",\"每次提交都仅写入到 os buffer，然后是每秒调用 fsync()将 os buffer中的日志写入到 redo log file。\",\"image.png\",\"一般建议选择取值2，因为 MySQL 挂了数据没有损失，整个服务器挂了才会损失1秒的事务提交数据\"]},\"389\":{\"h\":\"undo log持久化\",\"t\":[\"MySQL中的Undo Log严格的讲不是Log，而是数据，因此他的管理和落盘都跟数据是一样的：\",\"Undo的磁盘结构并不是顺序的，而是像数据一样按Page管理\",\"Undo写入时，也像数据一样产生对应的Redo Log (因为undo也是对页面的修改，记录undo这个操作本身也会有对应的redo)。\",\"Undo的Page也像数据一样缓存在Buffer Pool中，跟数据Page一起做LRU换入换出，以及刷脏。Undo Page的刷脏也像数据一样要等到对应的Redo Log 落盘之后\",\"当事务提交的时候，innodb不会立即删除undo log，因为后续还可能会用到undo log，如隔离级别为repeatable read时，事务读取的都是开启事务时的最新提交行版本，只要该事务不结束，该行版本就不能删除，即undo log不能删除。\",\"但是在事务提交的时候，会将该事务对应的undo log放入到删除列表中，未来通过purge来删除。并且提交事务时，还会判断undo log分配的页是否可以重用，如果可以重用，则会分配给后面来的事务，避免为每个独立的事务分配独立的undo log页而浪费存储空间和性能。\"]},\"390\":{\"h\":\"五、bin log与undo log的区别\",\"t\":[\"1）redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。\",\"2）redo log是物理日志，记录的是“在XXX数据页上做了XXX修改”；binlog是逻辑日志，记录的是原始逻辑，其记录是对应的SQL语句。\",\"物理日志: 记录的是每一个page页中具体存储的值是多少，在这个数据页上做了什么修改. 比如: 某个事物将系统表空间中的第100个页面中偏移量为1000处的那个字节的值1改为2.\",\"逻辑日志: 记录的是每一个page页面中具体数据是怎么变动的，它会记录一个变动的过程或SQL语句的逻辑, 比如: 把一个page页中的一个数据从1改为2，再从2改为3,逻辑日志就会记录1->2,2->3这个数据变化的过程.\",\"3）redo log是循环写的，空间一定会用完，需要write pos和check point搭配；binlog是追加写，写到一定大小会切换到下一个，并不会覆盖以前的日志\",\"Redo Log 文件内容是以顺序循环的方式写入文件，写满时则回溯到第一个文件，进行覆盖写。\",\"image.png\",\"write pos: 表示日志当前记录的位置，当ib_logfile_4写满后，会从ib_logfile_1从头开始记录；\",\"check point: 表示将日志记录的修改写进磁盘，完成数据落盘，数据落盘后checkpoint会将日志上的相关记录擦除掉，即 write pos -> checkpoint 之间的部分是redo log空着的部分，用于记录新的记录，checkpoint -> write pos 之间是redo log 待落盘的数据修改记录\",\"如果 write pos 追上 checkpoint，表示写满，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。\",\"3）Redo Log作为服务器异常宕机后事务数据自动恢复使用，Binlog可以作为主从复制和数据恢复使用。Binlog没有自动crash-safe能力\",\"CrashSafe指MySQL服务器宕机重启后，能够保证：\",\"所有已经提交的事务的数据仍然存在。\",\"所有没有提交的事务的数据自动回滚。\"]},\"391\":{\"h\":\"六、MySQL的binlog有几种日志格式\"},\"392\":{\"h\":\"日志有三种模式\"},\"393\":{\"h\":\"1）ROW（row-based replication, RBR）：\",\"t\":[\"日志中会记录每一行数据被修改的情况，然后在slave端对相同的数据进行修改。\",\"优点：能清楚记录每一个行数据的修改细节，能完全实现主从数据同步和数据的恢复。而且不会出现某些特定情况下存储过程或function无法被正确复制的问题。\",\"缺点：批量操作，会产生大量的日志，尤其是alter table会让日志量暴涨。\"]},\"394\":{\"h\":\"2）STATMENT（statement-based replication, SBR）：\",\"t\":[\"记录每一条修改数据的SQL语句（批量修改时，记录的不是单条SQL语句，而是批量修改的SQL语句事件）, slave在复制的时候SQL进程会解析成和原来master端执行过的相同的SQL再次执行。简称SQL语句复制。\",\"优点：日志量小，减少磁盘IO，提升存储和恢复速度\",\"缺点：在某些情况下会导致主从数据不一致，比如last_insert_id()、now()等函数。\",\"image.png\"]},\"395\":{\"h\":\"3）MIXED（mixed-based replication, MBR）：\",\"t\":[\"以上两种模式的混合使用，一般会使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择写入模式。\",\"企业场景如何选择binlog的模式\",\"如果生产中使用MySQL的特殊功能相对少（存储过程、触发器、函数）。选择默认的语句模式，Statement。\",\"如果生产中使用MySQL的特殊功能较多的，可以选择Mixed模式。\",\"如果生产中使用MySQL的特殊功能较多，又希望数据最大化一致，此时最好Row 模式；但是要注意，该模式的binlog日志量增长非常快.\\n|\"]},\"396\":{\"c\":[\"mysql\"]},\"397\":{\"c\":[\"mysql日志\",\"mysql调优\"]},\"398\":{\"h\":\"7、mysql锁机制\"},\"399\":{\"h\":\"一、锁的分类\"},\"400\":{\"h\":\"1、不同存储引擎支持不同的锁机制\",\"t\":[\"MyISAM和MEMORY存储引擎采用的表级锁，\",\"InnoDB存储引擎既支持行级锁，也支持表级锁，默认情况下采用行级锁。\",\"BDB采用的是页面锁，也支持表级锁\"]},\"401\":{\"h\":\"2、按照数据操作的类型分\",\"t\":[\"读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。\",\"写锁（排他锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。\"]},\"402\":{\"h\":\"3、按照数据操作的粒度分\",\"t\":[\"表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。\",\"行级锁： 开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。\",\"页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般\"]},\"403\":{\"h\":\"4、按照操作性能可分为乐观锁和悲观锁\",\"t\":[\"乐观锁：一般的实现方式是对记录数据版本进行比对，在数据更新提交的时候才会进行冲突检测，如果发现冲突了，则提示错误信息。\",\"悲观锁：在对一条数据修改的时候，为了避免同时被其他人修改，在修改数据之前先锁定，再修改的控制方式。共享锁和排他锁是悲观锁的不同实现，但都属于悲观锁范畴。\"]},\"404\":{\"h\":\"二、共享锁和排它锁\",\"t\":[\"行锁分为共享锁分为共享锁和排它锁\",\"行锁的是mysql锁中粒度最小的一种锁，因为锁的粒度很小，所以发生资源争抢的概率也最小，并发性能最大，但是也会造成死锁，每次加锁和释放锁的开销也会变大。\",\"使用MySQL行级锁的两个前提\",\"使用 innoDB 引擎\",\"开启事务 (隔离级别为 Repeatable Read)\",\"InnoDB行锁的类型\",\"共享锁（S）：当事务对数据加上共享锁后, 其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。\",\"排他锁（X）：如果事务T对数据A加上排他锁后，则其他事务不能再对数据A加任任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。\",\"加锁的方式\",\"InnoDB引擎默认更新语句，update,delete,insert 都会自动给涉及到的数据加上排他锁，select语句默认不会加任何锁类型，如果要加可以使用下面的方式:\",\"加共享锁（S）：select * from table_name where ... lock in share mode;\",\"加排他锁（x）：select * from table_name where ... for update;\",\"锁兼容\",\"共享锁只能兼容共享锁, 不兼容排它锁\",\"排它锁互斥共享锁和其它排它锁\"]},\"405\":{\"h\":\"三、行锁是如何实现\",\"t\":[\"InnoDB行锁是通过对索引数据页上的记录加锁实现的，主要实现算法有 3 种：Record Lock、Gap Lock 和 Next-key Lock。\",\"RecordLock锁：锁定单个行记录的锁。（记录锁，RC、RR隔离级别都支持）\",\"GapLock锁：间隙锁，锁定索引记录间隙，确保索引记录的间隙不变。（范围锁，RR隔离级别支持）\",\"Next-key Lock 锁：记录锁和间隙锁组合，同时锁住数据，并且锁住数据前后范围。（记录锁+范围锁，RR隔离级别支持）\",\"注意： InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁\",\"在RR隔离级别，InnoDB对于记录加锁行为都是先采用Next-Key Lock，但是当SQL操作含有唯一索引时，Innodb会对Next-Key Lock进行优化，降级为RecordLock，仅锁住索引本身而非范围。\",\"各种操作加锁的特点\",\"1）select ... from 语句：InnoDB引擎采用MVCC机制实现非阻塞读，所以对于普通的select语句，InnoDB不加锁\",\"2）select ... from lock in share mode语句：追加了共享锁，InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以降级为RecordLock锁。\",\"3）select ... from for update语句：追加了排他锁，InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以降级为RecordLock锁。\",\"4）update ... where 语句：InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以降级为RecordLock锁。\",\"5）delete ... where 语句：InnoDB会使用Next-Key Lock锁进行处理，如果扫描发现唯一索引，可以降级为RecordLock锁。\",\"6）insert语句：InnoDB会在将要插入的那一行设置一个排他的RecordLock锁。\",\"下面以“update t1 set name=‘lisi’ where id=10”操作为例，举例子分析下 InnoDB 对不同索引的加锁行为，以RR隔离级别为例。\",\"主键加锁\",\"加锁行为：仅在id=10的主键索引记录上加X锁。\",\"image.png\",\"唯一键加锁\",\"加锁行为：现在唯一索引id上加X锁，然后在id=10的主键索引记录上加X锁。\",\"image.png\",\"非唯一键加锁\",\"加锁行为：对满足id=10条件的记录和主键分别加X锁，然后在(6,c)-(10,b)、(10,b)-(10,d)、(10,d)-(11,f)范围分别加Gap Lock。\",\"image.png\",\"无索引加锁\",\"加锁行为：表里所有行和间隙都会加X锁。（当没有索引时，会导致全表锁定，因为InnoDB引擎锁机制是基于索引实现的记录锁定）。\",\"image.png\"]},\"406\":{\"h\":\"四、死锁\"},\"407\":{\"h\":\"表级死锁\",\"t\":[\"产生原因\",\"用户A访问表A（锁住了表A），然后又访问表B；另一个用户B访问表B（锁住了表B），然后企图访问表A；这时用户A由于用户B已经锁住表B，它必须等待用户B释放表B才能继续，同样用户B要等用户A释放表A才能继续，这就死锁就产生了。\",\"用户A--》A表（表锁）--》B表（表锁）\",\"用户B--》B表（表锁）--》A表（表锁）\",\"解决方案\",\"这种死锁比较常见，是由于程序的BUG产生的，除了调整的程序的逻辑没有其它的办法。\",\"仔细分析程序的逻辑，对于数据库的多表操作时，尽量按照相同的顺序进行处理，尽量避免同时锁定两个资源，如操作A和B两张表时，总是按先A后B的顺序处理， 必须同时锁定两个资源时，要保证在任何时刻都应该按照相同的顺序来锁定资源。\"]},\"408\":{\"h\":\"行级锁死锁\",\"t\":[\"产生原因1：\",\"如果在事务中执行了一条没有索引条件的查询，引发全表扫描，把行级锁上升为全表记录锁定（等价于表级锁），多个这样的事务执行后，就很容易产生死锁和阻塞，最终应用系统会越来越慢，发生阻塞或死锁。\",\"解决方案1：\",\"SQL语句中不要使用太复杂的关联多表的查询；使用explain“执行计划\\\"对SQL语句进行分析，对于有全表扫描和全表锁定的SQL语句，建立相应的索引进行优化。\",\"产生原因2：\",\"两个事务分别想拿到对方持有的锁，互相等待，于是产生死锁\",\"image.png\",\"产生原因3：每个事务只有一个SQL,但是有些情况还是会发生死锁.\",\"事务1,从name索引出发 , 读到的[hdc, 1], [hdc, 6]均满足条件, 不仅会加name索引上的记录X锁, 而且会加聚簇索引上的记录X锁, 加锁顺序为先[1,hdc,100], 后[6,hdc,10]\",\"事务2，从pubtime索引出发，[10,6],[100,1]均满足过滤条件，同样也会加聚簇索引上的记录X锁，加锁顺序为[6,hdc,10]，后[1,hdc,100]。\",\"但是加锁时发现跟事务1的加锁顺序正好相反，两个Session恰好都持有了第一把锁，请求加第二把锁，死锁就发生了。\",\"image.png\",\"解决方案: 如上面的原因2和原因3,  对索引加锁顺序的不一致很可能会导致死锁，所以如果可以，尽量以相同的顺序来访问索引记录和表。在程序以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，也可以大大降低出现死锁的可能；\"]},\"409\":{\"c\":[\"mysql\"]},\"410\":{\"c\":[\"mysql调优\"]},\"411\":{\"h\":\"8、mysql索引\"},\"412\":{\"h\":\"一、索引的数据结构\",\"t\":[\"MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构。\"]},\"413\":{\"h\":\"MyISAMB+Tree索引结构\",\"t\":[\"叶节点的data域存放的是数据记录的地址。下图是MyISAM索引的原理图：\",\"img\",\"这里设表一共有三列，假设我们以Col1为主键，则图8是一个MyISAM表的主索引（Primary key）示意。可以看出MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：\",\"img\",\"同样也是一颗B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。\",\"MyISAM的索引方式也叫做“非聚集”的，之所以这么称呼是为了与InnoDB的聚集索引区分。\"]},\"414\":{\"h\":\"InnoDB也使用B+Tree作为索引结构\",\"t\":[\"第一个重大区别是InnoDB的数据文件本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。\",\"img\",\"是InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。\",\"第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，图11为定义在Col3上的一个辅助索引：\",\"img\",\"这里以英文字符的ASCII码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。\",\"了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。\",\"下一章将具体讨论这些与索引有关的优化策略。\"]},\"415\":{\"h\":\"二、什么是覆盖索引\",\"t\":[\"覆盖索引是一种避免回表查询的优化策略: 只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快。\",\"具体的实现方式:\",\"将被查询的字段建立普通索引或者联合索引，这样的话就可以直接返回索引中的的数据，不需要再通过聚集索引去定位行记录，避免了回表的情况发生。\",\"EXPLAIN SELECT user_name,user_age,user_level FROM users WHERE user_name = 'tom' AND user_age = 17; \",\"image.png\",\"覆盖索引的定义与注意事项:\",\"如果一个索引包含了 所有需要查询的字段的值 (不需要回表)，这个索引就是覆盖索引。\",\"MySQL只能使用B+Tree索引做覆盖索引 (因为只有B+树能存储索引列值)\",\"在explain的Extra列, 如果出现 **Using index 表示 使用到了覆盖索引 , 所取的数据完全在索引中就能拿到\"]},\"416\":{\"h\":\"三、索引哪些情况下会失效情况\",\"t\":[\"查询条件包含 or，会导致索引失效。\",\"隐式类型转换，会导致索引失效，例如 age 字段类型是 int，我们 where age = “1”，这样就会触发隐式类型转换\",\"like 通配符会导致索引失效，注意:”ABC%” 不会失效，会走 range 索引，”% ABC” 索引会失效\",\"联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。\",\"对索引字段进行函数运算。\",\"对索引列运算（如，+、-、*、/），索引失效。\",\"索引字段上使用（!= 或者 < >，not in）时，会导致索引失效。\",\"索引字段上使用 is null， is not null，可能导致索引失效。\",\"相 join 的两个表的字符编码不同，不能命中索引，会导致笛卡尔积的循环计算\",\"mysql 估计使用全表扫描要比使用索引快，则不使用索引。\"]},\"417\":{\"h\":\"四、索引查询的机制\"},\"418\":{\"h\":\"4.1、聚簇索引的查询\",\"t\":[\"将数据和索引放在一起，查到索引就可以查到数据\"]},\"419\":{\"h\":\"4.2、非聚簇索引\",\"t\":[\"非聚簇索引放的是索引值和主键值，查到索引值然后根据索引对应的主键值再次查询id键值，这个叫做回表操作，会慢一点\"]},\"420\":{\"h\":\"五、索引的一些特点\",\"t\":[\"索引下推\",\"当进行索引查询时，首先根据索引来查找记录，然后再根据where条件来过滤记录； 在支持ICP优化后，MySQL会在取出索引的同时，判断是否可以进行where条件过滤再进行索引查询，也就是说提前执行where的部分过滤操作，在某些场景下，可以大大减少回表次数，从而提升整体性能。 如果没有索引下推优化（或称ICP优化），当进行索引查询时，首先根据索引来查找记录，然后再根据where条件来过滤记录； \",\"自适应索引\",\"1、自适应即我们不需要自己处理，当InnoDB引擎根据查询统计发现某一查询满足hash索引的数据结构特点，就会给其建立一个hash索引； 2、hash索引底层的数据结构是散列表（Hash表），其数据特点就是比较适合在内存中使用，自适应Hash索引存在于InnoDB架构中的缓存中（不存在于磁盘架构中），见下面的InnoDB架构图。 3、自适应hash索引只适合搜索等值的查询，如select * from table where index_col='xxx'，而对于其他查找类型，如范围查找，是不能使用的； \"]},\"421\":{\"h\":\"思考\",\"t\":[\"根据索引的数据结构思考为什么是最左前缀原则，和%会使索引失效\",\"聚簇索引和非聚簇索引\"]},\"422\":{\"c\":[\"mysql\"]},\"423\":{\"c\":[\"mysql索引\"]},\"424\":{\"h\":\"9、mysql事务\"},\"425\":{\"h\":\"一、MySQL中事务的特性\",\"t\":[\"在关系型数据库管理系统中，一个逻辑工作单元要成为事务，必须满足这 4 个特性，即所谓的 ACID：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。\",\"1）原子性\",\"原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。\",\"InnoDB存储引擎提供了两种事务日志：redo log(重做日志)和undo log(回滚日志)。其中redo log用于保证事务持久性；undo log则是事务原子性和隔离性实现的基础。\",\"image.png\",\"每写一个事务,都会修改Buffer Pool,从而产生相应的Redo/Undo日志:\",\"如果要回滚事务，那么就基于undo log来回滚就可以了，把之前对缓存页做的修改都给回滚了就可以了。\",\"如果事务提交之后，redo log刷入磁盘，结果MySQL宕机了，是可以根据redo log恢复事务修改过的缓存数据的。\",\"实现原子性的关键，是当事务回滚时能够撤销所有已经成功执行的sql语句。\",\"InnoDB 实现回滚，靠的是undo log ：当事务对数据库进行修改时，InnoDB 会生成对应的undo log ；如果事务执行失败或调用了rollback ，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。\",\"image.png\",\"2）一致性\",\"一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。\",\"约束一致性：创建表结构时所指定的外键、唯一索引等约束。\",\"数据一致性：是一个综合性的规定，因为它是由原子性、持久性、隔离性共同保证的结果，而不是单单依赖于某一种技术。\",\"image.png\",\"3）隔离性\",\"隔离性：指的是一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对其他的并发事务是隔离的。\",\"不考虑隔离性会引发的问题:\",\"脏读 : 一个事务读取到了另一个事务修改但未提交的数据。\",\"不可重复读: 一个事务中多次读取同一行记录的结果不一致，后面读取的跟前面读取的结果不一致。\",\"幻读 : 一个事务中多次按相同条件查询，结果不一致。后续查询的结果和面前查询结果不同，多了或少了几行记录。\",\"数据库事务的隔离级别有4个，由低到高依次为Read uncommitted 、Read committed、Repeatable read 、Serializable ，这四个级别可以逐个解决脏读 、不可重复读 、幻读 这几类问题。\",\"4）持久性\",\"持久性：指的是一个事务一旦提交，它对数据库中数据的改变就应该是永久性的，后续的操作或故障不应该对其有任何影响，不会丢失。\",\"MySQL 事务的持久性保证依赖的日志文件: redo log\",\"redo log 也包括两部分：一是内存中的日志缓冲(redo log buffer)，该部分日志是易失性的；二是磁盘上的重做日志文件(redo log file)，该部分日志是持久的。redo log是物理日志，记录的是数据库中物理页的情况 。\",\"当数据发生修改时，InnoDB不仅会修改Buffer Pool中的数据，也会在redo log buffer记录这次操作；当事务提交时，会对redo log buffer进行刷盘，记录到redo log file中。如果MySQL宕机，重启时可以读取redo log file中的数据，对数据库进行恢复。这样就不需要每次提交事务都实时进行刷脏了。\",\"image.png\",\"5）ACID总结\",\"事务的持久化是为了应对系统崩溃造成的数据丢失.\",\"只有保证了事务的一致性，才能保证执行结果的正确性\",\"在非并发状态下，事务间天然保证隔离性，因此只需要保证事务的原子性即可保证一致性.\",\"在并发状态下，需要严格保证事务的原子性、隔离性。\",\"image.png\"]},\"426\":{\"c\":[\"mysql\"]},\"427\":{\"c\":[\"mysql事务\"]},\"428\":{\"h\":\"21、 mysql和pg的异同\"},\"429\":{\"h\":\"一、 mysql 5.7和8.0 的区别\"},\"430\":{\"h\":\"1、 Mysql8.0 的新特点\",\"t\":[\"使用JSON表函数，您可以使用JSON数据的SQL机制。\",\"GIS地理支持。空间参考系统（SRS），以及SRS感知空间数据类型，空间索引和空间功能。\",\"可靠性 DDL语句已变得原子性和崩溃安全，元数据存储在单个事务数据字典中。\",\"由InnoDB提供支持！可观察性性能架构，信息架构，配置变量和错误记录的显着增强。\",\"可管理性远程管理，撤消表空间管理和新的即时DDL。\",\"安全 OpenSSL改进，新的默认身份验证，SQL角色，分解超级特权，密码强度等等。\",\"性能 InnoDB在读/写工作负载，IO绑定工作负载和高争用“热点”工作负载方面明显更好。\",\"增加了资源组功能，通过将用户线程映射到CPU，为用户提供一个选项，以针对特定硬件上的特定工作负载进行优化 。\"]},\"431\":{\"h\":\"2、缓存变化\",\"t\":[\"使用缓存的好处：\",\"当MySQL接收到客户端的查询SQL之后，仅仅只需要对其进行相应的权限验证之后，就会通过Query Cache来查找结果，甚至都不需要经过Optimizer模块进行执行计划的分析优化，更不需要发生任何存储引擎的交互.\",\"mysql5.7支持内部缓存，8.0之后已废弃\",\"mysql缓存的限制\",\"mysql基本没有手段灵活的管理缓存失效和生效，尤其对于频繁更新的表\",\"SQL必须完全一致才会导致cache命中\",\"为了节省内存空间，太大的result set不会被cache (< query_cache_limit)；\",\"MySQL缓存在分库分表环境下是不起作用的；\",\"执行SQL里有触发器,自定义函数时，MySQL缓存也是不起作用的；\",\"在表的结构或数据发生改变时，基于该表相关cache立即全部失效。\",\"替代方案\",\"应用层组织缓存，最简单的是使用redis，ehcached等\",\"账户与安全\"]},\"432\":{\"h\":\"二、mysql 和 pg 的区别\"},\"433\":{\"h\":\"2.1、 pg 优势\",\"t\":[\"在SQL的标准实现上要比MySQL完善，而且功能实现比较严谨；\",\"存储过程的功能支持要比MySQL好，具备本地缓存执行计划的能力；\",\"对表连接支持较完整，优化器的功能较完整，支持的索引类型很多，复杂查询能力较强；\",\"PG主表采用堆表存放，MySQL采用索引组织表，能够支持比MySQL更大的数据量。\",\"PG的主备复制属于物理复制，相对于MySQL基于binlog的逻辑复制，数据的一致性更加可靠，复制性能更高，\",\"MySQL的存储引擎插件化机制，存在锁机制复杂影响并发的问题，而PG不存在。\"]},\"434\":{\"h\":\"2.2、 mysql 优势\",\"t\":[\"innodb的基于回滚段实现的MVCC机制，相对PG新老数据一起存放的基于XID的MVCC机制，是占优的。 新老数据一起存放，需要定时触 发VACUUM，会带来多余的IO和数据库对象加锁开销，引起数据库整体的并发能力下降。而且VACUUM清理不及时，还可能会引发数据膨胀；\",\"MySQL采用索引组织表，这种存储方式非常适合基于主键匹配的查询、删改操作，但是对表结构设计存在约束；\",\"MySQL的优化器较简单，系统表、运算符、数据类型的实现都很精简，非常适合简单的查询操作；\",\"MySQL分区表的实现要优于PG的基于继承表的分区实现，主要体现在分区个数达到上千上万后的处理性能差异较大。\",\"MySQL的存储引擎插件化机制，使得它的应用场景更加广泛，比如除了innodb适合事务处理场景外，myisam适合静态数据的查询场景。\"]},\"435\":{\"c\":[\"mysql\"]},\"436\":{\"c\":[\"mysql\",\"pg\"]},\"437\":{\"h\":\"12、聚簇索引和非聚簇索引\"},\"438\":{\"h\":\"一、答题思路\",\"t\":[\"分别解释聚簇索引和非聚簇索引\",\"聚簇索引的特点（优点）和使用场景\",\"聚簇索引的缺点\",\"使用案例\"]},\"439\":{\"h\":\"二、聚簇索引\",\"t\":[\"聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据，一般在 innodb 存储引擎中。也是由于聚簇索引将数据和索引放在一起，因此一个表中只有一个聚簇索引。\",\"辅助索引：叶子节点存储的是聚簇索引的主键值，寻找数据需要先找到主键值在找到数据\",\"误区：主键自动设为聚簇索引\",\"聚簇索引默认是主键，如果表中没有定义主键，InnoDB 会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB 会隐式定义一个主键来作为聚簇索引。\",\"如果你已经设置了主键为聚簇索引，必须先删除主键，然后添加我们想要的聚簇索引，最后恢复设置主键即可。\",\"结合图例\",\"img\"]},\"440\":{\"h\":\"三、非聚簇索引\",\"t\":[\"MyISAM 使用的是非聚簇索引。MyISAM 将数据和索引分开存储，表数据存储在独立的地方，这两颗 B+树的叶子节点都使用一个地址指向真正的表数据。他的主键索引和辅助索引是相互独立的，可以通过辅助键来获取数据，不需要访问主键的索引树\"]},\"441\":{\"h\":\"四、聚簇索引的优点\",\"t\":[\"行数据和索引放在一起，使用聚簇索引的时候一次性可以将数据取出，减少了 io 次数，查询会更加快\",\"适合排序，聚簇索引不适合\",\"范围性数据聚簇索引会更加适合\"]},\"442\":{\"h\":\"五、聚簇索引的缺点\",\"t\":[\"维护聚簇索引的成本比较昂贵，在插入新行时或者主键被更新时。新的记录可能会插入到记录的中间，需要强制移动之前的记录\",\"如果主键比较大的话，那辅助索引将会变的更大\",\"使用 uuid 等随机数作为主键索引，可能数据比较稀疏，可能造成查询比较慢\"]},\"443\":{\"h\":\"六、使用场景\",\"t\":[\"在设计工作流流程中存在一个自增长的主键 id 还有一个随机数的流程 id\"]},\"444\":{\"c\":[\"mysql\"]},\"445\":{\"c\":[\"聚簇索引\",\"非聚簇索引\"]},\"446\":{\"h\":\"13、索引类型\"},\"447\":{\"h\":\"普通索引\",\"t\":[\"这是最基本的索引类型，基于普通字段建立的索引，没有任何限制。\",\"CREATE INDEX <索引的名字> ON tablename (字段名); ALTER TABLE tablename ADD INDEX [索引的名字] (字段名); CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名) ); \"]},\"448\":{\"h\":\"唯一索引\",\"t\":[\"与\\\"普通索引\\\"类似，不同的就是：索引字段的值必须唯一，但允许有空值 。\",\" CREATE UNIQUE INDEX <索引的名字> ON tablename (字段名); ALTER TABLE tablename ADD UNIQUE INDEX [索引的名字] (字段名); CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (字段名) ; \"]},\"449\":{\"h\":\"主键索引\",\"t\":[\"它是一种特殊的唯一索引，不允许有空值。在创建或修改表时追加主键约束即可，每个表只能有一个主键。\",\"CREATE TABLE tablename ( [...], PRIMARY KEY (字段名) ); ALTER TABLE tablename ADD PRIMARY KEY (字段名); \"]},\"450\":{\"h\":\"复合索引\",\"t\":[\"用户可以在多个列上建立索引，这种索引叫做组复合索引（组合索引）。复合索引可以代替多个单一索引，相比多个单一索引复合索引所需的开销更小。\",\"CREATE INDEX <索引的名字> ON tablename (字段名1，字段名2...); ALTER TABLE tablename ADD INDEX [索引的名字] (字段名1，字段名2...); CREATE TABLE tablename ( [...], INDEX [索引的名字] (字段名1，字段名2...) ); \"]},\"451\":{\"h\":\"复合索引使用注意事项\",\"t\":[\"何时使用复合索引，要根据 where 条件建索引，注意不要过多使用索引，过多使用会对更新操作效率有很大影响。\",\"如果表已经建立了(col1，col2)，就没有必要再单独建立（col1）；如果现在有(col1)索引，如果查询需要 col1 和 col2 条件，可以建立(col1,col2)复合索引，对于查询有一定提高。\"]},\"452\":{\"c\":[\"mysql\"]},\"453\":{\"c\":[\"索引类型\"]},\"454\":{\"h\":\"14、索引下推\"},\"455\":{\"h\":\"概念\",\"t\":[\"索引下推（index condition pushdown ）简称 ICP，在 Mysql5.6 的版本上推出，用于优化查询。\",\"SELECT * FROM users WHERE user_name LIKE '张%' AND user_age = 10; \",\"根据最左前缀法则，该语句在搜索索引树的时候，只能匹配到名字第一个字是‘张’的记录，接下来是怎么处理的呢？当然就是从该记录开始，逐个回表，到主键索引上找出相应的记录，再比对 age 这个字段的值是否符合。\",\"图 1: 在 (name,age) 索引里面特意去掉了 age 的值，这个过程 InnoDB 并不会去看 age 的值，只是按顺序把“name 第一个字是’张’”的记录一条条取出来回表。因此，需要回表 4 次\",\"MySQL 5.6 引入了索引下推优化，可以在索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。\",\"图 2: InnoDB 在 (name,age) 索引内部就判断了 age 是否等于 10，对于不等于 10 的记录，直接判断并跳过,减少回表次数.\",\"image.png\"]},\"456\":{\"h\":\"总结\",\"t\":[\"如果没有索引下推优化（或称 ICP 优化），当进行索引查询时，首先根据索引来查找记录，然后再根据 where 条件来过滤记录；\",\"在支持 ICP 优化后，MySQL 会在取出索引的同时，判断是否可以进行 where 条件过滤再进行索引查询，也就是说提前执行 where 的部分过滤操作，在某些场景下，可以大大减少回表次数，从而提升整体性能。\"]},\"457\":{\"c\":[\"mysql\"]},\"458\":{\"c\":[\"mysql\",\"索引下推\"]},\"459\":{\"h\":\"15、自适应 hash 索引\"},\"460\":{\"h\":\"一、什么是自适应 hash 索引\",\"t\":[\"自适应 Hash 索引（Adatptive Hash Index，内部简称 AHI）是 InnoDB 的三大特性之一，还有两个是 Buffer Pool 简称 BP、双写缓冲区（Doublewrite Buffer）。\",\"1、自适应即我们不需要自己处理，当 InnoDB 引擎根据查询统计发现某一查询满足 hash 索引的数据结构特点，就会给其建立一个 hash 索引；\",\"2、hash 索引底层的数据结构是散列表（Hash 表），其数据特点就是比较适合在内存中使用，自适应 Hash 索引存在于 InnoDB 架构中的缓存中（不存在于磁盘架构中），见下面的 InnoDB 架构图。\",\"3、自适应 hash 索引只适合搜索等值的查询，如 select * from table where index_col='xxx'，而对于其他查找类型，如范围查找，是不能使用的；\",\"image-20230416133924934.png\",\"Adaptive Hash Index 是针对 B+树 Search Path 的优化，因此所有会涉及到 Search Path 的操作，均可使用此 Hash 索引进行优化.\",\"image-20230416134024990.png\",\"根据索引键值(前缀)快速定位到叶子节点满足条件记录的 Offset，减少了 B+树 Search Path 的代价，将 B+树从 Root 节点至 Leaf 节点的路径定位，优化为 Hash Index 的快速查询。\",\"根据索引键值(前缀)快速定位到叶子节点满足条件记录的 Offset，减少了 B+树 Search Path 的代价，将 B+树从 Root 节点至 Leaf 节点的路径定位，优化为 Hash Index 的快速查询。\",\"InnoDB 的自适应 Hash 索引是默认开启的，可以通过配置下面的参数设置进行关闭。\",\"innodb_adaptive_hash_index = off \",\"自适应 Hash 索引使用分片进行实现的，分片数可以使用配置参数设置：\",\"innodb_adaptive_hash_index_parts = 8 \"]},\"461\":{\"h\":\"二、hash 索引的优缺点\",\"t\":[\"MySQL 中索引的常用数据结构有两种: 一种是 B+Tree,另一种则是 Hash.\",\"哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。\",\"Hash 底层实现是由 Hash 表来实现的，是根据键值 <key,value> 存储数据的结构。非常适合根据 key 查找 value 值，也就是单个 key 查询，或者说等值查询。\",\"image.png\",\"对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码，哈希码是一个较小的值,如果出现哈希码值相同的情况会拉出一条链表.\"]},\"462\":{\"h\":\"优点\",\"t\":[\"**适合等值查询。**有哈希冲突的情况下,等值查询访问哈希索引的数据非常快.(如果发生 Hash 冲突,存储引擎必须遍历链表中的所有行指针,逐行进行比较,直到找到所有符合条件的行).\"]},\"463\":{\"h\":\"缺点\",\"t\":[\"不支持排序和范围列查找 \",\"不是按照索引值进行存储的，无法用于排序和范围\",\"会出现 hash 冲突 \",\"如果发生 Hash 冲突,存储引擎必须遍历链表中的所有行指针,逐行进行比较,直到找到所有符合条件的行\"]},\"464\":{\"c\":[\"mysql\"]},\"465\":{\"c\":[\"自适应hash索引\"]},\"466\":{\"h\":\"16、写失效，行溢出\"},\"467\":{\"h\":\"一、什么是写失效\"},\"468\":{\"h\":\"1、原因\",\"t\":[\"InnoDB 的页和操作系统的页大小不一致，InnoDB 页大小一般为 16K，操作系统页大小为 4K，InnoDB 的页写入到磁盘时，一个页需要分 4 次写。\",\"如果存储引擎正在写入页的数据到磁盘时发生了宕机，可能出现页只写了一部分的情况，比如只写了 4K，就宕机了，这种情况叫做部分写失效（partial page write），可能会导致数据丢失。\",\"image.png\"]},\"469\":{\"h\":\"双写缓冲区 Doublewrite Buffer\",\"t\":[\"为了解决写失效问题，InnoDB 实现了 double write buffer Files, 它位于系统表空间，是一个存储区域。\",\"在 BufferPool 的 page 页刷新到磁盘真正的位置前，会先将数据存在 Doublewrite 缓冲区。这样在宕机重启时，如果出现数据页损坏，那么在应用 redo log 之前，需要通过该页的副本来还原该页，然后再进行 redo log 重做，double write 实现了 InnoDB 引擎数据页的可靠性.\",\"默认情况下启用双写缓冲区，如果要禁用 Doublewrite 缓冲区，可以将 innodb_doublewrite设置为 0。\",\"mysql> show variables like '%innodb_doublewrite%'; +--------------------+-------+ | Variable_name | Value | +--------------------+-------+ | innodb_doublewrite | ON | +--------------------+-------+ 1 row in set (0.01 sec) \",\"数据双写流程\",\"image.png\",\"step1：当进行缓冲池中的脏页刷新到磁盘的操作时,并不会直接写磁盘,每次脏页刷新必须要先写 double write .\",\"step2：通过 memcpy 函数将脏页复制到内存中的 double write buffer .\",\"step3: double write buffer 再分两次、每次 1MB, 顺序写入共享表空间的物理磁盘上, 第一次写.\",\"step4: 在完成 double write 页的写入后，再将 double wirite buffer 中的页写入各个表的独立表空间文件中(数据文件 .ibd), 第二次写。\",\"为什么写两次 ?\",\"可能有的同学会有疑问，为啥写两次，刷一次数据文件保存数据不就可以了，为什么还要写共享表空间 ?其实是因为共享表空间是在 ibdbata 文件中划出 2M 连续的空间，专门给 double write 刷脏页用的, 由于在这个过程中，double write 页的存储是连续的，因此写入磁盘为顺序写，性能很高；完成 double write 后，再将脏页写入实际的各个表空间文件，这时写入就是离散的了.\"]},\"470\":{\"h\":\"什么是行溢出\"},\"471\":{\"c\":[\"mysql\"]},\"472\":{\"c\":[\"写失效\",\"行溢出\"]},\"473\":{\"h\":\"17、可重复读实现\"},\"474\":{\"h\":\"可重复读（repeatable read）定义：\",\"t\":[\"一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。\"]},\"475\":{\"h\":\"MVCC\",\"t\":[\"MVCC，多版本并发控制, 用于实现读已提交和可重复读隔离级别。\",\"MVCC 的核心就是 Undo log 多版本链 + Read view，“MV”就是通过 Undo log 来保存数据的历史版本，实现多版本的管理，“CC”是通过 Read-view 来实现管理，通过 Read-view 原则来决定数据是否显示。同时针对不同的隔离级别， Read view 的生成策略不同，也就实现了不同的隔离级别。\"]},\"476\":{\"h\":\"Undo log 多版本链\",\"t\":[\"每条数据都有两个隐藏字段:\",\"trx_id: 事务 id,记录最近一次更新这条数据的事务 id.\",\"roll_pointer: 回滚指针,指向之前生成的 undo log\",\"image.png\",\"每一条数据都有多个版本,版本之间通过 undo log 链条进行连接通过这样的设计方式,可以保证每个事务提交的时候,一旦需要回滚操作,可以保证同一个事务只能读取到比当前版本更早提交的值,不能看到更晚提交的值。\"]},\"477\":{\"h\":\"ReadView\",\"t\":[\"Read View 是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现.\",\"Read View 简单理解就是对数据在某个时刻的状态拍成照片记录下来。那么之后获取某时刻的数据时就还是原来的照片上的数据，是不会变的.\",\"Read View 中比较重要的字段有 4 个:\",\"m_ids : 用来表示 MySQL 中哪些事务正在执行,但是没有提交.\",\"min_trx_id: 就是 m_ids 里最小的值.\",\"max_trx_id : 下一个要生成的事务 id 值,也就是最大事务 id\",\"creator_trx_id: 就是你这个事务的 id\",\"image.png\",\"当一个事务第一次执行查询 sql 时，会生成一致性视图 read-view（快照），查询时从 undo log 中最新的一条记录开始跟 read-view 做对比，如果不符合比较规则，就根据回滚指针回滚到上一条记录继续比较，直到得到符合比较条件的查询结果。\"]},\"478\":{\"h\":\"Read View 判断记录某个版本是否可见的规则如下\",\"t\":[\"image.png\",\"1.如果当前记录的事务 id 落在绿色部分（trx_id < min_id），表示这个版本是已提交的事务生成的，可读。 2.如果当前记录的事务 id 落在红色部分（trx_id > max_id），表示这个版本是由将来启动的事务生成的，不可读。\",\"如果当前记录的事务 id 落在黄色部分（min_id <= trx_id <= max_id），则分为两种情况：\",\"若当前记录的事务 id 在未提交事务的数组中，则此条记录不可读；\",\"若当前记录的事务 id 不在未提交事务的数组中，则此条记录可读。\",\"RC 和 RR 隔离级别都是由 MVCC 实现，区别在于：\",\"RC 隔离级别时，read-view 是每次执行 select 语句时都生成一个；\",\"RR 隔离级别时，read-view 是在第一次执行 select 语句时生成一个，同一事务中后面的所有 select 语句都复用这个 read-view 。\"]},\"479\":{\"c\":[\"mysql\"]},\"480\":{\"c\":[\"可重复读\",\"MVCC\",\"Undo log\",\"ReadView\"]},\"481\":{\"h\":\"18、RR解决了幻读？\"},\"482\":{\"h\":\"Repeatable Read 解决了幻读问题吗\",\"t\":[\"可重复读（repeatable read）定义： 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。\",\"不过理论上会出现幻读，简单的说幻读指的的当用户读取某一范围的数据行时，另一个事务又在该范围插入了新行，当用户在读取该范围的数据时会发现有新的幻影行。\",\"注意在可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此， 幻读在“当前读”下才会出现（查询语句添加 for update，表示当前读）；\",\"在 MVCC 并发控制中，读操作可以分为两类: 快照读（Snapshot Read）与当前读 （Current Read）。\",\"快照读 快照读是指读取数据时不是读取最新版本的数据，而是基于历史版本读取的一个快照信息（mysql 读取 undo log 历史版本) ，快照读可以使普通的 SELECT 读取数据时不用对表数据进行加锁，从而解决了因为对数据库表的加锁而导致的两个如下问题 \",\"解决了因加锁导致的修改数据时无法对数据读取问题.\",\"解决了因加锁导致读取数据时无法对数据进行修改的问题.\",\"当前读 当前读是读取的数据库最新的数据，当前读和快照读不同，因为要读取最新的数据而且要保证事务的隔离性，所以当前读是需要对数据进行加锁的（插入/更新/删除操作，属于当前读，需要加锁 , select for update 为当前读）\",\"表结构\",\"id\",\"key\",\"value\",\"0\",\"0\",\"0\",\"1\",\"1\",\"1\",\"假设 select * from where value=1 for update，只在这一行加锁（注意这只是假设），其它行不加锁，那么就会出现如下场景：\",\"image.png\",\"Session A 的三次查询 Q1-Q3 都是 select * from where value=1 for update，查询的 value=1 的所有 row。\",\"T1：Q1 只返回一行(1,1,1)；\",\"T2：session B 更新 id=0 的 value 为 1，此时表 t 中 value=1 的数据有两行\",\"T3：Q2 返回两行(0,0,1),(1,1,1)\",\"T4：session C 插入一行(6,6,1)，此时表 t 中 value=1 的数据有三行\",\"T5：Q3 返回三行(0,0,1),(1,1,1),(6,6,1)\",\"T6：session A 事物 commit。\",\"其中 Q3 读到 value=1 这一样的现象，就称之为幻读，幻读指的是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行。\",\"先对“幻读”做出如下解释：\",\"要讨论「可重复读」隔离级别的幻读现象，是要建立在「当前读」的情况下，而不是快照读,因为在可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。\",\"Next-key Lock 锁\",\"产生幻读的原因是，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，Innodb 引擎为了解决「可重复读」隔离级别使用「当前读」而造成的幻读问题，就引出了 next-key 锁，就是记录锁和间隙锁的组合。\",\"RecordLock 锁：锁定单个行记录的锁。（记录锁，RC、RR 隔离级别都支持）\",\"GapLock 锁：间隙锁，锁定索引记录间隙(不包括记录本身)，确保索引记录的间隙不变。（范围锁，RR 隔离级别支持）\",\"Next-key Lock 锁：记录锁和间隙锁组合，同时锁住数据，并且锁住数据前后范围。（记录锁+范围锁，RR 隔离级别支持）\",\"image.png\",\"总结\",\"RR 隔离级别下间隙锁才有效，RC 隔离级别下没有间隙锁；\",\"RR 隔离级别下为了解决“幻读”问题：“快照读”依靠 MVCC 控制，“当前读”通过间隙锁解决；\",\"间隙锁和行锁合称 next-key lock，每个 next-key lock 是前开后闭区间；\",\"间隙锁的引入，可能会导致同样语句锁住更大的范围，影响并发度。\"]},\"483\":{\"c\":[\"mysql\"]},\"484\":{\"c\":[\"rr\",\"幻读\"]},\"485\":{\"h\":\"19、count(列名)、count(1)和 count(*)\",\"t\":[\"进行统计操作时,count中的统计条件可以三种选择:\",\"EXPLAIN SELECT COUNT(*) FROM user; EXPLAIN SELECT COUNT(列名) FROM user; EXPLAIN SELECT COUNT(1) FROM user; \"]},\"486\":{\"h\":\"执行效果上：\",\"t\":[\"count(*) 包括了所有的列,在统计时 不会忽略列值为null的数据。\",\"count(1) 用1表示代码行,在统计时,不会忽略列值为null的数据。\",\"count(列名)在统计时,会忽略列值为空的数据,就是说某个字段的值为null时不统计。\"]},\"487\":{\"h\":\"执行效率上：\",\"t\":[\"InnoDB引擎：count（字段) < count(1) = count(*) \",\"InnoDB通过遍历最小的可用二级索引来处理select count(*) 语句，除非索引或优化器提示指示优化器使用不同的索引。如果二级索引不存在，则通过扫描聚集索引来处理。\",\"InnoDB已同样的方式处理count(1)和count(*)\",\"MyISAM引擎：count（字段) < count(1) <= count(*) \",\"MyISAM存储了数据的准确行数，使用 count(*)会直接读取该行数， 只有当第一列定义为NOT NULL时，count（1），才会执行该操作，所以优先选择 count(*)\",\"count(列名) 会遍历整个表，但不同的是，它会先获取列，然后判断是否为空，然后累加，因此count(列名)性能不如前两者。\"]},\"488\":{\"h\":\"注意：\",\"t\":[\"count(*)，这是SQL92 定义的标准统计行数的语法，跟数据库无关，与NULL也无关。而count(列名) 是统计列值数量，不计NULL，相同列值算一个。\"]},\"489\":{\"c\":[\"mysql\"]},\"490\":{\"c\":[\"索引类型\"]},\"491\":{\"h\":\"20、主从复制\"},\"492\":{\"h\":\"一、主从复制的用途\",\"t\":[\"实时灾备，用于故障切换\",\"读写分离，提供查询服务\",\"备份，避免影响业务\"]},\"493\":{\"h\":\"二、主从部署必要条件\",\"t\":[\"主库开启binlog日志（设置log-bin参数）\",\"主从server-id不同\",\"从库服务器能连通主库\"]},\"494\":{\"h\":\"三、主从复制的原理\",\"t\":[\"Mysql 中有一种日志叫做 bin 日志（二进制日志）。这个日志会记录下所有修改了数据库的SQL 语句（insert,update,delete,create/alter/drop table, grant 等等）。\",\"主从复制的原理其实就是把主服务器上的 bin 日志复制到从服务器上执行一遍，这样从服务器上的数据就和主服务器上的数据相同了。\",\"image.png\",\"主库db的更新事件(update、insert、delete)被写到binlog\",\"主库创建一个binlog dump thread，把binlog的内容发送到从库\",\"从库启动并发起连接，连接到主库\",\"从库启动之后，创建一个I/O线程，读取主库传过来的binlog内容并写入到relay log\",\"从库启动之后，创建一个SQL线程，从relay log里面读取内容，执行读取到的更新事件，将更新内容写入到slave的db\"]},\"495\":{\"c\":[\"mysql\"]},\"496\":{\"c\":[\"主从复制\"]},\"497\":{\"h\":\"21、分页优化\"},\"498\":{\"h\":\"一、分页的实现\",\"t\":[\"一般的分页查询使用简单的 limit 子句就可以实现。limit 格式如下：\",\"SELECT * FROM 表名 LIMIT [offset,] rows \",\"第一个参数指定第一个返回记录行的偏移量，注意从 0 开始；\",\"第二个参数指定返回记录行的最大数目；\",\"如果只给定一个参数，它表示返回最大的记录行数目；\",\"思考 1：如果偏移量固定，返回记录量对执行时间有什么影响？\",\"select * from user limit 10000,1; select * from user limit 10000,10; select * from user limit 10000,100; select * from user limit 10000,1000; select * from user limit 10000,10000; \",\"结果：在查询记录时，返回记录量低于 100 条，查询时间基本没有变化，差距不大。随着查询记录量越大，所花费的时间也会越来越多。\",\"思考 2：如果查询偏移量变化，返回记录数固定对执行时间有什么影响？\",\"select * from user limit 1,100; select * from user limit 10,100; select * from user limit 100,100; select * from user limit 1000,100; select * from user limit 10000,100; \",\"结果：在查询记录时，如果查询记录量相同，偏移量超过 100 后就开始随着偏移量增大，查询时间急剧的增加。（这种分页查询机制，每次都会从数据库第一条记录开始扫描，越往后查询越慢，而且查询的数据越多，也会拖慢总查询速度。）\"]},\"499\":{\"h\":\"二、分页优化策略\",\"t\":[\"优化 1: 通过索引进行分页，使用主键 id\",\"直接进行 limit 操作 会产生全表扫描,速度很慢. Limit 限制的是从结果集的 M 位置处取出 N 条输出,其余抛弃.\",\"假设 ID 是连续递增的,我们根据查询的页数和查询的记录数可以算出查询的 id 的范围，然后配合 limit 使用\",\"EXPLAIN SELECT * FROM user WHERE id >= 100001 LIMIT 100; \",\"优化 2：利用子查询优化\",\"-- 首先定位偏移位置的id SELECT id FROM user_contacts LIMIT 100000,1; -- 根据获取到的id值向后查询. EXPLAIN SELECT * FROM user_contacts WHERE id >= (SELECT id FROM user_contacts LIMIT 100000,1) LIMIT 100; \",\"原因：使用了 id 做主键比较(id>=)，并且子查询使用了覆盖索引进行优化。\"]},\"500\":{\"c\":[\"mysql\"]},\"501\":{\"c\":[\"分页优化\",\"优化\"]},\"502\":{\"h\":\"22、慢查询优化\"},\"503\":{\"h\":\"一、慢查询开关\",\"t\":[\"默认情况下 slow_query_log 的值为 OFF，表示慢查询日志是禁用的\",\"mysql> show variables like '%slow_query_log%'; +---------------------+------------------------------+ | Variable_name | Value | +---------------------+------------------------------+ | slow_query_log | ON | | slow_query_log_file | /var/lib/mysql/test-slow.log | +---------------------+------------------------------+ \",\"可以通过设置 slow_query_log 的值来开启\",\"mysql> set global slow_query_log=1; \",\"使用set global slow_query_log=1 开启了慢查询日志只对当前数据库生效，MySQL 重启后则会失效。如果要永久生效，就必须修改配置文件 my.cnf（其它系统变量也是如此）\",\"-- 编辑配置 vim /etc/my.cnf -- 添加如下内容 slow_query_log =1 slow_query_log_file=/var/lib/mysql/ruyuan-slow.log -- 重启MySQL service mysqld restart mysql> show variables like '%slow_query%'; +---------------------+--------------------------------+ | Variable_name | Value | +---------------------+--------------------------------+ | slow_query_log | ON | | slow_query_log_file | /var/lib/mysql/ruyuan-slow.log | +---------------------+--------------------------------+ \",\"那么开启了慢查询日志后，什么样的 SQL 才会记录到慢查询日志里面呢？ 这个是由参数 long_query_time控制，默认情况下 long_query_time 的值为 10 秒.\",\"mysql> show variables like 'long_query_time'; +-----------------+-----------+ | Variable_name | Value | +-----------------+-----------+ | long_query_time | 10.000000 | +-----------------+-----------+ mysql> set global long_query_time=1; Query OK, 0 rows affected (0.00 sec) mysql> show variables like 'long_query_time'; +-----------------+-----------+ | Variable_name | Value | +-----------------+-----------+ | long_query_time | 10.000000 | +-----------------+-----------+ \",\"修改了变量 long_query_time，但是查询变量 long_query_time 的值还是 10，难道没有修改到呢？注意：使用命令 set global long_query_time=1 修改后，需要重新连接或新开一个会话才能看到修改值。\",\"mysql> show variables like 'long_query_time'; +-----------------+----------+ | Variable_name | Value | +-----------------+----------+ | long_query_time | 1.000000 | +-----------------+----------+ \",\"log_output 参数是指定日志的存储方式。log_output='FILE' 表示将日志存入文件，默认值是'FILE'。log_output='TABLE' 表示将日志存入数据库，这样日志信息就会被写入到 mysql.slow_log 表中。\",\"mysql> SHOW VARIABLES LIKE '%log_output%'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | log_output | FILE | +---------------+-------+ \",\"MySQL 数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output='FILE,TABLE'。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件.\",\"系统变量 log-queries-not-using-indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。如果调优的话，建议开启这个选项。\",\"mysql> show variables like 'log_queries_not_using_indexes'; +-------------------------------+-------+ | Variable_name | Value | +-------------------------------+-------+ | log_queries_not_using_indexes | OFF | +-------------------------------+-------+ mysql> set global log_queries_not_using_indexes=1; Query OK, 0 rows affected (0.00 sec) mysql> show variables like 'log_queries_not_using_indexes'; +-------------------------------+-------+ | Variable_name | Value | +-------------------------------+-------+ | log_queries_not_using_indexes | ON | +-------------------------------+-------+ \"]},\"504\":{\"h\":\"二、慢查询日志\",\"t\":[\"我们得到慢查询日志后，最重要的一步就是去分析这个日志。我们先来看下慢日志里到底记录了哪些内容。\",\"如下图是慢日志里其中一条 SQL 的记录内容，可以看到有时间戳，用户，查询时长及具体的 SQL 等信息.\",\"# Time: 2022-02-23T13:50:45.005959Z # User@Host: root[root] @ localhost [] Id: 3 # Query_time: 3.724273 Lock_time: 0.000371 Rows_sent: 5 Rows_examined: 5000000 SET timestamp=1645624245; select * from test_index where hobby = '20009951' or hobby = '10009931' or hobby = '30009931' or dname = 'name4000' or dname = 'name6600'; \",\"Time: 执行时间\",\"User: 用户信息 ,Id 信息\",\"Query_time: 查询时长\",\"Lock_time: 等待锁的时长\",\"Rows_sent:查询结果的行数\",\"Rows_examined: 查询扫描的行数\",\"SET timestamp: 时间戳\",\"SQL 的具体信息\"]},\"505\":{\"h\":\"三、 慢查询 SQL 优化思路\"},\"506\":{\"h\":\"1) SQL 性能下降的原因\",\"t\":[\"在日常的运维过程中，经常会遇到 DBA 将一些执行效率较低的 SQL 发过来找开发人员分析，当我们拿到这个 SQL 语句之后，在对这些 SQL 进行分析之前，需要明确可能导致 SQL 执行性能下降的原因进行分析，执行性能下降可以体现在以下两个方面：\",\"等待时间长\",\"锁表导致查询一直处于等待状态，后续我们从MySQL锁的机制去分析SQL执行的原理 \",\"执行时间长\",\"1.查询语句写的烂 2.索引失效 3.关联查询太多join 4.服务器调优及各个参数的设置 \"]},\"507\":{\"h\":\"2) 慢查询优化思路\",\"t\":[\"优先选择优化高并发执行的 SQL,因为高并发的 SQL 发生问题带来后果更严重.\",\"比如下面两种情况: SQL1: 每小时执行10000次, 每次20个IO 优化后每次18个IO,每小时节省2万次IO SQL2: 每小时10次,每次20000个IO,每次优化减少2000个IO,每小时节省2万次IO SQL2更难优化,SQL1更好优化.但是第一种属于高并发SQL,更急需优化 成本更低 \",\"定位优化对象的性能瓶颈(在优化之前了解性能瓶颈在哪)\",\"在去优化SQL时,选择优化分方向有三个: 1.IO(数据访问消耗的了太多的时间,查看是否正确使用了索引) , 2.CPU(数据运算花费了太多时间, 数据的运算分组 排序是不是有问题) 3.网络带宽(加大网络带宽) \",\"明确优化目标\",\"需要根据数据库当前的状态 数据库中与该条SQL的关系 当前SQL的具体功能 最好的情况消耗的资源,最差情况下消耗的资源,优化的结果只有一个给用户一个好的体验 \",\"从 explain 执行计划入手\",\"只有explain能告诉你当前SQL的执行状态 \",\"永远用小的结果集驱动大的结果集\",\"小的数据集驱动大的数据集,减少内层表读取的次数 类似于嵌套循环 for(int i = 0; i < 5; i++){ for(int i = 0; i < 1000; i++){ } } 如果小的循环在外层,对于数据库连接来说就只连接5次,进行5000次操作,如果1000在外,则需要进行1000次数据库连接,从而浪费资源，增加消耗.这就是为什么要小表驱动大表。 \",\"尽可能在索引中完成排序\",\"排序操作用的比较多,order by 后面的字段如果在索引中,索引本来就是排好序的,所以速度很快,没有索引的话,就需要从表中拿数据,在内存中进行排序,如果内存空间不够还会发生落盘操作 \",\"只获取自己需要的列\",\"不要使用select * ,select * 很可能不走索引,而且数据量过大 \",\"只使用最有效的过滤条件\",\"误区 where后面的条件越多越好,但实际上是应该用最短的路径访问到数据 \",\"尽可能避免复杂的 join 和子查询\",\"每条SQL的JOIN操作 建议不要超过三张表 将复杂的SQL, 拆分成多个小的SQL 单个表执行,获取的结果 在程序中进行封装 如果join占用的资源比较多,会导致其他进程等待时间变长 \",\"合理设计并利用索引\",\"如何判定是否需要创建索引? 1.较为频繁的作为查询条件的字段应该创建索引. 2.唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件.（唯一性太差的字段主要是指哪些呢？如状态字段，类型字段等等这些字段中的数据可能总共就是那么几个几十个数值重复使用）（当一条Query所返回的数据超过了全表的15%的时候，就不应该再使用索引扫描来完成这个Query了）. 3.更新非常频繁的字段不适合创建索引.（因为索引中的字段被更新的时候，不仅仅需要更新表中的数据，同时还要更新索引数据，以确保索引信息是准确的）. 4.不会出现在WHERE子句中的字段不该创建索引. 如何选择合适索引? 1.对于单键索引，尽量选择针对当前Query过滤性更好的索引. 2.选择联合索引时,当前Query中过滤性最好的字段在索引字段顺序中排列要靠前. 3.选择联合索引时,尽量索引字段出现在w中比较多的索引. \"]},\"508\":{\"c\":[\"mysql\"]},\"509\":{\"c\":[\"优化\",\"慢查询优化\"]},\"510\":{\"h\":\"23、JOIN 优化\"},\"511\":{\"h\":\"一、定义\",\"t\":[\"JOIN 是 MySQL 用来进行联表操作的，用来匹配两个表的数据，筛选并合并出符合我们要求的结果集。\",\"JOIN 操作有多种方式，取决于最终数据的合并效果。常用连接方式的有以下几种:\"]},\"512\":{\"h\":\"二、什么是驱动表 ?\",\"t\":[\"多表关联查询时,第一个被处理的表就是驱动表,使用驱动表去关联其他表.\",\"驱动表的确定非常的关键,会直接影响多表关联的顺序,也决定后续关联查询的性能\",\"驱动表的选择要遵循一个规则:\",\"在对最终的结果集没有影响的前提下,优先选择结果集最小的那张表作为驱动表\"]},\"513\":{\"h\":\"三种 JOIN 算法\",\"t\":[\"1.Simple Nested-Loop Join（ 简单的嵌套循环连接 )\",\"简单来说嵌套循环连接算法就是一个双层 for 循环 ，通过循环外层表的行数据，逐个与内层表的所有行数据进行比较来获取结果.\",\"这种算法是最简单的方案，性能也一般。对内循环没优化。\",\"例如有这样一条 SQL:\",\"-- 连接用户表与订单表 连接条件是 u.id = o.user_id select * from user t1 left join order t2 on t1.id = t2.user_id; -- user表为驱动表,order表为被驱动表 \",\"转换成代码执行时的思路是这样的:\",\"for(user表行 uRow : user表){ for(Order表的行 oRow : order表){ if(uRow.id = oRow.user_id){ return uRow; } } } \",\"匹配过程如下图\",\"SNL 的特点\",\"简单粗暴容易理解，就是通过双层循环比较数据来获得结果\",\"查询效率会非常慢,假设 A 表有 N 行，B 表有 M 行。SNL 的开销如下：\",\"A 表扫描 1 次。\",\"B 表扫描 M 次。\",\"一共有 N 个内循环，每个内循环要 M 次，一共有内循环 N * M 次\",\"2) Index Nested-Loop Join（ 索引嵌套循环连接 ）\",\"Index Nested-Loop Join 其优化的思路: 主要是为了减少内层表数据的匹配次数 , 最大的区别在于，用来进行 join 的字段已经在被驱动表中建立了索引。\",\"从原来的 匹配次数 = 外层表行数 * 内层表行数 , 变成了 匹配次数 = 外层表的行数 * 内层表索引的高度 ，极大的提升了 join 的性能。\",\"当 order 表的 user_id 为索引的时候执行过程会如下图：\",\"image.png\",\"注意：使用 Index Nested-Loop Join 算法的前提是匹配的字段必须建立了索引。\",\"3) Block Nested-Loop Join( 块嵌套循环连接 )\",\"如果 join 的字段有索引，MySQL 会使用 INL 算法。如果没有的话，MySQL 会如何处理？\",\"因为不存在索引了，所以被驱动表需要进行扫描。这里 MySQL 并不会简单粗暴的应用 SNL 算法，而是加入了 buffer 缓冲区，降低了内循环的个数，也就是被驱动表的扫描次数。\",\"在外层循环扫描 user 表中的所有记录。扫描的时候，会把需要进行 join 用到的列都缓存到 buffer 中。buffer 中的数据有一个特点，里面的记录不需要一条一条地取出来和 order 表进行比较，而是整个 buffer 和 order 表进行批量比较。\",\"如果我们把 buffer 的空间开得很大，可以容纳下 user 表的所有记录，那么 order 表也只需要访问一次。\",\"MySQL 默认 buffer 大小 256K，如果有 n 个 join 操作，会生成 n-1 个 join buffer。\",\"mysql> show variables like '%join_buffer%'; +------------------+--------+ | Variable_name | Value | +------------------+--------+ | join_buffer_size | 262144 | +------------------+--------+ mysql> set session join_buffer_size=262144; Query OK, 0 rows affected (0.00 sec) \"]},\"514\":{\"h\":\"四、JOIN 优化总结\",\"t\":[\"永远用小结果集驱动大结果集(其本质就是减少外层循环的数据数量)\",\"为匹配的条件增加索引(减少内层表的循环匹配次数)\",\"增大 join buffer size 的大小（一次缓存的数据越多，那么内层包的扫表次数就越少）\",\"减少不必要的字段查询（字段越少，join buffer 所缓存的数据就越多\"]},\"515\":{\"c\":[\"mysql\"]},\"516\":{\"c\":[\"JOIN优化\"]},\"517\":{\"h\":\"24、索引优化\"},\"518\":{\"h\":\"一、总结：从 explain 执行计划入手\",\"t\":[\"只有 explain 能告诉你当前 SQL 的执行状态\"]},\"519\":{\"h\":\"二、具体操作\"},\"520\":{\"h\":\"1、小的结果集驱动大的结果集\",\"t\":[\"小的数据集驱动大的数据集,减少内层表读取的次数 类似于嵌套循环 for(int i = 0; i < 5; i++){ for(int i = 0; i < 1000; i++){ } } 如果小的循环在外层,对于数据库连接来说就只连接5次,进行5000次操作,如果1000在外,则需要进行1000次数据库连接,从而浪费资源，增加消耗.这就是为什么要小表驱动大表。 \"]},\"521\":{\"h\":\"2、尽可能在索引中完成排序\",\"t\":[\"排序操作用的比较多,order by 后面的字段如果在索引中,索引本来就是排好序的,所以速度很快,没有索引的话,就需要从表中拿数据,在内存中进行排序,如果内存空间不够还会发生落盘操作 \"]},\"522\":{\"h\":\"3、只获取自己需要的列\",\"t\":[\"不要使用select * ,select * 很可能不走索引,而且数据量过大 \"]},\"523\":{\"h\":\"4、使用最有效的过滤条件\",\"t\":[\"误区 where后面的条件越多越好,但实际上是应该用最短的路径访问到数据 \"]},\"524\":{\"h\":\"5、尽可能避免复杂的 join 和子查询\",\"t\":[\"每条SQL的JOIN操作 建议不要超过三张表 将复杂的SQL, 拆分成多个小的SQL 单个表执行,获取的结果 在程序中进行封装 如果join占用的资源比较多,会导致其他进程等待时间变长 \"]},\"525\":{\"h\":\"6、合理设计并利用索引\",\"t\":[\"如何判定是否需要创建索引? 1.较为频繁的作为查询条件的字段应该创建索引. 2.唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件.（唯一性太差的字段主要是指哪些呢？如状态字段，类型字段等等这些字段中的数据可能总共就是那么几个几十个数值重复使用）（当一条Query所返回的数据超过了全表的15%的时候，就不应该再使用索引扫描来完成这个Query了）. 3.更新非常频繁的字段不适合创建索引.（因为索引中的字段被更新的时候，不仅仅需要更新表中的数据，同时还要更新索引数据，以确保索引信息是准确的）. 4.不会出现在WHERE子句中的字段不该创建索引. 如何选择合适索引? 1.对于单键索引，尽量选择针对当前Query过滤性更好的索引. 2.选择联合索引时,当前Query中过滤性最好的字段在索引字段顺序中排列要靠前. 3.选择联合索引时,尽量索引字段出现在w中比较多的索引. \"]},\"526\":{\"c\":[\"mysql\"]},\"527\":{\"c\":[\"索引优化\"]},\"528\":{\"h\":\"Python 个人编程风格\"},\"529\":{\"h\":\"一、变量名\",\"t\":[\"变量名总体要求\",\"尽可能使用有意义的英文单词给变量命名，禁止使用单字母作为变量【强制】\",\"反例\",\"a = '杨勇' data = [22, 33, 23] \",\"正例\",\"name = '杨勇' ages = [22, 33, 23] \",\"不可以和保留字进行重复【强制】\",\"反例\",\"type = 'number' \",\"正例\",\"search_type = 'number' \",\"私有变量不可以对外暴露【强制】\",\"通用的变量名缩写【建议】\",\"反例\",\"dm = [[1,2,3]] ct = None \",\"正例\",\"df = [[1,2,3]] ctx = None \",\"模块名 ——模块名统一使用下划线命名 redis_utils\",\"类名——类名统一使用大驼峰命名 Person\",\"函数名——统一使用下划线命名 get_name\",\"变量名——统一使用下划线命名 my_name\"]},\"530\":{\"h\":\"二、导入\",\"t\":[\"少用 import *，少导入不用的代码，避免循环导入【建议】\",\"导入格式，每个导入应该独占一行 【建议】\",\"导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组，每种顺序之间添加一个空行\",\"标准库导入\",\"第三方库导入\",\"应用程序指定导入\",\"每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.\",\"反例\",\"from flask import Resquese from foo.bar import baz import os from foo.bar import Quux \",\"正例\",\"import os from flask import Resquese from foo.bar import baz from foo.bar import Quux \"]},\"531\":{\"h\":\"三、注释\",\"t\":[\"文件头设置【强制】\",\"所有的文件强制添加以下文件头，其中替换为自己的名字，Description必写\",\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : ${NAME}.py # Time ：${DATE} ${TIME} # Author ：your name # version ：python 3.10 # Description： \\\"\\\"\\\" \",\"需要加注释的地方，根据实际情况【建议】\",\"文件头信息\",\"类注释\",\"函数注释统一使用 Epytext风格\",\"正例\",\"def test(name: str, age: int) -> dict: \\\"\\\"\\\" 测试方法 @param name:姓名 @param age: 年龄 @return: 个人信息 \\\"\\\"\\\" pass def get_name(): \\\"\\\"\\\"获取用户姓名\\\"\\\"\\\" pass \",\"关键逻辑注释\",\"TODO 注释\",\"注释不要太长，和代码最大长度一致\"]},\"532\":{\"h\":\"四、异常处理\",\"t\":[\"异常日志必须打印，最好把堆栈信息打印出来【强制】\",\"import traceback def test(): try: num = 1 / 0 except ZeroDivisionError as e: print(f'异常信息::{e}, {traceback.format_exc()}') test() \",\"except 处理，处理的错误具体处理\"]},\"533\":{\"h\":\"五、函数设计\",\"t\":[\"函数的if else过多层嵌套，不超过两层的if else 嵌套\",\"def demo(num: int): if num > 0: if num > 10: if num > 100: print('大于100') else: print('小于100') else: print('小于10') elif num == 0: print('等于0') else: print('小于0') \",\"for循环嵌套层数过多，一般不超过2层\",\"def demo(data: List[list]): for items in data: if items: for item in items: for temp in item: print(temp) \",\"过长的函数，函数长度远大于100行，一般在50行内\",\"过多的函数参数(一般5个之内)\",\"解决方法\",\"使用**kwargs，注释中解释参数的作用\",\"def do_something(name: str, age: int, **kwargs): \\\"\\\"\\\" @param name: 姓名 @param age: 年龄 @param kwargs: hobbies:爱好 sex:性别 height:身高 @return: \\\"\\\"\\\" pass \",\"使用具名数组 namedtuple\",\"from collections import namedtuple Student = namedtuple('Student', 'name, gender') s = Student('小花', '女') Student = namedtuple('Student', 'name,age,sex,height,hobbies') def do_something(student: Student): \\\"\\\"\\\" @param student:学生 @return: \\\"\\\"\\\" pass stu = Student('小花', '18', '女', 165, '唱歌') do_something(stu) \",\"使用 dataclasses数据类，使用 pydantic类型提示类，自行百度\",\"拒绝函数具有隐式返回值\",\"# 反例 def demo(num: int) -> int: \\\"\\\"\\\" 测试隐私返回值方法 @param num: @return: \\\"\\\"\\\" if num > 10: return num # 正例 def demo(num: int) -> int: \\\"\\\"\\\" 测试隐私返回值方法 @param num: @return: \\\"\\\"\\\" if num > 10: return num return 0 \",\"异常解析：函数正常情况下返回值为int类型，但是参数小于10时，返回值为None,这时如果使用函数返回值可能会有一些意料之外的结果。\"]},\"534\":{\"h\":\"六、类的设计\",\"t\":[\"类的分类：数据类和是实现类（功能类）\",\"数据类：例如这个类中保存的基本都是数据相关的，没有其他功能\",\"实现类：这个类中有大量的实现方法，涉及到一些功能操作和实现\",\"__init__.py文件中尽量少写或者是不写功能类方法，功能方法放在下面的子模块中\",\"__init__文件作用是模块的初始化作用，不适合写功能\",\"__init__文件名称难以区分功能作用，起不到标识的作用\",\"过于庞大的类\",\"第一指的是代码行数过长\",\"第二指的是类的功能过于复杂\",\"私有方法外部引用\",\"反例\",\"class Person: def __init__(self, name, age): self.name = name self.age = age self._sex = '未知' zs = Person('zs', 18) print(zs._sex) \",\"随意为类添加属性\",\"# 反例 class Person: def __init__(self, name, age): self.name = name self.age = age def set_sex(self, sex: str): \\\"\\\"\\\"设置性别\\\"\\\"\\\" self.sex = sex # 正例 class Person: def __init__(self, name, age): self.name = name self.age = age self.sex = None def set_sex(self, sex: str): \\\"\\\"\\\"设置性别\\\"\\\"\\\" self.sex = sex \",\"类的继承和类的组合，尽量少用类的多继承，多使用类的组合\",\"类的多继承是保证类的多态性，但是过长的继承规则，不利于写代码和业务调试，类的组合也是符合很多设计模式的思路。\"]},\"535\":{\"h\":\"7、模块设计\",\"t\":[\"模块解耦，各个功能的模块要明确\",\"公共方法的提取，公共方法要进行方法的抽取\"]},\"536\":{\"h\":\"8、其他\",\"t\":[\"数据类不要过于凌乱\",\"过多的重复代码\",\"没有注释或者令人困惑的注释\",\"缩进：统一使用 tab四个宫格\",\"空格，空行，这个以 pycharm格式化为准，快捷键 ctrl+alt+l\",\"行长度：这个以 pycharm格式化为准，一般120个字符\",\"全局变量和私有变量：少使用全局变量，全局变量使得程序更难理解和使用\",\"密码，密钥，token：在日志打印中注重隐私保护，不打印密码，密钥，token\",\"一个py文件一般不超过300行\"]},\"537\":{\"c\":[\"代码风格\"]},\"538\":{\"c\":[\"代码风格\"]},\"539\":{\"h\":\"从建房子到写代码：用工程思维构建高质量代码\"},\"540\":{\"h\":\"引言：代码即建筑，风格即设计\",\"t\":[\"编写代码就像建造一座房子：功能是基础，但真正的价值在于设计的合理性、可维护性和用户体验。无论是前端、后端还是脚本开发，代码风格的本质是通过清晰的结构、优雅的逻辑和严谨的规范，让代码像一座经久耐用的建筑一样，既能满足当前需求，又能适应未来的变化。本文将从“建房子”的视角，拆解代码开发的五个关键步骤，并分享如何用工程思维打造高质量代码。\"]},\"541\":{\"h\":\"第一步：打地基——模块化设计是代码的“地基”\"},\"542\":{\"h\":\"为什么需要模块化？\",\"t\":[\"单文件项目的问题： 如下代码虽然能快速实现功能，但随着需求增长，代码会逐渐变成“面条式”结构，难以维护：\",\"from flask import Flask app = Flask(__name__) @app.route('/') def hello(): return 'Welcome to My Watchlist!' @app.route('/user/<id>') def get_user(id): # 直接写数据库查询逻辑 return f\\\"User {id}'s data...\\\" \",\"这种写法将路由、业务逻辑和数据访问混在一起，后续扩展时会面临“一处改动，处处修改”的风险。\",\"模块化的优势： 将代码拆分为独立模块，如 routes.py、models.py、services.py，每个模块专注单一职责，如同建筑中的地基、承重墙和管线系统。例如：\",\"# project/ # ├── app.py # 主程序入口 # ├── routes/ # 路由模块 # │ └── user.py # ├── models/ # 数据模型 # │ └── user.py # └── services/ # 业务逻辑 # └── user_service.py \"]},\"543\":{\"h\":\"模块化设计的黄金法则\",\"t\":[\"单一职责原则（SRP）：每个模块只负责一个功能。\",\"高内聚、低耦合：模块内部紧密协作，但模块间依赖尽量少。\",\"接口清晰：模块间通过明确定义的接口（如函数、类方法）交互。\"]},\"544\":{\"h\":\"第二步：建房子——类与对象的“房间设计”\"},\"545\":{\"h\":\"类的两种角色：模型与逻辑\",\"t\":[\"模型类（Model）： 映射数据库表结构，定义数据的属性和基本操作。\",\"# models/user.py class User: def __init__(self, id, name): self.id = id self.name = name def save(self): # 数据持久化逻辑 pass \",\"逻辑类（Service）： 处理业务逻辑，调用模型类完成数据操作。\",\"# services/user_service.py from models.user import User class UserService: def get_user(self, user_id): user = User.find_by_id(user_id) # 调用模型方法 return user \"]},\"546\":{\"h\":\"设计类的“黄金三角”\",\"t\":[\"封装性：隐藏内部实现细节，暴露清晰的接口。\",\"继承与多态：通过继承复用代码，通过多态处理不同场景。\",\"避免过度设计：不要为了“设计模式”而设计，保持代码简洁。\"]},\"547\":{\"h\":\"第三步：装修——函数与注释的“细节打磨”\"},\"548\":{\"h\":\"1. 函数：代码的“家具”\",\"t\":[\"函数职责单一：一个函数只完成一个任务。\",\"# 坏例子：函数职责不明确 def process_data(data): clean_data = clean(data) save_data(clean_data) send_email(clean_data) # 好例子：拆分为独立函数 def clean_data(data): return data.strip() def save_data(data): # 存储逻辑 pass def send_email(data): # 发送邮件逻辑 pass \",\"命名规范：\",\"动词开头（calculate_total、fetch_users）。\",\"避免缩写，使用 get_user_count 而非 guc。\"]},\"549\":{\"h\":\"2. 注释：代码的“地图”\",\"t\":[\"注释的黄金法则： \",\"解释“为什么”而非“是什么”：\",\"# 坏例子：重复代码 # 计算总金额 total = price * quantity # 好例子：解释逻辑 # 根据促销规则，总价需减去10%的折扣 total = price * quantity * 0.9 \",\"文档字符串（Docstring）：\",\"def login(username, password): \\\"\\\"\\\"验证用户凭证并返回会话ID。 Args: username (str): 用户名 password (str): 密码（明文，需在调用前加密） Returns: str: 会话ID，验证失败时返回None \\\"\\\"\\\" pass \"]},\"550\":{\"h\":\"3. 异常处理与日志：代码的“消防与监控”\",\"t\":[\"异常处理：\",\"try: user = UserService().get_user(user_id) except UserNotFoundError: logger.error(\\\"用户不存在: %s\\\", user_id) return \\\"用户不存在\\\" except DatabaseConnectionError as e: logger.error(\\\"数据库连接失败: %s\\\", str(e)) return \\\"系统错误\\\" \",\"日志规范：\",\"使用 logging 模块，而非 print。\",\"记录关键信息（如请求ID、错误堆栈）。\",\"import logging logger = logging.getLogger(__name__) logger.setLevel(logging.INFO) # 记录用户操作 logger.info(\\\"用户 %s 登录成功\\\", username) \"]},\"551\":{\"h\":\"第四步：验房——测试驱动开发（TDD）\"},\"552\":{\"h\":\"测试的“质量验收”\",\"t\":[\"单元测试：验证单个函数或类的正确性。\",\"# tests/test_user_service.py def test_get_user(): user_service = UserService() user = user_service.get_user(1) assert user.name == \\\"Alice\\\" \",\"集成测试：验证模块间的协作。\",\"def test_login_flow(): # 模拟请求 client.post(\\\"/login\\\", data={\\\"username\\\": \\\"test\\\", \\\"password\\\": \\\"123\\\"}) # 验证响应 assert response.status_code == 200 assert \\\"session_id\\\" in response.cookies \",\"性能测试： 使用工具（如 Locust）模拟高并发场景，确保系统在压力下稳定。\"]},\"553\":{\"h\":\"测试的“黄金标准”\",\"t\":[\"覆盖率 ≥ 80%：核心功能必须覆盖。\",\"持续集成（CI）：通过 GitHub Actions 或 Jenkins 自动运行测试。\",\"红绿重构：TDD 的核心流程——先写失败的测试（红），实现功能（绿），再重构代码。\"]},\"554\":{\"h\":\"第五步：入住——DevOps自动化部署\"},\"555\":{\"h\":\"从本地到生产：代码的“搬家指南”\",\"t\":[\"容器化（Docker）：\",\"# Dockerfile FROM python:3.9-slim COPY requirements.txt . RUN pip install -r requirements.txt COPY . /app CMD [\\\"gunicorn\\\", \\\"-w\\\", \\\"4\\\", \\\"app:app\\\"] \",\"CI/CD流水线：\",\"# GitHub Actions 配置 name: CI/CD Pipeline on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Build Docker Image run: docker build -t my-app . - name: Push to Registry run: docker push my-registry/my-app:latest deploy: needs: build runs-on: ubuntu-latest steps: - name: Deploy to Kubernetes run: kubectl apply -f deployment.yaml \",\"监控与告警：\",\"使用 Prometheus + Grafana 监控系统指标。\",\"通过 Sentry 或 ELK（Elasticsearch-Logstash-Kibana）收集和分析日志。\"]},\"556\":{\"h\":\"部署的“关键原则”\",\"t\":[\"蓝绿部署：新旧版本并行运行，通过流量切换降低风险。\",\"滚动更新：逐步替换旧实例，避免服务中断。\",\"回滚策略：确保出现问题时能快速回退到稳定版本。\"]},\"557\":{\"h\":\"结语：代码即建筑，风格即人品\",\"t\":[\"好的代码就像一座精心设计的建筑：\",\"地基扎实：模块化设计确保扩展性。\",\"结构清晰：类与函数各司其职，逻辑不混乱。\",\"细节精致：注释、日志和异常处理让维护无忧。\",\"质量保障：测试与 CI/CD 确保交付可靠。\",\"长期维护：自动化部署和监控让系统永葆青春。\",\"忽视代码风格，最终会陷入“代码泥潭”——功能混乱、维护困难、团队协作低效。反之，用工程思维构建代码，不仅能让项目高效运行，更能为团队创造可持续的价值。\",\"最后引用软件大神 Martin Fowler 的话作为结束：\",\"“代码是给人读的，只是碰巧让机器执行。”\\n—— Martin Fowler\"]},\"558\":{\"c\":[\"代码风格\"]},\"559\":{\"c\":[\"代码风格\"]},\"560\":{\"h\":\"10、python状态机的使用\",\"t\":[\"我在自己的工作流中之前使用到队列作为状态的转换，后面使用状态机来实现流程的状态控制。\",\"状态机（State Machine）是一种用于描述系统行为的数学模型，它通过状态、事件和转换规则来定义系统的逻辑流程。在实际开发中，状态机常用于游戏开发、工作流引擎、自动化控制等场景。本文将介绍如何使用 transitions 这个 Python 库快速构建和管理状态机，并通过示例展示其核心功能。\"]},\"561\":{\"h\":\"一. 什么是状态机？\",\"t\":[\"状态机由以下核心元素组成：\",\"状态（States）：系统可能处于的不同模式（如“启动”、“运行”、“停止”）。\",\"事件（Events）：触发状态转换的外部输入（如“按下按钮”、“收到消息”）。\",\"转换（Transitions）：根据事件从一个状态转移到另一个状态的规则。\",\"有限状态机（FSM）是状态机的一种，其状态和转换规则是有限且预先定义的。\"]},\"562\":{\"h\":\"二. 安装与快速入门\",\"t\":[\"安装 transitions：\",\"pip install transitions \"]},\"563\":{\"h\":\"三. 基础示例：交通灯状态机\",\"t\":[\"我们以交通灯为例，演示如何用 transitions 定义一个简单的状态机。\",\"from transitions import Machine # 定义状态和事件 class TrafficLight: def __init__(self): # 状态列表 self.states = ['red', 'green', 'yellow'] # 事件与转换规则 self.transitions = [ {'trigger': 'change', 'source': 'red', 'dest': 'green'}, {'trigger': 'change', 'source': 'green', 'dest': 'yellow'}, {'trigger': 'change', 'source': 'yellow', 'dest': 'red'} ] # 初始化状态机 self.machine = Machine(model=self, states=self.states, transitions=self.transitions, initial='red') def on_enter_state(self, state): print(f\\\"Light turned {state}.\\\") # 创建实例并测试 light = TrafficLight() print(\\\"Current state:\\\", light.state) # 输出：red light.change() # 触发事件 print(\\\"Current state:\\\", light.state) # 输出：green light.change() print(\\\"Current state:\\\", light.state) # 输出：yellow light.change() print(\\\"Current state:\\\", light.state) # 输出：red \"]},\"564\":{\"h\":\"四. 核心功能详解\"},\"565\":{\"h\":\"4.1 状态转换的条件判断\",\"t\":[\"通过 conditions 参数添加条件，只有满足条件时才允许转换：\",\"from transitions import Machine class Order: def __init__(self): self.states = ['pending', 'processing', 'shipped', 'delivered'] self.transitions = [ {'trigger': 'process', 'source': 'pending', 'dest': 'processing'}, { 'trigger': 'ship', 'source': 'processing', 'dest': 'shipped', 'conditions': lambda self: self.is_ready # 自定义条件 }, {'trigger': 'deliver', 'source': 'shipped', 'dest': 'delivered'} ] self.machine = Machine(model=self, states=self.states, transitions=self.transitions, initial='pending') self.is_ready = False # 假设订单未准备好 order = Order() order.process() # 转到 processing order.ship() # 未满足条件，不转换 order.is_ready = True order.ship() # 现在可以转换到 shipped \"]},\"566\":{\"h\":\"4.2 回调函数\",\"t\":[\"在状态转换时执行自定义逻辑：\",\"class TrafficLight: def __init__(self): self.states = ['red', 'green', 'yellow'] self.transitions = [ {'trigger': 'change', 'source': 'red', 'dest': 'green', 'before': 'on_leave_red'}, {'trigger': 'change', 'source': 'green', 'dest': 'yellow', 'after': 'on_enter_yellow'} ] self.machine = Machine(model=self, states=self.states, transitions=self.transitions, initial='red') def on_leave_red(self): print(\\\"Leaving red state...\\\") def on_enter_yellow(self): print(\\\"Entered yellow state!\\\") light = TrafficLight() light.change() # 输出：Leaving red state... light.change() # 输出：Entered yellow state! \"]},\"567\":{\"h\":\"五. 可视化状态机\",\"t\":[\"通过 Machine.get_graph() 生成状态图（需安装 graphviz）：\",\"from transitions import Machine from transitions.extensions import GraphMachine class TrafficLight(GraphMachine): def __init__(self): states = ['red', 'green', 'yellow'] transitions = [ {'trigger': 'change', 'source': 'red', 'dest': 'green'}, {'trigger': 'change', 'source': 'green', 'dest': 'yellow'}, {'trigger': 'change', 'source': 'yellow', 'dest': 'red'} ] super().__init__(self, states=states, transitions=transitions, initial='red', graph=True, auto_transitions=False, title=\\\"Traffic Light FSM\\\") light = TrafficLight() light.get_graph().draw('traffic_light.png', prog='dot') # 生成 PNG 图片 \"]},\"568\":{\"h\":\"六. 进阶用法\"},\"569\":{\"h\":\"6.1 分层状态机\",\"t\":[\"支持嵌套状态（Hierarchical State Machines）：\",\"from transitions.extensions import HierarchicalMachine class Elevator(HierarchicalMachine): def __init__(self): states = [ 'stopped', {'name': 'moving', 'children': ['up', 'down']} # 子状态 ] transitions = [ {'trigger': 'start', 'source': 'stopped', 'dest': 'moving'}, {'trigger': 'stop', 'source': 'moving', 'dest': 'stopped'}, {'trigger': 'go_up', 'source': 'moving', 'dest': 'moving.up'}, {'trigger': 'go_down', 'source': 'moving', 'dest': 'moving.down'} ] super().__init__(self, states=states, transitions=transitions, initial='stopped') elevator = Elevator() elevator.start() # 进入 moving 状态 elevator.go_up() # 进入 moving.up elevator.stop() # 返回 stopped \"]},\"570\":{\"h\":\"6.2 并发状态机\",\"t\":[\"通过 parallel=True 支持多状态并发（需安装 transitions-parallel）：\",\"from transitions.extensions import ParallelMachine class Robot(ParallelMachine): def __init__(self): states = [ {'name': 'idle', 'on_enter': ['start_idle']}, {'name': 'moving', 'on_enter': ['start_moving']}, {'name': 'sensing', 'on_enter': ['start_sensing']} ] transitions = [ {'trigger': 'start', 'source': 'initial', 'dest': ['moving', 'sensing']}, {'trigger': 'stop', 'source': ['moving', 'sensing'], 'dest': 'idle'} ] super().__init__(self, states=states, transitions=transitions, initial='initial', parallel=True, auto_transitions=False) robot = Robot() robot.start() # 并发进入 moving 和 sensing 状态 \"]},\"571\":{\"h\":\"七. 常见问题\"},\"572\":{\"h\":\"Q1: 如何处理无效的事件？\",\"t\":[\"light = TrafficLight() try: light.change() # 如果当前状态不允许 change 事件，会抛出 MachineError except MachineError as e: print(e) \"]},\"573\":{\"h\":\"Q2: 如何自定义状态转换逻辑？\",\"t\":[\"通过 conditions 或 unless 参数添加条件判断：\",\"{'trigger': 'approve', 'source': 'pending', 'dest': 'approved', 'conditions': [self.is_valid, self.is_paid]} \"]},\"574\":{\"h\":\"八. 总结\",\"t\":[\"transitions 是一个功能强大且易用的状态机库，适合快速构建和管理复杂的业务逻辑。通过以下步骤，你可以轻松上手：\",\"定义状态和事件。\",\"使用 Machine 初始化状态机。\",\"添加条件和回调函数增强功能。\",\"可视化状态图辅助调试。\"]},\"575\":{\"c\":[\"状态机\",\"transitions\"]},\"576\":{\"c\":[\"transitions\"]},\"577\":{\"h\":\"11、sqlalchemy线程池\"},\"578\":{\"h\":\"一、连接池特点\",\"t\":[\"SQLAlchemy连接数据库所使用的Engine对象默认采用一个连接池来管理连接\",\"当我们使用Engine对象所对应的SQL数据库连接的资源时，这些对数据库的连接是通过一个连接池（Connection pooling）来管理的。当我们释放（release）一个连接资源时，这个连接并不是被销毁了，而是仍然连接着数据库，只不过其将会被重新存储如一个用于管理连接的连接池（默认为QueuePool）中。放入连接池中的连接可以被复用。事实上总有一定数目的数据库连接被保存在这个连接池中，即使在我们的代码中看起来像是连接被释放了一样。这些连接会在我们的程序结束运行之后自动被销毁，或者当我们显式地调用销毁连接池的代码时被销毁。\",\"连接复用\",\"由于这个连接池的存在，每当我们在代码中调用Engine.connect()方法或者调用ORM对应的Session的时候，往往会得到一个已存在与连接池中的数据库连接，而不是得到了一个全新的连接对象。然而当连接池中没有现成可用的连接对象的时候，在不超过配置所允许的连接上限的条件下，新的连接对象会被创建并返回给调用这些方法的程序。\",\"默认使用的QueuePool SQLAlchemy默认所使用的连接池为sqlalchemy.pool.QueuePool。当目前总连接数没有超过配置的上限且池中没有现成可用的连接的情况下，一个新的连接会被建立并返回给调用创建新连接的方法的程序。这个上限等于create_engine.pool_size 与create_engine.max_overflow之和。\",\"可上溢的连接池\",\"如果我们将参数create_engine.max_overflow设置为”-1”，那么连接池会允许“上溢”无限多的新连接。在这种情况下，连接池永远不会阻塞一个新的数据库连接请求。相反，每当有新的连接请求且无当前可用的连接对象，连接池就会无条件地创建新的连接对象来返回给这个请求。\",\"然而，即使我们在程序端不限制并发的数据库连接的数目，如果程序无限制的创建新的数据库连接对象，连接的数目最终会到达数据库端的连接数目上限，并且耗尽所有数据库允许的连接，最终同样会造成程序异常。\"]},\"579\":{\"h\":\"二、不同类型的连接池\",\"t\":[\"SQLAlchemy 提供了几种不同类型的连接池，每种类型都有不同的行为和特点。\",\"QueuePool：\",\"这是 SQLAlchemy 默认的连接池类型。\",\"使用 FIFO（先进先出）策略管理连接。\",\"当连接被释放时，将其放入队列尾部，下一个请求获取连接时会从队列头部取出连接。\",\"适用于大多数情况，对于大部分应用都是合适的选择。\",\"SingletonThreadPool：\",\"此连接池类型只保持一个数据库连接。\",\"在多线程环境中，所有线程共享同一个数据库连接。\",\"不适合多线程应用，但在某些情况下可能会提供性能优势，例如在使用 SQLite 等轻量级数据库时。\",\"NullPool：\",\"不维护连接池，每次请求都会创建一个新的连接，用完后立即关闭。\",\"不适合长期持有连接，适用于一次性操作或者每次操作都需要不同连接的场景。\",\"StaticPool：\",\"类似于 QueuePool，但是在连接被释放后不会被重新放入队列中。\",\"在固定连接数的情况下，比 QueuePool 更快地获取连接，因为不需要管理连接的队列。\",\"举个例子\",\"from sqlalchemy import create_engine from sqlalchemy.pool import QueuePool # 创建数据库引擎，并配置连接池 engine = create_engine('mysql://username:password@localhost/databasename', poolclass=QueuePool, pool_size=5, # 最大连接数 max_overflow=10, # 允许额外的连接数 pool_timeout=30) # 获取连接的超时时间 # 获取数据库连接 connection = engine.connect() # 使用连接进行操作 result = connection.execute(\\\"SELECT * FROM my_table\\\") for row in result: print(row) # 关闭连接 connection.close() \",\"每种连接池类型都有其适用的场景，选择合适的连接池类型取决于应用的特性和需求。一般来说，对于大多数情况，使用默认的 QueuePool 就足够了，因为它在大多数情况下能够提供良好的性能和稳定性。\"]},\"580\":{\"h\":\"三、可用连接被用尽的可能原因\",\"t\":[\"但是我们在实际开发中经常会遇到一些类似这样的问题\",\"QueuePool limit of size <x> overflow <y> reached, connection timed out, timeout <z> \",\"当前系统所需并发数据库连接，超过了当前使用的engine所配置的并发连接数目上限。该上限由两个值组成：pool_size和max_overflow\"]},\"581\":{\"h\":\"连接池的上限小于程序中需要并发使用连接的请求的数目\",\"t\":[\"这是导致连接被用尽问题最直接的一种原因。如果我们的程序使用一个大小为20的线程池来进行并发处理且每个线程都需要一个单独的数据库连接，而我们定义的连接池大小只有10，那么显然将会出现连接被用尽的问题。这种情况下，就应该通过增加连接池大小或减少并发线程数目的方法来解决问题。一般来说，我们应当保证连接池的大小不小于线程池的数目。\"]},\"582\":{\"h\":\"连接没有被释放\",\"t\":[\"另一个常见的导致连接用尽的原因是连接在被使用之后没有被释放，或说没有被归还给连接池。虽然当连接对象由于没有引用而被垃圾收集之后其对应的连接资源仍将被释放还给连接池，但由于垃圾收集的不确定性，这一机制不应当被用来作为释放连接资源的手段。\",\"连接没有被释放一般是因为程序中没有显式地调用相应方法导致的。所以当我们使用完连接对象之后，应当显式地调用连接的释放方法。例如如果我们在使用ORM Session，则应当在合适的地方调用Session.close()方法释放Session对象。\"]},\"583\":{\"h\":\"程序试图执行一个运行时间很长的数据库事务（transaction）\",\"t\":[\"数据库的事务是一种非常昂贵的操作，因此不应该用来闲置着等待某些事件发生。例如等待用户点击某个按钮，或者等待一个长时间运行的任务返回结果。对于事务，切记不要一直维持着一个事务而不去结束。\"]},\"584\":{\"c\":[\"python\"]},\"585\":{\"c\":[\"sqlalchemy\"]},\"586\":{\"h\":\"12、monkey.patch_all() ？\"},\"587\":{\"h\":\"引言：\",\"t\":[\"曾经在使用flask-socket中不添加monkey.patch_all()遇到一些莫名奇妙的错误。所以这里查了些资料关于monkey.patch_all。\"]},\"588\":{\"h\":\"一、 monkey.patch_all() 是什么？\",\"t\":[\"monkey.patch_all() 是 gevent 库中的一个核心函数，用于在程序启动时动态替换标准库中的某些模块（如 socket、threading、select 等），使其支持 非阻塞的协程操作。 其核心作用是让标准库的阻塞式 I/O 操作（如网络请求、文件读写）在 gevent 的协程（Greenlet）框架下运行，从而实现 高效的异步编程。\"]},\"589\":{\"h\":\"二、 为什么要添加 monkey.patch_all() ？\"},\"590\":{\"h\":\"1. 解决阻塞问题\",\"t\":[\"Python 的全局解释器锁（GIL）使得多线程在 CPU 密集型任务中无法充分利用多核 CPU。而 gevent 的协程（Greenlet） 通过 协作式调度 实现轻量级的并发，但需要依赖 非阻塞的 I/O 操作。\",\"问题：标准库中的许多 I/O 操作（如 socket.recv()）是阻塞的，会阻止整个协程的事件循环，导致其他协程无法执行。\",\"解决方案：通过 monkey.patch_all() 替换标准库模块，使其调用 gevent 的非阻塞实现（如 gevent.socket 代替 socket），从而避免阻塞。\"]},\"591\":{\"h\":\"2. 兼容性与透明性\",\"t\":[\"无需修改代码：打补丁后，你的代码可以继续使用标准库的 API（如 socket、requests），但底层已切换为非阻塞模式。\",\"示例：\",\"import gevent.monkey gevent.monkey.patch_all() # 替换标准库模块 import socket # 实际使用的是 gevent.socket s = socket.socket() s.connect(...) # 非阻塞操作 \"]},\"592\":{\"h\":\"3. 提升性能\",\"t\":[\"高并发场景：例如，使用 requests 发送多个 HTTP 请求时，若未打补丁，每个请求会阻塞主线程；打补丁后，请求会以非阻塞方式执行，协程可以切换到其他任务，显著提升吞吐量。\",\"I/O 密集型任务：如网络爬虫、实时聊天服务器等，通过非阻塞 I/O 实现高并发。\"]},\"593\":{\"h\":\"三、 如何使用 monkey.patch_all() ？\"},\"594\":{\"h\":\"1. 在程序入口尽早调用\",\"t\":[\"必须在 导入其他模块之前 调用 patch_all()，否则补丁可能无效：\",\"import gevent.monkey gevent.monkey.patch_all() # 第一行调用 import socket # 已被替换为 gevent.socket import requests # 依赖的 socket 也是非阻塞的 \"]},\"595\":{\"h\":\"2. 选择性补丁（可选）\",\"t\":[\"如果只需要替换部分模块，可以指定参数：\",\"gevent.monkey.patch_socket() # 仅替换 socket 模块 gevent.monkey.patch_os() # 替换 os 模块的阻塞函数 \"]},\"596\":{\"h\":\"四、 示例：对比补丁前后的效果\"},\"597\":{\"h\":\"场景 ：发送三个 HTTP 请求\",\"t\":[\"import gevent # gevent.monkey.patch_socket() import requests def fetch(url): print(f\\\"Starting {url}\\\") response = requests.get(url) print(f\\\"Finished {url}: {response.status_code}\\\") urls = [\\\"https://httpbin.org/delay/2\\\"] * 3 # 未打补丁时： # 各请求串行执行，总耗时 ~6秒 # 打补丁后： # 请求并行执行，总耗时 ~2秒 \"]},\"598\":{\"h\":\"补丁前后的区别\",\"t\":[\"补丁前（阻塞模式）\",\"补丁后（非阻塞模式）\",\"requests.get() 阻塞线程，协程无法切换\",\"requests.get() 非阻塞，协程可切换到其他任务\",\"串行执行，性能低\",\"并行执行，性能高\"]},\"599\":{\"h\":\"五、 注意事项\",\"t\":[\"版本兼容性： \",\"在 Python 3.10+ 中，gevent 的某些补丁可能因新版本的 asyncio 机制而失效（需等待 gevent 更新）。\",\"第三方库的兼容性： \",\"部分依赖标准库的库（如某些数据库驱动）可能需要额外处理。例如，psycopg2 需要使用 psycopg2-pool 或 asyncpg 替代。\",\"不要过度补丁： \",\"避免在补丁后混用多线程和协程，可能引发竞争条件。\"]},\"600\":{\"h\":\"六、 总结\",\"t\":[\"monkey.patch_all() 的核心作用：让标准库的阻塞式 I/O 操作在 gevent 协程中非阻塞执行。\",\"为什么需要它： \",\"避免阻塞导致的性能瓶颈。\",\"无需修改代码即可兼容协程模型。\",\"实现高并发场景下的高效 I/O 处理。\",\"最佳实践：在程序入口尽早调用，并确保依赖库与 gevent 兼容。\",\"如果需要更深入的了解，可以参考 gevent 官方文档 或知识库中提到的猴子补丁原理。\"]},\"601\":{\"c\":[\"python\"]},\"602\":{\"c\":[\"协程\"]},\"603\":{\"h\":\"1、定时任务的设计和思路\"},\"604\":{\"h\":\"一、Python中定时任务模块\"},\"605\":{\"h\":\"1. Celery\",\"t\":[\"Celery 是一个分布式任务队列，它不仅支持简单的任务调度，还可以处理复杂的任务工作流。对于已经使用了Celery的项目来说，可以很方便地添加定时任务功能。然而，对于不需要分布式处理能力的小型应用或项目来说，可能显得过于重量级。\",\"优点：支持大规模的任务调度，拥有良好的社区支持。\",\"缺点：配置相对复杂，需要额外的消息中间件（如RabbitMQ, Redis）来协调任务分发。\"]},\"606\":{\"h\":\"2. APScheduler (Advanced Python Scheduler)\",\"t\":[\"APScheduler 是一个灵活且强大的Python库，允许开发者轻松地创建和管理各种类型的定时任务。它可以很好地集成到现有的Web应用程序中，并提供了多种调度方式，包括固定间隔、定时执行等。\",\"优点：易于使用，支持持久化存储，能够动态添加/移除任务。\",\"缺点：对于非常简单的场景来说，可能会有些“大材小用”。\"]},\"607\":{\"h\":\"3、Celery vs APScheduler 对比表\",\"t\":[\"特性\",\"Celery\",\"APScheduler\",\"主要用途\",\"分布式任务队列，用于处理大量消息，同时也支持定时任务。\",\"专注于定时任务调度，提供灵活的任务管理和持久化选项。\",\"安装复杂度\",\"需要额外配置消息中间件（如RabbitMQ, Redis），并且有较多的配置项。\",\"相对简单，直接通过pip安装即可使用，无需依赖外部服务。\",\"任务调度类型\",\"支持基于时间间隔、固定时间点以及cron表达式的调度方式。\",\"支持基于日期、固定时间间隔以及cron类型的调度，并且可以实现持久化任务。\",\"动态添加/移除任务\",\"原生不支持动态添加或删除任务，可以通过第三方插件实现。\",\"支持在运行时动态添加和移除任务，同时允许修改现有任务的属性。\",\"持久化支持\",\"不具备内置的任务持久化功能，依赖于所选的消息中间件。\",\"内置多种持久化方案，包括内存、MongoDB、SQLAlchemy等。\",\"并发执行\",\"支持多线程、多进程以及事件驱动模型下的任务并行执行。\",\"提供了不同类型的执行器来满足不同的并发需求，如线程池、进程池等。\",\"集成能力\",\"可以与Django、Flask等多种Web框架良好集成，并且能够与其他编程语言通信。\",\"易于与各种Python框架集成，例如Flask、Tornado等，并提供了异步支持。\",\"社区支持\",\"拥有一个庞大而活跃的社区，文档详尽，遇到问题容易找到解决方案。\",\"社区相对较小，但官方文档质量较高，用户反馈积极。\",\"适用场景\",\"适用于大型项目中需要高性能、高可用性的分布式任务处理场景。\",\"更适合中小型项目中的定时任务需求，特别是当不需要复杂的分布式架构时。\",\"从上表可以看出，Celery 和 APScheduler 在设计目标上有明显的差异：前者更侧重于构建一个强大的分布式任务处理系统，后者则专注于为开发者提供一个轻量级且易于使用的定时任务调度工具。因此，在选择合适的库之前，应该根据项目的具体需求进行权衡。对于只需要定时任务而不涉及复杂的消息传递或大规模任务分发的应用来说，APScheduler 是一个非常好的选择；而对于那些已经存在或者预计未来会扩展到包含分布式计算元素的应用，则可能更适合采用 Celery .\"]},\"608\":{\"h\":\"二、定时任务的实现原理\"},\"609\":{\"h\":\"1. 小顶堆算法\",\"t\":[\"在某些情况下，我们可以利用小顶堆（Min Heap）来组织待执行的任务列表。每个任务都有一个预定的执行时间戳作为键值存入堆中；当系统时间到达某个任务的时间戳时，该任务就会被取出并执行。这种方法适用于那些对任务执行顺序有严格要求的应用场景。\",\"每个节点是对应的定时任务，定时任务的执行顺序通过利用堆化进行排序，循环判断每秒是否堆顶的任务是否应该执行，每次插入任务、删除任务需要重新堆化；\"]},\"610\":{\"h\":\"2. 时间轮算法\",\"t\":[\"时间轮是一种高效的任务调度机制，特别适合处理大量短周期性任务。它将所有任务按照它们预计被执行的时间分散到不同的“槽位”上，然后通过一个不断前进的指针来触发相应槽位内到期的任务。相比于传统的线性搜索方法，时间轮可以在常数时间内完成新任务的插入以及旧任务的触发。\",\"round 时间轮： 时间轮其实就是一种环型的数据结构，可以把它想象成一个时钟，分成了许多格子，每个格子代表一定的时间，在这个格子上用一个链表来保存要执行的超时任务，同时有一个指针一格一格的走，走到那个格子时就执行格子对应的延迟任务。\"]},\"611\":{\"h\":\"3. 分层时间轮\",\"t\":[\"为了克服单层时间轮所能支持的最大超时时间有限的问题，可以通过构建多层级的时间轮来扩展其适用范围。例如，在最底层的时间轮里设置较短的基本时间单位（tick），而在更高层次则采用更大的tick值。这样既可以保持较高的精度，又不会因为过长的等待时间而浪费过多资源。\",\"就是将月、周、天分成不同的时间轮层级，各自的时间轮进行定义：\",\"img\"]},\"612\":{\"h\":\"4. 无限循环\",\"t\":[\"这是一种最基础也是最直接的方式，即在一个while循环体内持续检查当前时间和预设的执行时间是否匹配，如果匹配就调用相应的函数。虽然简单易懂，但这种方式会占用一定的CPU资源，并且难以做到精准控制。\"]},\"613\":{\"h\":\"三、定时任务的类型\",\"t\":[\"根据任务的不同需求，我们可以将其分为以下几类：\",\"指定时间点运行：这类任务会在特定日期和时间启动一次，类似于cron表达式中的@midnight或者0 0 * * *这样的规则。\",\"间隔执行：按照一定的时间间隔重复执行，比如每隔几分钟或几小时执行一次。\",\"定时执行：基于cron表达式的定义，可以在每天、每周甚至每月的固定时间点自动触发。\"]},\"614\":{\"h\":\"四、定时任务设计的注意点\"},\"615\":{\"h\":\"1. 定时总开关——假期等时间点如何停止所有的定时任务\",\"t\":[\"为了应对特殊情况（如法定节假日），我们应该考虑为整个系统提供一个总的启停按钮。这个按钮可以是一个环境变量或者是数据库表中的字段，用来指示当前是否允许任何定时任务运行。此外，也可以针对不同类型的定时任务单独设置开关，以便更加精细地控制哪些任务应该暂停。\"]},\"616\":{\"h\":\"2. 定时确认——有的定时任务是不是需要人工干预\",\"t\":[\"对于一些关键性的操作，可能需要加入人工审核步骤，确保只有经过授权之后才能继续执行。这可以通过发送邮件、短信或者其他即时通讯工具通知相关人员来进行审批。一旦获得批准，再由后台程序正式执行任务。\"]},\"617\":{\"h\":\"3. 结果通知——定时任务完成后的消息通知\",\"t\":[\"一旦定时任务顺利完成，应当及时向相关方通报结果。这可以通过电子邮件、Slack频道、企业微信等方式实现。同时，还可以附带日志链接或其他有用信息，方便后续查询和审计。\"]},\"618\":{\"h\":\"4. 可用时间/不可用时间——定时执行是否处于可用时间\",\"t\":[\"考虑到业务逻辑的实际需求，某些定时任务只应在特定的工作时间内执行，而非全天候无休止地运行。因此，我们需要定义一套规则来限制这些任务只能在规定的时间段内生效。\"]},\"619\":{\"h\":\"5. 日志记录——定时任务真的执行了吗\",\"t\":[\"每次定时任务执行前后都应生成详细的日志条目，记录下开始时间、结束时间、状态变更等重要信息。这样做不仅可以帮助我们追踪问题所在，也为未来的优化提供了宝贵的参考资料。\",\"综上所述，设计一个健壮且高效的定时任务系统需要综合考虑多个方面的要求和技术细节。从选择合适的调度引擎到制定合理的执行策略，再到确保良好的用户体验，每一个环节都需要精心规划与实施。希望上述内容能为您提供有价值的指导。\"]},\"620\":{\"c\":[\"模块设计\",\"定时任务\"]},\"621\":{\"c\":[\"定时任务\"]},\"622\":{\"h\":\"2、devops告警模块的设计\"},\"623\":{\"h\":\"一、告警事故频发\",\"t\":[\"最近几年，互联网大厂的服务不可用案例频繁出现在公众视野中，这些事件不仅影响了用户体验，还对公司的声誉和经济效益造成了不同程度的影响。\",\"阿里云多次故障，在2023年11月12日产品控制台访问及API调用出现异常，直至晚上7点20左右恢复正常。\",\"滴滴出行长时间瘫痪，2023年11月27日晚间，滴滴App发生了全国大面积崩溃，服务无法正常使用。\",\"语雀8小时的服务中断事件，2023年10月23日，语雀经历了长达近8小时的服务中断事件。\",\"很互联网大厂的服务不可用并非孤立事件。也从侧面认识到告警的重要性。\"]},\"624\":{\"h\":\"二、告警设计关键点\",\"t\":[\"在DevOps实践中，告警扮演着至关重要的角色，它不仅帮助团队实时掌握系统状态，还能够及时发现和处理潜在问题，从而提高系统的可用性和稳定性。为了确保告警机制的有效性，有以下几个关键点需要特别关注：\"]},\"625\":{\"h\":\"1. 监控指标的选择\",\"t\":[\"监控指标是构建有效告警体系的基础。选择合适的监控指标对于准确反映系统健康状况至关重要。常见的监控指标包括CPU使用率、内存占用、磁盘I/O性能以及网络连接质量等。此外，针对应用程序的关键性能指标（KPI），如响应时间、吞吐量、错误率等也应纳入考虑范围。合理的监控指标可以帮助我们快速定位性能瓶颈和服务故障点。\"]},\"626\":{\"h\":\"2. 告警触发条件与级别设定\",\"t\":[\"告警触发条件应当精确地反映出系统异常状态，并能根据异常的严重程度设置不同级别的告警。例如，当CPU使用率持续超过预设阈值一段时间后触发警告级告警；而一旦检测到服务完全不可用，则立即发出紧急级告警通知相关人员进行干预。同时，还需要考虑告警频率控制，避免因频繁触发相同类型的低优先级告警而导致“告警疲劳”，影响真正重要信息的关注度。\"]},\"627\":{\"h\":\"3. 多样化的通知渠道\",\"t\":[\"为了保证告警信息能够被及时传达给相关责任方，必须建立多样化且可靠的通知渠道。这可以包括但不限于电子邮件、短信、即时通讯工具（如Slack）、电话呼叫等。对于特别紧急的情况，还可以结合自动化操作平台实现快速响应流程自动化。值得注意的是，在非工作时间段或特殊情况下，应该提前准备好备用联系人名单以确保有人能够在第一时间接收到告警并采取行动。\"]},\"628\":{\"h\":\"4. 数据分析与反馈循环\",\"t\":[\"一个完整的告警管理系统不仅仅局限于发送通知，更重要的是通过对历史数据进行深入分析来不断优化现有规则配置。定期回顾过往发生的各类事件及其处理过程，总结经验教训，调整和完善现有的告警策略。此外，鼓励团队成员积极参与到这一过程中来，共同探讨如何更好地预防问题的发生，形成良性的反馈循环机制。\"]},\"629\":{\"h\":\"三、告警分类\",\"t\":[\"我在这里把告警分为三类，分别为流程告警， 系统告警，业务告警。流程告警指的是devops过程中发生的失败，这也是我们平时最长遇见的，也是需要及时解决的；系统告警这里主要针对于生产环境所产生的告警系统，模块等告警事件，这类的告警一般需要最紧急，最重要的事情；业务告警也是要关注的，是业务在运行中所产生的一些问题，这些问题肯定需要及时汇报。\"]},\"630\":{\"h\":\"1、流程告警\",\"t\":[\"关键注意点：\",\"持续集成 /部署（CI/CD）管道的状态：确保CI/CD流水线中的每一个步骤都处于健康状态，任何失败或延迟都需要被及时捕捉并记录下来。\",\"自动化测试结果：如果自动化的单元测试、集成测试或端到端测试未能通过，则应触发告警，提示开发团队检查代码质量。\",\"变更管理：当有新的版本发布或者配置更改时，需要监控这些变化是否导致了预期之外的行为。\",\"采取措施：\",\"对于构建失败的情况，立即通知相关开发者进行修复，并暂停后续部署直到问题解决。\",\"如果发现某个服务的部署时间过长或出现异常情况，应该启动回滚机制以恢复到之前稳定的状态。\",\"定期审查CI/CD日志，寻找潜在的问题模式，并优化流程以防止类似问题再次发生。\"]},\"631\":{\"h\":\"2、系统告警\",\"t\":[\"关键注意点：\",\"基础设施性能：包括服务器资源利用率（CPU、内存、磁盘空间）、网络连接状况等。这些指标直接关系到整个系统的运行效率和服务可用性。\",\"应用层健康检查：应用程序本身的响应时间和错误率也是重要的监控对象，特别是对于Web应用而言，HTTP请求的成功与否直接影响用户体验。\",\"安全事件：如非法登录尝试、数据泄露迹象等安全相关告警必须得到高度重视，因为它们可能预示着更严重的威胁。\",\"采取措施：\",\"当检测到硬件资源接近极限时，考虑扩容或优化现有架构来缓解压力。\",\"对于应用程序级别的告警，迅速定位故障源，利用日志分析工具排查具体原因，并尽快实施修复方案。\",\"针对安全告警，立即启动应急响应计划，评估风险等级，并按照既定的安全策略采取行动，比如封锁IP地址、重置受影响账户密码等。\"]},\"632\":{\"h\":\"3、业务告警\",\"t\":[\"关键注意点：\",\"业务逻辑正确性：例如订单处理流程中的异常、支付交易失败等业务操作失误可能会对企业造成经济损失。\",\"客户体验影响：某些情况下，虽然系统本身并未崩溃，但用户的交互体验已经受到了负面影响，这时也需要引起重视。\",\"采取措施：\",\"对于涉及资金流动或其他高敏感度业务的操作失败，应当即时介入调查，确保所有交易都是合法且准确无误的。\",\"如果观察到用户体验相关的负面反馈增多，应及时调整前端界面设计或优化后端算法，提高服务质量。\"]},\"633\":{\"h\":\"四、告警展示\",\"t\":[\"告警展示是确保系统稳定性和快速响应故障的关键环节。为了有效地管理和展示告警信息，通常需要结合多种工具和技术来构建一个全面的监控和告警体系。告警数据一般都是一堆大量的数据，如果不进行数据可视化是极其难以理解的。\"]},\"634\":{\"h\":\"1、 构建可视化仪表盘\",\"t\":[\"使用如Grafana这样的可视化工具可以帮助创建直观易懂的仪表盘，用于实时监控应用程序和服务的状态。通过图形化界面，开发人员可以轻松地查看CPU、内存、网络流量等关键性能指标的变化趋势。此外，Grafana还可以集成Prometheus等监控系统，从而实现更加精细化的数据分析和异常检测。\"]},\"635\":{\"h\":\"2、 实施智能告警\",\"t\":[\"智能化告警可以通过机器学习算法自动调整告警阈值，减少误报率并提高告警准确性。例如，在单指标异常检测方面，可以根据历史数据自动分类时间序列，并为每种类型选择最适合的检测算法；对于根因分析，则利用数据挖掘技术识别出相互关联的指标，帮助运维人员更快地定位问题根源。这种方法不仅能有效应对复杂的IT环境，还能显著提升故障排查效率。\"]},\"636\":{\"h\":\"3、设定明确的通知机制\",\"t\":[\"当告警触发时，应该立即通知相关人员或团队。这可以通过电话、短信、电子邮件或者IM（即时消息）等多种方式实现。\"]},\"637\":{\"h\":\"4、记录和回顾告警历史\",\"t\":[\"记录所有发生的告警事件及其处理过程是非常重要的。这样不仅可以帮助团队总结经验教训，而且有助于持续改进监控策略。\"]},\"638\":{\"h\":\"五、告警通知\",\"t\":[\"在DevOps实践中，告警通知的方式已经从传统的邮件、短信等基础形式逐渐演进为更加多样化和智能化的形式。随着技术的进步以及对用户体验的关注增加，未来的告警通知不仅需要快速准确地传达信息，还需要具备更高的灵活性、智能化水平，并且能够更好地融入日常工作流程中。\",\"即时通讯工具：如企业微信、钉钉、飞书等即时通讯软件被广泛应用于团队内部沟通，它们也成为告警通知的重要渠道之一。这类工具的优势在于可以迅速触达用户，并且支持富文本格式的消息发送，便于携带更多信息。\",\"电子邮件：尽管存在一定的延迟性，但对于非紧急情况下的告警来说，电子邮件仍然是一个可靠的选择。它允许接收者按照自己的节奏来处理问题，并且易于存档查阅历史记录。\",\"电话/短信：对于特别紧急的情况，直接拨打手机或发送短消息是一种确保立即引起注意的有效手段。这种方式通常用于生产环境出现问题时的通知。\",\"语音报警：某些情况下，特别是夜间值班期间，通过语音呼叫可以更有效地唤醒相关人员并促使他们采取行动。\"]},\"639\":{\"h\":\"六、告警复盘\",\"t\":[\"告警复盘是确保系统稳定性和提高应急响应能力的重要环节，尤其是在DevOps环境中，通过系统的复盘可以帮助团队识别并改进监控告警机制中的不足之处。以下是告警复盘中需要关注的关键点以及DevOps系统可以为此做出的贡献。\"]},\"640\":{\"h\":\"1、告警复盘的关键点\",\"t\":[\"告警项的有效性\",\"检查每一个告警等级是否合理，是否存在等级过高或过低的情况。\",\"确认告警阈值、频率是否仍然适用，是否有可废弃或自动化的告警项。\",\"评估告警文本是否清晰明确，能够让oncall人员立即知道该做什么。\",\"告警渠道的合理性\",\"审视告警渠道是否仍保持畅通无阻，使用率的变化是否影响了告警渠道的选择。\",\"探讨是否存在更有效的告警渠道可供投入使用，或者无效的告警渠道应该被移除。\",\"告警接收人的适当性\",\"核实告警接收人名单是否需要更新，考虑到人员增减、部门变动等因素。\",\"检查当前的oncall排班表是否合理，告警上报和backup机制是否需要调整。\",\"故障发现的速度与准确性\",\"分析监控系统是否能够在第一时间捕捉到异常，避免问题随时间推移而复杂化。\",\"考虑告警信息描述是否准确无误，能否帮助值班人员快速识别故障。\",\"风险预判与预防措施\",\"评估是否可以通过分析故障前后的指标与日志提前发现风险，并建立常态化的容量规划与性能优化措施。\",\"反思潜在的风险是否得到了有效的跟进与防范。\",\"跨团队协作效率\",\"保证反馈渠道与SRE的值班人员之间沟通顺畅，确保异常信息能在不同团队间迅速传递，形成合力共同应对。\",\"自动化处理能力\",\"探索是否有自动化工具可以在告警触发时自动执行某些操作，如重启服务、扩容等，以减少人工干预的需求。\"]},\"641\":{\"h\":\"2、DevOps系统能够提供的支持\",\"t\":[\"持续集成/部署（CI/CD）：通过CI/CD流程实现代码变更的自动化测试和部署，减少因人为错误导致的问题，同时也能更快地将修复应用到生产环境中。\",\"自动化监控与告警：利用Prometheus、Grafana等工具构建全面的监控体系，设置智能告警规则，确保及时发现并通知相关人员。\",\"日志管理和分析：收集并存储应用程序及基础设施的日志数据，便于事后进行详细的故障排查和原因分析。\",\"版本控制与回滚：实施严格的版本控制系统，记录每次发布的代码和配置信息，确保在必要时可以快速回滚到之前的稳定版本。\",\"故障演练与复盘：定期组织模拟故障场景的演练活动，并在事后进行全面的复盘，总结经验教训，持续优化流程和技术栈。\"]},\"642\":{\"c\":[\"模块设计\",\"告警设计\"]},\"643\":{\"c\":[\"告警\"]},\"644\":{\"h\":\"3、Celery基本使用\"},\"645\":{\"h\":\"引言\",\"t\":[\"在现代Web应用中，异步任务处理是提升用户体验和系统性能的关键。例如，发送邮件、生成报表、处理文件上传等操作，如果同步执行会阻塞用户请求，影响响应速度。Celery 是一个基于Python的分布式任务队列（也称为异步任务框架），它允许我们将耗时操作交给后台执行，从而解放主线程，提升应用的响应能力。\",\"本文将从基础用法、配置到注意事项，手把手教你如何在Python项目中使用Celery，并规避常见问题。\"]},\"646\":{\"h\":\"一、安装与配置\"},\"647\":{\"h\":\"1. 安装依赖\",\"t\":[\"Celery需要一个消息中间件（Broker）来传递任务，常用的有 RabbitMQ 和 Redis。这里以Redis为例：\",\"pip install celery redis \"]},\"648\":{\"h\":\"2. 配置Celery实例\",\"t\":[\"创建一个 celery_app.py 文件：\",\"from celery import Celery app = Celery('myproject', broker='redis://localhost:6379/0', backend='redis://localhost:6379/0') # 可选：设置任务序列化方式（默认JSON） app.conf.update( task_serializer='json', result_serializer='json', accept_content=['json'], ) \"]},\"649\":{\"h\":\"3. 启动Celery Worker\",\"t\":[\"在终端执行：\",\"celery -A celery_app worker --loglevel=info \"]},\"650\":{\"h\":\"二、基本用法示例\"},\"651\":{\"h\":\"1. 定义任务\",\"t\":[\"在 tasks.py 中定义一个异步任务：\",\"from celery_app import app @app.task def add(x, y): return x + y \"]},\"652\":{\"h\":\"2. 调用任务\",\"t\":[\"在应用中调用任务（例如在Flask视图或Django视图中）：\",\"# 同步调用（不推荐，会阻塞） result = add.delay(4, 6).get() # 返回10 # 异步调用（推荐） result = add.delay(4, 6) # 返回AsyncResult对象 \"]},\"653\":{\"h\":\"3. 获取任务结果\",\"t\":[\"通过 AsyncResult 查询任务状态：\",\"from celery.result import AsyncResult task_id = 'your_task_id' result = AsyncResult(task_id, app=app) if result.ready(): print(\\\"Result:\\\", result.result) else: print(\\\"Task is still running.\\\") \"]},\"654\":{\"h\":\"三、任务队列配置\",\"t\":[\"Celery通过配置文件优化任务执行：\",\"app.conf.update( # 任务超时时间（秒） task_time_limit=30, # 允许重试次数 task_always_eager=False, # 开发环境设为True可同步执行调试 # 任务路由（将任务分配到不同队列） task_routes = { 'tasks.add': {'queue': 'high_priority'}, }, ) \"]},\"655\":{\"h\":\"四、常见问题与注意事项\"},\"656\":{\"h\":\"1. 任务未执行？检查以下几点\",\"t\":[\"Broker和Worker是否运行：确保Redis/RabbitMQ服务启动，Worker进程正常。\",\"任务名称是否正确：Celery通过任务函数名的路径定位任务（如 tasks.add）。\",\"序列化问题：默认使用JSON序列化，如果任务返回复杂对象（如自定义类），需改用 pickle 或自定义序列化器。\"]},\"657\":{\"h\":\"2. 任务结果存储\",\"t\":[\"默认存储在Broker中，但生产环境建议使用 Redis 或 数据库 作为结果后端（Result Backend）：\",\"app.conf.result_backend = 'db+sqlite:///results.sqlite' \"]},\"658\":{\"h\":\"3. 任务幂等性与重试\",\"t\":[\"对于幂等任务（如发送邮件），设置 task_ignore_result=True 避免重复存储结果。\",\"配置重试机制：\",\"@app.task(bind=True, max_retries=3) def unreliable_task(self): try: # 可能失败的代码 pass except Exception as e: self.retry(countdown=5) # 5秒后重试 \"]},\"659\":{\"h\":\"4. 性能优化\",\"t\":[\"并发执行：通过 --concurrency 参数设置Worker线程/进程数（如 --concurrency=4）。\",\"任务优先级：为不同任务分配队列，并设置 worker_pool（如 eventlet 实现异步IO）。\"]},\"660\":{\"h\":\"5. 监控与日志\",\"t\":[\"使用 Celery Flower 监控任务状态：\",\"celery flower --address=0.0.0.0 --port=5555 \",\"给任务添加日志：\",\"import logging logger = logging.getLogger(__name__) @app.task def my_task(): logger.info(\\\"Task started\\\") # 任务逻辑 \"]},\"661\":{\"h\":\"五、最佳实践\",\"t\":[\"任务保持轻量级：避免在任务中执行耗时操作（如循环调用API），可拆分为多个子任务。\",\"错误处理：每个任务应包含 try-except 块，并记录错误信息。\",\"定期清理任务结果：使用 celery result backend 的清理工具避免数据堆积。\",\"使用定时任务（Celery Beat）：\",\"from celery.schedules import crontab app.conf.beat_schedule = { 'run-every-30-seconds': { 'task': 'tasks.add', 'schedule': 30.0, 'args': (16, 16) }, } \"]},\"662\":{\"h\":\"六、Flask和Celery结合\",\"t\":[\"1、目录结构\",\"celery_config.py\",\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : celery_config.py # Time ：2023/7/8 10:40 # Author ：Y-aong # version ：python 3.7 # Description：celery config \\\"\\\"\\\" from datetime import timedelta from conf.config import CeleryConfig imports = ( 'tasks.orderlines_run', 'tasks.jenkins_data_collection', 'tasks.gitlab_data_collection', 'tasks.alarm_data_collection', ) # 时区配置，默认为UTC enable_utc = CeleryConfig.enable_utc timezone = CeleryConfig.timezone # Broker和Backend配置 broker_url = CeleryConfig.broker_url result_backend = CeleryConfig.broker_url beat_dburi = CeleryConfig.beat_db_uri # celery作为一个单独项目运行，在settings文件中设置 broker_connection_retry_on_startup = True # Celery作为第三方模块集成到项目中，在全局配置中添加 CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True beat_schedule = { # jenkins数据采集 'jenkins_job': { 'task': 'get_jenkins_info', 'schedule': timedelta(minutes=10), }, } \",\"定时任务\",\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : jenkins_data_collection.py # Time ：2024/12/1 9:56 # Author ：Y-aong # version ：python 3.10 # Description：jenkins数据采集任务 \\\"\\\"\\\" from apis import celery from apis.jenkins.models.jenkins import JenkinsInfo, JenkinsInstance from public.base_model import session_scope from public.logger import logger from public.utils.jenkins_utils import JenkinsUtils @celery.task(name='get_jenkins_info') def get_jenkins_info(): \\\"\\\"\\\"获取jenkins配置信息\\\"\\\"\\\" pass \",\"celery 注册到flask\",\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : __init__.py # Time ：2023/2/19 21:05 # Author ：Y-aong # version ：python 3.7 # Description： \\\"\\\"\\\" import os.path from celery import Celery from flask import Flask from flask_cors import CORS from sqlalchemy import inspect from public.api_utils.permission_handlers import PermissionAuth celery = Celery(__name__) celery.config_from_object('tasks.celery_config') def _register_plugin(app): pass def _register_webhook(app): pass def _register_db(app: Flask): pass def _register_resource(app): pass def create_app(is_test=False): src_file_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) template = os.path.join(src_file_path, 'templates') app = Flask(__name__, template_folder=template) app.config.from_object('conf.config.FlaskConfig') CORS(app, origins=\\\"*\\\", supports_credentials=True) _register_db(app) _register_webhook(app) _register_resource(app) if not is_test: _register_plugin(app) return app \",\"celery_worker.py\",\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : celery_worker.py # Time ：2023/7/8 10:41 # Author ：Y-aong # version ：python 3.7 # Description：celery worker \\\"\\\"\\\" from apis import create_app, celery app = create_app() app.app_context().push() \",\"启动命令\",\"# 启动worker celery -A celery_worker.celery worker --loglevel=info --pool=solo # 启动beat celery -A celery_worker.celery beat -l info -s celery_logs \",\"在 Celery 中，Worker 的类型（或称为 Worker Pool Types）决定了任务执行的并发模式和资源管理方式。不同的 Worker 类型适用于不同的场景，理解它们的区别可以帮助你优化任务执行效率和资源利用。以下是 Celery 中常见的几种 Worker 类型及其特点：\"]},\"663\":{\"h\":\"八、celery中几种worker的区别\"},\"664\":{\"h\":\"1. Prefork Pool（默认）\",\"t\":[\"工作原理：基于 多进程，每个任务在独立的子进程中执行。\",\"适用场景：CPU 密集型任务（如计算、图像处理等）。\",\"优点：\",\"避免 Python 的全局解释器锁（GIL）限制，多核 CPU 可充分利用。\",\"稳定可靠，适合需要高隔离性的任务。\",\"缺点：\",\"内存占用较高（每个进程需复制整个 Python 环境）。\",\"不适合 IO 密集型任务（如网络请求、数据库查询），因为进程需要等待 I/O 完成，导致资源浪费。\",\"配置方式\",\"深色版本\",\"# 启动命令（默认即为 prefork） celery -A your_app worker --loglevel=info # 显式指定 pool 类型 celery -A your_app worker --pool=prefork \",\"或在配置文件中：\",\"app.conf.worker_pool = 'prefork' \"]},\"665\":{\"h\":\"2. Eventlet Pool\",\"t\":[\"工作原理：基于 协程（Green Threads），通过 非阻塞 I/O 实现并发。\",\"适用场景：IO 密集型任务（如网络请求、HTTP 调用、数据库查询）。\",\"优点：\",\"高并发下性能优异，适合需要频繁等待外部服务的任务。\",\"内存占用低，资源利用率高。\",\"缺点：\",\"需要第三方库 eventlet 支持。\",\"部分第三方库（如未支持非阻塞的库）可能需要打补丁（如 requests 需要 eventlet.patcher）。\",\"配置方式：\",\"celery -A your_app worker --pool=eventlet \",\"或在配置文件中：\",\"app.conf.worker_pool = 'eventlet' \"]},\"666\":{\"h\":\"3. Gevent Pool\",\"t\":[\"工作原理：与 Eventlet 类似，基于 协程（Green Threads），但使用 gevent 库实现。\",\"适用场景：与 Eventlet 相同，适合 IO 密集型任务。\",\"优点：\",\"社区支持广泛，兼容性较好（如 gevent 对常见库的补丁更完善）。\",\"缺点：\",\"需要安装 gevent 库。\",\"同样需要注意第三方库的兼容性。\",\"配置方式\",\"celery -A your_app worker --pool=gevent \",\"或在配置文件中：\",\"app.conf.worker_pool = 'gevent' \"]},\"667\":{\"h\":\"4. Solo Pool\",\"t\":[\"工作原理：单进程单线程，逐个执行任务。\",\"适用场景：调试或测试环境，用于简单验证任务逻辑。\",\"优点：\",\"简单直观，调试方便。\",\"缺点：\",\"无并发能力，性能极低。\",\"配置方式：\",\"celery -A your_app worker --pool=solo \",\"或在配置文件中：\",\"app.conf.worker_pool = 'solo' \"]},\"668\":{\"h\":\"如何选择 Worker 类型？\",\"t\":[\"场景\",\"推荐 Worker 类型\",\"原因\",\"CPU 密集型任务（如计算）\",\"prefork\",\"多进程充分利用多核 CPU。\",\"IO 密集型任务（如网络请求）\",\"eventlet 或 gevent\",\"协程实现高并发非阻塞 I/O。\",\"调试/测试环境\",\"solo\",\"单线程便于调试。\"]},\"669\":{\"h\":\"注意事项\",\"t\":[\"第三方库兼容性：\",\"在eventlet或gevent模式下，某些阻塞式库（如requests，urllib3）可能需要打补丁：\",\"from eventlet import monkey_patch monkey_patch() # 启动前打补丁 \",\"资源限制：\",\"prefork 的进程数可通过 --concurrency 参数调整（如 --concurrency=4）。\",\"协程池（eventlet/gevent）的协程数通常由任务数量自动管理，但需注意内存限制。\"]},\"670\":{\"h\":\"总结\",\"t\":[\"CPU 密集型 → prefork\",\"IO 密集型 → eventlet 或 gevent\",\"调试 → solo\"]},\"671\":{\"c\":[\"celery\"]},\"672\":{\"c\":[\"celery\"]},\"673\":{\"h\":\"4、Flask Socket的使用\",\"t\":[\"Flask-SocketIO 是一个扩展 Flask 应用以支持 WebSocket 通信的库。它使得在 Flask 应用中实现实时双向通信变得简单，非常适合用于需要实时更新的应用场景。我在自己的项目中也应用到socket连接这个功能，这里简单总结一下。由于网上使用的方式都是前端使用html的方法来实现，现在很多都不直接使用html加js的实现方式了。所以我这里提供的是前端使用vue来实现socket。\"]},\"674\":{\"h\":\"一、什么是socket\",\"t\":[\"Socket（套接字） 是计算机网络编程中的一个核心概念，它提供了一种在不同设备或同一设备上的进程之间进行网络通信的机制。简单来说，Socket 是网络通信的端点，允许应用程序通过网络协议（如 TCP、UDP）发送和接收数据。\"]},\"675\":{\"h\":\"1、 Socket 的关键特性\",\"t\":[\"协议支持： \",\"TCP（传输控制协议）： \",\"提供可靠、有序、无重复的字节流传输。\",\"适用于需要数据完整性的场景（如网页浏览、文件传输）。\",\"UDP（用户数据报协议）： \",\"提供无连接、不可靠的数据包传输。\",\"适用于对实时性要求高、可容忍少量数据丢失的场景（如视频通话、在线游戏）。\"]},\"676\":{\"h\":\"2、 Socket 的比喻理解\",\"t\":[\"插座与插头的类比： \",\"Socket 就像墙上的插座，应用程序如同插入插座的插头。\",\"当两台设备通过插座（Socket）连接电源（网络），即可传输电力（数据）。\",\"电话系统的类比： \",\"Socket 是电话的接口，IP 地址是电话号码，端口是分机号。\",\"TCP 像是固定电话（可靠通话），UDP 像是短信（快速但可能丢失）。\"]},\"677\":{\"h\":\"二、flask中使用socket\",\"t\":[\"注意这里我使用flask-socket的方式可能和有些网上的使用方式有差别，是通过自定义namespace的方式来定义的。\"]},\"678\":{\"h\":\"1、安装flask-socket\",\"t\":[\"pip install flask flask-socketio \",\"如果需要支持 WebSocket（而非仅长轮询），还需安装异步框架（如 eventlet 或 gevent）\",\"pip install eventlet \"]},\"679\":{\"h\":\"2、创建falsk NameSpace\",\"t\":[\"src/public/api_utils/socket_namespace.py\",\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : socket_namespace.py # Time ：2024/9/11 20:45 # Author ：Y-aong # version ：python 3.10 # Description：socketio 命名空间 \\\"\\\"\\\" from flask_socketio import SocketIO from flask_socketio.namespace import Namespace from conf.config import OrderLinesConfig, Redis from public.logger import logger from public.api_utils.message_manager import RunningTaskMessageManager, DebugSignManager, RunningLoggerMessageManager, \\\\ UIAInfoMessageManager class RunningLoggerNamespace(Namespace): \\\"\\\"\\\"运行日志处理\\\"\\\"\\\" def __init__(self, namespace, socketio: SocketIO): super().__init__(namespace) self.socketio = socketio self.running_task_message_manager = RunningTaskMessageManager() self.running_logger_manager = RunningLoggerMessageManager() self.debug_sign_manager = DebugSignManager() def on_connect(self): # 当socket 连接完成时 logger.info('running logger client connected') def on_disconnect(self): # 当socket 中断连接时 logger.info('running logger client disconnected') def on_running_logger(self, message): # 自定义连接操作 pass class UiaNamespace(Namespace): def __init__(self, namespace, socketio: SocketIO): super().__init__(namespace) self.socketio = socketio self.uia_manager = UIAInfoMessageManager() def on_connect(self): logger.info('uia client connected') def on_disconnect(self): logger.info('uia client disconnected') def on_uia(self, message): pass def register_socketio(app): # 注册socket，这里使用genvent socketio = SocketIO(app, async_mode='gevent', cors_allowed_origins='*') socketio.on_namespace(RunningLoggerNamespace('/running_logger', socketio)) socketio.on_namespace(UiaNamespace('/uia', socketio)) return socketio \"]},\"680\":{\"h\":\"2、运行socket-io\",\"t\":[\"src/app.py\",\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : app.py # Time ：2023/1/14 22:34 # Author ：Y-aong # version ：python 3.7 # Description：flask enter point \\\"\\\"\\\" from gevent import monkey monkey.patch_all() # 必须在任何其他导入之前调用 from apis import create_app from conf.config import FlaskConfig from public.api_utils.socket_namespace import register_socketio from public.schedule_utils.apscheduler_config import scheduler # 这里返回falsk_app app = create_app(FlaskConfig.DEBUG) socketio = register_socketio(app) if __name__ == '__main__': scheduler.start() # 运行socket-io socketio.run(app, host=FlaskConfig.HOST, port=FlaskConfig.PORT, debug=FlaskConfig.DEBUG) \"]},\"681\":{\"h\":\"三、前端使用socket\",\"t\":[\"orderlines-web\\\\src\\\\views\\\\graph\\\\components\\\\tabbar\\\\index.vue\",\"import { io, Socket } from \\\"socket.io-client\\\"; onMounted(async () => { await getProcessVersionOption(); await getProcessNamespaceOption(); await getProcessVersionByName(); await getProcessInfo(); init(\\\"running_logger\\\"); }); // socket io连接 const init = (namespace: string) => { socketIo = io(`${apiUrl}/${namespace}`, { path: \\\"/socket.io\\\" }); // 监听连接事件 socketIo.on(\\\"connect\\\", () => { console.log(`websocket:: connected to ${namespace} namespace`); }); // 监听关闭事件 socketIo.on(\\\"disconnect\\\", () => { console.log(`websocket:: disconnected to namespace ${namespace} `); }); // 监听接受信息 socketIo.on(namespace, data => { const topic = data.topic; const message = data.message; const receive_process_instance_id = data.process_instance_id; if (topic === \\\"running_logger\\\" && receive_process_instance_id === process_instance_id.value) { running_edge.value = message.running_edge; taskProgress.value = message.task_progress; graph_data.value = message.graph_data.graphData; } else if (topic === \\\"debug_message\\\" && message) { if (!debugMessage.value.find(item => deepEqual(item, message))) { const sign = message.sign; if (sign) { isComplete.value = true; setStorage(\\\"true\\\", \\\"isComplete\\\"); ElMessage.success(sign); } debugMessage.value.push(message); } } }); }; // socket 发送消息 const send = (namespace: string, data: any) => { socketIo.emit(namespace, data); console.log(`websocket:: namespace ${namespace}发送消息:`, data); }; \"]},\"682\":{\"h\":\"四、注意事项\",\"t\":[\"from gevent import monkey monkey.patch_all() # 必须在任何其他导入之前调用 \",\"如果使用了gevent就必须要加这行，不然有可能会对代码有影响。\",\"简单来说就是Python 的全局解释器锁（GIL）使得多线程在 CPU 密集型任务中无法充分利用多核 CPU。而 gevent 的协程（Greenlet） 通过 协作式调度 实现轻量级的并发，但需要依赖 非阻塞的 I/O 操作。\"]},\"683\":{\"c\":[\"flask\",\"socket\"]},\"684\":{\"c\":[\"flask\",\"socket\"]},\"685\":{\"h\":\"4、jwt token认证\"},\"686\":{\"h\":\"问题一、什么要认证\",\"t\":[\"安全，如果用户不登录就可以访问数据和服务器是及其不安全\",\"http 是一种无状态的请求，浏览器是无法知道你是否在线的，通过认证可以知道是否在线\"]},\"687\":{\"h\":\"问题二、 为什么要token认证\",\"t\":[\"这个问题就必须要涉及到session,cookie,token之间的区别了\"]},\"688\":{\"h\":\"1、 http 是一个无状态协议\",\"t\":[\"什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。这种无状态的的好处是快速。\"]},\"689\":{\"h\":\"2、cookie和session\",\"t\":[\"由于http的无状态性，为了使某个域名下的所有网页能够共享某些数据，session和cookie出现了。客户端访问服务器的流程如下\",\"首先，客户端会发送一个http请求到服务器端。\",\"服务器端接受客户端请求后，建立一个session，并发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。该头部包含了sessionId。Set-Cookie格式如下，具体请看Cookie详解 Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]\",\"在客户端发起的第二次请求，假如服务器给了set-Cookie，浏览器会自动在请求头中添加cookie\",\"服务器接收请求，分解cookie，验证信息，核对成功后返回response给客户端\"]},\"690\":{\"h\":\"3、token定义\",\"t\":[\"token 也称作令牌，由uid+time+sign[+固定参数] token 的认证方式类似于临时的证书签名, 并且是一种服务端无状态的认证方式, 非常适合于 REST API 的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。\"]},\"691\":{\"h\":\"4、token认证流程\",\"t\":[\"token 的认证流程与cookie很相似\",\"用户登录，成功后服务器返回Token给客户端。\",\"客户端收到数据后保存在客户端\",\"客户端再次访问服务器，将token放入headers中\",\"服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码\"]},\"692\":{\"h\":\"问题三、什么是 jwt 认证\",\"t\":[\"Json Web Toke（JWT），是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准RFC7519。JWT一般可以用作独立的身份验证令牌，可以包含用户标识、用户角色和权限等信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，特别适用于分布式站点的登录场景。\"]},\"693\":{\"h\":\"1、JWT就是一个字符串，由三部分构成：\",\"t\":[\"Header（头部）\",\"Payload（数据）\",\"Signature（签名）\"]},\"694\":{\"h\":\"Header\"},\"695\":{\"h\":\"2、JWT的头部承载两个信息：\",\"t\":[\"声明类型，这里是JWT\",\"声明加密的算法\"]},\"696\":{\"h\":\"3、Payload\",\"t\":[\"载荷就是存放有效信息的地方。定义细节如下：\",\"iss：令牌颁发者。表示该令牌由谁创建，该声明是一个字符串\",\"sub: Subject Identifier，iss提供的终端用户的标识，在iss范围内唯一，最长为255个ASCII个字符，区分大\",\"aud：Audience(s)，令牌的受众，分大小写的字符串数组\",\"exp：Expiration time，令牌的过期时间戳。超过此时间的token会作废， 该声明是一个整数，是1970年1月1日以来的秒数\",\"iat: 令牌的颁发时间，该声明是一个整数，是1970年1月1日以来的秒数\",\"jti: 令牌的唯一标识，该声明的值在令牌颁发者创建的每一个令牌中都是唯一的，为了防止冲突，它通常是一个密码学随机值。这个值相当于向结构化令牌中加入了一个攻击者无法获得的随机熵组件，有利于防止令牌猜测攻击和重放攻击。\"]},\"697\":{\"h\":\"4、Signature\",\"t\":[\"这个部分需要Base64编码后的Header和Base64编码后的Payload使用 . 连接组成的字符串，然后通过Header中声明的加密方式进行加密（$secret 表示用户的私钥），然后就构成了jwt的第三部分。\"]},\"698\":{\"h\":\"5、 jwt 的特点\",\"t\":[\"JWT 默认是不加密，不能将秘密数据写入 JWT。\",\"JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。\",\"JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。\",\"为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用HTTPS 协议传输。\"]},\"699\":{\"c\":[\"python\",\"flask\"]},\"700\":{\"c\":[\"jwt\"]},\"701\":{\"h\":\"4、python多进程使用\"},\"702\":{\"h\":\"引言：\",\"t\":[\"之前在学习airflow时发现，airflow中大量使用多进程来实现任务的运行，所以还是比较奇怪为什么它会选择多进程呢？所以查询了很多的资料来学习下关于python多进程。\"]},\"703\":{\"h\":\"一、多进程的底层实现与原理\"},\"704\":{\"h\":\"1.1 进程 vs 线程\",\"t\":[\"线程：共享内存空间，通过锁（Lock）或信号量（Semaphore）控制并发访问，受GIL限制。\",\"进程：独立内存空间，无GIL限制，适合CPU密集型任务，但通信开销大。\"]},\"705\":{\"h\":\"1.2 Python 多进程的实现机制\",\"t\":[\"Python的multiprocessing模块通过以下方式实现跨平台进程管理：\",\"Fork（Unix）：父进程通过fork()创建子进程，子进程复制父进程内存空间（写时复制，Copy-on-Write）。\",\"Spawn（所有平台）：父进程通过os.spawn()启动新解释器，进程间通过管道通信。\",\"ForkServer（混合模式）：结合Fork和Spawn，避免Spawn的初始化开销。\",\"# 设置进程启动方式（Linux默认fork，Windows只能spawn） import multiprocessing as mp mp.set_start_method('spawn') # 或 'fork', 'forkserver' \"]},\"706\":{\"h\":\"1.3 进程间通信（IPC）\",\"t\":[\"Python提供以下IPC原语：\",\"Queue/Pipe：基于文件描述符的管道（Pipe）或队列（Queue），底层使用os.pipe()或mmap。\",\"共享内存：Value/Array通过shmget/shmctl系统调用（Unix）或CreateFileMapping（Windows）实现。\",\"Manager：通过代理对象（Proxy）实现跨进程对象共享（如字典、列表），底层使用客户端-服务器模型（xmlrpc）。\",\"from multiprocessing import Process, Value, Array def worker(counter, arr): counter.value += 1 arr[0] = 5 if __name__ == \\\"__main__\\\": counter = Value('i', 0) # 共享整型 arr = Array('d', [1.0, 2.0]) # 共享数组 p = Process(target=worker, args=(counter, arr)) p.start() p.join() print(counter.value, arr[:]) # 输出：1 [5.0, 2.0] \"]},\"707\":{\"h\":\"二、多进程的实现方式与性能对比\"},\"708\":{\"h\":\"2.1 multiprocessing 模块\",\"t\":[\"Process：手动管理进程生命周期，适合简单任务。\",\"Pool：进程池，自动负载均衡，支持map/apply_async等接口。\",\"from multiprocessing import Pool def square(x): return x * x with Pool(4) as p: results = p.map(square, range(10)) # 并行计算 \"]},\"709\":{\"h\":\"2.2 concurrent.futures.ProcessPoolExecutor\",\"t\":[\"高层接口，支持submit/as_completed，适合异步任务：\",\"from concurrent.futures import ProcessPoolExecutor def compute(x): return x ** 2 with ProcessPoolExecutor() as executor: futures = [executor.submit(compute, x) for x in range(10)] for future in as_completed(futures): print(future.result()) \"]},\"710\":{\"h\":\"2.3 性能对比\",\"t\":[\"方式\",\"适用场景\",\"启动开销\",\"IPC开销\",\"代码复杂度\",\"Process\",\"简单任务\",\"高\",\"高\",\"低\",\"Pool\",\"任务队列\",\"中\",\"中\",\"中\",\"ProcessPoolExecutor\",\"异步任务\",\"中\",\"中\",\"低\"]},\"711\":{\"h\":\"三、多进程的优缺点：深度分析\"},\"712\":{\"h\":\"3.1 优点\",\"t\":[\"突破GIL限制：每个进程独立解释器，CPU密集型任务可线性加速：\",\"# 单进程 vs 多进程计算时间对比 import time from multiprocessing import Pool def sum_squared(n): return sum(i ** 2 for i in range(n)) start = time.time() with Pool(4) as p: p.map(sum_squared, [10**7]*4) print(f\\\"多进程耗时：{time.time() - start:.2f}s\\\") # 约 0.5s start = time.time() for _ in range(4): sum_squared(10**7) print(f\\\"单进程耗时：{time.time() - start:.2f}s\\\") # 约 2.0s \",\"进程隔离：一个进程崩溃不影响其他进程（需监控重启）。\",\"资源控制：可通过resource模块限制单个进程的内存/CPU使用。\"]},\"713\":{\"h\":\"3.2 缺点\",\"t\":[\"内存开销：每个进程独立内存空间，大对象复制可能导致OOM：\",\"# 危险示例：复制大数组 import numpy as np from multiprocessing import Process def worker(arr): pass # 进程启动时复制整个数组 arr = np.zeros(1e9) # 8GB内存 p = Process(target=worker, args=(arr,)) # 启动时可能耗尽内存 \",\"IPC性能瓶颈：跨进程通信需序列化/反序列化，适合批量数据而非高频交互：\",\"# 低效的IPC示例（每秒1000次） from multiprocessing import Process, Queue def producer(q): for _ in range(1000): q.put({\\\"data\\\": [1, 2, 3]}) def consumer(q): for _ in range(1000): q.get() p1 = Process(target=producer, args=(q,)) p2 = Process(target=consumer, args=(q,)) # 总耗时约 0.5s（每秒2000次） \"]},\"714\":{\"h\":\"四、Airflow 多进程架构解析\",\"t\":[\"Apache Airflow 是一个流行的分布式任务调度框架，其核心设计依赖多进程，主要原因可能为：\",\"提升任务并行能力\",\"Airflow 的 LocalExecutor 使用多进程并行执行多个任务实例。\",\"通过 CeleryExecutor 结合多进程，实现分布式任务调度\",\"隔离性与稳定性\",\"每个任务运行在独立进程中，避免因单个任务崩溃影响其他任务。\",\"可通过进程限制单个任务的资源占用（如内存、CPU）。\",\"同时Airflow的多进程也会带来一些可能的问题\",\"数据库连接泄漏：每个进程需独立连接池，避免连接数超限。\",\"序列化问题：DAG定义需避免非序列化对象（如闭包）。\",\"日志聚合：多进程日志需集中存储（如远程服务器或ELK）。\"]},\"715\":{\"h\":\"五、多进程实战：常见问题与解决方案\"},\"716\":{\"h\":\"5.1 进程间通信优化\",\"t\":[\"减少序列化开销：\",\"使用multiprocessing.shared_memory直接操作内存：\",\"from multiprocessing import shared_memory arr = np.random.rand(1000) shm = shared_memory.SharedMemory(create=True, size=arr.nbytes) shm_arr = np.ndarray(arr.shape, dtype=arr.dtype, buffer=shm.buf) shm_arr[:] = arr[:] \",\"优先用pickle替代dill，或使用二进制协议（如msgpack）。\",\"避免频繁通信：\",\"批量传输数据而非逐条发送：\",\"q.put([data1, data2, data3]) # 批量发送 \"]},\"717\":{\"h\":\"5.2 进程安全与资源管理\",\"t\":[\"共享对象的同步：\",\"from multiprocessing import Process, Lock lock = Lock() shared_counter = Value('i', 0) def increment(): with lock: shared_counter.value += 1 p1 = Process(target=increment) p2 = Process(target=increment) p1.start(); p2.start() p1.join(); p2.join() print(shared_counter.value) # 确保输出2 \",\"进程终止与清理：\",\"import signal from multiprocessing import Process def worker(): while True: pass p = Process(target=worker) p.start() p.terminate() # 发送SIGTERM信号 p.join(timeout=1) if p.is_alive(): p.kill() # 强制终止（发送SIGKILL） \"]},\"718\":{\"h\":\"5.3 跨平台兼容性\",\"t\":[\"Windows注意事项： \",\"fork不可用，进程间共享内存需通过shared_memory显式管理。\",\"__main__模块必须可导入（避免if __name__ == \\\"__main__\\\"外的函数定义）。\"]},\"719\":{\"h\":\"六、多进程的典型应用场景与优化\"},\"720\":{\"h\":\"6.1 科学计算加速\",\"t\":[\"NumPy/SciPy：通过multiprocessing.Pool并行计算：\",\"import numpy as np from multiprocessing import Pool def compute_row(row): return np.linalg.norm(row) data = np.random.rand(1000, 100) with Pool(4) as p: norms = p.map(compute_row, data) # 并行计算每行的范数 \"]},\"721\":{\"h\":\"6.2 Web服务器\",\"t\":[\"Gunicorn：通过多进程模型（sync工作模式）处理HTTP请求：\",\"gunicorn -w 4 myapp:app # 启动4个Worker进程 \"]},\"722\":{\"h\":\"6.3 分布式任务调度\",\"t\":[\"Celery+RabbitMQ：结合多进程和消息队列实现分布式任务：\",\"from celery import Celery app = Celery('tasks', broker='pyamqp://guest@localhost//') @app.task def add(x, y): return x + y # 启动Worker：celery -A tasks worker --concurrency=4 \"]},\"723\":{\"h\":\"七、总结：多进程的适用场景与避坑指南\"},\"724\":{\"h\":\"适用场景\",\"t\":[\"CPU密集型任务：科学计算、图像处理、密码破解。\",\"高可靠性场景：任务间需严格隔离（如金融交易）。\",\"分布式系统：需要跨机器并行的任务调度。\"]},\"725\":{\"h\":\"避坑指南\",\"t\":[\"避免共享可变状态：优先用IPC或数据库同步，而非共享内存。\",\"监控资源使用：用psutil监控内存/CPU，防止OOM或CPU过载。\",\"选择合适的IPC方式：小数据用Queue，大数据用共享内存。\",\"测试跨平台兼容性：Windows需额外处理fork和模块导入问题。\",\"理论上用户最多启动65535个进程，但是实际上，我们可能启动不了这么多进程，一般可能需要具体问题具体分析\",\"轻量级进程（如HTTP请求处理）： 每个进程占用 10-100MB 内存时，一台 32GB 内存 的机器可运行 300-1000 个进程。\",\"中等负载进程（如数据库连接、计算任务）： 每个进程占用 100MB-1GB 内存时，进程数通常控制在 50-200 以内。\",\"重量级进程（如容器/Docker）： 每个进程占用 1GB+ 内存时，进程数可能仅 10-50 个。\",\"可以根据当前应用的实际cpu和内存占用来处理。\",\"def calculate_max_processes(cpu_cores, memory_gb, process_memory_mb): # CPU限制：每个核心最多2个进程（保守估计） cpu_limit = cpu_cores * 2 # 内存限制：总内存的80%分配给进程 memory_limit = (memory_gb * 1024 * 0.8) // process_memory_mb # 取最小值并保留安全余量 return int(min(cpu_limit, memory_limit) * 0.8) \"]},\"726\":{\"c\":[\"python\",\"多进程\"]},\"727\":{\"c\":[\"多进程\"]},\"728\":{\"h\":\"8、使用生成器实现debug\"},\"729\":{\"h\":\"一、debug功能\",\"t\":[\"Debug，是程序开发人员必会的一项调试程序的技能。可以说如果你不会调试程序，你就没有办法从事编程工作。那么debug可以帮助我们做什么呢？\",\"追踪代码的运行流程。\",\"程序运行异常定位。\",\"其实可以总结出来一点就是调测功能。我自己在开发一个工作流的框架，其中就需要用到debug功能来帮助实现流程的调测，其中特别针对于UI自动化的调测，这简直就是神器，因为UI自动化需要一步一步的运行，在点击下个元素的时候如果失败可能会造成失败重来的尴尬局面，所以debug对于调测就是神器。\"]},\"730\":{\"h\":\"二、迭代器和生成器\",\"t\":[\"那么如何在python中实现debug的功能呢？其实看这个标题就是知道，使用生成器来实现debug功能。为了给下面的讲解提供铺垫我们先来说一下什么是生成器？生成器的一些基础知识吧？\"]},\"731\":{\"h\":\"2.1、什么是迭代\",\"t\":[\"迭代是一种重复获取数据集合中元素的过程，一次只获取一个元素，直到遍历完所有元素。在Python中，迭代通常用于遍历序列（如列表、元组）或任何可迭代对象。\",\"fruits = ['apple', 'banana', 'cherry'] for fruit in fruits: print(fruit) \",\"Python的迭代机制依赖于两个特殊方法：__iter__和__next__。__iter__方法返回一个迭代器对象，而__next__方法则负责返回迭代器的下一个值。当没有更多的值可返回时，__next__会抛出StopIteration异常。这使得Python中的所有可迭代对象都可以被自然地用于for循环。\"]},\"732\":{\"h\":\"2.2、迭代器的概念\",\"t\":[\"迭代器是一个对象，它实现了迭代协议，即拥有__iter__和__next__方法。__iter__返回迭代器本身，而__next__返回集合的下一个元素。迭代器在没有更多元素时抛出StopIteration异常。\",\"下面是一个简单的迭代器类示例：\",\"class SimpleIterator: def __init__(self, limit): self.limit = limit self.current = 0 def __iter__(self): return self def __next__(self): if self.current >= self.limit: raise StopIteration value = self.current self.current += 1 return value # 使用迭代器 it = SimpleIterator(5) for i in it: print(i) \",\"在Python中，我们通常使用iter()函数来获取一个对象的迭代器，然后用next()函数来获取下一个值。例如：\",\"my_list = [1, 2, 3] my_iterator = iter(my_list) print(next(my_iterator)) # 输出: 1 print(next(my_iterator)) # 输出: 2 print(next(my_iterator)) # 输出: 3 \"]},\"733\":{\"h\":\"2.3、生成器\",\"t\":[\"生成器函数是一种特殊的迭代器，使用yield语句暂停和恢复函数的执行。\",\"生成器函数通过yield语句生成值，而不是返回一个值。每次调用next()时，函数从上次暂停的地方继续执行，直到遇到下一个yield。\",\"def fibonacci(): a, b = 0, 1 while True: yield a a, b = b, a + b # 使用生成器 for num in fibonacci(): if num > 100: break print(num) \"]},\"734\":{\"h\":\"2.4、迭代器和生成器的好处\",\"t\":[\"迭代器\",\"最大的优点之一是其惰性计算特性。这意味着它不会一次性生成所有数据，而是在需要时按需生成。这对于处理大数据集或无限序列特别有用，因为它们只占用有限的内存。\",\"生成器\",\"生成器可以按需产生结果，而不是立即产生结果，节省内存。\",\"生成器函数可以暂停执行并返回中间结果，非常适合在调试过程中查看中间状态。\"]},\"735\":{\"h\":\"三、实现debug功能\",\"t\":[\"那么现在到达正题了就是如何实现debug功能。请注意这么一句话就是生成器函数可以暂停执行并返回中间结果，非常适合在调试过程中查看中间状态。\",\"接下来我们使用个例子来说明如何使用生成器函数实现debug\",\"import random def task1(a, b): yield a * b def task2(a, b): yield a + b for func in [task1, task2]: x = random.randint(1, 10) y = random.randint(10, 20) generator = func(x, y) print(f'{func.__name__}参数a::{x}, b::{y}') sign = input() if sign == 'start': result = generator.send(None) print(f'函数{func.__name__}运行结果') else: break \",\"运行结果\",\"task1参数a::6, b::16 start 函数task1运行结果 task2参数a::3, b::13 start 函数task2运行结果 \",\"相信我写出来这个例子大家会觉得特别简单，就这！！！\",\"实际上这个功能就是比较简单，就是要看我们能不能想到使用生成器函数来做了。关于这个生成器函数中间有使用到send方法。\",\"Python的生成器支持send方法，这可以让生成器变为双向通道。send方法可以把参数发给生成器，让它成为上一条yield表达式的求值结果，并将生成器推进到下一条yield表达式，然后把yield右边的值返回给send方法的调用者。\",\"但是这种debug是存在缺陷的，正常我们使用idea的编辑器是可以实现上一步，或者下一步的，但是这种debug,不可以实现上一步的功能，只可以一路向下走。这里是因为迭代器本身是不可逆的。所以我们使用的生成器函数也是不可逆的。\"]},\"736\":{\"h\":\"四、进阶话题：生成器和协程\",\"t\":[\"协程和生成器都可以通过yield语句来暂停执行并保存当前状态，但协程可以通过await关键字暂停执行，等待其他协程完成，而生成器主要用于迭代器编程。\",\"而且除了基础的生成器，Python还支持带状态的生成器、协程和异步生成器，这些都极大地扩展了迭代器的使用范围。例如，使用asyncio库进行异步操作：\",\"import asyncio async def async_generator(): for i in range(5): await asyncio.sleep(1) yield i async def main(): async for i in async_generator(): print(f\\\"Generated: {i}\\\") # 运行异步主函数 asyncio.run(main()) \"]},\"737\":{\"c\":[\"python\",\"迭代器\"]},\"738\":{\"c\":[\"迭代器\"]},\"739\":{\"h\":\"9、Python异常处理技巧\"},\"740\":{\"h\":\"一、异常处理\",\"t\":[\"关于异常处理是我们在开发中经常会遇到的，每个开发者都避免不了遇到异常处理，想要开发出来健壮的程序必须要做好异常处理。我也在几年的开发中也总结出来一些异常处理的技巧，在这里也分享一下。\"]},\"741\":{\"h\":\"二、基础捕获：try-except块\"},\"742\":{\"h\":\"简单异常捕获\",\"t\":[\"当预期某段代码可能引发异常时，将其包裹在try块内 ，然后使用一个或多个except子句来捕获并处理这些异常。例如，处理文件读取错误：\",\"try: with open('example.txt', 'r') as file: content = file.read() except FileNotFoundError: print(\\\"文件未找到 ，请检查路径是否正确。\\\") \"]},\"743\":{\"h\":\"多异常处理\",\"t\":[\"有时 ，一段代码可能会抛出多种类型的异常 ，这时可以使用一个except块来同时捕获多个异常类型 ，或者使用多个except块分别处理不同异常：\",\"try: # 假设这里执行的代码可能抛出多种类型的异常 result = 10 / 0 except (ZeroDivisionError, TypeError) as e: print(f\\\"发生错误: {e}\\\") \"]},\"744\":{\"h\":\"异常链抛出\",\"t\":[\"在处理异常时，可能需要保留原始异常信息的同时，添加额外的上下文或重新抛出异常。使用raise from语法可以达到这一目的：\",\"try: open('nonexistent.txt') except FileNotFoundError as fnf_error: raise ValueError(\\\"配置文件缺失\\\") from fnf_error \"]},\"745\":{\"h\":\"三、with上下文管理\",\"t\":[\"在Python中，with语句结合上下文管理器提供了自动资源管理和代码块执行控制的强大能力，显著提升了代码的整洁度和健壮性。\"]},\"746\":{\"h\":\"自动资源管理\",\"t\":[\"上下文管理器通过定义__enter__和__exit__方法，使得在with语句块中操作资源时，无论是否发生异常，都能确保资源被正确地初始化和清理。以下是一个简单的文件操作示例：\",\"class ManagedFile: def __init__(self, filename): self.filename = filename def __enter__(self): self.file = open(self.filename, 'r') return self.file def __exit__(self, exc_type, exc_val, exc_tb): if self.file: self.file.close() # 使用自定义上下文管理器 with ManagedFile('example.txt') as file: content = file.read() print(content) \"]},\"747\":{\"h\":\"四、捕获特定异常：else & finally块\"},\"748\":{\"h\":\"使用else语句\",\"t\":[\"else子句与try-except结构配合使用，用于在没有异常发生的情况下执行代码块。这意味着，如果try部分的代码成功执行（即没有触发任何异常），则直接跳过所有except子句，执行else块内的代码。但是这种方式在effective python中不建议使用，else语义不明确\",\"try: result = 10 / 2 except ZeroDivisionError: print(\\\"发生了除以零的错误\\\") else: print(\\\"运算成功，结果是:\\\", result) \"]},\"749\":{\"h\":\"finally确保代码执行\",\"t\":[\"finally块无论是否发生异常 ，甚至是try块中有return、break等改变控制流的语句，都会保证其内部的代码被执行。这对于释放资源、关闭文件或数据库连接等清理工作尤为重要。\",\"try: num = int(input(\\\"请输入一个数字: \\\")) print(\\\"输入的数字是:\\\", num) except ValueError: print(\\\"输入错误，请输入一个整数。\\\") finally: print(\\\"这是finally块 ，总是会被执行。\\\") \"]},\"750\":{\"h\":\"五、自定义异常\"},\"751\":{\"h\":\"继承Exception基类\",\"t\":[\"这种方式非常常见，在我们开发中常常会针对于某个异常封装一个特定的异常类。\",\"class OrderLineRunningException(Exception): pass class OrderLineStopException(Exception): pass class OrderLineTimeoutException(Exception): pass \",\"当然也可以自定义一些属性，这样在处理异常时 ，可以获得更多的上下文信息。\",\"class CustomErrorWithDetails(CustomError): def __init__(self, message, detail=None): super().__init__(message) self.detail = detail def process_data(data): if not data: raise CustomErrorWithDetails(\\\"数据为空\\\", detail=\\\"缺少必要的输入数据\\\") try: process_data([]) except CustomErrorWithDetails as e: print(f\\\"错误信息: {e}, 详细信息: {e.detail}\\\") \"]},\"752\":{\"h\":\"六、主动抛出异常\"},\"753\":{\"h\":\"主动抛出异常\",\"t\":[\"这个是非常常见的一个技巧，当条件不满足预期我们主动抛出异常。\",\"def calculate_square_root(n): if n < 0: raise ValueError(\\\"负数没有平方根\\\") return n ** 0.5 try: print(calculate_square_root(-4)) except ValueError as e: print(e) # 输出: 负数没有平方根 \"]},\"754\":{\"h\":\"函数调用栈中的异常\",\"t\":[\"当函数内部抛出异常而未被捕获时 ，异常会向上传递至调用该函数的上一层，这一过程会沿着调用栈逐级回溯 ，直至遇到合适的except块捕获该异常，或最终未被捕获导致程序终止。理解这一过程对于调试和设计异常处理逻辑非常重要。\",\" def inner_function(): raise ValueError(\\\"内部错误\\\") def outer_function(): inner_function() try: outer_function() except ValueError as e: print(\\\"捕获到异常:\\\", e) # 输出: 捕获到异常: 内部错误 \"]},\"755\":{\"h\":\"七、异常的绝杀——日志\",\"t\":[\"我相信每个开发都对于日志都是无比的熟悉，合理利用logging模块记录日志信息是监控程序运行状态、诊断问题的关键实践。通过精细的日志管理，可以大幅提升系统的可维护性和故障排查效率。\",\"这里要注意两点\",\"日志的级别设置\",\"异常时记录日志信息\",\"结合异常处理与日志记录，可以在异常发生时自动记录详细的错误信息 ，这对于追踪和分析问题原因至关重要。通过在except块内使用logging.error或更高级别的方法记录异常，可以确保异常情况被完整记录。想打印出异常的详细信息还要记住这个模块traceback\",\"import traceback def divide(a, b): try: result = a / b except ZeroDivisionError as e: # division by zero print(e) # Traceback (most recent call last): # File \\\"E:\\\\code\\\\orderlines\\\\orderlines\\\\demo.py\\\", line 6, in divide # result = a / b # ZeroDivisionError: division by zero print(traceback.format_exc()) divide(10, 0) \"]},\"756\":{\"h\":\"八、调试中的异常检查——assert\",\"t\":[\"在Python程序开发和调试阶段，assert语句是一种强大的工具 ，用于在代码中插入检查点，确保变量或表达式的预期状态。但是华为python开发规范中不建议在正式代码使用这种方式，但是我这里说的是调试中使用\",\"def increment_counter(counter): assert counter >= 0, \\\"Counter should not be negative\\\" counter += 1 return counter \",\"尽管assert在遇到失败时会引发AssertionError，但它与直接使用if语句抛出异常有本质区别：\",\"启用与禁用：通过 -O 或 -OO 命令行选项运行Python程序时，所有assert语句将被忽略，这使得生产环境中的性能影响最小。而显式抛出的异常不会受此影响。\",\"意图表达：assert主要用于自我检查，表达开发者对代码状态的期望。异常处理则更多关注于程序中可能遇到的外部或内部错误 ，并提供恢复机制。\",\"调试信息：assert失败时 ，会提供失败的表达式和所在位置的信息 ，这对于调试非常有帮助。而自定义异常可以携带更丰富的上下文信息，适合对外部用户或下游代码解释错误原因。\"]},\"757\":{\"h\":\"九、异常装饰器\",\"t\":[\"基础的异常处理装饰器可以捕获并处理被装饰函数可能抛出的异常 ，提供统一的错误处理逻辑。这类方式对于UI自动化测试中有奇效，因为异常时自动化测试需要看到当前的页面状态更加方便排查bug\",\"import logging def log_exceptions(log_to_file=False): def decorator(func): def wrapper(*args, **kwargs): try: return func(*args, **kwargs) except Exception as e: print(f\\\"捕获到异常: {e}\\\") if log_to_file: logging.error(f\\\"异常信息: {e}\\\", exc_info=True) return wrapper return decorator logging.basicConfig(filename='app.log', level=logging.ERROR) @log_exceptions(log_to_file=True) def divide_with_logging(x, y): return x / y print(divide_with_logging(10, 0)) # 除了打印异常 ，还会记录到app.log文件中 \"]},\"758\":{\"h\":\"10、异常和性能\",\"t\":[\"在Python应用中，合理使用异常处理机制对于提升程序的健壮性至关重要，但同时也需注意其对性能的影响。\",\"异常处理在Python中相对昂贵，特别是在异常被频繁触发的场景下。每次异常抛出和捕获都会消耗额外的CPU周期，包括堆栈展开、异常对象的创建、以及异常处理逻辑的执行。因此，在性能敏感的代码段 ，减少不必要的异常使用是非常必要的。\",\"我来举个Effective Python中的一个例子\",\"data = { 'name': 'blue', 'age': 18 } if 'name' in data: print('success') \",\"就是利用KeyError异常。如果程序抛出了这个异常，那说明要获取的键不在字典里。这种方式虽然可行但是成本比较大。\",\"举个例子\",\"import timeit def with_exception_check(num): try: if num == 0: raise ValueError(\\\"Invalid value\\\") return 10 / num except: pass def without_exception(num): if num != 0: return 10 / num else: return None # 或者其他处理方式 # 测试两种情况的性能差异 exception_time = timeit.timeit('with_exception_check(0)', globals=globals(), number=10000) no_exception_time = timeit.timeit('without_exception(0)', globals=globals(), number=10000) print(f\\\"异常处理耗时: {exception_time}\\\")# 异常处理耗时: 0.0024798000004011556 print(f\\\"无异常处理耗时: {no_exception_time}\\\")# 无异常处理耗时: 0.00041819999933068175 \",\"这个例子应该比较明显了。\",\"尽管异常可以作为一种控制流的手段，比如用于替代条件判断 ，但这并不是其设计初衷。频繁使用异常来控制程序流程不仅会影响性能，还可能导致代码逻辑难以理解和维护。\",\"def read_file_contents(filename): try: with open(filename, 'r') as file: return file.read() except FileNotFoundError: return \\\"文件未找到\\\" # 更好的做法是预先检查文件存在 def read_file_contents_optimized(filename): import os if os.path.exists(filename): with open(filename, 'r') as file: return file.read() else: return \\\"文件未找到\\\" \"]},\"759\":{\"c\":[\"python\"]},\"760\":{\"c\":[\"异常处理\"]},\"761\":{\"h\":\"1、设计模式的六大原则\"},\"762\":{\"h\":\"一、设计模式的六大原则\",\"t\":[\"单一职责原则\",\"单一职责原则的定义描述非常简单，也不难理解。\",\"一个类只负责完成一个职责或者功能。也就是说在类的设计中 我们不要设计大而全的类,而是要设计粒度小、功能单一的类。\",\"比如 我们设计一个类里面既包含了用户的一些操作,又包含了支付的一些操作,那这个类的职责就不够单一,应该将该类进行 拆分,拆分成多个功能更加单一的,粒度更细的类.\",\"开放封闭原则\",\"定义：对扩展开放，对修改关闭\",\"对扩展开放和对修改关闭表示当一个类或一个方法有新需求或者需求发生改变时应该采用扩展的方式而不应该采用修改原有 逻辑的方式来实现。因为扩展了新的逻辑如果有问题只会影响新的业务，不会影响老业务；而如果采用修改的方式，很有可 能就会影响到老业务受影响。\",\"优点：\",\"新老逻辑解耦，需求发生改变不会影响老业务的逻辑\",\"改动成本最小，只需要追加新逻辑，不需要改的老逻辑\",\"提供代码的稳定性和可扩展性\",\"里氏替换原则\",\"1 ) 什么是替换 ?\",\"替换的前提是面向对象语言所支持的多态特性，同一个行为具有多个不同表现形式或形态的能力。\",\"以 JDK 的集合框架为例，List接口的定义为有序集合，List接口有多个派生类，比如 大家耳熟能详的 ArrayList, LinkedList。那当某个方法参数或变量是 List接口类型时， 既可以是 ArrayList的实现, 也可以是 LinkedList的实现，这就是替换。\",\"2 ) 什么是与期望行为一致的替换？\",\"在不了解派生类的情况下，仅通过接口或基类的方法，即可清楚的知道方法的行为，而不管哪种派 生类的实现，都与接口或基类方法的期望行为一致。\",\"不需要关心是哪个类对接口进行了实现,因为不管底层如何实现,最终的结果都会符合接口中关于方法的描述(也就是与接口中方法的期望行为一致).\",\"或者说接口或基类的方法是一种契约，使用方按照这个契约来使用，派生类也按照这个契约来实现。这就是与期望行为一致的替换。\",\"接口隔离原则\",\"定义：要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。\",\"接口隔离原则与单一职责原则的区别\",\"接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：\",\"单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。\",\"单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建\",\"依赖倒置原则\",\"定义：依赖倒置原则（Dependence Inversion Principle，DIP）是指在设计代码架构时，高层模块不应该依赖于底层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。\",\"依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。\",\"依赖倒置原则的好处:\",\"减少类间的耦合性，提高系统的稳定性 . (根据类与类之间的耦合度从弱到强排列：依赖关系、关联关系、 聚合关系、组合关系、泛化关系和实现关系 )\",\"降低并行开发引起的风险 (两个类之间有依赖关系，只要制定出两者之间的接口（或抽象类）就可以独立开发了)\",\"提高代码的可读性和可维护性\",\"迪米特法则\",\"简单来说迪米特法则想要表达的思想就是: 不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。\",\"如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。\"]},\"763\":{\"h\":\"二、单例模式的作用和意义\",\"t\":[\"保证某一个类在运行期间只有一个实例对外提供服务\",\"使用单例模式要做的两件事\",\"保证一个类只有一个实例\",\"为该实例提供一个全局访问节点\"]},\"764\":{\"h\":\"三、工厂模式有哪些，有什么区别\",\"t\":[\"《设计模式》一书中，工厂模式被分为了三种：简单工厂、工厂方法和抽象工厂。\"]},\"765\":{\"h\":\"3.1、简单工厂\",\"t\":[\"适用场景： （1）需要创建的对象较少。 （2）客户端不关心对象的创建过程。\",\"优点：\",\"封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。\",\"缺点：\",\"增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。\"]},\"766\":{\"h\":\"3.2、工厂方法\",\"t\":[\"定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。\",\"工厂方法模优缺点\",\"优点：\",\"用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；\",\"在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；\",\"缺点：\",\"每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。\"]},\"767\":{\"h\":\"3.3、抽象工厂模式\",\"t\":[\"抽象工厂模式（Abstract Factory Pattern）属于创建型模式，它实际上是对工厂方法模式的扩展，相当于一个超级工厂，用于创建其他工厂的模式。\",\"在抽象工厂模式中，接口是负责创建一个相关对象的工厂，而且每个工厂都能按照工厂模式提供对象。其实抽象工厂也是为了减少工厂方法中的子类和工厂类数量，基于此提出的设计模式。\",\"抽象工厂模式优点\",\"对于不同产品系列有比较多共性特征时，可以使用抽象工厂模式，有助于提升组件的复用性.\",\"当需要提升代码的扩展性并降低维护成本时，把对象的创建和使用过程分开，能有效地将代码统一到一个级别上\",\"解决跨平台带来的兼容性问题\",\"抽象工厂模式缺点\",\"增加新的产品等级结构麻烦,需要对原有结构进行较大的修改,甚至需要修改抽象层代码,这显然会带来较大不变,违背了开闭原则.\"]},\"768\":{\"h\":\"四、装饰器和代理模式\"},\"769\":{\"h\":\"一、代理模式(Proxy Design Pattern )\",\"t\":[\"原始定义是：让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许将请求提交给对象前后进行一些处理。\",\"代理模式的适用场景\",\"功能增强 当需要对一个对象的访问提供一些额外操作时,可以使用代理模式\",\"远程（Remote）代理 实际上，RPC 框架也可以看作一种代理模式，GoF 的《设计模式》一书中把它称作远程代理。通过远程代理，将网络通信、数据编解码等细节隐藏起来。客户端在使用 RPC 服务的时候，就像使用本地函数一样，无需了解跟服务器交互的细节。除此之外，RPC 服务的开发者也只需要开发业务逻辑，就像开发本地使用的函数一样，不需要关注跟客户端的交互细节。\",\"防火墙（Firewall）代理 当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。\",\"保护（Protect or Access）代理 控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。\"]},\"770\":{\"h\":\"二、装饰器模式(decorator pattern)\",\"t\":[\"的原始定义是：动态的给一个对象添加一些额外的职责. 就扩展功能而言,装饰器模式提供了一种比使用子类更加灵活的替代方案.\",\"装饰器模式的适用场景\",\"快速动态扩展和撤销一个类的功能场景。 比如，有的场景下对 API 接口的安全性要求较高，那么就可以使用装饰模式对传输的字符串数据进行压缩或加密。如果安全性要求不高，则可以不使用。\",\"不支持继承扩展类的场景。 比如，使用 final 关键字的类，或者系统中存在大量通过继承产生的子类。\"]},\"771\":{\"h\":\"三、装饰器模式与代理模式的区别\",\"t\":[\"对装饰器模式来说，装饰者（decorator）和被装饰者（decoratee）都实现同一个 接口。\",\"对代理模式来说，代理类（proxy class）和真实处理的类（real class）都实现同一个接口。\",\"他们之间的边界确实比较模糊，两者都是对类的方法进行扩展，具体区别如下：\",\"装饰器模式强调的是增强自身，在被装饰之后你能够在被增强的类上使用增强后的功能。增强后你还是你，只不过能力更强了而已；代理模式强调要让别人帮你去做一些本身与你业务没有太多关系的职责（记录日志、设置缓存）。代理模式是为了实现对象的控制，因为被代理的对象往往难以直接获得或者是其内部不想暴露出来。\",\"装饰模式是以对客户端透明的方式扩展对象的功能，是继承方案的一个替代方案；代理模式则是给一个对象提供一个代理对象，并由代理对象来控制对原有对象的引用；\",\"装饰模式是为装饰的对象增强功能；而代理模式对代理的对象施加控制，但不对对象本身的功能进行增强；\"]},\"772\":{\"c\":[\"python\"]},\"773\":{\"c\":[\"设计模式\"]},\"774\":{\"h\":\"2、策略模式\"},\"775\":{\"h\":\"一、定义\",\"t\":[\"策略模式（Strategy Pattern）是行为设计模式的一种，它定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。在Python中实现策略模式通常涉及创建一个接口或基类，以及多个实现了该接口或继承自该基类的具体策略类。\"]},\"776\":{\"h\":\"二、策略模式结构\",\"t\":[\"上下文 （Context） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。\",\"策略 （Strategy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。\",\"具体策略 （Concrete Strategies） 实现了上下文所用算法的各种不同变体。\",\"策略模式是最常用的一种设计模式\",\"from __future__ import annotations from abc import ABC, abstractmethod from typing import List class Context(object): \\\"\\\"\\\"上下文\\\"\\\"\\\" def __init__(self, strategy: Strategy) -> None: self._strategy = strategy @property def strategy(self) -> Strategy: return self._strategy @strategy.setter def strategy(self, strategy: Strategy) -> None: self._strategy = strategy def do_some_business_logic(self) -> None: print(\\\"Context: Sorting data using the strategy (not sure how it'll do it)\\\") result = self._strategy.do_algorithm([\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"]) print(\\\",\\\".join(result)) class Strategy(ABC): \\\"\\\"\\\"策略接口\\\"\\\"\\\" @abstractmethod def do_algorithm(self, data: List): pass class ConcreteStrategyA(Strategy): # 具体策略A def do_algorithm(self, data: List) -> List: return sorted(data) class ConcreteStrategyB(Strategy): # 具体策略B def do_algorithm(self, data: List) -> List: return reversed(sorted(data)) if __name__ == \\\"__main__\\\": context = Context(ConcreteStrategyA()) print(\\\"Client: Strategy is set to normal sorting.\\\") context.do_some_business_logic() print() print(\\\"Client: Strategy is set to reverse sorting.\\\") context.strategy = ConcreteStrategyB() context.do_some_business_logic() \",\"《流畅的Python》一书中关于策略模式的说明非常详细，它不仅展示了如何使用面向对象的方式实现策略模式，还介绍了如何利用Python的一等函数特性来简化这种设计模式的实现。\",\"由于Python中的函数是一等公民，可以像其他任何值一样被传递、赋值或作为参数传递给其他函数，因此可以直接用函数来代替类来实现具体策略\",\"# 策略模式(函数实现) import inspect import promotions from collections import namedtuple Customer = namedtuple(\\\"Customer\\\", \\\"name fidelity\\\") class LineItem: def __init__(self, product, quantity, price): self.product = product self.quantity = quantity self.price = price def total(self): return self.price * self.quantity class Order: def __init__(self, customer, cart, promotion=None): self.customer = customer self.cart = cart self.promotion = promotion def total(self): if not hasattr(self, \\\"__total\\\"): # 优点：这样只用计算一次 self.__total = sum(item.total() for item in self.cart) return self.__total def due(self): if self.promotion is None: discount = 0 else: discount = self.promotion(self) return self.total() - discount def __repr__(self): fmt = \\\"<Order total: {:.2f} due: {:.2f}>\\\" return fmt.format(self.total(), self.due()) def fidelity_promo(order): \\\"\\\"\\\" 为积分为1000或以上的顾客提供5%折扣 \\\"\\\"\\\" return order.total() * .05 if order.customer.fidelity >= 1000 else 0 def bulk_item_promo(order): \\\"\\\"\\\" 单个商品为20个或以上时提供10%折扣 \\\"\\\"\\\" discount = 0 for item in order.cart: if item.quantity >= 20: discount += item.total() * .1 return discount def large_order_promo(order): \\\"\\\"\\\" 订单中不同商品达到10个或以上时提供7%折扣 \\\"\\\"\\\" distinct_items = {item.product for item in order.cart} if len(distinct_items) >= 10: return order.total() * .07 return 0 # promos = [fidelity_promo, bulk_item_promo, large_order_promo] # promos = [globals()[name] for name in globals() if name.endswith(\\\"_promo\\\")] promos = [func for name, func in inspect.getmembers(promotions, inspect.isfunction)] def best_promo(order): \\\"\\\"\\\" 选择可用的最佳折扣 \\\"\\\"\\\" return max(promo(order) for promo in promos) if __name__ == '__main__': joe = Customer('John Doe', 0) ann = Customer(\\\"Ann Smith\\\", 1100) cart = [LineItem(\\\"banana\\\", 4, .5), LineItem(\\\"apple\\\", 10, 1.5), LineItem(\\\"watermellon\\\", 5, 5.0)] print(Order(joe, cart, fidelity_promo)) print(Order(ann, cart, fidelity_promo)) banana_cart = [LineItem(\\\"banana\\\", 30, .5), LineItem(\\\"apple\\\", 10, 1.5)] print(Order(joe, banana_cart, bulk_item_promo)) long_cart = [LineItem(str(item_code), 1, 1.0) for item_code in range(10)] print(Order(joe, long_cart, large_order_promo)) print(Order(joe, cart, large_order_promo)) print(Order(joe, long_cart, best_promo)) print(Order(joe, banana_cart, best_promo)) print(Order(ann, cart, best_promo)) \",\"同时我在工作中也会这么使用。即通过将算法或行为封装起来，使得它们可以在运行时根据需要选择和替换。然而，这段代码更接近于一个简单的查找表或者说是基于函数的一等公民特性实现的轻量级策略模式，我觉得他也体现了策略模式的思路。即在这个例子中，Python 的一等函数特性被用来直接将函数作为策略对象，从而避免了为每个新策略创建额外的类所带来的复杂性。这种方式简化了代码结构，并且更加符合 Pythonic 的风格。\",\"def handle_week(): print('处理一周数据') def handle_day(): print('处理一天数据') def handle_month(): print('处理一月数据') handlers = { 'week': handle_week, 'day': handle_day, 'month': handle_month } \",\"在传统的面向对象编程中，策略模式通常涉及定义一个接口（或抽象基类），然后创建多个实现了该接口的具体策略类。每个具体策略类都提供了一种特定的行为实现。\",\"但是《流畅的python》一书中还探讨了如何利用Python的一等函数特性来进一步简化策略模式。由于Python中的函数是一等公民，可以像其他任何值一样被传递、赋值或作为参数传递给其他函数，因此可以直接用函数来代替类来实现具体策略。\"]},\"777\":{\"c\":[\"python\"]},\"778\":{\"c\":[\"策略模式\",\"设计模式\"]},\"779\":{\"h\":\"3、单例模式\"},\"780\":{\"h\":\"一、定义\",\"t\":[\"单例模式（Singleton Pattern）是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。当时我在学习这个模式时老师讲到一个经典的例子就是购物车，每个人可能会有多个商品但是只可以有一个购物车。\"]},\"781\":{\"h\":\"二、实现方式\",\"t\":[\"在Python中实现单例模式有多种方法，每种方法都有其特点和适用场景。\"]},\"782\":{\"h\":\"1、使用模块\",\"t\":[\"Python 的模块本身就是天然的单例模式。当第一次导入模块时，Python 解释器会执行模块中的代码并将其加载到内存中；之后再次导入该模块时，解释器只会返回已经加载好的模块对象，而不会重新执行模块代码\",\"。例如，可以创建一个名为 mysingleton.py 的文件，其中定义了 Singleton 类，并在文件末尾实例化了一个 Singleton 对象。然后，在其他地方只需要导入此对象即可使用。\",\"# mysingleton.py class Singleton: def foo(self): pass singleton = Singleton() \"]},\"783\":{\"h\":\"2、使用装饰器\",\"t\":[\"通过装饰器也可以很容易地实现单例模式。装饰器可以在类定义之前应用，从而控制类的行为。下面的例子展示了如何用函数装饰器实现单例模式：\",\"def Singleton(cls): _instance = {} def _singleton(*args, **kargs): if cls not in _instance: _instance[cls] = cls(*args, **kargs) return _instance[cls] return _singleton @Singleton class A(object): a = 1 def __init__(self, x=0): self.x = x a1 = A(2) a2 = A(3) \"]},\"784\":{\"h\":\"3、使用__new__方法\",\"t\":[\"在 Python 中，可以通过重写类的 __new__ 方法来实现单例模式。__new__ 是一个特殊的方法，它负责创建新的实例。因此，我们可以在 __new__ 方法中加入判断逻辑，以确保只创建一次实例。\",\"简单模式\",\"class SimpleSingle: \\\"\\\"\\\"简单模式\\\"\\\"\\\" __instance = None def __new__(cls, *args, **kwargs): if cls.__instance is None: cls.__instance = object.__new__(cls, *args, **kwargs) return cls.__instance \",\"这种方法的一个潜在问题是在线程环境中可能会出现问题，因为多个线程可能同时进入 __new__ 方法并尝试创建新实例。为了解决这个问题，可以在 __new__ 方法内部添加锁机制来保证线程安全性。\",\"线程安全模式\",\"import threading class Singleton: \\\"\\\"\\\" 线程安全模式 \\\"\\\"\\\" _instance_lock = threading.Lock() def __new__(cls, *args, **kwargs): if not hasattr(Singleton, \\\"__instance\\\"): with Singleton._instance_lock: Singleton._instance_lock = object.__new__(cls) return Singleton._instance_lock \"]},\"785\":{\"c\":[\"python\"]},\"786\":{\"c\":[\"单例模式\",\"设计模式\"]},\"787\":{\"h\":\"4、工厂模式\"},\"788\":{\"h\":\"一、模式定义\",\"t\":[\"工厂模式（Factory Pattern）是软件工程中一种创建型设计模式，它提供了一种创建对象的最佳方式，通过定义一个用于创建对象的接口，但让子类决定实例化哪一个类。工厂模式使得一个类的实例化延迟到其子类进行。在Python中，工厂模式可以通过多种方式实现，包括简单工厂模式、工厂方法模式和抽象工厂模式。\"]},\"789\":{\"h\":\"二、实现方式\"},\"790\":{\"h\":\"1、简单工厂模式\",\"t\":[\"简单工厂模式是最基础的形式，它使用单一的工厂类来封装对象创建的过程，并根据输入参数返回不同类型的对象。这种方式的优点在于易于理解和实现，但它有一个明显的缺点：当需要添加新产品时，必须修改工厂类以支持新的产品类型，这违反了面向对象设计中的开闭原则（Open/Closed Principle）。例如：\",\"class SimpleFactory(object): @staticmethod def publish_book(name): if name == 'technical': return TechnicalBooks() elif name == 'literary': return LiteraryBooks() \",\"在这个例子中，SimpleFactory 类负责选择并创建适当的书籍对象。然而，如果想要增加一种新的书籍类型，则需要修改 publish_book 方法。\"]},\"791\":{\"h\":\"2、工厂方法模式\",\"t\":[\"为了解决简单工厂模式的问题，工厂方法模式引入了一个抽象的工厂基类，并让具体的工厂子类实现具体的对象创建逻辑。这样做的好处是在不改变现有代码的情况下可以轻松地扩展新类型的产品。例如：\",\"from abc import ABC, abstractmethod class AbstractFactory(ABC): @abstractmethod def publish_book(self): pass class TechnicalFactory(AbstractFactory): def publish_book(self): return TechnicalBooks() class LiteraryFactory(AbstractFactory): def publish_book(self): return LiteraryBooks() \",\"这里，AbstractFactory 定义了一个抽象方法 publish_book()，而具体的工厂如 TechnicalFactory 和 LiteraryFactory 则实现了这个方法，各自负责创建特定类型的书籍对象。\"]},\"792\":{\"h\":\"3、抽象工厂模式\",\"t\":[\"抽象工厂模式进一步扩展了工厂方法模式的概念，它不仅能够创建一系列相关或相互依赖的对象，而且这些对象还可以组合成不同的家族或系列。这意味着同一个工厂可以生产多个不同类型的产品，而不需要为每种产品都创建一个新的工厂类。例如，在处理不同品牌的自行车时，我们可以有一个抽象工厂来同时生产车架和轮胎。\",\"class AbstractBikeFactory(ABC): @abstractmethod def create_frame(self): pass @abstractmethod def create_wheel(self): pass class FlyingPigeonFactory(AbstractBikeFactory): def create_frame(self): return FlyingPigeonFrame() def create_wheel(self): return FlyingPigeonWheel() class ForeverFactory(AbstractBikeFactory): def create_frame(self): return ForeverFrame() def create_wheel(self): return ForeverWheel() \",\"在这个示例中，AbstractBikeFactory 是一个抽象工厂，它有两个抽象方法分别用来创建车架和轮胎。具体的品牌工厂如 FlyingPigeonFactory 和 ForeverFactory 实现了这两个方法，从而可以创建相应品牌下的所有组件。\"]},\"793\":{\"h\":\"三、应用场景\",\"t\":[\"简单工厂模式适合于那些需求明确且不太可能频繁变化的系统。如果未来可能会有更多种类的产品加入，那么应该考虑使用更灵活的设计。\",\"工厂方法模式适用于系统中存在大量相似的对象，并且希望能够在不修改原有代码的基础上轻松添加新的对象类型。\",\"抽象工厂模式则非常适合那些需要创建一组相关联的对象的情况，尤其是在各个对象之间存在着复杂的依赖关系时。\"]},\"794\":{\"c\":[\"python\"]},\"795\":{\"c\":[\"工厂模式\",\"设计模式\"]},\"796\":{\"h\":\"5、适配器模式\"},\"797\":{\"h\":\"一、定义\",\"t\":[\"适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。它通过引入一个中间件——适配器，将一个类的接口转换成客户期望的另一个接口，从而使原本因接口不兼容而不能一起工作的类能够协同工作。适配器模式的核心思想在于创建一个新的类或对象，作为现有类和目标接口之间的桥梁，使得它们可以相互协作。\",\"在python的pandas是大名鼎鼎的数据处理模块，提供了强大的数据结构如 Series和 DataFrame，同时支持excel,csv等数据格式的相互转换，明确地以“适配器模式”的名义实现其功能，然而，在某些方面，Pandas确实体现了适配器模式的核心思想——即通过某种机制使不同的接口或数据源能够协同工作。\",\"数据类型转换：Pandas可以读取多种不同格式的数据文件（CSV、Excel、SQL数据库等），并将这些数据统一为 DataFrame对象进行处理。\",\"与NumPy的集成：Pandas是基于NumPy构建的，但又扩展了NumPy的功能，允许处理更复杂的数据类型（如字符串、时间序列等）。在这种意义上，Pandas也起到了适配器的作用，因为它让原本只适用于数值数组的NumPy工具能够处理更加多样化和结构化的表格型数据。\"]},\"798\":{\"h\":\"二、解决的问题\",\"t\":[\"适配器模式主要解决了以下几种情况下的问题：\",\"系统需要使用现有的类，但此类不符合系统的需要。\",\"想要建立一个可重复使用的类，用于与一些彼此间没有太多关联的类合作。\",\"需要统一输出接口，但是输出类型不可预知。\"]},\"799\":{\"h\":\"三、适配器模式结构\",\"t\":[\"客户端 （Client） 是包含当前程序业务逻辑的类。\",\"客户端接口 （Client Interface） 描述了其他类与客户端代码合作时必须遵循的协议。\",\"服务 （Service） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。\",\"适配器 （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时封装了服务对象。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。\",\"class Target: def request(self) -> str: return \\\"Target: The default target's behavior.\\\" class Adaptee: def specific_request(self) -> str: return \\\".eetpadA eht fo roivaheb laicepS\\\" class Adapter(Target, Adaptee): def request(self) -> str: return f\\\"Adapter: (TRANSLATED) {self.specific_request()[::-1]}\\\" def client_code(target: \\\"Target\\\") -> None: print(target.request(), end=\\\"\\\") if __name__ == \\\"__main__\\\": print(\\\"Client: I can work just fine with the Target objects:\\\") target = Target() client_code(target) print(\\\"\\\\n\\\") adaptee = Adaptee() print(\\\"Client: The Adaptee class has a weird interface. \\\" \\\"See, I don't understand it:\\\") print(f\\\"Adaptee: {adaptee.specific_request()}\\\", end=\\\"\\\\n\\\\n\\\") print(\\\"Client: But I can work with it via the Adapter:\\\") adapter = Adapter() client_code(adapter) \"]},\"800\":{\"h\":\"四、和其他模式的关系\",\"t\":[\"桥接模式通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， 适配器模式通常在已有程序中使用， 让相互不兼容的类能很好地合作。\",\"适配器可以对已有对象的接口进行修改， 装饰模式则能在不改变对象接口的前提下强化对象功能。 此外， 装饰还支持递归组合， 适配器则无法实现。\",\"适配器能为被封装对象提供不同的接口， 代理模式能为对象提供相同的接口， 装饰则能为对象提供加强的接口。\"]},\"801\":{\"c\":[\"python\"]},\"802\":{\"c\":[\"适配器模式\",\"设计模式\"]},\"803\":{\"h\":\"6、责任链模式\"},\"804\":{\"h\":\"一、定义\",\"t\":[\"责任链模式是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。这种模式特别适用于那些需要通过多个步骤来处理请求的情况，并且这些步骤可以动态地添加、移除或重新排序。\",\"在某些系统中，可能存在一系列连续的检查或者处理步骤，例如在线订购系统的权限验证、数据清理、IP地址过滤以及缓存检查等。随着新功能的不断加入，代码可能会变得越来越复杂和难以维护。责任链模式提供了一种解决方案，它可以将这些处理步骤抽象为独立的对象，并将它们连接成一条链，从而简化了代码结构并提高了其可读性和可维护性。\"]},\"805\":{\"h\":\"二、责任链模式结构\",\"t\":[\"处理者 （Handler） 声明了所有具体处理者的通用接口。 该接口通常仅包含单个方法用于请求处理， 但有时其还会包含一个设置链上下个处理者的方法。\",\"基础处理者 （Base Handler） 是一个可选的类， 你可以将所有处理者共用的样本代码放置在其中。\",\"通常情况下， 该类中定义了一个保存对于下个处理者引用的成员变量。 客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。 该类还可以实现默认的处理行为： 确定下个处理者存在后再将请求传递给它。\",\"具体处理者 （Concrete Handlers） 包含处理请求的实际代码。 每个处理者接收到请求后， 都必须决定是否进行处理， 以及是否沿着链传递请求。\"]},\"806\":{\"h\":\"三、实现方式\",\"t\":[\"**方式一：**其中第一种方式是在设计模式这本书中学习的，这种模式是先指定具体的处理者。例如处理数据（pandas）先fillna->sum->count,类似于pandas中的pipeline。\",\"from __future__ import annotations from abc import ABC, abstractmethod from typing import Any, Optional class Handler(ABC): @abstractmethod def set_next(self, handler: Handler) -> Handler: pass @abstractmethod def handle(self, request) -> Optional[str]: pass class AbstractHandler(Handler): _next_handler: Handler = None def set_next(self, handler: Handler) -> Handler: self._next_handler = handler return handler @abstractmethod def handle(self, request: Any): if self._next_handler: return self._next_handler.handle(request) return None class MonkeyHandler(AbstractHandler): def handle(self, request: Any) -> str: if request == \\\"Banana\\\": return f\\\"Monkey: I'll eat the {request}\\\" else: return super().handle(request) class SquirrelHandler(AbstractHandler): def handle(self, request: Any) -> str: if request == \\\"Nut\\\": return f\\\"Squirrel: I'll eat the {request}\\\" else: return super().handle(request) class DogHandler(AbstractHandler): def handle(self, request: Any) -> str: if request == \\\"MeatBall\\\": return f\\\"Dog: I'll eat the {request}\\\" else: return super().handle(request) def client_code(handler: Handler) -> None: for food in [\\\"Nut\\\", \\\"Banana\\\", \\\"Cup of coffee\\\"]: print(f\\\"\\\\nClient: Who wants a {food}?\\\") result = handler.handle(food) if result: print(f\\\" {result}\\\", end=\\\"\\\") else: print(f\\\" {food} was left untouched.\\\", end=\\\"\\\") \",\"方式二，这种方式是在B站中学习的，它是已经确定了责任链的next，但是个人感觉缺少了代码的灵活性，适合比较固定模式的方式。\",\"from abc import ABC, abstractmethod class AskLeave(ABC): @abstractmethod def furlough(self, day): pass class PL(AskLeave): def furlough(self, day): if day <= 1: print('准假') else: PM().furlough(day) class PM(AskLeave): def furlough(self, day): if day <= 3: print('准假') else: Manger().furlough(day) class Manger(AskLeave): def furlough(self, day): if day <= 10: print('准假') else: print('离职吧') \"]},\"807\":{\"h\":\"四、优缺点\"},\"808\":{\"h\":\"优点\",\"t\":[\"**解耦：**降低了请求发送者与接收者之间的耦合度，使两者不必直接相互依赖。\",\"**灵活性：**可以方便地添加或删除处理者，甚至改变它们的顺序，而无需修改其他部分的代码。\",\"**可扩展性：**支持轻松地引入新的处理逻辑，符合开闭原则。\"]},\"809\":{\"h\":\"缺点\",\"t\":[\"当然，责任链模式也有一些潜在的缺点：\",\"如果责任链太长或处理时间过长，可能会影响性能。\",\"当责任链未正确配置时，存在请求未被任何处理器处理的风险。\",\"对于较长的责任链，调试可能会变得较为困难。\"]},\"810\":{\"c\":[\"python\"]},\"811\":{\"c\":[\"责任链模式\",\"设计模式\"]},\"812\":{\"h\":\"1、高并发架构\"},\"813\":{\"h\":\"一、系统级别并发——多大的并发对于系统会有影响（接口）\",\"t\":[\"最大并发访问量，数据的吞吐量\",\"一台机器需要可以接受的最大访问量是多少\",\"cpu，内存这里指的是一台机器能够达到多大的并发量，机器的cpu,内存会有影响，所以出现一个概念叫负载均衡\",\"异步任务——接口的处理速度\"]},\"814\":{\"h\":\"二、数据级别的高并发——对于数据库的影响\",\"t\":[\"数据库对于高并发的结构下需要的承受多大的压力，需不需要分库分表，读写分离\",\"接口请求速度——缓存\"]},\"815\":{\"h\":\"三、对于框架——高并发的选择的框架\",\"t\":[\"选择适合高并发的框架\",\"负载均衡所以出现了分布式\",\"分布式数据的一致性\",\"分布式的锁\",\"分布式数据库的读写\"]},\"816\":{\"h\":\"四、高并发就代表着数据量大\",\"t\":[\"redis数据库的使用\"]},\"817\":{\"h\":\"五、网络安全\"},\"818\":{\"h\":\"六、静态资源——动静分离\"},\"819\":{\"c\":[\"python\"]},\"820\":{\"c\":[\"架构\",\"高并发\"]},\"821\":{\"h\":\"2、flask序列化\"},\"822\":{\"h\":\"一、为什么需要序列化\",\"t\":[\"序列化常见的使用场景是web，比如一个接口需要返回一个对象，这个对象不可以被flask的jsonify函数所序列化\",\"@api.route('', methods=[\\\"GET\\\"]) @auth.login_required def get_user(): uid = g.user.uid user = User.query.filter_by(id=uid).first_or_404_for_api() return jsonify(user) \"]},\"823\":{\"h\":\"二、问题为什么对象不可以直接被序列化\"},\"824\":{\"h\":\"2.1、可以被 json 直接序列化的为 dict 类型，python对象如何转为 dict ？\",\"t\":[\"类中需要有两个方法keys, __getitem__\",\"class Person(object): name = \\\"blue\\\" age = 18 def __init__(self, gender): self.gender = gender def keys(self): return (\\\"name\\\", \\\"age\\\", \\\"gender\\\") def __getitem__(self, item): return getattr(self, item) \",\"测试结果\",\"person = Person(\\\"name\\\") print(dict(person)) # {'name': 'blue', 'age': 18, 'gender': '男'} \",\"dict方法可以自定义字典的key, 它是读取class中的keys方法的返回值，作为字典的key\",\"class Person(object): name = \\\"blue\\\" age = 18 def __init__(self, gender): self.gender = gender def keys(self): return (\\\"name\\\", \\\"age\\\") def __getitem__(self, item): return getattr(self, item) person = Person(\\\"name\\\") print(dict(person)) # {'name': 'blue', 'age': 18} \"]},\"825\":{\"h\":\"2.2、对象的 __dict__ 有什么用？\",\"t\":[\"class的__dict__方法是可以将对象中的实例属性返回，不返回类的类属性\",\"class Person(object): name = \\\"blue\\\" age = 18 def __init__(self, gender): self.gender = gender def keys(self): return (\\\"name\\\", \\\"age\\\", \\\"gender\\\") def __getitem__(self, item): return getattr(self, item) person = Person(\\\"男\\\") print(person.__dict__) # {'gender': '男'} \"]},\"826\":{\"h\":\"三、自定义flask的序列化\"},\"827\":{\"h\":\"一、指定flask的 JSONEncoder ，重写 JSONEncoder 的default方法\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : __init__.py.py # Time ：2022-05-03 10:42 # Author ：author name # version ：python 3.7-32bit # Description： \\\"\\\"\\\" import dataclasses import decimal import typing as t import uuid from datetime import date from flask import Flask as _Flask from flask.json import JSONEncoder as _JSONEncoder from werkzeug.http import http_date from app.libs.api_exceptions.api_exception import APIException class JSONEncoder(_JSONEncoder): def default(self, o: t.Any) -> t.Any: if isinstance(o, date): return http_date(o) if isinstance(o, (decimal.Decimal, uuid.UUID)): return str(o) if dataclasses and dataclasses.is_dataclass(o): return dataclasses.asdict(o) if hasattr(o, \\\"__html__\\\"): return str(o.__html__()) if hasattr(o, 'keys') and hasattr(o, '__getitem__'): return dict(o) raise APIException(\\\"serialize error\\\") # 后续使用这个Flask进行实例化 class Flask(_Flask): json_encoder = JSONEncoder \"]},\"828\":{\"h\":\"二、修改模型类\",\"t\":[\"模型类中必须要有这两个方法keys, __getitem__，__getitem__方法可以写在Base类中\",\"class User(Base): id = Column(Integer, primary_key=True) email = Column(String(24), unique=True, nullable=False) nickname = Column(String(24), unique=True) auth = Column(SmallInteger, default=1) _password = Column('password', String(128)) def keys(self): return [\\\"id\\\", \\\"email\\\", \\\"nickname\\\", \\\"auth\\\"] def __getitem__(self, key): return getattr(self, key) \"]},\"829\":{\"c\":[\"python\",\"flask\"]},\"830\":{\"c\":[\"序列化\"]},\"831\":{\"h\":\"3、flask装饰器\",\"t\":[\"为什么flask关系到装饰器\",\"@api.route('', methods=[\\\"GET\\\"]) @auth.login_required def get_user(): uid = g.user.uid user = User.query.filter_by(id=uid).first_or_404_for_api() return jsonify(user) \",\"定义：装饰器可以在不改变原有代码的基础上，引用源代码的变量和返回值从而可以改变源代码的行为。\"]},\"832\":{\"h\":\"一、简单示例\",\"t\":[\"import time def time_use(func): def wrapper(): start = time.time() res = func() end = time.time() print(f'执行用时::{end - start}') return res return wrapper @time_use def test(): for i in range(100000000): pass test() \"]},\"833\":{\"h\":\"二、带有参数\",\"t\":[\"import time from functools import wraps def retry(count=3, sleep=1): def wrapper(func): @wraps def inner(*args, **kwargs): res = None for i in range(count): try: res = func(*args, **kwargs) except Exception as e: print(f'函数执行出错::{e}') time.sleep(sleep) continue return res return inner return wrapper \"]},\"834\":{\"h\":\"三、基于类的装饰器\",\"t\":[\"import time class Decorator(object): def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): t1 = time.time() res = self.func(*args, **kwargs) t2 = time.time() print(\\\"函数执行时长:\\\"+ str(t2 - t1)) @Decorator def test(): time.sleep(1.5) test() \"]},\"835\":{\"h\":\"四、使用装饰器实现缓存\"},\"836\":{\"h\":\"1. 缓存算法\",\"t\":[\"经典的缓存算法有3个：\",\"FIFO算法\",\"LFU算法\",\"LRU算法\"]},\"837\":{\"h\":\"1.1 FIFO算法\",\"t\":[\"FIFO（First in First out），先进先出， 该算法的核心原则是： 如果一个数据最先进入缓存中，则应该最早淘汰掉，当缓存容量满了以后，应当将最早被缓存的数据淘汰掉。FIFO算法是一种比较简单的算法，使用队列就可以轻易的实现。\"]},\"838\":{\"h\":\"1.2 LFU 算法\",\"t\":[\"LFU（Least Frequently Used）最近最少使用算法， 这个算法的核心在于：如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小。\"]},\"839\":{\"h\":\"1.3 LRU 算法\",\"t\":[\"LRU (Least Recently Used)， 最近最久未使用算法，该算法的核心原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小\",\"LFU算法和LRU算法乍看起来是一个意思，但其实很不同，LRU的淘汰规则是基于访问时间，而LFU是基于访问次数的。\",\"一个缓存的数据，一段时间内被命中很多次，这个数据在LFU算法里会被保留，但在LRU算法里则可能被淘汰，虽然这段时间内，比如2分钟内被命中了很多次，可是，这些事情都发生在1分50秒之前的10秒钟里，自那以后就再也没有被命中，LRU算法则可能会将其淘汰。\",\"from inspect import signature def fifo_cache(maxsize=128): cache = dict() cache_list = list() def wrapper(func): sig = signature(func) def inner(*args, **kwargs): bound_values = sig.bind(*args, **kwargs) key = bound_values.__str__() value = cache.get(key) if value: print('命中缓存') return value if len(cache_list) >= maxsize: old_key = cache_list.pop() if old_key in cache: cache.pop(old_key) result = func(*args, **kwargs) cache_list.append(key) cache.setdefault(key, result) return result return inner return wrapper @fifo_cache() def test1(x, y): return x + y @fifo_cache() def test2(x, y, z=20): return x + y + z @fifo_cache() def test3(*args, **kwargs): return 5 print(test1(19, 20)) print(test2(19, 20, 20)) print(test2(19, 20)) # 不会命中缓存 print(test3(4, 2, x=6, y=9)) print(test1(19, 20)) \"]},\"840\":{\"c\":[\"python\",\"flask\"]},\"841\":{\"c\":[\"装饰器\"]},\"842\":{\"h\":\"4、flask with上下文\"},\"843\":{\"h\":\"一、问题引入\",\"t\":[\"例子，如果你想在flask中直接使用db,你会得到一个经典错误\",\"from app.models.base import db from app.models.user import User with db.auto_commit(): user = User() user.nickname = \\\"super\\\" user.password = \\\"123456\\\" user.email = \\\"super@qq.com\\\" user.auth = 2 db.session.add(user) #RuntimeError: No application found. Either work inside a view function or push an application context. \"]},\"844\":{\"h\":\"二、源码分析\",\"t\":[\"class AppContext(object): \\\"\\\"\\\"The application context binds an application object implicitly to the current thread or greenlet, similar to how the :class:`RequestContext` binds request information. The application context is also implicitly created if a request context is created but the application is not on top of the individual application context. \\\"\\\"\\\" def __init__(self, app): self.app = app self.url_adapter = app.create_url_adapter(None) self.g = app.app_ctx_globals_class() # Like request context, app contexts can be pushed multiple times # but there a basic \\\"refcount\\\" is enough to track them. self._refcnt = 0 def push(self): \\\"\\\"\\\"Binds the app context to the current context.\\\"\\\"\\\" self._refcnt += 1 if hasattr(sys, \\\"exc_clear\\\"): sys.exc_clear() _app_ctx_stack.push(self) appcontext_pushed.send(self.app) def pop(self, exc=_sentinel): \\\"\\\"\\\"Pops the app context.\\\"\\\"\\\" try: self._refcnt -= 1 if self._refcnt <= 0: if exc is _sentinel: exc = sys.exc_info()[1] self.app.do_teardown_appcontext(exc) finally: rv = _app_ctx_stack.pop() assert rv is self, \\\"Popped wrong app context. (%r instead of %r)\\\" % (rv, self) appcontext_popped.send(self.app) def __enter__(self): self.push() return self def __exit__(self, exc_type, exc_value, tb): self.pop(exc_value) if BROKEN_PYPY_CTXMGR_EXIT and exc_type is not None: reraise(exc_type, exc_value, tb) \",\"AppContext原来是个上下文。\"]},\"845\":{\"h\":\"1、什么是with 上下文语句\",\"t\":[\"with 语句用于管理上下文语句，可以使用with作为上下文管理器\",\"上下文，相当于现实生活中的上下文语义，在python中脱离了上下文环境所声明的类，属性可能会失效\"]},\"846\":{\"h\":\"2、什么情况下会声明上下文\",\"t\":[\"在我们需要操作资源的时候，可以使用上下文语句，来操作资源的连接和关闭，专注于业务代码的实现\",\"经典的例子就是操作文件时使用的\",\"with open(\\\"demo.txt\\\") as f: f.read() \"]},\"847\":{\"h\":\"三、我们如何声明一个上下文管理器\",\"t\":[\"声明一个类，类中实现了__enter__, __exit__方法的就是一个上下文管理器\",\"例子\",\"class MyResource: def __enter__(self): print(\\\"begin connect resource\\\") return self def __exit__(self, exc_type, exc_value, tb): print(\\\"close connection\\\") def query(self): print(\\\"begin execute resource\\\") with MyResource() as resource: resource.query() \",\"打印结果\",\"begin connect resource begin execute resource close connection \",\"问题一、这个as 后面的到底是什么 在当前上下文环境中它是__enter__方法中返回的值，当脱离了这个上下文环境就是None\",\"问题二、 __exit__中参数 exc_type, exc_value, tb是代表着什么 当上下文中的代码正常执行的时候这些参数都是None没有任何意义，当上下文代码中出现异常时，这里的参数就代表这异常信息\",\"class MyResource: def __enter__(self): print(\\\"begin connect resource\\\") return self def __exit__(self, exc_type, exc_value, tb): print(f\\\"exc_type=={exc_type}\\\") print(f\\\"exc_value=={exc_value}\\\") print(f\\\"tb=={tb}\\\") print(\\\"close connection\\\") def query(self): print(\\\"begin execute resource\\\") with MyResource() as resource: resource.query() # 结果 # begin connect resource # exc_type==<class 'ZeroDivisionError'> # exc_value==division by zero # tb==<traceback object at 0x018DEA80> # close connection \"]},\"848\":{\"h\":\"问题三、 __exit__ 是否有返回值\",\"t\":[\"__exit__可以有返回值，返回值只可以为True和False两种，True代表着出现异常，会在上下文中进行处理，不会返回出结果，False代表着出现异常会将错误信息返回出来可以被try except所捕获，默认没有返回值就是返回None,也就是False\",\"try: with MyResource() as resource: 1/0 resource.query() except Exception as e: print(f\\\"error==={e}\\\") # 没有返回值->False begin connect resource exc_type==<class 'ZeroDivisionError'> exc_value==division by zero tb==<traceback object at 0x0152FA58> close connection error===division by zero # 有返回值 ->True begin connect resource exc_type==<class 'ZeroDivisionError'> exc_value==division by zero tb==<traceback object at 0x01B1EAD0> close connection \"]},\"849\":{\"h\":\"四、使用其他方法声明一个上下文管理器\",\"t\":[\"from contextlib import contextmanager @contextmanager def file_open(path): f = None try: f = open(path, \\\"w\\\") yield f except OSError: print(\\\"We had an error!\\\") finally: print(\\\"Closing file\\\") f.close() if __name__ == \\\"__main__\\\": with file_open(\\\"test.txt\\\") as f: f.write(\\\"Testing context managers\\\") \",\"也可以在类中进行使用，具体请参考官网\",\"参考案例\",\"base.py from datetime import datetime from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery from sqlalchemy import Column, Integer, SmallInteger from contextlib import contextmanager from app.libs.api_exceptions.exceptions import NotFundException class SQLAlchemy(_SQLAlchemy): @contextmanager def auto_commit(self): try: yield self.session.commit() except Exception as e: db.session.rollback() raise e class Query(BaseQuery): def filter_by(self, **kwargs): if 'status' not in kwargs.keys(): kwargs['status'] = 1 return super(Query, self).filter_by(**kwargs) def get_or_404_for_api(self, ident, description=None): rv = self.get(ident) if rv is None: raise NotFundException() return rv def first_or_404_for_api(self, description=None): rv = self.first() if rv is None: raise NotFundException() return rv db = SQLAlchemy(query_class=Query) class Base(db.Model): __abstract__ = True create_time = Column(Integer) status = Column(SmallInteger, default=1) def __init__(self): self.create_time = int(datetime.now().timestamp()) @property def create_datetime(self): if self.create_time: return datetime.fromtimestamp(self.create_time) else: return None def set_attrs(self, attrs_dict): for key, value in attrs_dict.items(): if hasattr(self, key) and key != 'id': setattr(self, key, value) def delete(self): self.status = 0 def __getitem__(self, key): return getattr(self, key) \",\"user_view.py @api.route('', methods=[\\\"DELETE\\\"]) @auth.login_required def delete_user(): uid = g.user.uid with db.auto_commit(): user = User.query.filter_by(id=uid).first_or_404_for_api() user.delete() return DeleteSuccess() \"]},\"850\":{\"c\":[\"python\",\"flask\"]},\"851\":{\"c\":[\"jwt\",\"with上下文\"]},\"852\":{\"h\":\"5、flask中的线程隔离\"},\"853\":{\"h\":\"一、问题：flask中会接收多个请求，那他们不会搞混吗？\",\"t\":[\"Flask内部，通过维护一个dict来实现线程隔离。伪代码如下 request={thread_key1:Request1,thread_key2:Request2} 其中thread_key是线程的唯一id号，Request就是每次请求的Request对象\",\"Flask内部引入了一个werkzeug的库，这个库里有一个local模块，里面有一个Local对象，Flask内部线程隔离就是通过操作Local对象实现的。\"]},\"854\":{\"h\":\"二、Local对象\",\"t\":[\"Local对象实际上就是对字典原理的一个封装\",\"class Local(object):slots = ('storage', 'ident_func')\",\"def __init__(self): # 一个私有变量__storage__字典 object.__setattr__(self, '__storage__', {}) object.__setattr__(self, '__ident_func__', get_ident) def __iter__(self): return iter(self.__storage__.items()) def __call__(self, proxy): \\\"\\\"\\\"Create a proxy for a name.\\\"\\\"\\\" return LocalProxy(self, proxy) def __release_local__(self): self.__storage__.pop(self.__ident_func__(), None) def __getattr__(self, name): try: return self.__storage__[self.__ident_func__()][name] except KeyError: raise AttributeError(name) def __setattr__(self, name, value): # 取当前线程的线程ID号 ident = self.__ident_func__() storage = self.__storage__ # 操作字典 try: storage[ident][name] = value except KeyError: # 把线程id号作为key保存了起来 storage[ident] = {name: value} def __delattr__(self, name): try: del self.__storage__[self.__ident_func__()][name] except KeyError: raise AttributeError(name) \"]},\"855\":{\"h\":\"三、使用线程隔离和不适用线程隔离的区别\",\"t\":[\"定义一个对象，启动一个线程去修改这个对象，使用主线程打印这个对象\",\"import threading import time class A: b = 1 my_obj = A() def worker(): my_obj.b = 2 new_thread = threading.Thread(target=worker, name=\\\"new_thread\\\") new_thread.start() time.sleep(1) # 主线程 print(my_obj.b) # 打印结果为2 # 因为my_obj是主线程和新线程共享的对象 \",\"将my_obj实例化改为使用Local线程隔离对象\",\" import threading import time from werkzeug.local import Local class A: b = 1 my_obj = Local() my_obj.b = 1 def worker(): my_obj.b = 2 print(\\\"in new thread b is: \\\", my_obj.b) new_thread = threading.Thread(target=worker, name=\\\"new_thread\\\") new_thread.start() time.sleep(1) print(\\\"in main thread b is:\\\", my_obj.b) # 结果 in new thread b is: 2 in main thread b is: 1 \",\"由于my_obj是一个线程隔离的对象，所以我们在新线程里修改my_obj是不会影响主线程里my_obj中的值的。他们保持了两个线程之间的数据的独立\",\"Local的高明在于，他不需要我们去关心底层Local字典内部的细节，我们之间去操作Local对象的相关属性，这个操作本就是线程隔离的，给我们带来了很大的方便\"]},\"856\":{\"h\":\"四、线程隔离的栈：LocalStack\",\"t\":[\"image.png\",\"接下来来继续讲解之前这张图右下角的部分。 通过Flask的源码，我们可以了解到_app_ctx_stack和_request_ctx_stack实际上是指向了LocalStack()对象，也就是一个线程隔离的栈,下面来看下源码\",\"globals.py\",\"# context locals # 是一个LocalStack对象 _request_ctx_stack = LocalStack() _app_ctx_stack = LocalStack() current_app = LocalProxy(_find_app) request = LocalProxy(partial(_lookup_req_object, 'request')) session = LocalProxy(partial(_lookup_req_object, 'session')) g = LocalProxy(partial(_lookup_app_object, 'g')) \",\"LocalStack源码，依旧在werkzeug库 的local模块下\",\"class LocalStack(object): def __init__(self): # 内部维护了一个Local对象作为私有变量 self._local = Local() def __release_local__(self): self._local.__release_local__() def _get__ident_func__(self): return self._local.__ident_func__ def _set__ident_func__(self, value): object.__setattr__(self._local, '__ident_func__', value) __ident_func__ = property(_get__ident_func__, _set__ident_func__) del _get__ident_func__, _set__ident_func__ def __call__(self): def _lookup(): rv = self.top if rv is None: raise RuntimeError('object unbound') return rv return LocalProxy(_lookup) # 提供了push，pop方法，实际上就是在操作Local中的一个Stack def push(self, obj): \\\"\\\"\\\"Pushes a new item to the stack\\\"\\\"\\\" rv = getattr(self._local, 'stack', None) if rv is None: self._local.stack = rv = [] rv.append(obj) return rv def pop(self): \\\"\\\"\\\"Removes the topmost item from the stack, will return the old value or `None` if the stack was already empty. \\\"\\\"\\\" stack = getattr(self._local, 'stack', None) if stack is None: return None elif len(stack) == 1: release_local(self._local) return stack[-1] else: return stack.pop() @property def top(self): \\\"\\\"\\\"The topmost item on the stack. If the stack is empty, `None` is returned. \\\"\\\"\\\" try: return self._local.stack[-1] except (AttributeError, IndexError): return None \",\"Local,Local Stack,字典的关系 Local使用字典的方式实现了线程隔离 Local Stack封装了Local对象，将其作为自己的一个属性，实现了线程隔离的栈结构\",\"3.LocalStack的基本用法 Local是使用·来直接操作字典中保存的对象。 LocalStack是使用它提供的一些push，pop的栈方法来操作对象\",\"from werkzeug.local import LocalStack s = LocalStack() s.push(1) s.push(2) # top是属性@property,所以不需要加括号调用； # 栈结构先进后出，所以先输出2print(s.top) # top只取栈顶元素，不会讲他从栈中移除，所以这次还是2print(s.top) # pop()是方法，会取出并移除栈顶元素print(s.pop())print(s.top) # 结果2221 \"]},\"857\":{\"c\":[\"python\",\"flask\"]},\"858\":{\"c\":[\"线程隔离\"]},\"859\":{\"h\":\"6、flask restful 基类展示\"},\"860\":{\"h\":\"一、为什么要抽象基类\",\"t\":[\"flask 是作为高度自由的框架，因此 flask 的代码可能会写的比较自由，这种自由可能是带有一定风险的，就是 flask 的代码可复用性并不会很高，对于简单单表的增删查改可以参考我的这种方式可以对于单表的操作变得比较简单。\",\"我在这家工作刚来的时候公司的同事写一个增删改查接口用了将近100行代码，使用这套代码模版后相关代码只有10行内就可以完成一个增删改查的功能。这肯定大大提高了工作效率，我们可以花费更多的精力在更复杂的业务逻辑上。\"]},\"861\":{\"h\":\"二、BaseModel\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : base_model.py # Time ：2023/1/10 22:39 # Author ：Y-aong # version ：python 3.7 # Description：base model \\\"\\\"\\\" from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy from sqlalchemy import Column, SmallInteger from contextlib import contextmanager from conf.config import FlaskConfig from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker def get_filter(table_orm, filter_data: dict): filters = list() for key, item in filter_data.items(): if hasattr(table_orm, key): _filter = getattr(table_orm, key, ) == item filters.append(_filter) return filters def get_session(): db_uri = FlaskConfig.SQLALCHEMY_DATABASE_URI engine = create_engine(db_uri) return sessionmaker(engine)() class SQLAlchemy(_SQLAlchemy): @contextmanager def auto_commit(self): try: yield self.session.commit() except Exception as e: db.session.rollback() raise e db = SQLAlchemy() class Base(db.Model): __abstract__ = True id = Column(db.Integer, primary_key=True, autoincrement=True) active = Column(SmallInteger, default=1) def set_attrs(self, attrs_dict): for key, value in attrs_dict.items(): if hasattr(self, key) and key != 'id': setattr(self, key, value) def delete(self): self.active = 0 def __getitem__(self, key): return getattr(self, key) \"]},\"862\":{\"h\":\"三、base view 基类\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : base_view.py # Time ：2023/3/12 13:10 # Author ：Y-aong # version ：python 3.7 # Description：flask视图基类 \\\"\\\"\\\" from flask import request from flask_restful import Resource from conf.config import FlaskConfig from .api_handle_exception import handle_api_error from .base_model import db from .base_response import generate_response class BaseView(Resource): def __init__(self): self.table_orm = None self.table_schema = None if request.method == 'GET': self.form_data: dict = request.args else: self.form_data: dict = request.json self._filter = list() self.table_id = self.form_data.get('id') self.response_data = dict() self.page = FlaskConfig.PAGE self.pre_page = FlaskConfig.PRE_PAGE def handle_filter(self): if self.table_orm: self._filter.append(self.table_orm.active == 1) for key, value in self.form_data.items(): if hasattr(self.table_orm, key): self._filter.append(getattr(self.table_orm, key) == value) def handle_request_params(self): \\\"\\\"\\\"处理请求参数\\\"\\\"\\\" pass def handle_response_data(self): \\\"\\\"\\\"处理返回值参数\\\"\\\"\\\" pass def response_callback(self): \\\"\\\"\\\"处理response的其他后续操作\\\"\\\"\\\" pass def _get_single(self): \\\"\\\"\\\"单条查询\\\"\\\"\\\" single_data = db.session.query(self.table_orm).filter(*self._filter).first() if single_data: return self.table_schema().dump(single_data) return {} def _get_multi(self): \\\"\\\"\\\"多条查询\\\"\\\"\\\" multi_data = db.session.query(self.table_orm).filter(*self._filter).order_by( self.table_orm.id).paginate(page=self.page, per_page=self.pre_page) items = self.table_schema().dump(multi_data.items, many=True) total = multi_data.total return {'items': items, 'total': total} @handle_api_error def get(self): # 获取全部 self.handle_filter() if not self.form_data or self.form_data.get('pre_page'): data = self._get_multi() else: data = self._get_single() return generate_response(data) @handle_api_error def post(self): self.handle_request_params() form_data = dict() for key, value in self.form_data.items(): if hasattr(self.table_orm, key): form_data.setdefault(key, value) task = self.table_schema().load(form_data) with db.auto_commit(): obj = self.table_orm(**task) db.session.add(obj) self.response_data['table_id'] = obj.id self.table_id = obj.id self.handle_response_data() self.response_callback() return generate_response(message='创建成功', data=self.response_data) @handle_api_error def put(self): self.handle_request_params() obj = db.session.query(self.table_orm).filter(self.table_orm.id == self.table_id).first() form_data = dict() for key, value in self.form_data.items(): if hasattr(self.table_orm, key): form_data.setdefault(key, value) info = self.table_schema().load(form_data) if not obj: raise ValueError(f'根据table_id:{self.table_id}找不到记录') with db.auto_commit(): db.session.query(self.table_orm).filter(self.table_orm.id == self.table_id).update(info) self.response_data['table_id'] = obj.id self.handle_response_data() self.response_callback() return generate_response(message='修改成功', data=self.response_data) @handle_api_error def delete(self): self.handle_request_params() with db.auto_commit(): if hasattr(self.table_orm, 'active'): db.session.query(self.table_orm).filter(self.table_orm.id == self.table_id).update({'active': 0}) else: db.session.query(self.table_orm).filter(self.table_orm.id == self.table_id).delete() self.response_data['table_id'] = self.table_id self.response_callback() return generate_response(message='删除成功', data=self.response_data) \"]},\"863\":{\"h\":\"四、response 基类\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : base_response.py # Time ：2023/3/12 10:44 # Author ：Y-aong # version ：python 3.7 # Description：response基类 \\\"\\\"\\\" from flask import jsonify, abort def generate_response(data=None, code=200, message='success'): \\\"\\\"\\\" 自定义响应 :param code:状态码 :param data:返回数据 :param message:返回消息 :return: \\\"\\\"\\\" success = True if code == 200 else False res = jsonify(dict(code=code, success=success, data=data, message=message)) res.status_code = 200 return res def generate_abort(code=401, success='failure', **kwargs): kwargs.setdefault('success', success) kwargs.setdefault('code', code) return abort(code, kwargs) \"]},\"864\":{\"h\":\"五、基本使用\"},\"865\":{\"h\":\"1、创建模型类\",\"t\":[\"from public.base_model import db, Base class Teacher(Base): __tablename__ = 'test_teacher' name = db.Column(db.String(64), comment='教师名称') sex = db.Column(db.String(64), comment='性别') \"]},\"866\":{\"h\":\"2、创建序列化类\",\"t\":[\"class TeacherSchema(SQLAlchemyAutoSchema): class Meta: model = Teacher \"]},\"867\":{\"h\":\"3、视图类\",\"t\":[\"class TeacherView(BaseView): url = '/teacher' def __init__(self): super(TeacherView, self).__init__() self.table_orm = Teacher self.table_schema = TeacherSchema \",\"这样就完成了 teacher 表的增删查改，是不是比较简单\"]},\"868\":{\"c\":[\"python\",\"flask\"]},\"869\":{\"c\":[\"flask_restful\",\"基类\"]},\"870\":{\"h\":\"7、flask中使用jwt\",\"t\":[\"关于jwt的特点上一篇博客已经有所介绍\",\"这里拿flask举例说明\"]},\"871\":{\"h\":\"一、下载\",\"t\":[\"pip install PyJWT==2.3.0 \"]},\"872\":{\"h\":\"二、使用\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : jwt_token.py # Time ：2022-05-03 23:03 # Author ：author name # version ：python 3.7-32bit # Description： \\\"\\\"\\\" import datetime import typing as t import jwt from dataclasses import dataclass from flask import current_app from jwt import ExpiredSignatureError, DecodeError from app.libs.api_exceptions.exceptions import JWTVerifyException @dataclass class JWTPayload: uid: int auth: str = 'blue' scope: str = 1 ac_type: str = 'email' def generate_payload(uid, auth=None, scope=None, ac_type=\\\"email\\\"): return JWTPayload(uid, auth, scope, ac_type).__dict__ def generate_token(payload: dict, expiry: int, secret=None): _payload = {\\\"exp\\\": datetime.datetime.now() + datetime.timedelta(seconds=expiry)} _payload.update(payload) if not secret: secret = current_app.config[\\\"SECRET_KEY\\\"] return jwt.encode(_payload, secret, algorithm=\\\"HS256\\\") def verify_token(token, secret=None): if not secret: secret = current_app.config[\\\"SECRET_KEY\\\"] try: payload = jwt.decode(token, secret, algorithms=[\\\"HS256\\\"]) except ExpiredSignatureError: raise JWTVerifyException(\\\"当前jwt已经过期了\\\") except DecodeError: raise DecodeError(\\\"jwt decode error\\\") return payload \"]},\"873\":{\"h\":\"三、view登录界面\",\"t\":[\"from flask import request from app.form.validators_client_form import ClientForm from app.libs.enums import ClientTypeEnum from app.libs.jwt_token import generate_payload, generate_token from app.libs.red_print import RedPrint from app.libs.success import Success from app.models.user import User api = RedPrint(\\\"token\\\") @api.route(\\\"/\\\", methods=[\\\"POST\\\"]) def get_token(): data = request.json client_form = ClientForm(data=data) client_form.validate_for_api() promise = { ClientTypeEnum.USER_EMAIL: User.verify, } identity: dict = promise[client_form.type.data]( client_form.account.data, client_form.secret.data) token = _generate_auth_token(identity.get(\\\"uid\\\"), client_form.type.data.value, identity['scope'], expiration=7200) return Success(msg=token) def _generate_auth_token(uid, ac_type, scope=None, expiration=7200): payload = generate_payload(uid=uid, ac_type=ac_type, scope=scope) return generate_token(payload, expiry=expiration) \"]},\"874\":{\"c\":[\"python\",\"flask\"]},\"875\":{\"c\":[\"jwt\"]},\"876\":{\"h\":\"8、marshmallow 外键软删除自定义 Nested\"},\"877\":{\"h\":\"问题一：\",\"t\":[\"你们平时数据库是真删除还是软删除？\",\"一般来讲都会设置软删除，软删除的好处可以保证数据库索引的顺序，避免数据库索引的稀疏性。大量的真实删除会造成数据库的索引稀疏，导致数据库的查询数据变慢。 \"]},\"878\":{\"h\":\"问题二：\",\"t\":[\"你在使用 marshmallow 时带有外键的软删除时怎么处理的？\",\"我在一开始处理时发现，带有外键的软删除在使用 Nested 时会出现一系列的问题，比如，软删除完成了，但是在外键时 Nested 会造成已经软删除的数据还会继续出现。\"]},\"879\":{\"h\":\"一、数据库基类设置\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : base_model.py # Time ：2023/6/25 14:35 # Author ：YangYong # version ：python 3.10 # Description：表基类 \\\"\\\"\\\" from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy from sqlalchemy import Column, SmallInteger from contextlib import contextmanager from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker, scoped_session from sqlalchemy.pool import NullPool from conf.config import FlaskConfig def get_session(): db_uri = FlaskConfig.SQLALCHEMY_DATABASE_URI engine = create_engine( url=db_uri, poolclass=NullPool ) session_factory = sessionmaker(bind=engine) return scoped_session(session_factory) class SQLAlchemy(_SQLAlchemy): @contextmanager def auto_commit(self): try: yield self.session.commit() self.session.flush() except Exception as e: db.session.rollback() raise e db = SQLAlchemy() class Base(db.Model): __abstract__ = True id = db.Column(db.Integer, primary_key=True, autoincrement=True) active = Column(SmallInteger, default=1) def set_attrs(self, attrs_dict): for key, value in attrs_dict.items(): if hasattr(self, key) and key != 'id': setattr(self, key, value) def delete(self): self.active = 0 \",\"使用 active 来进行软删除。\"]},\"880\":{\"h\":\"二、自定义 Nested\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : custom_schema.py # Time ：2023/8/9 18:40 # Author ：YangYong # version ：python 3.10 # Description： \\\"\\\"\\\" import typing from marshmallow.fields import Nested class CustomNested(Nested): def serialize( self, attr: str, obj: typing.Any, accessor: typing.Any = None, **kwargs ) -> typing.Union[dict, list]: result = super(CustomNested, self).serialize(attr, obj, accessor) if isinstance(result, list): result = [item for item in result if item.get('active')] elif isinstance(result, dict) and not result.get('active'): result = {} return result \"]},\"881\":{\"h\":\"三、序列化配置\",\"t\":[\"class ComponentSchema(SQLAlchemyAutoSchema): main_device_id = auto_field() main_device_name = auto_field() temp = fields.Function(serialize=lambda obj: get_patrol_point(obj)) class Meta: model = Component class MainDeviceSchema(SQLAlchemyAutoSchema): bay_id = auto_field() bay_name = auto_field() temp = CustomNested(ComponentSchema, many=True, dump_only=True) class Meta: model = MainDevice class BaySchema(SQLAlchemyAutoSchema): area_id = auto_field() area_name = auto_field() temp = CustomNested(MainDeviceSchema, many=True, dump_only=True) class Meta: model = Bay class AreaSchema(SQLAlchemyAutoSchema): temp = CustomNested(BaySchema, many=True, dump_only=True) class Meta: model = Area \"]},\"882\":{\"h\":\"四、实现结果\",\"t\":[\"实现了过滤掉软删除的数据\",\"{ \\\"code\\\": 200, \\\"data\\\": { \\\"items\\\": [ { \\\"active\\\": 1, \\\"id\\\": 14, \\\"name\\\": \\\"1\\\", \\\"temp\\\": [ { \\\"active\\\": 1, \\\"area_id\\\": 14, \\\"area_name\\\": \\\"1\\\", \\\"id\\\": 28, \\\"name\\\": \\\"12\\\", \\\"temp\\\": [] } ] }, { \\\"active\\\": 1, \\\"id\\\": 15, \\\"name\\\": \\\"测试区域001\\\", \\\"temp\\\": [] }, { \\\"active\\\": 1, \\\"id\\\": 16, \\\"name\\\": \\\"1212\\\", \\\"temp\\\": [] }, { \\\"active\\\": 1, \\\"id\\\": 17, \\\"name\\\": \\\"121212\\\", \\\"temp\\\": [] } ], \\\"total\\\": 4 }, \\\"message\\\": \\\"success\\\", \\\"success\\\": true } \"]},\"883\":{\"c\":[\"flask\"]},\"884\":{\"c\":[\"marshmallow\",\"flask\"]},\"885\":{\"h\":\"9、sqlalchemy 一对多关系\"},\"886\":{\"h\":\"一、模型类\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : teacher_student_model.py # Time ：2023/7/16 10:42 # Author ：Y-aong # version ：python 3.7 # Description：sqlalchemy一对多，一对一，多对多关系配置 \\\"\\\"\\\" from public.base_model import db, Base # 配置一对多关系 class Student(Base): __tablename__ = 'test_student' name = db.Column(db.String(64), comment='学生名称') teacher_id = db.Column(db.Integer, db.ForeignKey('test_teacher.id')) # 方式二 # teacher = db.relationship(\\\"Teacher\\\", back_populates=\\\"student\\\") class Teacher(Base): __tablename__ = 'test_teacher' name = db.Column(db.String(64), comment='教师名称') # 方式一、backref，要在一对多中建立双向关系，“反向”端是多对一， student = db.relationship('Student', backref='test_teacher') # 方式二、back_populates # student = db.relationship('Student', back_populates='student') \"]},\"887\":{\"h\":\"二、序列化类\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : teacher_student_schema.py # Time ：2023/7/16 21:41 # Author ：Y-aong # version ：python 3.7 # Description： \\\"\\\"\\\" from marshmallow import fields from marshmallow_sqlalchemy import SQLAlchemyAutoSchema, auto_field from apis.test.models import Teacher, Student from public.base_model import get_session def get_teacher(obj): session = get_session() teacher_obj = session.query(Teacher).filter(Teacher.id == obj.teacher_id).first() return TeacherStudentSchema().dump(teacher_obj) class StudentSchema(SQLAlchemyAutoSchema): teacher = fields.Function(serialize=lambda obj: get_teacher(obj)) teacher_id = auto_field() class Meta: model = Student exclude = ['active'] class TeacherSchema(SQLAlchemyAutoSchema): student = fields.Nested(StudentSchema, many=True, dump_only=True, only=('id', 'name')) class Meta: model = Teacher class TeacherStudentSchema(SQLAlchemyAutoSchema): class Meta: model = Teacher fields = [\\\"id\\\", \\\"name\\\"] \"]},\"888\":{\"h\":\"三、视图类\",\"t\":[\"# !/usr/bin/env python # -*-coding:utf-8 -*- \\\"\\\"\\\" # File : teacher_student_view.py # Time ：2023/7/16 11:02 # Author ：Y-aong # version ：python 3.7 # Description：一对多视图 \\\"\\\"\\\" from apis.test.models.teacher_student_model import Teacher, Student from apis.test.schemas.teacher_student_schema import TeacherSchema, StudentSchema from public.base_view import BaseView class TeacherView(BaseView): url = '/teacher' def __init__(self): super(TeacherView, self).__init__() self.table_orm = Teacher self.table_schema = TeacherSchema class StudentView(BaseView): url = '/student' def __init__(self): super(StudentView, self).__init__() self.table_orm = Student self.table_schema = StudentSchema \",\"这里使用到了一些自定义的基类请参考flask_restful 基类\"]},\"889\":{\"c\":[\"python\",\"flask\"]},\"890\":{\"c\":[\"sqlalchemy\",\"序列化\"]},\"891\":{\"h\":\"1、曾经被问到的面试题\"},\"892\":{\"h\":\"1、python中的鸭子对象\",\"t\":[\"一句话概述，看起来像是鸭子，走路像鸭子，叫声像鸭子他就是鸭子\",\"对于代码来说，比如可以iter(obj) == True 就是可迭代对象，str, list，没有__next__方法，但是它实现了__getitem__()方法，所以也是可迭代对象\"]},\"893\":{\"h\":\"2、 python3 和 python2 中for * in xx,xx是什么，为什么要改变\",\"t\":[\"可迭代对象\",\"具有惰性计算特点的序列称为惰性序列，Python 中的迭代器就是一个惰性序列，调用 iter() 返回一个 iterator 并赋值给一个变量后不会立即进行求值，而是当你用到其中某些元素的时候才去求某元素的值。\",\"惰性计算还可以在大规模数据处理中平滑处理时间，提高内存使用率。当处理大规模数据时，一次性进行处理往往是不方便的。\"]},\"894\":{\"h\":\"3、python中的深浅拷贝\",\"t\":[\"浅拷贝通常只复制对象本身，而深拷贝不仅会复制对象，还会递归的复制对象所关联的对象。深拷贝可能会遇到两个问题：一是一个对象如果直接或间接的引用了自身，会导致无休止的递归拷贝；二是深拷贝可能对原本设计为多个对象共享的数据也进行拷贝。Python通过copy模块中的copy和deepcopy函数来实现浅拷贝和深拷贝操作，其中deepcopy可以通过memo字典来保存已经拷贝过的对象，从而避免刚才所说的自引用递归问题；此外，可以通过copyreg模块的pickle函数来定制指定类型对象的拷贝行为。\",\"deepcopy函数的本质其实就是对象的一次序列化和一次返回序列化，面试题中还考过用自定义函数实现对象的深拷贝操作，显然我们可以使用pickle模块的dumps和loads来做到，代码如下所示。\",\"import pickle my_deep_copy = lambda obj: pickle.loads(pickle.dumps(obj)) \",\"列表的切片操作[:]相当于实现了列表对象的浅拷贝，而字典的copy方法可以实现字典对象的浅拷贝。对象拷贝其实是更为快捷的创建对象的方式。在Python中，通过构造器创建对象属于两阶段构造，首先是分配内存空间，然后是初始化。在创建对象时，我们也可以基于“原型”对象来创建新对象，通过对原型对象的拷贝（复制内存）就完成了对象的创建和初始化，这种做法更加高效，这也就是设计模式中的原型模式。\"]},\"895\":{\"h\":\"4、正则表达式的match方法和search方法有什么区别？\",\"t\":[\"match方法是从字符串的起始位置进行正则表达式匹配，返回Match对象或None。search方法会扫描整个字符串来找寻匹配的模式，同样也是返回Match对象或None。\"]},\"896\":{\"h\":\"5、Python中为什么没有函数重载\",\"t\":[\"首先Python是解释型语言，函数重载现象通常出现在编译型语言中。其次Python是动态类型语言，函数的参数没有类型约束，也就无法根据参数类型来区分重载。再者Python中函数的参数可以有默认值，可以使用可变参数和关键字参数，因此即便没有函数重载，也要可以让一个函数根据调用者传入的参数产生不同的行为。\"]},\"897\":{\"h\":\"6、python中为什么要引入全局解释器锁\",\"t\":[\"Python引入全局解释器锁（GIL，Global Interpreter Lock）的主要原因是为了简化Python解释器的设计和实现，并确保解释器内部数据结构在多线程环境下的安全性。 GIL是Python解释器中的一种机制，它是一把全局锁，用于保护解释器免受多线程并发访问的影响。这意味着在Python中，同一时刻只允许一个线程执行Python字节码。 当一个线程执行Python字节码时，其他线程将被阻塞，即使系统具有多个CPU核心，Python的多线程程序也不能同时利用它们。\",\"GIL的引入可以追溯到Python的早期设计。在Python的设计初期，为了简化解释器的实现，并确保多线程环境下的线程安全，设计者决定引入GIL。通过GIL，Python解释器不需要在共享数据上实现复杂的同步机制，从而降低了实现的复杂性。然而，GIL的存在也带来了一些限制和挑战。由于GIL的存在，Python的多线程在CPU密集型任务上并不能提供真正的并行性。这意味着在多核CPU上，Python的多线程程序可能无法充分利用硬件资源。\",\"为了解决这个问题，Python社区已经提出了一些解决方案，如使用多进程（multiprocessing）代替多线程，或者使用支持并行计算的库（如NumPy、SciP等）。\",\"总之，Python引入GIL是为了简化解释器的设计和实现，并确保多线程环境下的线程安全。然而，这也带来了一些限制和挑战，需要在使用Python多线程时特别注意。\"]},\"898\":{\"h\":\"7、如何理解异步IO\",\"t\":[\"同步 vs. 异步： \",\"同步（Synchronous）：同步操作是指在发起一个操作后，必须等待该操作完成才能继续执行后续的操作。在同步操作中，程序会阻塞（Block）当前线程或进程，直到操作完成。\",\"异步（Asynchronous）：异步操作是指在发起一个操作后，可以立即返回并继续执行后续的操作，而不必等待该操作完成。在异步操作中，程序不会阻塞当前线程或进程，而是使用回调函数、事件循环等机制来处理操作的结果。\",\"IO操作： \",\"输入/输出（IO）操作：指的是与外部设备（例如磁盘、网络等）进行数据交换的操作。在计算机中，IO操作是相对于CPU执行的计算操作而言的。常见的IO操作包括读取文件、发送网络请求、接收网络响应等。\",\"异步IO： \",\"异步IO（Asynchronous IO）：指的是在进行IO操作时，不需要等待IO操作完成才能继续执行后续的操作。相反，程序可以继续执行其他任务，而IO操作在后台进行。当IO操作完成时，程序可以通过回调函数、事件通知等方式获取IO操作的结果。\",\"在编程中，异步IO通常与事件循环（Event Loop）结合使用，例如在Python中，使用 asyncio 模块来实现异步IO操作。异步IO的优点在于它可以提高程序的并发性和吞吐量，使程序能够更有效地利用系统资源，从而提高性能。\",\"总的来说，理解异步IO就是理解在IO操作时，程序如何以非阻塞的方式继续执行其他任务，并在IO操作完成后获取操作结果的过程。\"]},\"899\":{\"h\":\"8、异步IO和事件循环的关系\",\"t\":[\"在 Python 中，异步IO和事件循环密切相关，它们通常一起使用来实现异步编程。\",\"事件循环（Event Loop）： \",\"事件循环是一个在程序中运行的循环，它负责处理和调度异步任务（例如IO操作、定时器等）。\",\"在事件循环中，任务被添加到事件队列中，并在适当的时候执行。事件循环负责选择要执行的任务，并确保任务按正确的顺序执行。\",\"Python 中常用的事件循环实现是 asyncio 模块提供的 asyncio.EventLoop。\",\"异步IO（Asynchronous IO）： \",\"异步IO是一种编程模型，它允许程序在执行IO操作时不阻塞当前线程或进程，而是可以继续执行其他任务。\",\"在Python中，异步IO通常使用 asyncio 模块来实现，它提供了异步编程的基础设施，包括异步IO操作、协程等。\",\"关系： \",\"异步IO依赖于事件循环来调度和执行异步任务。当需要执行一个异步IO操作时，任务会被添加到事件循环的事件队列中，并在事件循环的控制下执行。\",\"事件循环负责管理异步任务的执行顺序、任务的状态和执行过程中的异常处理等。\",\"在事件循环中，异步IO操作通常以协程（Coroutine）的形式表示，而协程是一种可以暂停和恢复执行的函数，适用于异步编程。\",\"简而言之，事件循环是异步IO编程的基础，它负责调度和执行异步任务，而异步IO操作则是在事件循环的管理下执行的。通过事件循环，异步IO可以实现非阻塞的IO操作，并使程序能够更高效地利用系统资源\"]},\"900\":{\"h\":\"9、 __new__ 方法是什么？\",\"t\":[\"__new__ 方法是Python中的一个特殊的静态方法，用于创建类的新实例。它是在__init__方法之前被调用的，并且负责返回类的新实例。__new__方法通常不需要被直接调用，而是由Python解释器在实例化对象时自动调用。\",\"__new__方法的主要作用是创建一个新对象，而__init__方法则用于初始化这个新创建的对象。__new__方法只接收类本身（通常用cls表示）作为第一个参数，后面可以跟任意数量的参数，这些参数将传递给__init__方法。\",\"class Singleton: _instance = None def __new__(cls, *args, **kwargs): if cls._instance is None: cls._instance = super(Singleton, cls).__new__(cls) return cls._instance def __init__(self): pass # 这里可以初始化实例的属性 # 创建Singleton的两个实例 singleton1 = Singleton() singleton2 = Singleton() # 检查两个实例是否是同一个对象 print(singleton1 is singleton2) # 输出: True \",\"__new__方法通常用于以下情况：\",\"控制对象的创建：比如实现单例模式。\",\"继承不可变类型：比如int、str、tuple等，因为这些类型的实例是不可变的，所以需要在__new__方法中创建新实例。\",\"多态实例化：根据传入的参数动态决定创建哪种类型的对象。\",\"在大多数情况下，你不需要自定义__new__方法，除非你有特殊的对象创建需求。通常情况下，只需要定义__init__方法来初始化对象即可。\"]},\"901\":{\"h\":\"10、 __init__ 方法是什么？\",\"t\":[\"__init__ 方法是Python中类的构造器，用于在创建类的新实例时初始化对象。当你创建一个新对象时，Python会自动调用__init__方法。这个方法通常用于设置对象的初始状态，比如给对象的属性赋初始值。\",\"__init__方法的第一个参数始终是self，它代表类的实例本身，允许我们访问类的属性和方法。在__init__方法中，你可以定义其他参数来接收初始化数据，并根据这些数据来设置对象的状态。\",\"如果你不显式定义__init__方法，Python会提供一个默认的__init__方法，这个默认的方法什么也不做。自定义__init__方法可以让你控制对象创建时的行为。\"]},\"902\":{\"h\":\"11、 __new__ 的作用\",\"t\":[\"依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。 首先我们来看一下第一个功能，具体我们可以用int来作为一个例子： 假如我们需要一个永远都是正数的整数类型，通过集成int，我们可能会写出这样的代码：\",\"工厂模式的实现\",\"class Fruit(object): def __init__(self): pass def print_color(self): pass class Apple(Fruit): def __init__(self): pass def print_color(self): print(\\\"apple is in red\\\") class Orange(Fruit): def __init__(self): pass def print_color(self): print(\\\"orange is in orange\\\") class FruitFactory(object): fruits = {\\\"apple\\\": Apple, \\\"orange\\\": Orange} def __new__(cls, name): if name in cls.fruits.keys(): return cls.fruits[name]() else: return Fruit() fruit1 = FruitFactory(\\\"apple\\\") fruit2 = FruitFactory(\\\"orange\\\") fruit1.print_color() fruit2.print_color() \"]},\"903\":{\"h\":\"13、 __init__ 与 __new__ 的区别\",\"t\":[\"从上述过程中我们可以发现，这两个方法区别在于：\",\"作用区别，init实例级别，new类级别\",\"1.__init__ 通常用于初始化一个新实例，控制这个初始化的过程，比如添加一些属性， 做一些额外的操作，发生在类实例被创建完以后。它是实例级别的方法。\",\"2.__new__ 通常用于控制生成一个类实例的过程。它是类级别的方法\",\"执行顺序，先new 后init\"]},\"904\":{\"c\":[\"python\"]},\"905\":{\"c\":[\"python面试\"]},\"906\":{\"h\":\"2、python中5种队列数据结构\"},\"907\":{\"h\":\"一、python基础队列：列表\"},\"908\":{\"h\":\"1.1 列表作为队列的简单应用\",\"t\":[\"列表作为python中使用最常见的一种数据类型，同样也是最方便实现队列的数据结构。尽管这不是最高效的解决方案 ，但是可能是最便捷的实现方案。\",\"列表提供了append()方法用于在尾部添加元素（相当于队列的入队操作），以及pop(0)方法来移除并返回列表的第一个元素（相当于队列的出队操作）。\",\"入队（Enqueue）：使用list.append()方法在列表的末尾添加元素。这对应于队列中新元素的加入，遵循先进先出的原则。\",\"出队（Dequeue）：标准的列表不直接支持队列的头部移除操作 ，通常使用list.pop(0)来模拟。这种方法虽然实现了功能，但是效率低下，特别是当队列很大时，因为每次出队操作都需要移动后续的所有元素。\",\"queue = [] # 入队操作 queue.append(\\\"任务A\\\") queue.append(\\\"任务B\\\") print(\\\"初始队列:\\\", queue) # 出队操作 task = queue.pop(0) print(\\\"处理任务:\\\", task) print(\\\"处理后队列:\\\", queue) \",\"输出结果\",\"初始队列: ['任务A', '任务B'] 处理任务: 任务A 处理后队列: ['任务B'] \"]},\"909\":{\"h\":\"1.2 缺点与优化建议\",\"t\":[\"虽然使用列表可以实现队列操作，但是这不是最好的方式，因为随着队列操作的进行，频繁的插入和删除可能导致内存碎片。\",\"效率问题：由于Python列表是基于数组实现的，当执行list.pop(0)操作时，需要移动所有后续元素来填补空位，时间复杂度为O(n) ，在大规模数据处理时效率极低。\",\"循环利用问题：真实世界中的队列往往期望能够高效地循环利用存储空间，而列表实现的队列在不断出队后 ，无法自动复用前面的空间，导致内存使用效率不高。\"]},\"910\":{\"h\":\"二、高效队列： collections.deque\"},\"911\":{\"h\":\"2.1 deque 介绍与优势\",\"t\":[\"在Python标准库中，collections.deque（双端队列）是一种优化的队列实现 ，特别适用于需要高效插入和删除元素的场景。相较于使用列表模拟队列，deque提供了更优的性能和灵活性。\",\"deque，全称双端队列（double-ended queue），是一种允许在其两端进行添加和删除操作的数据结构。它克服了列表作为队列使用时的主要瓶颈——出队操作的低效。deque通过使用双向链表实现 ，确保了在两端执行插入和删除操作的时间复杂度均为O(1)。\",\"快速操作：无论是头部还是尾部 ，入队（append/appendleft）和出队(pop/popleft)都非常迅速。\",\"内存效率：自动管理内存，无需像列表那样移动大量元素。\",\"灵活应用：不仅限于队列 ，还可以当作栈或双端队列使用。\"]},\"912\":{\"h\":\"2.2 实现快速入队与出队\",\"t\":[\"from collections import deque queue = deque() # 入队操作 queue.append(\\\"任务1\\\") queue.append(\\\"任务2\\\") print(\\\"初始队列:\\\", queue) # 出队操作 task = queue.popleft() print(\\\"处理任务:\\\", task) print(\\\"处理后队列:\\\", queue) \",\"输出结果\",\"初始队列: deque(['任务1', '任务2']) 处理任务: 任务1 处理后队列: deque(['任务2']) \",\"限制大小：可以创建一个固定大小的deque，当达到容量上限时，新元素的加入会导致最旧的元素自动弹出 ，类似于循环队列。\",\"from collections import deque # 创建一个最大长度为3的deque limited_deque = deque(maxlen=3) limited_deque.append(1) limited_deque.append(2) limited_deque.append(3) limited_deque.append(4) # 此时1会被自动移除 print(limited_deque) # 输出: deque([2, 3, 4], maxlen=3) \",\"双端访问：既可以从左侧添加或移除元素（appendleft和popleft） ，也可以从右侧操作 ，提供了更多操作灵活性。\"]},\"913\":{\"h\":\"三、并发安全：queue模块\"},\"914\":{\"h\":\"3.1 多线程/进程安全队列\",\"t\":[\"在涉及多线程或多进程的并发程序设计中，数据同步和线程安全是必须面对的挑战。Python的queue模块为此提供了线程安全的队列类 ，包括Queue, LifoQueue（后进先出队列），以及PriorityQueue（优先级队列）。这些队列类内部实现了锁机制 ，确保了在多线程环境下的安全访问，避免了数据竞争和一致性问题。\"]},\"915\":{\"h\":\"3.2 queue模块核心类解析\",\"t\":[\"• FIFO队列 (Queue)：最基本的形式 ，遵循先进先出（FIFO）原则 ，提供了put()方法用于插入元素到队列尾部，以及get()方法从队列头部移除并返回一个元素。\",\"• LIFO队列 (LifoQueue)：后进先出队列，类似于堆栈，最近添加的元素将是最先被获取的元素，通过put()和get()操作实现。\",\"• 优先级队列 (PriorityQueue)：元素带有优先级的队列，每次出队都是优先级最高的元素。元素被赋予一个优先级数字，越小的数字代表越高的优先级。通过put()存放带有优先级的项，get()取出优先级最高的项。\"]},\"916\":{\"h\":\"3.3 生产者消费者模型实例\",\"t\":[\"生产者消费者模型是一种经典的设计模式，常用于处理多线程或多进程间的协作。下面是一个使用queue模块实现的简单生产者消费者模型示例：\",\"import threading import time from queue import Queue def producer(queue): \\\"\\\"\\\"生产者线程，向队列中添加任务\\\"\\\"\\\" for i in range(10): item = f\\\"产品{i}\\\" print(f\\\"生产了 {item}\\\") queue.put(item) time.sleep(1) # 模拟生产间隔 def consumer(queue): \\\"\\\"\\\"消费者线程 ，从队列中获取并处理任务\\\"\\\"\\\" while True: item = queue.get() if item is None: # 使用None作为停止信号 break print(f\\\"消费了 {item}\\\") time.sleep(2) # 模拟消费间隔 # 创建共享的线程安全队列 task_queue = Queue() # 分别启动生产者和消费者线程 producer_thread = threading.Thread(target=producer, args=(task_queue,)) consumer_thread = threading.Thread(target=consumer, args=(task_queue,)) producer_thread.start() consumer_thread.start() producer_thread.join() # 等待生产者线程完成 print(\\\"生产结束，发送停止信号\\\") task_queue.put(None) # 向队列发送结束信号 consumer_thread.join() # 等待消费者线程完成 \",\"此示例中，producer线程不断向队列中添加“产品”，而consumer线程则不断地从队列中取出并“消费”这些产品。通过队列作为中介 ，两者之间实现了有效的协同工作 ，同时保证了线程安全。\"]},\"917\":{\"h\":\"四、高级数据结构：堆与优先队列 PriorityQueue\"},\"918\":{\"h\":\"4.1 何为优先队列及其应用场景\",\"t\":[\"优先队列是一种特殊类型的队列，其中每个元素都有一个优先级。在这样的队列中，出队操作总是移除优先级最高的元素。优先队列广泛应用于各种场景，如任务调度、事件驱动系统、Dijkstra算法中的最短路径计算、优先级中断处理等。它确保了关键或紧急的任务能够得到及时处理。\"]},\"919\":{\"h\":\"4.2 使用heapq模块实现优先队列\",\"t\":[\"Python的heapq模块提供了堆队列算法的实现，可以方便地用来构建优先队列。堆是一个近似完全二叉树的结构，满足父节点的值小于或等于（在最小堆中）其子节点的值。利用heapq，我们可以高效地实现优先队列的核心操作——插入元素（heappush）和获取并移除最小元素（heappop）。\",\"示例代码如下：\",\"import heapq class PriorityQueue: def __init__(self): self._queue = [] self._index = 0 # 用于自定义优先级的计数器 def push(self, item, priority=0): \\\"\\\"\\\"将元素插入队列，可选优先级\\\"\\\"\\\" heapq.heappush(self._queue, (-priority, self._index, item)) # 使用负优先级进行最小堆排序 self._index += 1 def pop(self): \\\"\\\"\\\"移除并返回优先级最高的元素\\\"\\\"\\\" return heapq.heappop(self._queue)[-1] # 返回元素部分 pq = PriorityQueue() pq.push(\\\"任务A\\\", 2) pq.push(\\\"任务B\\\", 1) pq.push(\\\"任务C\\\", 3) print(pq.pop()) # 应输出优先级最高的任务C print(pq.pop()) # 接下来是任务A \"]},\"920\":{\"h\":\"4.3 自定义比较函数优化优先级处理\",\"t\":[\"在某些情况下 ，优先级可能基于复杂的逻辑，而不仅仅是简单的数值比较。虽然可以通过转换策略间接实现 ，但直接提供自定义比较函数给heapq模块更为灵活。不过，heapq本身不直接支持传入自定义比较函数 ，而是依赖于元素的自然顺序或显式指定的负优先级值。因此，为了实现这一需求 ，通常是在元素中包含或绑定比较逻辑。\",\"例如，如果任务类本身定义了比较操作，那么直接使用该类的实例即可：\",\"class Task: def __init__(self, name, priority): self.name = name self.priority = priority def __lt__(self, other): return self.priority < other.priority # 定义优先级比较 # 使用Task实例作为优先队列的元素 pq = [] heapq.heapify(pq) # 将列表转换为堆结构 heapq.heappush(pq, Task(\\\"任务D\\\", 5)) heapq.heappush(pq, Task(\\\"任务E\\\", 9)) print(heapq.heappop(pq).name) # 应输出优先级最低的任务D \",\"通过这种方式，我们可以更灵活地控制优先级的比较逻辑，使优先队列更加适应复杂的应用场景。\"]},\"921\":{\"h\":\"4.4 实时调度与Top-K问题解决\",\"t\":[\"• 实时调度：在操作系统和网络通信等领域 ，堆可实现高效的任务调度算法，如事件驱动编程中的事件调度，能确保优先级高的任务优先得到处理。\",\"• Top-K问题：当需要找出一组数据中的前K个最大或最小元素时，堆是一个理想的数据结构。通过维护一个大小为K的最小堆（找最大K个元素）或最大堆（找最小K个元素） ，可以在O(NlogK)的时间复杂度内完成。\",\"示例：使用heapq求解Top-3最大数。\",\"import heapq numbers = [1, 8, 9, 5, 12, 7, 15, 20, 3] top_k = 3 # 使用nlargest函数直接求解Top-K问题 top_three = heapq.nlargest(top_k, numbers) print(f\\\"Top-{top_k}最大数：{top_three}\\\") # 输出结果： # Top-3最大数：[20, 15, 12] \",\"通过heapq模块，开发者可以轻松实现复杂的堆相关应用 ，满足对高效数据排序、实时处理以及特定问题求解的需求。\"]},\"922\":{\"h\":\"五、扩展视野：协程和asyncio.Queue\"},\"923\":{\"h\":\"5.1 协程基础与async/await\",\"t\":[\"协程（Coroutine）是Python中用于异步编程的一种高级控制流特性。它们允许非阻塞地执行多个任务，提高了I/O密集型程序的效率。从Python 3.5起，引入了async/await语法 ，大大简化了异步编程模型。\",\"async关键字用于声明一个协程函数（coroutine function），而await用于等待一个异步操作的结果，直到该操作完成。这意味着在等待期间 ，控制权可以交给其他协程继续执行，从而实现了并发执行的效果。\"]},\"924\":{\"h\":\"5.2 异步编程中的队列应用\",\"t\":[\"在异步编程领域，asyncio.Queue是asyncio模块提供的一个线程安全的队列 ，特别适合在协程之间传递数据。它支持异步地将数据放入队列（put()）和从中取出数据（get()） ，非常适合实现生产者-消费者模型，尤其在处理I/O密集型任务时，能显著提高程序性能。\",\"示例：使用asyncio.Queue处理并发请求。\",\"import asyncio import aiohttp async def fetch(session, url, queue): async with session.get(url) as response: data = await response.text() await queue.put(data) async def process_queue(queue): while True: data = await queue.get() if data is None: break print(f\\\"处理响应数据：{data[:50]}...\\\") queue.task_done() async def main(urls): queue = asyncio.Queue() async with aiohttp.ClientSession() as session: tasks = [fetch(session, url, queue) for url in urls] asyncio.create_task(process_queue(queue)) await asyncio.gather(*tasks) await queue.join() # 等待所有任务完成 urls = [\\\"https://www.baidu.com\\\"] * 10 # 示例URL列表 asyncio.run(main(urls)) \",\"此代码示例展示了如何使用asyncio.Queue来收集并发HTTP请求的响应数据 ，并通过另一个协程异步处理这些数据。\"]},\"925\":{\"h\":\"5.3 提升I/O密集型任务性能\",\"t\":[\"下面是一个使用asyncio.Queue和协程提升I/O密集型任务性能的示例。假设我们有多个URL需要并发下载，每个下载任务视为一个异步操作，我们可以利用asyncio和asyncio.Queue来高效地管理这些任务。\",\"import asyncio import aiohttp async def download(url, queue): async with aiohttp.ClientSession() as session: async with await session.get(url) as response: content = await response.text() print(f\\\"Downloaded {url} - {len(content)} bytes\\\") await queue.put(url) # 完成后通知队列 async def main(urls): queue = asyncio.Queue() tasks = [download(url, queue) for url in urls] # 启动所有任务 await asyncio.gather(*tasks) # 等待所有任务完成 while not queue.empty(): await queue.get() # 阻塞直到所有任务完成通知 urls = [ \\\"https://example.com\\\", \\\"https://example.org\\\", \\\"https://example.net\\\" ] asyncio.run(main(urls)) \",\"在这个例子中，每个URL的下载任务由单独的协程处理，它们并发执行 ，充分利用了异步I/O ，提升了整体的下载效率。asyncio.Queue在这里起到了协调作用，确保所有下载任务完成后才结束程序 ，展示了在异步编程中队列的高效应用。\"]},\"926\":{\"c\":[\"python\"]},\"927\":{\"c\":[\"数据类型\"]},\"928\":{\"h\":\"3、内置模块functools\"},\"929\":{\"h\":\"一、内置lru缓存\",\"t\":[\"LRU是一种常用的缓存算法，即最近最少使用，如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小， LRU算法选择将最近最少使用的数据淘汰，保留那些经常被命中的数据。****\",\"import time from functools import lru_cache @lru_cache() # 测试无缓存时将本行注释掉 def fib_memoization(number: int) -> int: if number == 0: return 0 if number == 1: return 1 return fib_memoization(number-1) + fib_memoization(number-2) start = time.time() res = fib_memoization(33) print(res) print(f'耗时: {time.time() - start}s') \"]},\"930\":{\"h\":\"functools.lru_cache参数说明\",\"t\":[\"lru_cache装饰器定义如下\",\"def lru_cache(maxsize=128, typed=False): pass \",\"只有连个参数，第一个参数规定缓存的数量，第二个参数如果设置为True，则严格检查被装饰函数的参数类型，默认为False\",\"from functools import lru_cache @lru_cache(typed=False) def add(x, y): print('add') return x + y print(add(3, 4)) print(add(3, 4.0)) \",\"第二次调用add函数时参数是4.0， 如果你认为这种情况可以使用缓存命中上一次3+4的结果，就将typed设置为False，如果你严格要求只有函数的参数完全一致时才能命中，那么将typed设置为True\"]},\"931\":{\"h\":\"二、wraps函数\"},\"932\":{\"h\":\"自省信息丢失\",\"t\":[\"函数被装饰以后，一些原本属于自己的自省信息会丢失，先来看装饰前的样子\",\"def test(sleep_time): \\\"\\\"\\\" 测试装饰器 :param sleep_time: :return: \\\"\\\"\\\" time.sleep(sleep_time) print(test.__name__) print(test.__doc__) \",\"执行输出结果\",\"test 测试装饰器 :param sleep_time: :return: \",\"test是函数的名字，__doc__是函数的注释说明\",\"但在被普通的装饰器装饰以后，这些信息就会丢失\",\"import time def cost(func): def warpper(*args, **kwargs): t1 = time.time() res = func(*args, **kwargs) t2 = time.time() print(func.__name__ + \\\"执行耗时\\\" + str(t2-t1)) return res return warpper @cost def test(sleep_time): \\\"\\\"\\\" 测试装饰器 :param sleep_time: :return: \\\"\\\"\\\" time.sleep(sleep_time) print(test.__name__) print(test.__doc__) \",\"程序输出结果\",\"warpper None \",\"这是我们所不希望看到的\"]},\"933\":{\"h\":\"修复自省信息\",\"t\":[\"wraps可以防止被装饰的函数丢失自己的自省信息，只需要增加@wraps(func)即可\",\"import time from functools import wraps def cost(func): @wraps(func) def warpper(*args, **kwargs): t1 = time.time() res = func(*args, **kwargs) t2 = time.time() print(func.__name__ + \\\"执行耗时\\\" + str(t2-t1)) return res return warpper @cost def test(sleep_time): \\\"\\\"\\\" 测试装饰器 :param sleep_time: :return: \\\"\\\"\\\" time.sleep(sleep_time) print(test.__name__) print(test.__doc__) \"]},\"934\":{\"h\":\"三、偏函数partial\",\"t\":[\"偏函数partial是functools 模块里提供的一个函数。和装饰器对比来理解，装饰器改变了一个函数的行为，而偏函数不能改变一个函数的行为。偏函数只能根据已有的函数生成一个新的函数，这个新的函数完成已有函数相同的功能，但是，这个新的函数的部分参数已被偏函数确定下来\"]},\"935\":{\"h\":\"常规实现\",\"t\":[\"为了便于理解，我们构造一个使用场景，假设我们的程序要在dest目录下新建一些文件夹，那么常见的实现功能代码如下\",\"import os from os import mkdir mkdir(os.path.join('./dest', 'dir1')) mkdir(os.path.join('./dest', 'dir2')) mkdir(os.path.join('./dest', 'dir3')) \",\"功能很简单，代码很简洁，但是有个小小的不如意之处，每次都是在dest目录下新建文件夹，既然它这么固定，是不是可以不用传递dest参数呢？\"]},\"936\":{\"h\":\"偏函数实现\",\"t\":[\"import os from os import mkdir from functools import partial dest_join = partial(os.path.join, './dest') mkdir(dest_join('dir1')) mkdir(dest_join('dir2')) mkdir(dest_join('dir3')) \"]},\"937\":{\"c\":[\"python\"]},\"938\":{\"c\":[\"functools\"]},\"939\":{\"h\":\"4、内置模块collections\"},\"940\":{\"h\":\"一、Counter--统计对象的个数\",\"t\":[\"Counter类可以统计对象的个数， 它是字典的子类, 它有3种创建方法, 它支持访问缺失键, 更新计数器, 返回top N数据, 算术和集合操作，下面讲解Counter类的用法\"]},\"941\":{\"h\":\"1. 创建\",\"t\":[\"Counter有3种创建对象的方法\",\"from collections import Counter c1 = Counter() # 创建一个空的Counter对象 c2 = Counter('hello world') # 从一个可迭代对象(列表,元组,字典,字符串)创建 c3 = Counter(a=3, b=4) # 从一组键值对创建 print(c2) print(c3) \",\"程序输出结果\",\"Counter({'l': 3, 'o': 2, 'h': 1, 'e': 1, ' ': 1, 'w': 1, 'r': 1, 'd': 1}) Counter({'b': 4, 'a': 3}) \",\"只看c2的话，不禁让人感到以后，使用字符串的方法不是可以实现相同的功能么？\",\"word = 'hello world' print(word.count('h')) # 1 print(word.count('l')) # 3 \",\"其实不然，虽然列表，字符串都提供了count方法，但是想要查看所有元素的数量，却需要你逐个调用才能获取，而Counter类则要简单便捷的多。\"]},\"942\":{\"h\":\"2. 访问缺失的键\",\"t\":[\"Counter虽然是字典的子类，但访问缺失的键时，不会引发KeyError, 而是返回0\",\"from collections import Counter c1 = Counter() # 创建一个空的Counter对象 print(c1['apple']) # 0 \"]},\"943\":{\"h\":\"3. 计数器更新\",\"t\":[\"更新有两种方法，一种是使用update方法，一种是使用subtract方法， update方法用来新增计数， subtract方法用来减少计数， 分别来演示\",\"使用update\",\"from collections import Counter c1 = Counter('hello world') c1.update('hello') # 使用另一个iterable对象更新 print(c1['o']) # 3 c2 = Counter('world') c1.update(c2) # 使用另一个Counter对象更新 print(c1['o']) # 4 \",\"使用subtract\",\"from collections import Counter c1 = Counter('hello world') c1.subtract('hello') # 使用另一个iterable对象更新 print(c1['o']) # 1 c2 = Counter('world') c1.subtract(c2) # 使用另一个Counter对象更新 print(c1['o']) # 0 \"]},\"944\":{\"h\":\"4. 键的删除\",\"t\":[\"同字典一样，使用del即可删除键值对\",\"from collections import Counter c1 = Counter('hello world') del c1['o'] print(c1['o']) # 0 \"]},\"945\":{\"h\":\"5. elements()\",\"t\":[\"elements()返回一个迭代器，一个元素的计数是多少，在迭代器中就会有多少\",\"from collections import Counter c1 = Counter('hello world') lst = list(c1.elements()) print(lst) # ['h', 'e', 'l', 'l', 'l', 'o', 'o', ' ', 'w', 'r', 'd'] \"]},\"946\":{\"h\":\"6. most_common([n])\",\"t\":[\"most_common返回top N的列表，列表里的元素是元组，如果计数相同，排列无指定顺序, 如果不指定n， 则返回所有元素\",\"from collections import Counter c1 = Counter('hello world') print(c1.most_common(2)) # [('l', 3), ('o', 2)] \"]},\"947\":{\"h\":\"7. 算术和集合操作\",\"t\":[\"Counter类还支持+、-、&、|操作， &和|操作分别返回两个Counter对象各元素的最小值和最大值， 需要强调一点， 通过算数和集合操作得到Counter对象将删除计数值小于1的元素\",\"from collections import Counter c = Counter(a=1, b=3) d = Counter(a=2, b=2) print(c + d) # Counter({'b': 5, 'a': 3}) print(c - d) # Counter({'b': 1}) print(c & d) # Counter({'b': 2, 'a': 1}) print(c | d) # Counter({'b': 3, 'a': 2}) \"]},\"948\":{\"c\":[\"python\"]},\"949\":{\"c\":[\"collections\"]},\"950\":{\"h\":\"tcp网络协议\"},\"951\":{\"h\":\"一、tcp三次握手和四次挥手过程\",\"t\":[\"TCP 三次握手\",\"第一次为syn报文，客户端会随机初始化序号（client_isn），将此序号置于 TCP 首部的「序号」字段中，同时把 SYN 标志位置为 1，表示 SYN 报文。表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 SYN-SENT 状态\",\"第二次为服务端收到客户端的 SYN 报文后，首先服务端也随机初始化自己的序号（server_isn），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 client_isn + 1, 接着把 SYN 和 ACK 标志位置为 1。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 SYN-RCVD 状态\",\"第三次客户端收到服务端的ack确认消息后，将ack的标志设置为1，确认应答号，字段填入为serven_isn + 1, 客户端处于 ESTABLISHED 状态;服务端收到ack确认之后服务端也处于ESTABLISHED\",\"一旦完成三次握手，双方都处于 ESTABLISHED 状态，此时连接就已建立完成，客户端和服务端就可以相互发送数据了。\"]},\"952\":{\"h\":\"二、为什么是三次握手不是两次\",\"t\":[\"1、确认服务端和客户端的通信能力\",\"2、同步双方初始序列号\",\"TCP 协议的通信双方， 都必须维护一个「序列号」， 序列号是可靠传输的一个关键因素，它的作用： 接收方可以去除重复的数据； 接收方可以根据数据包的序列号按序接收； 可以标识发送出去的数据包中， 哪些是已经被对方收到的（通过 ACK 报文中的序列号知道）； \",\"3、避免资源浪费\",\"如果只有「两次握手」，当客户端发生的 SYN 报文在网络中阻塞，客户端没有接收到 ACK 报文，就会重新发送 SYN ，由于没有第三次握手，服务端不清楚客户端是否收到了自己回复的 ACK 报文，所以服务端每收到一个 SYN 就只能先主动建立一个连接，这会造成什么情况呢？ 如果客户端发送的 SYN 报文在网络中阻塞了，重复发送多次 SYN 报文，那么服务端在收到请求后就会建立多个冗余的无效链接，造成不必要的资源浪费。 \",\"可以看作为两个人的沟通，检查双方的语言表达能力和语言接受能力，第二有效沟通，避免重发，第三共同维护一个话题\"]},\"953\":{\"h\":\"三、tcp的四次挥手\",\"t\":[\"客户端主动关闭连接 —— TCP 四次挥手\",\"客户端打算关闭连接，此时会发送一个 TCP 首部 FIN 标志位被置为 1 的报文，也即 FIN 报文，之后客户端进入 FIN_WAIT_1 状态。\",\"服务端收到该报文后，就向客户端发送 ACK 应答报文，接着服务端进入 CLOSE_WAIT 状态。\",\"客户端收到服务端的 ACK 应答报文后，之后进入 FIN_WAIT_2 状态。\",\"等待服务端处理完数据后，也向客户端发送 FIN 报文，之后服务端进入 LAST_ACK 状态。\",\"客户端收到服务端的 FIN 报文后，回一个 ACK 应答报文，之后进入 TIME_WAIT 状态\",\"服务端收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭。\",\"客户端在经过 2MSL 一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭。\",\"你可以看到，每个方向都需要一个 FIN 和一个 ACK，因此通常被称为四次挥手。\"]},\"954\":{\"h\":\"四、为什么需要四次挥手\",\"t\":[\"关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。\",\"服务端收到客户端的 FIN 报文时，先回一个 ACK 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。\",\"从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都会分开发送，因此是需要四次挥手。\"]},\"955\":{\"h\":\"五、关于TIME_WAIT等待时间\",\"t\":[\"报文最大生存时间，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。\",\"主动发起关闭连接的一方，才会有 TIME-WAIT 状态。\"]},\"956\":{\"h\":\"为什么需要这个状态：\",\"t\":[\"防止历史连接中的数据，被后面相同四元组的连接错误的接收；\",\"保证「被动关闭连接」的一方，能被正确的关闭；\"]},\"957\":{\"h\":\"六、tcp如何保证连接的可靠\",\"t\":[\"img\"]},\"958\":{\"h\":\"重传机制\",\"t\":[\"TCP 实现可靠传输的方式之一，是通过序列号与确认应答。\",\"在 TCP 中，当发送端的数据到达接收主机时，接收端主机会返回一个确认应答消息，表示已收到消息。\"]},\"959\":{\"h\":\"滑动窗口\",\"t\":[\"如果你说完一句话，我在处理其他事情，没有及时回复你，那你不是要干等着我做完其他事情后，我回复你，你才能说下一句话，很显然这不现实。\",\"所以，这样的传输方式有一个缺点：数据包的往返时间越长，通信的效率就越低。\",\"为解决这个问题，TCP 引入了窗口这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。\",\"那么有了窗口，就可以指定窗口大小，窗口大小就是指无需等待确认应答，而可以继续发送数据的最大值。\",\"窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。\",\"我们先来看看发送方的窗口，下图就是发送方缓存的数据，根据处理的情况分成四个部分，其中深蓝色方框是发送窗口，紫色方框是可用窗口：\",\"img\",\"#1 是已发送并收到 ACK确认的数据：1~31 字节\",\"#2 是已发送但未收到 ACK确认的数据：32~45 字节\",\"#3 是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节\",\"#4 是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后\"]},\"960\":{\"h\":\"流量控制\",\"t\":[\"流量控制是结合滑动窗口两个进行控制流量的\"]},\"961\":{\"h\":\"ack确认机制\"},\"962\":{\"h\":\"七、HTTP协议 与 TCP协议 的区别\",\"t\":[\"TCP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。\",\"TCP/IP和HTTP协议的关系，从本质上来说，二者没有可比性，我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET 等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP 文本信息，然后使用TCP/IP做传输层协议将它发到网络上。\",\"Http协议是建立在TCP协议基础之上的，当浏览器需要从服务器获取网页数据的时候，会发出一次Http请求。Http会通过TCP建立起一个到服务器的连接通道，当本次请求需要的数据完毕后，Http会立即将TCP连接断开，这个过程是很短的，所以Http连接是一种短连接，是一种无状态的连接。\",\"所谓的无状态，是指浏览器每次向服务器发起请求的时候，不是通过一个连接，而是每次都建立一个新的连接。如果是一个连接的话，服务器进程中就能保持住这个连接并且在内存中记住一些信息状态。\",\"而每次请求结束后，连接就关闭，相关的内容就释放了，所以记不住任何状态，称为无状态连接。而我们直接通过Socket编程使用TCP协议的时候，因为我们自己可以通过代码区控制什么时候打开连接什么时候关闭连接，只要我们不通过代码把连接关闭，这个连接就会在客户端和服务端的进程中一直存在，相关状态数据会一直保存着。\",\"img\"]},\"963\":{\"c\":[\"tcp\",\"网络协议\"]},\"964\":{\"c\":[\"tcp\"]},\"965\":{\"h\":\"http网络协议\"},\"966\":{\"h\":\"一、http是什么\",\"t\":[\"HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。\",\"我们先来理解「文本」，在互联网早期的时候只是简单的字符文字，但现在「文本」的涵义已经可以扩展为图片、视频、压缩包等，在 HTTP 眼里这些都算作「文本」。\"]},\"967\":{\"h\":\"二、http常见的状态码\",\"t\":[\" 五大类 HTTP 状态码 \",\"301 永久重定向。说明请求的资源已经不存在了，需改用新的 URL 再次访问。\",\"302表示临时重定向。表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。\",\"403 Fobidden。表示禁止访问资源。并不是客户端的请求错误\",\"501 Not Implemented 表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。\",\"502 Bad Gateway通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。\"]},\"968\":{\"h\":\"三、http缓存技术\"},\"969\":{\"h\":\"强制缓存\",\"t\":[\"指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边。\",\"如下图中，返回的是 200 状态码，但在 size 项中标识的是 from disk cache，就是使用了强制缓存。\",\"img\"]},\"970\":{\"h\":\"协商缓存\",\"t\":[\"当我们在浏览器使用开发者工具的时候，你可能会看到过某些请求的响应码是 304，这个是告诉浏览器可以使用本地缓存的资源，通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存。\"]},\"971\":{\"h\":\"四、http和https区别\",\"t\":[\"HTTP 由于是明文传输，所以安全上存在以下三个风险：\",\"窃听风险，比如通信链路上可以获取通信内容，用户号容易没。\",\"篡改风险，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。\",\"冒充风险，比如冒充淘宝网站，用户钱容易没。\",\"HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议，可以很好的解决了上述的风险：\",\"信息加密：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。\",\"校验机制：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。\",\"身份证书：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。\"]},\"972\":{\"h\":\"如何解决\",\"t\":[\"混合加密的方式实现信息的机密性，解决了窃听的风险。\",\"摘要算法的方式来实现完整性，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。\",\"将服务器公钥放入到数字证书中，解决了冒充的风险。\"]},\"973\":{\"h\":\"http和https区别\",\"t\":[\"端口和ssl加密\",\"数子证书工作流程\"]},\"974\":{\"h\":\"五、http1.0,http2.0,http3.0之间的区别\"},\"975\":{\"h\":\"HTTP/1.1 改进：\",\"t\":[\"使用长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。\",\"支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。\"]},\"976\":{\"h\":\"HTTP/2改进：\",\"t\":[\"头部压缩\",\"二进制格式\",\"并发传输，引出了 Stream 概念，多个 Stream 复用在一条 TCP 连接。\",\"服务器主动推送资源，服务端不再是被动地响应，可以主动向客户端发送消息。\"]},\"977\":{\"h\":\"http3.0改进：\",\"t\":[\"HTTP/1.1 中的管道（ pipeline）虽然解决了请求的队头阻塞，但是没有解决响应的队头阻塞，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等响应完这个请求后， 才能处理下一个请求，这属于 HTTP 层队头阻塞。\",\"HTTP/2 虽然通过多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞 ，但是一旦发生丢包，就会阻塞住所有的 HTTP 请求，这属于 TCP 层队头阻塞。\",\"HTTP/2 队头阻塞的问题是因为 TCP，所以 HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！\"]},\"978\":{\"h\":\"六、队头阻塞\",\"t\":[\"采用HTTP/2时，浏览器一般会在单个TCP连接中创建并行的几十个乃至上百个传输。\",\"如果HTTP/2连接双方的网络中有一个数据包丢失，或者任何一方的网络出现中断，整个TCP连接就会暂停，丢失的数据包需要被重新传输。因为TCP是一个按序传输的链条，因此如果其中一个点丢失了，链路上之后的内容就都需要等待。\",\"如下图所示，我们一个用链条来表现一个连接上发送的两个流（传输），红色的与绿色的数据流：\",\"img\"]},\"979\":{\"c\":[\"http\",\"网络协议\"]},\"980\":{\"c\":[\"http\"]},\"981\":{\"h\":\"1、变量作用域\"},\"982\":{\"h\":\"一、定义\",\"t\":[\"python变量的作用域取决于变量被赋值的位置，python中，只有当变量在模块，类，函数中定义的时候才会有作用域的概念。一共有四种作用域:\"]},\"983\":{\"h\":\"二、局部作用域\",\"t\":[\"在函数中创建的变量，是局部变量，当函数被执行时，会创建一个局部作用域，这些局部变量只能在这个作用域内使用，出了这个作用域就无法使用了\",\"def test(): value = 100 print(value) print(value) \"]},\"984\":{\"h\":\"三、嵌套作用域\",\"t\":[\"def test(): value = 100 def test_2(): value2 = 99 print(value2, value) return test_2 a = test() a() \",\"如果一个函数的内部又定义了一个函数，那么这样就产生了嵌套作用域，其实嵌套作用域是一个相对概念。\"]},\"985\":{\"h\":\"四、全局作用域\",\"t\":[\"在Python中，全局作用域指的是在整个程序范围内都可以访问的变量和函数的集合。全局作用域中的变量和函数可以在程序的任何地方被访问和修改，除非它们被限定在更小的作用域内（如局部作用域或嵌套作用域）。\",\"value = 100 def test(): print(value) test() \",\"全局作用域与局部作用域：\",\"如果在局部作用域（如函数内部）定义了一个与全局作用域中同名的变量，那么在局部作用域中对这个变量的修改不会影响到全局作用域中的变量，除非使用global关键字。\",\"修改全局变量：\",\"在函数内部，如果你想修改全局变量，需要使用global关键字来声明这个变量是全局的。\",\"x = 5 def my_function(): global x x = 10 my_function() print(x) # 输出: 10 \",\"全局作用域与类：\",\"在类定义中，类变量属于全局作用域，因为它们是在模块级别定义的。\",\"实例变量则属于局部作用域，因为它们是针对每个类的实例单独创建的。\"]},\"986\":{\"h\":\"五、内置作用域，系统内固定模块中定义的变量\",\"t\":[\"在Python中，内置作用域指的是Python解释器自动提供的一组预定义的变量和函数，它们是Python语言的一部分，不需要导入任何模块即可直接使用。这些内置的变量和函数是Python语言的核心组成部分，它们包括：\",\"内置常量：\",\"True 和 False：布尔值。\",\"None：表示空值或无值。\",\"内置类型：\",\"int、float、str、list、tuple、dict、set、frozenset、bool、bytes、bytearray、complex 等。\",\"内置函数：\",\"len()：返回对象（如列表、元组、字典等）的长度。\",\"range()：返回一个可迭代的数字序列。\",\"min()、max()：返回一组值中的最小值或最大值。\",\"type()：返回对象的类型。\",\"isinstance()：检查一个对象是否是一个已知的类型。\",\"print()：打印输出。\",\"open()：打开一个文件。\",\"help()：提供关于对象的文档字符串。\",\"dir()：返回对象的属性列表。\",\"eval()：计算字符串表达式的值。\",\"exec()：执行字符串中的Python代码。\",\"globals()、locals()：返回当前全局和局部符号表的字典。\",\"内置异常：\",\"Exception：所有内置非系统退出异常的基类。\",\"TypeError、ValueError、IndexError、KeyError 等。\",\"内置模块：\",\"__main__：如果Python脚本作为主程序运行，这个模块会包含脚本的代码。\",\"sys：提供访问解释器的变量和函数。\",\"math：提供数学运算函数。\",\"datetime：提供日期和时间处理的类。\",\"json：用于解析和生成JSON数据。\",\"os：提供操作系统相关功能。\",\"re：提供正则表达式匹配操作。\",\"random：提供生成随机数的函数。\",\"这些内置的变量和函数是Python语言的一部分，它们被存储在内置作用域中，可以直接访问，无需任何导入语句。这些内置功能为Python编程提供了极大的便利，使得开发者可以快速地进行各种操作，而不需要依赖外部库。\"]},\"987\":{\"c\":[\"python\"]},\"988\":{\"c\":[\"变量作用域\"]},\"989\":{\"h\":\"2、python闭包\"},\"990\":{\"h\":\"一、定义\",\"t\":[\"闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。\"]},\"991\":{\"h\":\"一、闭包的作用\",\"t\":[\"闭包可以保存当前的运行环境\",\"外函数返回了内函数的引用\",\"外函数把临时变量绑定给内函数\",\"闭包是装饰器的基础\"]},\"992\":{\"h\":\"二、闭包实例\",\"t\":[\"#闭包函数的实例 # outer是外部函数 a和b都是外函数的临时变量 def outer( a ): b = 10 # inner是内函数 def inner(): #在内函数中 用到了外函数的临时变量 print(a+b) # 外函数的返回值是内函数的引用 return inner if __name__ == '__main__': # 在这里我们调用外函数传入参数5 #此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo # 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数 demo = outer(5) # 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量 # demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数 demo() # 15 demo2 = outer(7) demo2()#17 \"]},\"993\":{\"c\":[\"python\"]},\"994\":{\"c\":[\"闭包\"]},\"995\":{\"h\":\"3、python装饰器\",\"t\":[\"定义：装饰器可以在不改变原有代码的基础上，引用源代码的变量和返回值从而可以改变源代码的行为。\"]},\"996\":{\"h\":\"一、简单示例\",\"t\":[\"import time def time_use(func): def wrapper(): start = time.time() res = func() end = time.time() print(f'执行用时::{end - start}') return res return wrapper @time_use def test(): for i in range(100000000): pass test() \"]},\"997\":{\"h\":\"二、带有参数\",\"t\":[\"import time from functools import wraps def retry(count=3, sleep=1): def wrapper(func): @wraps def inner(*args, **kwargs): res = None for i in range(count): try: res = func(*args, **kwargs) except Exception as e: print(f'函数执行出错::{e}') time.sleep(sleep) continue return res return inner return wrapper \"]},\"998\":{\"h\":\"三、基于类的装饰器\",\"t\":[\"import time class Decorator(object): def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): t1 = time.time() res = self.func(*args, **kwargs) t2 = time.time() print(\\\"函数执行时长:\\\"+ str(t2 - t1)) @Decorator def test(): time.sleep(1.5) test() \"]},\"999\":{\"h\":\"四、使用装饰器实现缓存\"},\"1000\":{\"h\":\"1. 缓存算法\",\"t\":[\"经典的缓存算法有3个：\",\"FIFO算法\",\"LFU算法\",\"LRU算法\"]},\"1001\":{\"h\":\"1.1 FIFO算法\",\"t\":[\"FIFO（First in First out），先进先出， 该算法的核心原则是： 如果一个数据最先进入缓存中，则应该最早淘汰掉，当缓存容量满了以后，应当将最早被缓存的数据淘汰掉。FIFO算法是一种比较简单的算法，使用队列就可以轻易的实现。\"]},\"1002\":{\"h\":\"1.2 LFU 算法\",\"t\":[\"LFU（Least Frequently Used）最近最少使用算法， 这个算法的核心在于：如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小。\"]},\"1003\":{\"h\":\"1.3 LRU 算法\",\"t\":[\"LRU (Least Recently Used)， 最近最久未使用算法，该算法的核心原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小\",\"LFU算法和LRU算法乍看起来是一个意思，但其实很不同，LRU的淘汰规则是基于访问时间，而LFU是基于访问次数的。\",\"一个缓存的数据，一段时间内被命中很多次，这个数据在LFU算法里会被保留，但在LRU算法里则可能被淘汰，虽然这段时间内，比如2分钟内被命中了很多次，可是，这些事情都发生在1分50秒之前的10秒钟里，自那以后就再也没有被命中，LRU算法则可能会将其淘汰。\",\"from inspect import signature def fifo_cache(maxsize=128): cache = dict() cache_list = list() def wrapper(func): sig = signature(func) def inner(*args, **kwargs): bound_values = sig.bind(*args, **kwargs) key = bound_values.__str__() value = cache.get(key) if value: print('命中缓存') return value if len(cache_list) >= maxsize: old_key = cache_list.pop() if old_key in cache: cache.pop(old_key) result = func(*args, **kwargs) cache_list.append(key) cache.setdefault(key, result) return result return inner return wrapper @fifo_cache() def test1(x, y): return x + y @fifo_cache() def test2(x, y, z=20): return x + y + z @fifo_cache() def test3(*args, **kwargs): return 5 print(test1(19, 20)) print(test2(19, 20, 20)) print(test2(19, 20)) # 不会命中缓存 print(test3(4, 2, x=6, y=9)) print(test1(19, 20)) \"]},\"1004\":{\"c\":[\"python\"]},\"1005\":{\"c\":[\"装饰器\"]},\"1006\":{\"h\":\"4、with 上下文语句\"},\"1007\":{\"h\":\"一、什么是with 上下文语句\",\"t\":[\"with 语句用于管理上下文语句，可以使用with作为上下文管理器\",\"上下文，相当于现实生活中的上下文语义，在python中脱离了上下文环境所声明的类，属性可能会失效\"]},\"1008\":{\"h\":\"二、什么情况下会声明上下文\",\"t\":[\"在我们需要操作资源的时候，可以使用上下文语句，来操作资源的连接和关闭，专注于业务代码的实现\",\"经典的例子就是操作文件时使用的\",\"with open(\\\"demo.txt\\\") as f: f.read() \"]},\"1009\":{\"h\":\"三、我们如何声明一个上下文管理器\",\"t\":[\"声明一个类，类中实现了__enter__, __exit__方法的就是一个上下文管理器\",\"例子\",\"class MyResource: def __enter__(self): print(\\\"begin connect resource\\\") return self def __exit__(self, exc_type, exc_value, tb): print(\\\"close connection\\\") def query(self): print(\\\"begin execute resource\\\") with MyResource() as resource: resource.query() \",\"打印结果\",\"begin connect resource begin execute resource close connection \",\"问题一、这个as 后面的到底是什么 在当前上下文环境中它是__enter__方法中返回的值，当脱离了这个上下文环境就是None\",\"问题二、 __exit__中参数 exc_type, exc_value, tb是代表着什么 当上下文中的代码正常执行的时候这些参数都是None没有任何意义，当上下文代码中出现异常时，这里的参数就代表这异常信息\",\"class MyResource: def __enter__(self): print(\\\"begin connect resource\\\") return self def __exit__(self, exc_type, exc_value, tb): print(f\\\"exc_type=={exc_type}\\\") print(f\\\"exc_value=={exc_value}\\\") print(f\\\"tb=={tb}\\\") print(\\\"close connection\\\") def query(self): print(\\\"begin execute resource\\\") with MyResource() as resource: resource.query() # 结果 # begin connect resource # exc_type==<class 'ZeroDivisionError'> # exc_value==division by zero # tb==<traceback object at 0x018DEA80> # close connection \",\"问题三、__exit__是否有返回值\",\"__exit__可以有返回值，返回值只可以为True和False两种，True代表着出现异常，会在上下文中进行处理，不会返回出结果，False代表着出现异常会将错误信息返回出来可以被try except所捕获，默认没有返回值就是返回None,也就是False\",\"try: with MyResource() as resource: 1/0 resource.query() except Exception as e: print(f\\\"error==={e}\\\") # 没有返回值->False begin connect resource exc_type==<class 'ZeroDivisionError'> exc_value==division by zero tb==<traceback object at 0x0152FA58> close connection error===division by zero # 有返回值 ->True begin connect resource exc_type==<class 'ZeroDivisionError'> exc_value==division by zero tb==<traceback object at 0x01B1EAD0> close connection \"]},\"1010\":{\"h\":\"四、使用其他方法声明一个上下文管理器\",\"t\":[\"from contextlib import contextmanager @contextmanager def file_open(path): f = None try: f = open(path, \\\"w\\\") yield f except OSError: print(\\\"We had an error!\\\") finally: print(\\\"Closing file\\\") f.close() if __name__ == \\\"__main__\\\": with file_open(\\\"test.txt\\\") as f: f.write(\\\"Testing context managers\\\") \",\"也可以在类中进行使用，具体请参考官网\",\"参考案例\",\"base.py from datetime import datetime from flask_sqlalchemy import SQLAlchemy as _SQLAlchemy, BaseQuery from sqlalchemy import Column, Integer, SmallInteger from contextlib import contextmanager from app.libs.api_exceptions.exceptions import NotFundException class SQLAlchemy(_SQLAlchemy): @contextmanager def auto_commit(self): try: yield self.session.commit() except Exception as e: db.session.rollback() raise e class Query(BaseQuery): def filter_by(self, **kwargs): if 'status' not in kwargs.keys(): kwargs['status'] = 1 return super(Query, self).filter_by(**kwargs) def get_or_404_for_api(self, ident, description=None): rv = self.get(ident) if rv is None: raise NotFundException() return rv def first_or_404_for_api(self, description=None): rv = self.first() if rv is None: raise NotFundException() return rv db = SQLAlchemy(query_class=Query) class Base(db.Model): __abstract__ = True create_time = Column(Integer) status = Column(SmallInteger, default=1) def __init__(self): self.create_time = int(datetime.now().timestamp()) @property def create_datetime(self): if self.create_time: return datetime.fromtimestamp(self.create_time) else: return None def set_attrs(self, attrs_dict): for key, value in attrs_dict.items(): if hasattr(self, key) and key != 'id': setattr(self, key, value) def delete(self): self.status = 0 def __getitem__(self, key): return getattr(self, key) \",\"user_view.py @api.route('', methods=[\\\"DELETE\\\"]) @auth.login_required def delete_user(): uid = g.user.uid with db.auto_commit(): user = User.query.filter_by(id=uid).first_or_404_for_api() user.delete() return DeleteSuccess() \"]},\"1011\":{\"c\":[\"python\"]},\"1012\":{\"c\":[\"with 上下文语句\"]},\"1013\":{\"h\":\"5、迭代器\"},\"1014\":{\"h\":\"一、定义\",\"t\":[\"迭代是Python最强大的功能之一，是访问集合元素的一种方式。\",\"迭代器是一个可以记住遍历的位置的对象。\",\"迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。\",\"迭代器有两个基本的方法：iter() 和 next()。\",\"字符串，列表或元组对象都可用于创建迭代器\"]},\"1015\":{\"h\":\"二、定义迭代器\",\"t\":[\"把一个类作为一个迭代器使用需要在类中实现两个方法 iter() 与 next()\",\"class MyNumbers: def __iter__(self): self.a = 1 return self def __next__(self): x = self.a self.a += 1 return x myclass = MyNumbers() myiter = iter(myclass) print(next(myiter)) print(next(myiter)) print(next(myiter)) print(next(myiter)) print(next(myiter)) \"]},\"1016\":{\"h\":\"三、 StopIteration\",\"t\":[\"StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 next() 方法中我们可以设置在完成指定循环次数后触发StopIteration异常来结束迭代。\"]},\"1017\":{\"h\":\"四、迭代器的判断\",\"t\":[\"def is_iterable(obj): status = True try: iter(obj) except TypeError: status = False return status # 判断迭代器对象 def is_iterator(obj): return is_iterable(obj) and obj is iter(obj) \"]},\"1018\":{\"c\":[\"python\"]},\"1019\":{\"c\":[\"生成器\"]},\"1020\":{\"h\":\"6、生成器\"},\"1021\":{\"h\":\"一、定义\",\"t\":[\"在 Python 中，使用了 yield 的函数被称为生成器（generator）。\",\"跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。\",\"在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。\",\"调用一个生成器函数，返回的是一个迭代器对象。\"]},\"1022\":{\"h\":\"二、特点\",\"t\":[\"是一种典型的以时间换空间的方法\",\"如果我们要处理更多元素，那么所占内存就呈线性增大，所以受到内存限制，列表容量是有限的。通常我们并不会一次处理所有元素，而只是集中在其中的某些相邻的元素上。所以如果列表元素可以用某种算法用已知量推导出来，就不必一次创建所有的元素。这种边循环边计算的机制，称为生成器（generator），生成器是用时间换空间的典型实例。\"]},\"1023\":{\"h\":\"三、生成器表达式\",\"t\":[\"list0 = [x * x for x in range(5)] print(list0) list_generator0 = (x * x for x in range(5)) print(list_generator0) list_generator1 = (x * x for x in range(5000000)) print(sys.getsizeof(list_generator0)) print(sys.getsizeof(list_generator1)) >>> [0, 1, 4, 9, 16] <generator object <genexpr> at 0x000002C7B9955B48> 88 88 \"]},\"1024\":{\"h\":\"四、生成器函数\",\"t\":[\"通过生成器表达式来生成 generator 是有局限的，比如斐波那契数列用表达式写不出来，复杂的处理需要生成器函数完成。\",\"def fibonacci(n): i, j = 0, 1 fibonacci_list = list() while i < n: fibonacci_list.append(i) i, j = j, i + j return fibonacci_list print(fibonacci(10)) \"]},\"1025\":{\"h\":\"五、生成器的本质\",\"t\":[\"任何一个生成器都会定义一个名为 next 的方法，这个方法要在最后一个元素之后需抛出 StopIteration 异常。next() 函数的本质就是调用对象的 next()。这个方法要么返回迭代的下一项，要么引起结束迭代的异常 StopIteration，下面的示例揭示了生成器的本质。\"]},\"1026\":{\"c\":[\"python\"]},\"1027\":{\"c\":[\"生成器\"]},\"1028\":{\"h\":\"7、python多线程\"},\"1029\":{\"h\":\"一、定义\",\"t\":[\"操作系统课上我们都学过，进程是资源的分配单位，而线程是CPU调度运行的基本单位。也就是说，即使是多进程程序，调度依然是按照多个线程去进行调度，由于CPU时间片分配给每个独立调度的线程，拥有四个线程的进程比拥有一个线程的进程拥有更多的CPU时间片。如果一个有四个线程的进程运行在一个四核的CPU机器上，那么核的利用率可以达到100%，即所有的核都可以调度运行一个线程， 不会出现一方有难，八方围观的情况。同样，四个单线程进程也能使四核的CPU机器计算资源利用率达到100%，因为每个进程中的线程被独立调度执行。\",\"当我们被问到python多线程的时候，回答一般都会涉及到GIL，但是GIL其实不是python本身的特性，而是CPython实现时引入的一种机制， 而JPython的实现里面里就没有GIL。\",\"img\",\"总结python的多线程不是真正的多线程，不能发挥出计算机中多核的优点，原因是因为，Cpython中存在着GIL全局线程锁，同时只可以由一个线程进行运行\"]},\"1030\":{\"h\":\"二、python多线程的实现\",\"t\":[\"# 基于方法 def demo(): for i in range(10): print(i) t1 = threading.Thread(target=demo) t1.start() # 基于类 class Demo(threading.Thread): def __init__(self): super(Demo, self).__init__() def run(self) -> None: demo() \"]},\"1031\":{\"h\":\"三、线程锁LOCK\",\"t\":[\"线程安全是多线程或多进程编程中的一个概念，在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况\",\"锁是Python提供给我们能够自行操控线程切换的一种手段，使用锁可以让线程的切换变的有序。\",\"一旦线程的切换变的有序后，各个线程之间对数据的访问、修改就变的可控，所以若要保证线程安全，就必须使用锁\"]},\"1032\":{\"h\":\"锁的分类\",\"t\":[\"同步锁：lock（一次只能放行一个）\",\"递归锁：rlock（一次只能放行一个）\",\"条件锁：condition（一次可以放行任意个）\",\"事件锁：event（一次全部放行）\",\"信号量锁：semaphore（一次可以放行特定个）\"]},\"1033\":{\"h\":\"同步锁介绍\",\"t\":[\"方法\",\"描述\",\"threading.Lock()\",\"返回一个同步锁对象\",\"lockObject.acquire(blocking=True, timeout=1)\",\"上锁，当一个线程在执行被上锁代码块时，将不允许切换到其他线程运行，默认锁失效时间为1秒\",\"lockObject.release()\",\"解锁，当一个线程在执行未被上锁代码块时，将允许系统根据策略自行切换到其他线程中运行\",\"lockObject.locaked()\",\"判断该锁对象是否处于上锁状态，返回一个布尔值\",\"import threading num = 1 def add(): lock.acquire() global num for i in range(10_000_000): num += 1 lock.release() def sub(): lock.acquire() global num for i in range(10_000_000): num -= 1 lock.release() if __name__ == \\\"__main__\\\": lock = threading.Lock() subThread01 = threading.Thread(target=add) subThread02 = threading.Thread(target=sub) subThread01.start() subThread02.start() subThread01.join() subThread02.join() print(\\\"num result : %s\\\" % num) \"]},\"1034\":{\"h\":\"死锁\",\"t\":[\"对于同步锁来说，一次acquire()必须对应一次release()，不能出现连续重复使用多次acquire()后再重复使用多次release()的操作，这样会引起死锁造成程序的阻塞，完全不动了，如下所示：\"]},\"1035\":{\"h\":\"Event事件\",\"t\":[\"事件锁是基于条件锁来做的，它与条件锁的区别在于一次只能放行全部，不能放行任意个数量的子线程继续运行。\",\"我们可以将事件锁看为红绿灯，当红灯时所有子线程都暂停运行，并进入“等待”状态，当绿灯时所有子线程都恢复“运行”。\",\"方法\",\"描述\",\"threading.Event()\",\"返回一个事件锁对象\",\"lockObject.clear()\",\"将事件锁设为红灯状态，即所有线程暂停运行\",\"lockObject.is_set()\",\"用来判断当前事件锁状态，红灯为False，绿灯为True\",\"lockObject.set()\",\"将事件锁设为绿灯状态，即所有线程恢复运行\",\"lockObject.wait(timeout=None)\",\"将当前线程设置为“等待”状态，只有该线程接到“绿灯通知”或者超时时间到期之后才会继续运行，在“等待”状态下的线程将允许系统根据策略自行切换到其他线程中运行\"]},\"1036\":{\"h\":\"四、线程池\",\"t\":[\"线程池是一种用于减少线程本身创建和销毁造成的开销的技术，属于典型的空间换时间操作。如果应用程序需要频繁的将任务派发到线程中执行，线程池就是必选项，因为创建和释放线程涉及到大量的系统底层操作，开销较大，如果能够在应用程序工作期间，将创建和释放线程的操作变成预创建和借还操作，将大大减少底层开销。线程池在应用程序启动后，立即创建一定数量的线程，放入空闲队列中。这些线程最开始都处于阻塞状态，不会消耗CPU资源，但会占用少量的内存空间。当任务到来后，从队列中取出一个空闲线程，把任务派发到这个线程中运行，并将该线程标记为已占用。当线程池中所有的线程都被占用后，可以选择自动创建一定数量的新线程，用于处理更多的任务，也可以选择让任务排队等待直到有空闲的线程可用。在任务执行完毕后，线程并不退出结束，而是继续保持在池中等待下一次的任务。当系统比较空闲时，大部分线程长时间处于闲置状态时，线程池可以自动销毁一部分线程，回收系统资源。基于这种预创建技术，线程池将线程创建和销毁本身所带来的开销分摊到了各个具体的任务上，执行次数越多，每个任务所分担到的线程本身开销则越小。\",\"一般线程池都必须具备下面几个组成部分：\",\"线程池管理器：用于创建并管理线程池。\",\"工作线程和线程队列：线程池中实际执行的线程以及保存这些线程的容器。\",\"任务接口：将线程执行的任务抽象出来，形成任务接口，确保线程池与具体的任务无关。\",\"任务队列：线程池中保存等待被执行的任务的容器。\"]},\"1037\":{\"c\":[\"python\"]},\"1038\":{\"c\":[\"多线程\"]},\"1039\":{\"h\":\"8、协程\"},\"1040\":{\"h\":\"详情还是要看文档\",\"t\":[\"run()\",\"创建事件循环，运行一个协程，关闭事件循环。\",\"Runner\",\"A context manager that simplifies multiple async function calls.\",\"Task\",\"Task对象\",\"TaskGroup\",\"A context manager that holds a group of tasks. Provides a convenient and reliable way to wait for all tasks in the group to finish.\",\"create_task()\",\"Start an asyncio Task, then returns it.\",\"current_task()\",\"返回当前Task对象\",\"all_tasks()\",\"Return all tasks that are not yet finished for an event loop.\",\"awaitsleep()\",\"休眠几秒。\",\"awaitgather()\",\"并发执行所有事件的调度和等待。\",\"awaitwait_for()\",\"有超时控制的运行。\",\"awaitshield()\",\"屏蔽取消操作\",\"awaitwait()\",\"完成情况的监控器\",\"timeout()\",\"Run with a timeout. Useful in cases when wait_for is not suitable.\",\"to_thread()\",\"在不同的 OS 线程中异步地运行一个函数。\",\"run_coroutine_threadsafe()\",\"从其他OS线程中调度一个协程。\",\"for inas_completed()\",\"用 for 循环监控完成情况。\",\"使用 asyncio.gather() 并行运行.\",\"使用 asyncio.wait_for() 强制超时.\",\"撤销协程.\",\"asyncio.sleep() 的用法.\"]},\"1041\":{\"h\":\"事件循环\",\"t\":[\"所以，我们可以想象，现在有一个循环和一个生成器列表，每次循环，我们都将所有的生成器进行一次调用，所有生成器交替执行。\"]},\"1042\":{\"c\":[\"python\"]},\"1043\":{\"c\":[\"协程\"]},\"1044\":{\"h\":\"1、localstock到ContextVar\"},\"1045\":{\"h\":\"问题引入\",\"t\":[\"当前flask版本为3.0.2，记得之前flask实现线程隔离的时候是使用localstock来实现的，现在再来看源码出现了ContextVar让我感觉比较陌生，接下来我们就来好好看看flask为什么要使用ContextVar。\",\"源码对比\",\"旧版本global.py\",\"_request_ctx_stack = LocalStack() _app_ctx_stack = LocalStack() current_app = LocalProxy(_find_app) request = LocalProxy(partial(_lookup_req_object, \\\"request\\\")) session = LocalProxy(partial(_lookup_req_object, \\\"session\\\")) g = LocalProxy(partial(_lookup_app_object, \\\"g\\\")) \",\"新版本global.py\",\"_cv_app: ContextVar[AppContext] = ContextVar(\\\"flask.app_ctx\\\") app_ctx: AppContext = LocalProxy(_cv_app, unbound_message=_no_app_msg) current_app: Flask = LocalProxy(_cv_app, \\\"app\\\", unbound_message=_no_app_msg) g: _AppCtxGlobals = LocalProxy(_cv_app, \\\"g\\\", unbound_message=_no_app_msg) _cv_request: ContextVar[RequestContext] = ContextVar(\\\"flask.request_ctx\\\") request_ctx: RequestContext = LocalProxy(_cv_request, unbound_message=_no_req_msg) request: Request = LocalProxy(_cv_request, \\\"request\\\", unbound_message=_no_req_msg) session: SessionMixin = LocalProxy(_cv_request, \\\"session\\\", unbound_message=_no_req_msg) \"]},\"1046\":{\"h\":\"一、两点疑问\"},\"1047\":{\"h\":\"问题1：为什么使用ContextVar\"},\"1048\":{\"h\":\"问题2：flask是不是不再使用栈的方式进行处理应用上下文了\",\"t\":[\"​ 在Python 3.7加入了一个新的模块contextvars，标题是 Context Variables，也就是「上下文变量」。那么什么是上下文呢。可以参考这个文章flask with上下文。简单来说就是上下文，相当于现实生活中的上下文语义，在python中脱离了上下文环境所声明的类，属性可能会失效。\",\"​ 上下文不是我们这次要讲的重点，我们主要看下为什么从threading.loacl转换到ContextVar。\"]},\"1049\":{\"h\":\"二、线程隔离\",\"t\":[\"threading.loacl是为线程开辟了一块单独的空间，每个线程之间的数据资源可以相互独立。我们可以简单实现下threading.local\",\"import threading class Local(object): def __init__(self): object.__setattr__(self, 'storage', {}) def __setattr__(self, key, value): ident = threading.get_ident() if ident in self.storage: self.storage[ident][key] = value else: self.storage[ident] = {key: value} def __getattr__(self, item): ident = threading.get_ident() if ident not in self.storage: return return self.storage[ident].get(item) local = Local() def task(arg): local.x1 = arg print(local.x1) for i in range(5): t = threading.Thread(target=task, args=(i,)) t.start() print(getattr(local, 'storage')) # {44196: {'x1': 0}, 44228: {'x1': 1}, 43692: {'x1': 2}, 41552: {'x1': 3}, 42804: {'x1': 4}} \",\"flask中实现的是\",\"try: from greenlet import getcurrent as get_ident except ImportError: try: from thread import get_ident except ImportError: from _thread import get_ident class Local(object): __slots__ = (\\\"__storage__\\\", \\\"__ident_func__\\\") def __init__(self): object.__setattr__(self, \\\"__storage__\\\", {}) object.__setattr__(self, \\\"__ident_func__\\\", get_ident) def __iter__(self): return iter(self.__storage__.items()) def __call__(self, proxy): \\\"\\\"\\\"Create a proxy for a name.\\\"\\\"\\\" return LocalProxy(self, proxy) def __release_local__(self): self.__storage__.pop(self.__ident_func__(), None) def __getattr__(self, name): try: return self.__storage__[self.__ident_func__()][name] except KeyError: raise AttributeError(name) def __setattr__(self, name, value): ident = self.__ident_func__() storage = self.__storage__ try: storage[ident][name] = value except KeyError: storage[ident] = {name: value} def __delattr__(self, name): try: del self.__storage__[self.__ident_func__()][name] except KeyError: raise AttributeError(name) \",\"可以看到flask这里不仅对于python线程实现了资源隔离，还对协程也实现了数据隔离。而flask引用的werkzeug有对于这个local进行了一层封装封装为了一个栈的形式\",\"class LocalStack(object): def __init__(self): self._local = Local() def __call__(self): def _lookup(): rv = self.top if rv is None: raise RuntimeError(\\\"object unbound\\\") return rv return LocalProxy(_lookup) def push(self, obj): rv = getattr(self._local, \\\"stack\\\", None) if rv is None: self._local.stack = rv = [] rv.append(obj) return rv def pop(self): stack = getattr(self._local, \\\"stack\\\", None) if stack is None: return None elif len(stack) == 1: release_local(self._local) return stack[-1] else: return stack.pop() @property def top(self): try: return self._local.stack[-1] except (AttributeError, IndexError): return None \",\"而我们使用ContextVar同样也可以实现线程隔离的方式，同时可以基于协程实现线程隔离\",\"import asyncio import contextvars # 申明Context变量 request = contextvars.ContextVar('Id of request') async def get(): print(f'Request ID (Inner): {request.get()}') async def test(req_id): request.set(req_id) await get() async def main(): tasks = [] for req_id in range(1, 5): tasks.append(asyncio.create_task(test(req_id))) await asyncio.gather(*tasks) asyncio.run(main()) # Request ID (Inner): 1 # Request ID (Inner): 2 # Request ID (Inner): 3 # Request ID (Inner): 4 \",\"因此我们回答第一个问题\",\"就是为什么使用ContextVar，因为它同样可以实现线程隔离的方式，而且是python自带的模块(python3.7后开始全部支持)，也是可以实现协程隔离。功能一致，python原生支持所以使用。\"]},\"1050\":{\"h\":\"三、flask是不是不再使用LocalStock来处理上下文了\",\"t\":[\"先说答案，是的flask不再使用LocalStock来处理上下文\",\"来看源码\",\"旧版flask ctx\",\" _app_ctx_stack = LocalStack() class AppContext(object): def __init__(self, app): self.app = app self.url_adapter = app.create_url_adapter(None) self.g = app.app_ctx_globals_class() # Like request context, app contexts can be pushed multiple times # but there a basic \\\"refcount\\\" is enough to track them. self._refcnt = 0 def push(self): \\\"\\\"\\\"Binds the app context to the current context.\\\"\\\"\\\" self._refcnt += 1 if hasattr(sys, \\\"exc_clear\\\"): sys.exc_clear() _app_ctx_stack.push(self) appcontext_pushed.send(self.app) def pop(self, exc=_sentinel): \\\"\\\"\\\"Pops the app context.\\\"\\\"\\\" try: self._refcnt -= 1 if self._refcnt <= 0: if exc is _sentinel: exc = sys.exc_info()[1] self.app.do_teardown_appcontext(exc) finally: rv = _app_ctx_stack.pop() assert rv is self, \\\"Popped wrong app context. (%r instead of %r)\\\" % (rv, self) appcontext_popped.send(self.app) def __enter__(self): self.push() return self def __exit__(self, exc_type, exc_value, tb): self.pop(exc_value) if BROKEN_PYPY_CTXMGR_EXIT and exc_type is not None: reraise(exc_type, exc_value, tb) \",\"可以看到旧版本确实使用local stock来作为context\",\"新版本\",\"class _AppCtxGlobals: def __getattr__(self, name: str) -> t.Any: try: return self.__dict__[name] except KeyError: raise AttributeError(name) from None def __setattr__(self, name: str, value: t.Any) -> None: self.__dict__[name] = value def __delattr__(self, name: str) -> None: try: del self.__dict__[name] except KeyError: raise AttributeError(name) from None def get(self, name: str, default: t.Any | None = None) -> t.Any: return self.__dict__.get(name, default) def pop(self, name: str, default: t.Any = _sentinel) -> t.Any: if default is _sentinel: return self.__dict__.pop(name) else: return self.__dict__.pop(name, default) def setdefault(self, name: str, default: t.Any = None) -> t.Any: return self.__dict__.setdefault(name, default) def __contains__(self, item: str) -> bool: return item in self.__dict__ def __iter__(self) -> t.Iterator[str]: return iter(self.__dict__) def __repr__(self) -> str: ctx = _cv_app.get(None) if ctx is not None: return f\\\"<flask.g of '{ctx.app.name}'>\\\" return object.__repr__(self) \",\"新版本已经使用一个类似于dict来存储应用上下文了。\",\"class AppContext: \\\"\\\"\\\"The app context contains application-specific information. An app context is created and pushed at the beginning of each request if one is not already active. An app context is also pushed when running CLI commands. \\\"\\\"\\\" def __init__(self, app: Flask) -> None: self.app = app self.url_adapter = app.create_url_adapter(None) self.g: _AppCtxGlobals = app.app_ctx_globals_class() self._cv_tokens: list[contextvars.Token[AppContext]] = [] def push(self) -> None: \\\"\\\"\\\"Binds the app context to the current context.\\\"\\\"\\\" self._cv_tokens.append(_cv_app.set(self)) appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync) def pop(self, exc: BaseException | None = _sentinel) -> None: # type: ignore \\\"\\\"\\\"Pops the app context.\\\"\\\"\\\" try: if len(self._cv_tokens) == 1: if exc is _sentinel: exc = sys.exc_info()[1] self.app.do_teardown_appcontext(exc) finally: ctx = _cv_app.get() _cv_app.reset(self._cv_tokens.pop()) if ctx is not self: raise AssertionError( f\\\"Popped wrong app context. ({ctx!r} instead of {self!r})\\\" ) appcontext_popped.send(self.app, _async_wrapper=self.app.ensure_sync) def __enter__(self) -> AppContext: self.push() return self def __exit__( self, exc_type: type | None, exc_value: BaseException | None, tb: TracebackType | None, ) -> None: self.pop(exc_value) \",\"我们来总结下\"]},\"1051\":{\"h\":\"1、第一实现多线程、协程数据隔离，我们可以使用的方式\",\"t\":[\"有原生的from thread import get_ident，from greenlet import getcurrent as get_ident\",\"原生模块：ContextVar\",\"第三方模块：from werkzeug.local import Local\",\"flask中已经率先使用ContextVar来做数据隔离，放弃使用了LocalStock。\",\"flask之前为什么为什么放弃使用栈：\",\"​ 其实并不是非要用栈这种数据格式不可，只要我们可以实现多个请求过来实现数据隔离就可以了，重点不是非要使用栈来做这种数据格式，重点是要实现数据隔离，而ContextVar也是实现数据隔离这个需求。\"]},\"1052\":{\"h\":\"2、那之前为什么要使用栈呢？\",\"t\":[\"Flask 在多应用的情况下，依旧可以通过 request.path 获得当前应用的信息，实现这个效果的前提就是，Flask 知道当前请求对应的上下文。栈结构很好的实现了这个前提，每个请求，其相关的上下文就在栈顶，直接将栈顶上下文出栈就可以获得当前请求对应上下文中的信息了。\",\"这是因为 Flask 的上下文中保存的数据都是存放在栈里并且会动态变化的，通过 LocalProxy 可以动态的访问相应的对象，从而避免造成数据访问异常。\"]},\"1053\":{\"h\":\"3、现在为什么不使用栈了？\",\"t\":[\"因为我们使用ContextVar会更加智能的知道当前的请求，以及当前的数据，ContextVar中的set和get方法，同样可以实现动态的访问相应的对象，从而避免造成数据访问异常。\"]},\"1054\":{\"c\":[\"源码分析\",\"flask\"]},\"1055\":{\"c\":[\"源码分析\",\"flask\"]},\"1056\":{\"h\":\"2、flask的启动过程\"},\"1057\":{\"h\":\"一、实例化对象的过程\",\"t\":[\"我们需要首先明白一个对象实例化会做那些事情\",\"def cls_instance(): print('我是类属性') return 1 def init_instance(): print('我是实例属性') return 2 class Demo: instance = cls_instance() def __init__(self): self.ini = init_instance() def __call__(self, *args, **kwargs): print('我是call方法') app = Demo() # 我是类属性 # 我是实例属性 \",\"我们可以看出来一个类进行初始化需要先执行类属性，接着执行实例属性，当请求过来的时候会执行__call__方法\",\"那么Flask中的call方法是什么时候执行的呢？\",\"我们可以先改造一下flask\",\" def __call__( self, environ: WSGIEnvironment, start_response: StartResponse ) -> cabc.Iterable[bytes]: \\\"\\\"\\\"The WSGI server calls the Flask application object as the WSGI application. This calls :meth:`wsgi_app`, which can be wrapped to apply middleware. \\\"\\\"\\\" print('call') return self.wsgi_app(environ, start_response) \",\"当我们发送请求的时候会打印call,因此我们在分析flask的启动过程只需要分析以下代码就可以了，就是 Flask(name),路由添加，和app.run这三部分就可以了\",\"from flask import Flask app = Flask(__name__) @app.route('/index') def index(): return '1231' if __name__ == '__main__': app.run() \"]},\"1058\":{\"h\":\"二、flask实例化过程\"},\"1059\":{\"h\":\"Flask类的构造\",\"t\":[\"Scaffold\",\"class Scaffold: name: str _static_folder: str | None = None _static_url_path: str | None = None def __init__( self, import_name: str, static_folder: str | os.PathLike[str] | None = None, static_url_path: str | None = None, template_folder: str | os.PathLike[str] | None = None, root_path: str | None = None, ): self.import_name = import_name self.static_folder = static_folder # type: ignore self.static_url_path = static_url_path self.template_folder = template_folder if root_path is None: root_path = get_root_path(self.import_name) self.root_path = root_path self.view_functions= {} self.error_handler_spec = defaultdict(lambda: defaultdict(dict)) self.before_request_func = defaultdict(list) self.after_request_funcs = defaultdict(list) self.teardown_request_funcs = defaultdict(list) self.template_context_processors= defaultdict(list, {None: [_default_template_ctx_processor]}) self.url_value_preprocessors= defaultdict(list) self.url_default_functions = defaultdict(list) \",\"APP\",\"class App(Scaffold): aborter_class = Aborter jinja_environment = Environment app_ctx_globals_class = _AppCtxGlobals config_class = Config secret_key = ConfigAttribute[t.Union[str, bytes, None]](\\\"SECRET_KEY\\\") url_rule_class = Rule url_map_class = Map test_client_class: type[FlaskClient] | None = None test_cli_runner_class: type[FlaskCliRunner] | None = None default_config: dict[str, t.Any] response_class: type[Response] def __init__( self, import_name: str, static_url_path: str | None = None, static_folder: str | os.PathLike[str] | None = \\\"static\\\", static_host: str | None = None, host_matching: bool = False, subdomain_matching: bool = False, template_folder: str | os.PathLike[str] | None = \\\"templates\\\", instance_path: str | None = None, instance_relative_config: bool = False, root_path: str | None = None, ): super().__init__( import_name=import_name, static_folder=static_folder, static_url_path=static_url_path, template_folder=template_folder, root_path=root_path, ) self.instance_path = instance_path self.config = self.make_config(instance_relative_config) self.aborter = self.make_aborter() self.json: JSONProvider = self.json_provider_class(self) self.url_build_error_handlers = [] self.teardown_appcontext_funcs: list[ft.TeardownCallable] = [] self.shell_context_processors: list[ft.ShellContextProcessorCallable] = [] self.blueprints: dict[str, Blueprint] = {} self.extensions: dict[str, t.Any] = {} self.url_map = self.url_map_class(host_matching=host_matching) self.subdomain_matching = subdomain_matching self._got_first_request = False self.cli.name = self.name \",\"Flask\",\"class Flask(App): app_ctx_globals_class = _AppCtxGlobals config_class = Config self.url_map = self.url_map_class(host_matching=host_matching) url_map_class = Map default_config ={} request_class: type[Request] = Request response_class: type[Response] = Response session_interface: SessionInterface = SecureCookieSessionInterface() def __init__( self, import_name: str, static_url_path: str | None = None, static_folder: str | os.PathLike[str] | None = \\\"static\\\", static_host: str | None = None, host_matching: bool = False, subdomain_matching: bool = False, template_folder: str | os.PathLike[str] | None = \\\"templates\\\", instance_path: str | None = None, instance_relative_config: bool = False, root_path: str | None = None, ): super().__init__( import_name=import_name, static_url_path=static_url_path, static_folder=static_folder, static_host=static_host, host_matching=host_matching, subdomain_matching=subdomain_matching, template_folder=template_folder, instance_path=instance_path, instance_relative_config=instance_relative_config, root_path=root_path, ) if self.has_static_folder: self_ref = weakref.ref(self) self.add_url_rule( f\\\"{self.static_url_path}/<path:filename>\\\", endpoint=\\\"static\\\", host=static_host, view_func=lambda **kw: self_ref().send_static_file(**kw), # type: ignore # noqa: B950 ) \",\"当我们排除掉一些模版静态文件之后我们可以得到以下部分\",\"class Flask: default_config ={} url_rule_class = Rule url_map_class = Map request_class: type[Request] = Request response_class: type[Response] = Response session_interface: SessionInterface = SecureCookieSessionInterface() def __init__(): self.view_functions= {} self.error_handler_spec = defaultdict(lambda: defaultdict(dict)) self.before_request_func = defaultdict(list) self.after_request_funcs = defaultdict(list) self.teardown_request_funcs = defaultdict(list) self.template_context_processors= defaultdict(list, {None: [_default_template_ctx_processor]}) self.url_value_preprocessors= defaultdict(list) self.url_default_functions = defaultdict(list) self.url_map = self.url_map_class(host_matching=host_matching) if self.has_static_folder: self_ref = weakref.ref(self) self.add_url_rule( f\\\"{self.static_url_path}/<path:filename>\\\", endpoint=\\\"static\\\", host=static_host, view_func=lambda **kw: self_ref().send_static_file(**kw), # type: ignore # noqa: B950 ) \",\"接下来我们一般的flask程序如下\",\"from flask import Flask config = {'SECRET_KEY': \\\"woaijmy\\\"} # 实例化Flask app = Flask(__name__) # 加载配置参数 app.config.from_object(config) # 添加前置处理参数 @app.before_request def before(): print('before') # 添加后置处理参数 @app.after_request def after(): print('after') # 定义视图函数 @app.route('/index') def index(): return '1231' if __name__ == '__main__': print('url_map::', app.url_map) print('before_request::', app.before_request_funcs) print('after_request::', app.after_request_funcs) # 运行 app.run() \"]},\"1060\":{\"h\":\"01、初始化\",\"t\":[\"我们可以知道flask初始化（Flask(__name__)）基本实现了以下这些功能\",\"加载flask默认配置\",\"声明response、request、session对象\",\"定义函数列表 \",\"error_handler_spec：异常处理函数\",\"before_request_func：请求前处理函数\",\"after_request_funcs：请求后处理函数\",\"teardown_request_funcs：请求关闭处理函数\",\"view_functions：视图处理函数\",\"url_default_functions：url默认处理函数\",\"定义url_map，添加静态文件路由\",\"以上我们已经知道了初始化要做的一些事情，接下来配置信息\"]},\"1061\":{\"h\":\"02、配置信息\",\"t\":[\"class Config(dict): def from_object(self, obj: object | str) -> None: if isinstance(obj, str): obj = import_string(obj) for key in dir(obj): if key.isupper(): self[key] = getattr(obj, key) \",\"这个就是比较简单，直接对于config对象进行添加属性即可\"]},\"1062\":{\"h\":\"03、定义处理函数\",\"t\":[\"# 添加前置处理参数 @app.before_request def before(): print('before') # 添加后置处理参数 @app.after_request def after(): print('after') \",\"这个配置请求处理函数它的实现逻辑呢，实际就是将前置处理函数放到after_request_funcs，其他以func结尾的同样也是这样的逻辑\",\" @setupmethod def before_request(self, f: T_before_request) -> T_before_request: self.before_request_funcs.setdefault(None, []).append(f) return f \"]},\"1063\":{\"h\":\"04、定义视图函数\",\"t\":[\" @setupmethod def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]: def decorator(f: T_route) -> T_route: endpoint = options.pop(\\\"endpoint\\\", None) self.add_url_rule(rule, endpoint, f, **options) return f return decorator @setupmethod def add_url_rule( self, rule: str, endpoint: str | None = None, view_func: ft.RouteCallable | None = None, provide_automatic_options: bool | None = None, **options: t.Any, ) -> None: if endpoint is None: endpoint = _endpoint_from_view_func(view_func) # type: ignore options[\\\"endpoint\\\"] = endpoint methods = options.pop(\\\"methods\\\", None) if methods is None: methods = getattr(view_func, \\\"methods\\\", None) or (\\\"GET\\\",) if isinstance(methods, str): raise TypeError( \\\"Allowed methods must be a list of strings, for\\\" ' example: @app.route(..., methods=[\\\"POST\\\"])' ) methods = {item.upper() for item in methods} required_methods = set(getattr(view_func, \\\"required_methods\\\", ())) if provide_automatic_options is None: provide_automatic_options = getattr(view_func, \\\"provide_automatic_options\\\", None ) if provide_automatic_options is None: if \\\"OPTIONS\\\" not in methods: provide_automatic_options = True required_methods.add(\\\"OPTIONS\\\") else: provide_automatic_options = False # Add the required methods now. methods |= required_methods rule_obj = self.url_rule_class(rule, methods=methods, **options) rule_obj.provide_automatic_options = provide_automatic_options # type: ignore[attr-defined] self.url_map.add(rule_obj) if view_func is not None: old_func = self.view_functions.get(endpoint) if old_func is not None and old_func != view_func: raise AssertionError( \\\"View function mapping is overwriting an existing\\\" f\\\" endpoint function: {endpoint}\\\" ) self.view_functions[endpoint] = view_func @setupmethod def endpoint(self, endpoint: str) -> t.Callable[[F], F]: def decorator(f: F) -> F: self.view_functions[endpoint] = f return f return decorator \",\"这里是稍微复杂点，我们可以理出来以下事情\",\"获取endpoint\",\"获取methods\",\"创建rule_obj并放入到url_map\",\"获取view_func，以endpoint为key，以view_func为值放入到view_functions\",\"所以这里就是定义视图函数，定义url_rule并放到url_map中，将视图函数放入到view_functions\",\"url_map：<Rule '/index' (HEAD, GET, OPTIONS) -> index>, url,请求方法，endpoint的集合\",\"view_funcs：'index': <function index at 0x000001B61CC30AF0>endpoint为key，视图函数为值的字典列表\",\"这里的endpiont就是视图函数和url的中间值，我们可以利用endpoint找到url,也可以使用endpoint找到视图函数\"]},\"1064\":{\"h\":\"05、app.run\",\"t\":[\" def run( self, host: str | None = None, port: int | None = None, debug: bool | None = None, load_dotenv: bool = True, **options: t.Any, ) -> None: if os.environ.get(\\\"FLASK_RUN_FROM_CLI\\\") == \\\"true\\\": if not is_running_from_reloader(): click.secho('') return if get_load_dotenv(load_dotenv): cli.load_dotenv() if \\\"FLASK_DEBUG\\\" in os.environ: self.debug = get_debug_flag() if debug is not None: self.debug = bool(debug) server_name = self.config.get(\\\"SERVER_NAME\\\") sn_host = sn_port = None if server_name: sn_host, _, sn_port = server_name.partition(\\\":\\\") if not host: if sn_host: host = sn_host else: host = \\\"127.0.0.1\\\" if port or port == 0: port = int(port) elif sn_port: port = int(sn_port) else: port = 5000 options.setdefault(\\\"use_reloader\\\", self.debug) options.setdefault(\\\"use_debugger\\\", self.debug) options.setdefault(\\\"threaded\\\", True) cli.show_server_banner(self.debug, self.name) from werkzeug.serving import run_simple try: run_simple(t.cast(str, host), port, self, **options) finally: self._got_first_request = False \",\"这里我们其他的都可以进行忽略只要看以下这个部分就可以了\",\"from werkzeug.serving import run_simple try: run_simple(t.cast(str, host), port, self, **options) finally: self._got_first_request = False \",\"这个代码表示我们可以利用werkzeug实现一个socket服务\",\"同样我们可以自己利用werkzeug实现一个简单的web服务\",\"from werkzeug.serving import run_simple from werkzeug.wrappers import Response def func(environ, start_response): print('请求来了') response = Response('你好') return response(environ, start_response) if __name__ == '__main__': run_simple('127.0.0.1', 5000, func) \"]},\"1065\":{\"h\":\"三、总结\",\"t\":[\"flask的启动过程大致可以分为以下四步\",\"初始化Flask对象\",\"创建resquest处理函数\",\"定义视图函数并创建路由规则\",\"利用werkzeug运行服务接受请求\"]},\"1066\":{\"c\":[\"源码分析\",\"flask\"]},\"1067\":{\"c\":[\"源码分析\",\"flask\"]},\"1068\":{\"h\":\"3、Flask上下文Contextvars\"},\"1069\":{\"h\":\"一. 为什么迁移到 contextvars ？\",\"t\":[\"Python 3.7 引入的 contextvars 模块提供了更灵活的上下文变量管理能力，支持 异步编程 和 更细粒度的上下文绑定。Flask 3.0 的迁移主要基于以下优势：\",\"异步支持：contextvars 天生支持异步/协程环境（如 asyncio），而 Werkzeug 的 Local 主要针对多线程。\",\"轻量级：标准库的 contextvars 性能更高，且无需依赖第三方库（如 Werkzeug）。\",\"更清晰的上下文管理：通过 Token 机制可更方便地管理上下文的嵌套和恢复。\"]},\"1070\":{\"h\":\"二. Flask 3.0.2 上下文的核心变化\"},\"1071\":{\"h\":\"2.1 上下文对象的实现\",\"t\":[\"Flask 3.0 的上下文（App Context 和 Request Context）现在基于 contextvars 实现，而非 Werkzeug 的 LocalStack。关键改动如下：\",\"contextvars.ContextVar：每个上下文（如 app_ctx 和 request_ctx）通过 ContextVar 绑定到当前执行上下文。\",\"async/await 支持：原生支持异步请求处理，无需额外适配。\"]},\"1072\":{\"h\":\"2.2 核心代码对比\"},\"1073\":{\"h\":\"旧版（基于 Werkzeug 的 LocalStack）\",\"t\":[\"# Flask 2.x 及之前版本 from werkzeug.local import LocalStack _request_ctx_stack = LocalStack() # 请求上下文栈 _app_ctx_stack = LocalStack() # 应用上下文栈 class RequestContext: def push(self): _request_ctx_stack.push(self) def pop(self): _request_ctx_stack.pop() \"]},\"1074\":{\"h\":\"新版（基于 contextvars）\",\"t\":[\"# Flask 3.0+ 的实现（简化版） import contextvars _request_ctx_var = contextvars.ContextVar(\\\"request_ctx\\\") _app_ctx_var = contextvars.ContextVar(\\\"app_ctx\\\") class RequestContext: def push(self): self._token = _request_ctx_var.set(self) def pop(self): _request_ctx_var.reset(self._token) \"]},\"1075\":{\"h\":\"三. 上下文的生命周期与管理\"},\"1076\":{\"h\":\"3.1 应用上下文（App Context）\",\"t\":[\"创建：通过 app.app_context() 或请求处理时自动创建。\",\"绑定：使用 contextvars.ContextVar.set() 将 AppContext 绑定到当前执行上下文。\",\"销毁：通过 ContextVar.reset(token) 恢复上下文状态。\"]},\"1077\":{\"h\":\"示例代码\",\"t\":[\"from flask import Flask, current_app app = Flask(__name__) @app.route('/') def index(): with app.app_context(): print(current_app.name) # 访问应用配置 # 上下文随 with 作用域自动销毁 \"]},\"1078\":{\"h\":\"3.2 请求上下文（Request Context）\",\"t\":[\"创建：通过 app.request_context(environ) 在 WSGI 处理器中创建。\",\"绑定：将 RequestContext 绑定到当前线程/协程的 contextvars。\",\"异步支持：在异步视图中，contextvars 可自动传递上下文。\"]},\"1079\":{\"h\":\"异步示例\",\"t\":[\"@app.route('/async') async def async_view(): # 异步请求处理 data = await some_async_operation() return data \"]},\"1080\":{\"h\":\"四. contextvars 的核心机制\"},\"1081\":{\"h\":\"4.1 ContextVar 的基本用法\",\"t\":[\"import contextvars # 定义一个上下文变量 my_var = contextvars.ContextVar(\\\"my_var\\\") # 设置值并获取 Token token = my_var.set(\\\"value1\\\") print(my_var.get()) # 输出 \\\"value1\\\" # 恢复原始值 my_var.reset(token) print(my_var.get()) # 输出原始值（默认 None 或自定义默认值） \"]},\"1082\":{\"h\":\"4.2 Flask 如何使用 ContextVar\",\"t\":[\"Flask 内部通过 ContextVar 管理核心对象：\",\"current_app：通过 app_ctx_var.get() 获取当前应用实例。\",\"request：通过 request_ctx_var.get() 获取当前请求对象。\"]},\"1083\":{\"h\":\"五. 源码关键路径（Flask 3.0+）\"},\"1084\":{\"h\":\"6.1 请求处理流程\",\"t\":[\"def wsgi_app(self, environ): # 创建请求上下文 request_ctx = self.request_context(environ) try: request_ctx.push() # 绑定到 contextvars response = self.dispatch_request() finally: request_ctx.pop() # 恢复上下文 return response \"]},\"1085\":{\"h\":\"6.2 AppContext 的 push/pop 实现\",\"t\":[\"class AppContext: def push(self): self._token = _app_ctx_var.set(self) def pop(self): _app_ctx_var.reset(self._token) \"]},\"1086\":{\"h\":\"六. 优势与最佳实践\"},\"1087\":{\"h\":\"6.1 主要优势\",\"t\":[\"异步友好：原生支持 async/await，无需额外适配。\",\"轻量级：标准库的 contextvars 性能更高，内存占用更低。\",\"上下文嵌套：通过 Token 可灵活管理多层上下文。\"]},\"1088\":{\"h\":\"6.2 最佳实践\",\"t\":[\"避免直接操作 contextvars：使用 Flask 提供的 current_app、request 等代理。\",\"处理异步场景：\",\"async def some_async_func(): # 异步函数中仍可访问 request user_id = request.args.get('user_id') await do_something(user_id) \",\"自定义上下文变量：\",\"my_ctx_var = contextvars.ContextVar(\\\"my_ctx_var\\\") def set_my_var(value): token = my_ctx_var.set(value) try: # 执行逻辑 pass finally: my_ctx_var.reset(token) \"]},\"1089\":{\"h\":\"七. 总结\",\"t\":[\"Flask 3.0.2 的上下文机制通过 contextvars 实现了以下改进：\",\"统一了同步/异步环境：无需为异步场景单独适配。\",\"更清晰的上下文管理：通过 Token 精确控制上下文状态。\",\"更高效的性能：基于标准库的实现减少了依赖开销。\"]},\"1090\":{\"c\":[\"源码分析\",\"flask\"]},\"1091\":{\"c\":[\"源码分析\",\"flask\"]},\"1092\":{\"h\":\"4、路由分配，Endpoint\"},\"1093\":{\"h\":\"一、路由\",\"t\":[\"采用比较官方的话来介绍就是\",\"网络原理中，路由指的是根据上一接口的数据包中的IP地址，查询路由表转发到另一个接口，它决定的是一个端到端的网络路径。\",\"web里的话，路由概念也是类似的，根据URL来将请求分配到指定的一个‘端’，另外也可以这样用，在某一个节点设置个转发，将到达这里的每一个’包‘或者说URL重新定向到另一个端并且可以在这个过程中对这个包进行处理。\"]},\"1094\":{\"h\":\"二、Endpoint\",\"t\":[\"endpoint是flask中提出来的一个概念，我们先下结论就是视图函数和url的中间值，我们可以利用endpoint找到url,也可以使用endpoint找到视图函数。它是为了方便我们通过endpoint找到url,寻找视图函数的值。\",\"from flask import Flask config = {'SECRET_KEY': \\\"woaijmy\\\"} app = Flask(__name__) app.config.from_object(config) @app.route('/index') def index(): return '1231' if __name__ == '__main__': print('url_map::', app.url_map) print('view_funcs::', app.view_functions) app.run() # url_map:: Map([<Rule '/static/<filename>' (GET, HEAD, OPTIONS) -> static>, <Rule '/index' (GET, HEAD, OPTIONS) -> index>]) # view_funcs:: {'static': <function Flask.__init__.<locals>.<lambda> at 0x0000022>, 'index': <function index at 0x0000021>} \",\"我们通过打印可以发现url_map中的有endpoint，view_funcs也有endpoint\",\"通过源码可以发现\",\"@setupmethod def add_url_rule( self, rule: str, endpoint: str | None = None, view_func: ft.RouteCallable | None = None, provide_automatic_options: bool | None = None, **options: t.Any, ) -> None: if endpoint is None: endpoint = _endpoint_from_view_func(view_func) # type: ignore options[\\\"endpoint\\\"] = endpoint methods = options.pop(\\\"methods\\\", None) if methods is None: methods = getattr(view_func, \\\"methods\\\", None) or (\\\"GET\\\",) if isinstance(methods, str): raise TypeError( \\\"Allowed methods must be a list of strings, for\\\" ' example: @app.route(..., methods=[\\\"POST\\\"])' ) methods = {item.upper() for item in methods} # Methods that should always be added required_methods = set(getattr(view_func, \\\"required_methods\\\", ())) if provide_automatic_options is None: provide_automatic_options = getattr( view_func, \\\"provide_automatic_options\\\", None ) if provide_automatic_options is None: if \\\"OPTIONS\\\" not in methods: provide_automatic_options = True required_methods.add(\\\"OPTIONS\\\") else: provide_automatic_options = False # Add the required methods now. methods |= required_methods rule_obj = self.url_rule_class(rule, methods=methods, **options) rule_obj.provide_automatic_options = provide_automatic_options # type: ignore[attr-defined] self.url_map.add(rule_obj) if view_func is not None: old_func = self.view_functions.get(endpoint) if old_func is not None and old_func != view_func: raise AssertionError( \\\"View function mapping is overwriting an existing\\\" f\\\" endpoint function: {endpoint}\\\" ) self.view_functions[endpoint] = view_func \",\" def _endpoint_from_view_func(view_func: ft.RouteCallable) -> str: \\\"\\\"\\\"Internal helper that returns the default endpoint for a given function. This always is the function name. \\\"\\\"\\\" assert view_func is not None, \\\"expected view func if endpoint is not provided.\\\" return view_func.__name__ if endpoint is None: endpoint = _endpoint_from_view_func(view_func) # type: ignore options[\\\"endpoint\\\"] = endpoint rule_obj = self.url_rule_class(rule, methods=methods, **options) self.url_map.add(rule_obj) self.view_functions[endpoint] = view_func \",\"这里代码跳着截取的\",\"可以发现endpoint如果为None就是视图函数的名称，url_map和view_functions中都是存住endpoint的，所以这里我们可以确定以上的说法是正确的。\",\"那么我们如何使用endpoint呢\",\"我们可以通过url_for函数可以使用endpoint来进行调用视图函数。\",\" def url_for( self, /, endpoint: str, *, _anchor: str | None = None, _method: str | None = None, _scheme: str | None = None, _external: bool | None = None, **values: t.Any, ) -> str: req_ctx = _cv_request.get(None) if req_ctx is not None: url_adapter = req_ctx.url_adapter blueprint_name = req_ctx.request.blueprint # If the endpoint starts with \\\".\\\" and the request matches a # blueprint, the endpoint is relative to the blueprint. if endpoint[:1] == \\\".\\\": if blueprint_name is not None: endpoint = f\\\"{blueprint_name}{endpoint}\\\" else: endpoint = endpoint[1:] if _external is None: _external = _scheme is not None else: app_ctx = _cv_app.get(None) if app_ctx is not None: url_adapter = app_ctx.url_adapter else: url_adapter = self.create_url_adapter(None) if url_adapter is None: raise RuntimeError() if _external is None: _external = True if _scheme is not None and not _external: raise ValueError(\\\"When specifying '_scheme', '_external' must be True.\\\") self.inject_url_defaults(endpoint, values) try: rv = url_adapter.build( # type: ignore[union-attr] endpoint, values, method=_method, url_scheme=_scheme, force_external=_external, ) except BuildError as error: values.update( _anchor=_anchor, _method=_method, _scheme=_scheme, _external=_external ) return self.handle_url_build_error(error, endpoint, values) if _anchor is not None: _anchor = _url_quote(_anchor, safe=\\\"%!#$&'()*+,/:;=?@\\\") rv = f\\\"{rv}#{_anchor}\\\" return rv \",\"这里就是可以通过endpoint内部调用flask内部请求\"]},\"1095\":{\"h\":\"三、flask如何利用endpoint实现请求分发\"},\"1096\":{\"c\":[\"源码分析\",\"flask\"]},\"1097\":{\"c\":[\"源码分析\",\"flask\"]},\"1098\":{\"h\":\"5、请求的生命周期\",\"t\":[\"请求的生命周期这个是比较复杂的我们通过两个方面来进行分析，分别用应用上下文和请求上下文，以及before_request，after_request等处理函数进行分析\",\"源码部分\",\" def wsgi_app( self, environ: WSGIEnvironment, start_response: StartResponse ) -> cabc.Iterable[bytes]: ctx = self.request_context(environ) error: BaseException | None = None try: try: ctx.push() response = self.full_dispatch_request() except Exception as e: error = e response = self.handle_exception(e) except: # noqa: B001 error = sys.exc_info()[1] raise return response(environ, start_response) finally: if \\\"werkzeug.debug.preserve_context\\\" in environ: environ[\\\"werkzeug.debug.preserve_context\\\"](_cv_app.get()) environ[\\\"werkzeug.debug.preserve_context\\\"](_cv_request.get()) if error is not None and self.should_ignore_error(error): error = None ctx.pop(error) \",\"整体可以分为三个部分\",\"ctx = self.request_context(environ)上下文操作\",\"response = self.full_dispatch_request()请求函数操作\",\"response = self.handle_exception(e)异常处理\"]},\"1099\":{\"h\":\"一、上下文操作\"},\"1100\":{\"h\":\"1、基本操作\",\"t\":[\"ctx = self.request_context(environ) ctx.push()上下文操作里面到底做了什么东西呢？\",\"class Flask(APP): def request_context(self, environ: WSGIEnvironment) -> RequestContext: return RequestContext(self, environ) def wsgi_app( self, environ: WSGIEnvironment, start_response: StartResponse ) -> cabc.Iterable[bytes]: # 1、先创建请求上下文 ctx = self.request_context(environ) error: BaseException | None = None try: try: # 2、请求上下文放入ContextVars中 ctx.push() response = self.full_dispatch_request() except Exception as e: error = e response = self.handle_exception(e) except: # noqa: B001 error = sys.exc_info()[1] raise return response(environ, start_response) finally: if \\\"werkzeug.debug.preserve_context\\\" in environ: environ[\\\"werkzeug.debug.preserve_context\\\"](_cv_app.get()) environ[\\\"werkzeug.debug.preserve_context\\\"](_cv_request.get()) if error is not None and self.should_ignore_error(error): error = None # 3、最后pop掉当前的请求上下文 ctx.pop(error) class RequestContext: def __init__( self, app: Flask, environ: WSGIEnvironment, request: Request | None = None, session: SessionMixin | None = None, ) -> None: self.app = app if request is None: request = app.request_class(environ) request.json_module = app.json self.request: Request = request self.url_adapter = None try: self.url_adapter = app.create_url_adapter(self.request) except HTTPException as e: self.request.routing_exception = e self.flashes: list[tuple[str, str]] | None = None self.session: SessionMixin | None = session self._after_request_functions= [] self._cv_tokens = [] def push(self) -> None: app_ctx = _cv_app.get(None) if app_ctx is None or app_ctx.app is not self.app: # 2.1、先push应用上下文 app_ctx = self.app.app_context() app_ctx.push() else: app_ctx = None # 2.2再处理token,session等 self._cv_tokens.append((_cv_request.set(self), app_ctx)) if self.session is None: session_interface = self.app.session_interface self.session = session_interface.open_session(self.app, self.request) if self.session is None: self.session = session_interface.make_null_session(self.app) if self.url_adapter is not None: self.match_request() \",\"创建应用上下文，和请求上下文\",\"先处理应用上下文，再处理token、session等\",\"最后上下文pop掉\"]},\"1101\":{\"h\":\"2、请求上下文和应用上下文的关系\",\"t\":[\"request 就是请求上下文的对象，保存了当前本次请求的相关数据，请求上下文对象有：request、session，token\",\"request 封装了HTTP请求的内容，针对的是http请求。举例：user = request.args.get('user')，获取的是get请求的参数。\",\"session 用来记录请求会话中的信息，针对的是用户信息。举例：session['name'] = user.id，可以记录用户信息。还可以通过session.get('name')获取用户信息。\",\"应用上下文，但它不是一直存在的，它只是request context 中的一个对 app 的代理(人)，所谓local proxy。它的作用主要是帮助 request 获取当前的应用，它是伴 request 而生，随 request 而灭的。\"]},\"1102\":{\"h\":\"3、请求上下文和应用上下文的生命周期\",\"t\":[\"request context先于app context创建\",\"request context先于app context消灭\",\"app contex是最后pop的\",\"def pop(self, exc: BaseException | None = _sentinel) -> None: # type: ignore clear_request = len(self._cv_tokens) == 1 try: if clear_request: if exc is _sentinel: exc = sys.exc_info()[1] self.app.do_teardown_request(exc) request_close = getattr(self.request, \\\"close\\\", None) if request_close is not None: request_close() finally: ctx = _cv_request.get() token, app_ctx = self._cv_tokens.pop() _cv_request.reset(token) # get rid of circular dependencies at the end of the request # so that we don't require the GC to be active. if clear_request: ctx.request.environ[\\\"werkzeug.request\\\"] = None if app_ctx is not None: app_ctx.pop(exc) if ctx is not self: raise AssertionError( f\\\"Popped wrong request context. ({ctx!r} instead of {self!r})\\\" ) \"]},\"1103\":{\"h\":\"二、处理函数运行\",\"t\":[\"def full_dispatch_request(self) -> Response: self._got_first_request = True try: request_started.send(self, _async_wrapper=self.ensure_sync) # 第一步 rv = self.preprocess_request() if rv is None: # 第二步 rv = self.dispatch_request() except Exception as e: rv = self.handle_user_exception(e) #第三步 return self.finalize_request(rv) def preprocess_request(self) -> ft.ResponseReturnValue | None: names = (None, *reversed(request.blueprints)) for name in names: if name in self.url_value_preprocessors: for url_func in self.url_value_preprocessors[name]: url_func(request.endpoint, request.view_args) for name in names: if name in self.before_request_funcs: for before_func in self.before_request_funcs[name]: rv = self.ensure_sync(before_func)() if rv is not None: return rv # type: ignore[no-any-return] return None def dispatch_request(self) -> ft.ResponseReturnValue: req = request_ctx.request if req.routing_exception is not None: self.raise_routing_exception(req) rule: Rule = req.url_rule # type: ignore[assignment] if ( getattr(rule, \\\"provide_automatic_options\\\", False) and req.method == \\\"OPTIONS\\\" ): return self.make_default_options_response() view_args: dict[str, t.Any] = req.view_args # type: ignore[assignment] return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args) def finalize_request( self, rv: ft.ResponseReturnValue | HTTPException, from_error_handler: bool = False, ) -> Response: response = self.make_response(rv) try: response = self.process_response(response) request_finished.send( self, _async_wrapper=self.ensure_sync, response=response ) except Exception: if not from_error_handler: raise self.logger.exception( \\\"Request finalizing failed with an error while handling an error\\\" ) return response def process_response(self, response: Response) -> Response: ctx = request_ctx._get_current_object() # type: ignore[attr-defined] for func in ctx._after_request_functions: response = self.ensure_sync(func)(response) for name in chain(request.blueprints, (None,)): if name in self.after_request_funcs: for func in reversed(self.after_request_funcs[name]): response = self.ensure_sync(func)(response) if not self.session_interface.is_null_session(ctx.session): self.session_interface.save_session(self, ctx.session, response) return response \",\"我们理一下运行顺序\",\"preprocess_request:请求预处理\",\"url_value_preprocessors：url解析\",\"before_request_funcs：执行请求前置操作\",\"dispatch_request:分发请求\",\"view_functions：执行视图函数\",\"finalize_request:完成请求\",\"after_request_funcs：执行请求后置操作\"]},\"1104\":{\"h\":\"三、生命周期\",\"t\":[\"class Flask(APP): def wsgi_app( self, environ: WSGIEnvironment, start_response: StartResponse ) -> cabc.Iterable[bytes]: # 1、先创建请求上下文 ctx = self.request_context(environ) error: BaseException | None = None try: try: # 2、请求上下文放入ContextVars中 ctx.push() # 3、执行请求处理函数 response = self.full_dispatch_request() except Exception as e: error = e response = self.handle_exception(e) except: # noqa: B001 error = sys.exc_info()[1] raise return response(environ, start_response) finally: if \\\"werkzeug.debug.preserve_context\\\" in environ: environ[\\\"werkzeug.debug.preserve_context\\\"](_cv_app.get()) environ[\\\"werkzeug.debug.preserve_context\\\"](_cv_request.get()) if error is not None and self.should_ignore_error(error): error = None # 4、最后pop掉当前的请求上下文 ctx.pop(error) \",\"1、先创建请求上下文\",\"2、请求上下文放入ContextVars中，这里包括session,token，request\",\"3、执行请求处理函数 \",\"请求预处理 \",\"url解析\",\"执行请求前置操作\",\"分发请求 \",\"执行视图函数\",\"完成请求 \",\"执行请求后置操作\",\"4、最后移除当前的请求上下文，为下一次请求准备\"]},\"1105\":{\"c\":[\"源码分析\",\"flask\"]},\"1106\":{\"c\":[\"源码分析\",\"flask\"]},\"1107\":{\"h\":\"6、可自定义的16个扩展点\"},\"1108\":{\"h\":\"一、自定义扩展点概述\",\"t\":[\"flask是一个极其自由的框架，其实这也是我喜欢这个框架的原因就是我们可以根据自己的需求来自定义框架，这个就像是有一种养成系的感觉，会觉得这个框架越来越好用。\",\"那么既然我们需要更加灵活的使用这个框架，其中框架中一些提供出来的方法我们肯定需要了解，其实flask中的自定义扩展点我们可以分为两类，其中一类是flask的信号机制，还有一类就是一些请求处理函数，包括但是不局限于before_request、after_request等请求处理函数。接下来我们就进入源码来分析flask提供的自定义扩展点。\"]},\"1109\":{\"h\":\"二、flask信号\"},\"1110\":{\"h\":\"1、所有信号\",\"t\":[\"template_rendered = _signals.signal(\\\"template-rendered\\\")# 模板渲染后执行 before_render_template = _signals.signal(\\\"before-render-template\\\")# 模板渲染前执行 request_started = _signals.signal(\\\"request-started\\\")# 请求到来前执行 request_finished = _signals.signal(\\\"request-finished\\\")# 请求结束后执行 request_tearing_down = _signals.signal(\\\"request-tearing-down\\\")# 请求执行完毕后自动执行(无论成功与否) got_request_exception = _signals.signal(\\\"got-request-exception\\\") # 请求执行出现异常时执行 appcontext_tearing_down = _signals.signal(\\\"appcontext-tearing-down\\\")#)# 应用上下文执行完毕后自动执行(无论成功与否) appcontext_pushed = _signals.signal(\\\"appcontext-pushed\\\")# 应用上下文push时执行 appcontext_popped = _signals.signal(\\\"appcontext-popped\\\")# 应用上下文pop时执行 message_flashed = _signals.signal(\\\"message-flashed\\\")# 闪现——调用flask在其中添加数据时，自动触发 \"]},\"1111\":{\"h\":\"2、信号的定义\",\"t\":[\"这里是flask的全部信号，由于flask的信号实现比较简单，我们以一个例子来举例说明singal的实现原理\",\"eg：request-started\",\"首先我们需要定义一个信号,flask中是使用blinker进行定义的。\",\"from blinker import Namespace # This namespace is only for signals provided by Flask itself. _signals = Namespace() request_started = _signals.signal(\\\"request-started\\\") \",\"其次在需要的时候定义一个入口，这个入口我们什么都没有操作，只是为了方便我们用户进行自定义操作\",\"class Flask: def full_dispatch_request(self) -> Response: self._got_first_request = True try: request_started.send(self, _async_wrapper=self.ensure_sync) rv = self.preprocess_request() if rv is None: rv = self.dispatch_request() except Exception as e: rv = self.handle_user_exception(e) return self.finalize_request(rv) \",\"其他的信号定义也都是这样这里就不一一展开了。\"]},\"1112\":{\"h\":\"3、信号的使用\",\"t\":[\"from flask import Flask, render_template, g from flask import signals app = Flask(__name__) @signals.request_started.connect def signal_before_render_template(*args, **kwargs): print('signal_before_render_template') @app.before_request def before_func(): print('before_func') @app.route('/index/') def index(): return {'name': 'blue'} if __name__ == '__main__': app.run() \",\"发送请求结果\",\"127.0.0.1 - - [04/Mar/2024 23:09:28] \\\"GET /index/ HTTP/1.1\\\" 200 - signal_before_render_template before_func \",\"我们可以看到信号中的request_started是早于before_request这个请求处理函数的，这个其实我们也是可以从源码中发现\",\"class Flask: def full_dispatch_request(self) -> Response: self._got_first_request = True try: # 这里是信号的处理 request_started.send(self, _async_wrapper=self.ensure_sync) rv = self.preprocess_request()# before_request_func是在这里进行的 if rv is None: rv = self.dispatch_request() except Exception as e: rv = self.handle_user_exception(e) return self.finalize_request(rv) \"]},\"1113\":{\"h\":\"4、信号的总结\"},\"1114\":{\"h\":\"request_started\",\"t\":[\"request_started是一个信号，在每个请求到来之前执行。 可以通过连接到这个信号来执行一些初始化操作或记录日志。\"]},\"1115\":{\"h\":\"request_finished\",\"t\":[\"request_finished是一个信号，在每个请求结束后执行。 可以通过连接到这个信号来进行一些清理操作或处理请求完成后的逻辑。\"]},\"1116\":{\"h\":\"before_render_template\",\"t\":[\"before_render_template是一个信号，在模板渲染之前执行。 可以通过连接到这个信号来修改要渲染的模板或添加一些数据。\"]},\"1117\":{\"h\":\"template_rendered\",\"t\":[\"template_rendered是一个信号，在模板渲染之后执行。 可以通过连接到这个信号来进行一些后处理操作。\"]},\"1118\":{\"h\":\"got_request_exception\",\"t\":[\"got_request_exception是一个信号，在请求执行过程中出现异常时执行。 可以通过连接到这个信号来处理请求异常并记录错误信息。\"]},\"1119\":{\"h\":\"request_tearing_down\",\"t\":[\"request_tearing_down是一个信号，会在请求执行完毕后自动执行，无论请求成功与否。 可以通过连接到这个信号来进行一些收尾工作或资源释放操作。\"]},\"1120\":{\"h\":\"appcontext_tearing_down\",\"t\":[\"appcontext_tearing_down是一个信号，会在应用上下文执行完毕后自动执行，无论成功与否。 可以通过连接到这个信号来进行一些应用上下文的收尾工作或资源释放操作。\"]},\"1121\":{\"h\":\"appcontext_pushed\",\"t\":[\"appcontext_pushed是一个信号，在应用上下文被push时执行。 可以通过连接到这个信号来执行一些与应用上下文相关的操作。\"]},\"1122\":{\"h\":\"appcontext_popped\",\"t\":[\"appcontext_popped是一个信号，在应用上下文被pop时执行。 可以通过连接到这个信号来执行一些与应用上下文相关的清理操作。\"]},\"1123\":{\"h\":\"message_flashed\",\"t\":[\"message_flashed是一个信号，在调用Flask中的消息闪现(flash)方法时自动触发。 可以通过连接到这个信号来做一些闪现消息的处理逻辑。\"]},\"1124\":{\"h\":\"三、flask请求处理函数\",\"t\":[\"flask中其他的处理函数\",\"url_value_processor：处理url\",\"before_reuqest：请求开始\",\"after_request：请求结束\",\"context_processor：注册模板上下文处理程序函数。这些函数在返回模板前调用。\",\"teardown_request：在请求上下文时调用pop时执行的。\",\"url_defaults：所有视图函数的URL默认回调函数应用程序。\",\"其实这些方法都是比较常见的了，使用也是比较简单了。那么我也简单举几个例子来说明如何使用。\",\"before_request\",\"from flask import Flask,render_template,g from flask import signals app = Flask(__name__) @app.before_request def before_request_func(): g.xx = 123 print('before_request_func') @app.route('/index/') def index(): print('index') return render_template('index.html') @app.route('/order') def order(): print('order') return render_template('order.html') if __name__ == '__main__': app.run() \",\"after_request\",\"from flask import Flask,render_template,g from flask import signals app = Flask(__name__) @app.after_request def after_request_func(response): print('after_request_func') return response @app.route('/index/') def index(): return render_template('index.html') @app.route('/order') def order(): print('order') return render_template('order.html') if __name__ == '__main__': app.run() \",\"url_value_preprocessor需要传入endpoint\",\"from flask import Flask, render_template, g from flask import signals app = Flask(__name__) @app.url_value_preprocessor def url_value_preprocessor_func(endpoint, args): # 这里我们需要传入endpoint print('url_value_preprocessor_func', endpoint)# url_value_preprocessor_func index @app.route('/index/') def index(): print('index') return {'name': 'blue'} if __name__ == '__main__': app.run() \"]},\"1125\":{\"h\":\"四、总结\",\"t\":[\"目前flask中一个有13个自定义扩展点，如有遗漏敬请指正。分别为10个信号，6个请求处理函数\"]},\"1126\":{\"h\":\"1、flask信号\"},\"1127\":{\"h\":\"request_started\",\"t\":[\"request_started是一个信号，在每个请求到来之前执行。 可以通过连接到这个信号来执行一些初始化操作或记录日志。\"]},\"1128\":{\"h\":\"request_finished\",\"t\":[\"request_finished是一个信号，在每个请求结束后执行。 可以通过连接到这个信号来进行一些清理操作或处理请求完成后的逻辑。\"]},\"1129\":{\"h\":\"before_render_template\",\"t\":[\"before_render_template是一个信号，在模板渲染之前执行。 可以通过连接到这个信号来修改要渲染的模板或添加一些数据。\"]},\"1130\":{\"h\":\"template_rendered\",\"t\":[\"template_rendered是一个信号，在模板渲染之后执行。 可以通过连接到这个信号来进行一些后处理操作。\"]},\"1131\":{\"h\":\"got_request_exception\",\"t\":[\"got_request_exception是一个信号，在请求执行过程中出现异常时执行。 可以通过连接到这个信号来处理请求异常并记录错误信息。\"]},\"1132\":{\"h\":\"request_tearing_down\",\"t\":[\"request_tearing_down是一个信号，会在请求执行完毕后自动执行，无论请求成功与否。 可以通过连接到这个信号来进行一些收尾工作或资源释放操作。\"]},\"1133\":{\"h\":\"appcontext_tearing_down\",\"t\":[\"appcontext_tearing_down是一个信号，会在应用上下文执行完毕后自动执行，无论成功与否。 可以通过连接到这个信号来进行一些应用上下文的收尾工作或资源释放操作。\"]},\"1134\":{\"h\":\"appcontext_pushed\",\"t\":[\"appcontext_pushed是一个信号，在应用上下文被push时执行。 可以通过连接到这个信号来执行一些与应用上下文相关的操作。\"]},\"1135\":{\"h\":\"appcontext_popped\",\"t\":[\"appcontext_popped是一个信号，在应用上下文被pop时执行。 可以通过连接到这个信号来执行一些与应用上下文相关的清理操作。\"]},\"1136\":{\"h\":\"message_flashed\",\"t\":[\"message_flashed是一个信号，在调用Flask中的消息闪现(flash)方法时自动触发。 可以通过连接到这个信号来做一些闪现消息的处理逻辑。\"]},\"1137\":{\"h\":\"2、请求处理函数\",\"t\":[\"url_value_processor：处理url\",\"before_reuqest：请求开始\",\"after_request：请求结束\",\"context_processor：注册模板上下文处理程序函数。这些函数在返回模板前调用。\",\"teardown_request：在请求上下文时调用pop时执行的。\",\"url_defaults：所有视图函数的URL默认回调函数应用程序。\"]},\"1138\":{\"c\":[\"源码分析\",\"flask\"]},\"1139\":{\"c\":[\"源码分析\",\"flask\"]},\"1140\":{\"h\":\"7、Flask CBV 与 RESTful API\",\"t\":[\"我曾经在之前的工作中，使用20行代码实现使用传统视图100多行实现的增删改查的功能。之前使用的是flask_restful，但是这个模块没有swagger文档，还挺说这个模块的负责人是物理层面的找不到了，后面我又接触到flask_restx这个模块，实现了文档自动生成这个很重要的功能。\"]},\"1141\":{\"h\":\"一、为什么需要 Class-Based Views（CBV）和 RESTful API\"},\"1142\":{\"h\":\"1.1 函数视图的局限性\",\"t\":[\"传统的 Flask 函数视图（Function-Based Views）虽然简单，但在复杂场景下存在以下问题：\",\"代码重复：多个视图可能共享逻辑（如权限校验、日志记录）。\",\"状态管理困难：难以在多个方法间共享数据或状态。\",\"可维护性差：大规模 API 需要大量函数，代码结构混乱。\"]},\"1143\":{\"h\":\"1.2 Class-Based Views（CBV）的优势\",\"t\":[\"Flask 的 Class-Based Views（CBV） 通过类来组织视图，提供以下优势：\",\"代码复用：通过继承和混入（Mixin）共享通用逻辑。\",\"清晰的职责划分：不同 HTTP 方法（GET/POST/PUT 等）对应不同类方法。\",\"状态管理：类实例可保存临时数据（如数据库会话）。\"]},\"1144\":{\"h\":\"1.3 RESTful API 的核心原则\",\"t\":[\"RESTful API 遵循以下设计原则：\",\"资源导向：通过 URL 路径标识资源（如 /users/{id}）。\",\"HTTP 方法：使用标准方法（GET/POST/PUT/DELETE）定义操作。\",\"状态码：返回语义明确的 HTTP 状态码（如 200 OK, 404 Not Found）。\",\"无状态通信：服务器不保存客户端状态，所有信息通过请求传递。\"]},\"1145\":{\"h\":\"二、Flask-Restx：RESTful API 的终极解决方案\"},\"1146\":{\"h\":\"2.1 Flask-Restx 是什么？\",\"t\":[\"前身：基于 Flask-RESTful 的升级版，解决了其文档不足、验证缺失等问题。\",\"核心功能： \",\"资源组织：用类定义 API 资源（Resource）。\",\"请求验证：通过 @api.expect 自动校验请求参数。\",\"自动文档：生成交互式 Swagger UI 文档。\",\"命名空间管理：模块化组织 API 端点。\"]},\"1147\":{\"h\":\"2.2 安装与快速入门\",\"t\":[\"pip install flask flask-restx \",\"from flask import Flask from flask_restx import Api, Resource, fields app = Flask(__name__) api = Api( app, version='1.0', title='Sample API', description='A simple RESTful API with Flask-Restx', doc='/docs' # 文档路径 ) # 定义资源模型 user_model = api.model('User', { 'id': fields.Integer(required=True, description='User ID'), 'name': fields.String(required=True, description='User Name') }) # 定义资源类 @api.route('/users/<int:user_id>') class UserResource(Resource): @api.doc(description='Get a user by ID') @api.marshal_with(user_model) def get(self, user_id): return {'id': user_id, 'name': 'John Doe'} @api.expect(user_model) def put(self, user_id): data = api.payload return {'message': f'Updated user {user_id}: {data}'} if __name__ == '__main__': app.run(debug=True) \"]},\"1148\":{\"h\":\"三、Flask-Restx 核心功能详解\"},\"1149\":{\"h\":\"3.1 资源定义（Resource）\",\"t\":[\"继承 Resource 类：每个资源对应一个或多个 HTTP 方法。\",\"方法映射：\",\"class UserResource(Resource): def get(self): # GET 请求 pass def post(self): # POST 请求 pass def put(self): # PUT 请求 pass def delete(self): # DELETE 请求 pass \"]},\"1150\":{\"h\":\"3.2 请求参数校验\",\"t\":[\"定义模型（Model）：\",\"user_model = api.model('User', { 'name': fields.String(required=True), 'age': fields.Integer(min=0, max=150) }) \",\"绑定参数：\",\"@api.expect(user_model) def post(self): data = api.payload # 自动校验后的数据 # 处理逻辑 \"]},\"1151\":{\"h\":\"3.3 自动文档生成\",\"t\":[\"Swagger UI：访问 /docs 路径，自动生成交互式文档。\",\"API 文档注释：\",\"@api.doc( description='Create a new user', params={'user_id': 'User ID'} ) def post(self, user_id): pass \"]},\"1152\":{\"h\":\"3.4 命名空间（Namespace）\",\"t\":[\"模块化组织 API：\",\"from flask_restx import Namespace api = Namespace('users', description='User operations') @api.route('/') class UserListResource(Resource): # ... \"]},\"1153\":{\"h\":\"四、Flask-Restx 的优势与最佳实践\"},\"1154\":{\"h\":\"4.1 优势总结\",\"t\":[\"代码组织清晰：通过类和命名空间分离不同功能。\",\"自动文档：减少维护 API 文档的工作量。\",\"请求验证：减少手动校验参数的代码。\",\"可扩展性：支持插件和自定义验证逻辑。\"]},\"1155\":{\"h\":\"4.2 最佳实践\",\"t\":[\"分模块管理 API：使用 Namespace 将资源分组（如 /users, /books）。\",\"统一错误处理：通过 @api.errorhandler 自定义错误响应。\",\"使用数据库 ORM：结合 SQLAlchemy 或 MongoEngine 简化数据操作。\",\"性能优化：缓存高频查询结果（如使用 Flask-Caching）。\"]},\"1156\":{\"h\":\"5.3 与 Flask-RESTful 的对比\",\"t\":[\"特性\",\"Flask-RESTful\",\"Flask-Restx\",\"文档支持\",\"无\",\"内置 Swagger UI\",\"请求验证\",\"需第三方库\",\"内置 @api.expect\",\"模型定义\",\"简单字段支持\",\"支持复杂模型（嵌套字段）\",\"社区活跃度\",\"停止维护\",\"活跃维护\"]},\"1157\":{\"c\":[\"源码分析\",\"flask\"]},\"1158\":{\"c\":[\"源码分析\",\"flask\",\"restful\"]},\"1159\":{\"h\":\"8、WSGI 和 ASGI\"},\"1160\":{\"h\":\"一、WSGI 和 ASGI 的核心区别\"},\"1161\":{\"h\":\"1. 同步 vs 异步\",\"t\":[\"WSGI（Web Server Gateway Interface）\",\"同步接口：基于线程或进程处理请求，每个请求按顺序执行，前一个请求完成后再处理下一个。\",\"适用场景：传统同步 Web 应用，如低并发场景、IO 密集型任务（如数据库查询）。\",\"ASGI（Asynchronous Server Gateway Interface）\",\"异步接口：基于事件循环和协程（如 async/await），支持同时处理多个请求，无需等待前一个请求完成。\",\"适用场景：高并发场景、实时应用（如 WebSocket、长连接、聊天应用）、HTTP/2 等协议。\"]},\"1162\":{\"h\":\"2. 协议支持\",\"t\":[\"WSGI\",\"仅支持 HTTP/1.1，无法处理 WebSocket 或长连接等实时协议。\",\"通过扩展（如中间件）勉强支持部分异步功能，但效率低下。\",\"ASGI\",\"支持多种协议：HTTP/1.1、HTTP/2、WebSocket、HTTP/3（QUIC）等。\",\"原生支持实时通信（如聊天、直播推送、实时数据更新）。\"]},\"1163\":{\"h\":\"3. 性能\",\"t\":[\"WSGI\",\"同步处理：在高并发场景下性能受限，因线程/进程切换开销较大。\",\"适合中小型应用或低延迟要求的场景。\",\"ASGI\",\"异步非阻塞：通过事件循环高效处理数千个并发连接，适合高负载场景。\",\"在长连接和实时通信中表现更优。\"]},\"1164\":{\"h\":\"4. 兼容性\",\"t\":[\"WSGI\",\"广泛兼容：几乎所有 Python Web 框架（如 Flask、Django）默认支持 WSGI，生态成熟。\",\"服务器如 Gunicorn、uWSGI、mod_wsgi 都基于 WSGI。\",\"ASGI\",\"较新但快速崛起：主要由现代异步框架推动，服务器如 Uvicorn、Daphne、Hypercorn 支持 ASGI。\",\"与 WSGI 兼容：可通过转换器（如 asgiref）将 WSGI 应用运行在 ASGI 服务器上。\"]},\"1165\":{\"h\":\"5. 示例代码对比\"},\"1166\":{\"h\":\"WSGI 示例\",\"t\":[\"def application(environ, start_response): status = '200 OK' headers = [('Content-Type', 'text/plain')] start_response(status, headers) return [b\\\"Hello, World!\\\"] \"]},\"1167\":{\"h\":\"ASGI 示例\",\"t\":[\"async def application(scope, receive, send): if scope[\\\"type\\\"] == \\\"http\\\": await send({ \\\"type\\\": \\\"http.response.start\\\", \\\"status\\\": 200, \\\"headers\\\": [[b\\\"content-type\\\", b\\\"text/plain\\\"]], }) await send({ \\\"type\\\": \\\"http.response.body\\\", \\\"body\\\": b\\\"Hello, World!\\\", }) \"]},\"1168\":{\"h\":\"二、主流框架与服务器的接口支持\"},\"1169\":{\"h\":\"1. 使用 WSGI 的框架\",\"t\":[\"Flask\",\"默认基于 WSGI，但可通过扩展（如 aiohttp）支持异步。\",\"Django（传统模式）\",\"默认使用 WSGI，但自 3.0 版本后支持通过 Django Channels 转向 ASGI。\",\"Bottle、CherryPy\",\"轻量级框架，原生支持 WSGI。\"]},\"1170\":{\"h\":\"2. 使用 ASGI 的框架\",\"t\":[\"FastAPI\",\"专为高性能异步设计，原生支持 WebSocket 和 OpenAPI 文档。\",\"Django Channels\",\"Django 的扩展，支持 ASGI 和 WebSocket、长轮询等。\"]},\"1171\":{\"h\":\"3. 服务器对比\",\"t\":[\"接口\",\"服务器\",\"特点\",\"WSGI\",\"Gunicorn、uWSGI、mod_wsgi\",\"成熟稳定，适合同步应用。\",\"ASGI\",\"Uvicorn、Daphne、Hypercorn\",\"支持异步，适合高并发和实时协议。\"]},\"1172\":{\"h\":\"三、如何选择？\",\"t\":[\"需求\",\"选择 WSGI\",\"选择 ASGI\",\"协议支持\",\"仅需 HTTP/1.1\",\"需要 WebSocket、HTTP/2 或实时推送\",\"并发能力\",\"低/中等并发\",\"高并发、长连接或实时通信\",\"框架偏好\",\"Flask、传统 Django\",\"FastAPI、Starlette、Django Channels\",\"开发效率\",\"简单同步代码，学习曲线低\",\"需熟悉异步编程（async/await）\"]},\"1173\":{\"h\":\"四、总结\",\"t\":[\"WSGI 是 Python Web 开发的基石，适合传统同步场景，生态成熟。\",\"ASGI 是下一代接口，专为异步、高并发和实时通信设计，是现代 Web 和实时应用的首选。\",\"过渡方案：Django 通过 Channels 兼容 ASGI，而 FastAPI 等框架原生支持 ASGI，提供了无缝的异步体验。\"]},\"1174\":{\"c\":[\"源码分析\",\"flask\"]},\"1175\":{\"c\":[\"源码分析\",\"flask\",\"wsgi\"]},\"1176\":{\"h\":\"robot中访问者模式\"},\"1177\":{\"h\":\"一、访问者模式\",\"t\":[\"在看robotframework源码中总是发现有visit这个单词，而且在整个运行中都是反复出现，所以自己就看了下关于这个访问者的设计模式。其实这个设计模式是非常少见的，我们平时使用中也并不常见，但是既然robot中出现了这个我们就来看一下这个设计模式。因为懂了这个设计模式也会更加方便我们看源码。\",\"访问者模式（Visitor Pattern）是一种行为型设计模式，它能够将算法与对象结构分离，使得算法可以独立于对象结构而变化。 该模式的核心概念是，定义一个访问者对象，它是对某个对象结构中各个元素的操作，这种操作可以改变元素的类或状态。 其工作原理是，访问者模式通过定义访问者接口和被访问者接口，将遍历和操作分离开来，从而提高代码的可维护性和可扩展性。\"]},\"1178\":{\"h\":\"应用场景：\",\"t\":[\"1、需要对复杂的对象结构进行遍历，并对其中的元素进行不同的操作。 2、需要对对象结构中的不同元素进行不同的操作，例如对不同类型的节点进行不同的访问。\"]},\"1179\":{\"h\":\"主要步骤：\",\"t\":[\"1、定义访问者接口，包含对不同类型元素的不同访问方法。 2、定义被访问者接口，包含接受访问者访问的方法，这个方法会调用访问者对当前对象进行访问。\"]},\"1180\":{\"h\":\"二、定义访问者\",\"t\":[\"# 定义访问者接口 class SalaryVisitor(): def visit_fullltime(self): # 全职员工 pass def visit_parttime(self): # 兼职员工 pass # 定义被访问者接口 class Employee(): def accept(self, visitor): # 接受访问 pass class FulltimeEmployee(Employee): def __init__(self, base_salary, bonus): # 全职员工：基本工资、奖金 self.base_salary = base_salary self.bonus = bonus def accept(self, visitor): return visitor.visit_fullltime(self) class ParttimeEmployee(Employee): def __init__(self, hourly_wage, total_hours): # 兼职员工：时薪，小时 self.hourly_wage = hourly_wage self.total_hours = total_hours def accept(self, visitor): return visitor.visit_parttime(self) # 定义具体的访问者类 class TaxSalaryVisitor(SalaryVisitor): def visit_fullltime(self, fulltime_employee): tax = (fulltime_employee.base_salary + fulltime_employee.bonus) * 0.1 return tax def visit_parttime(self, parttime_employee): tax = parttime_employee.hourly_wage * parttime_employee.total_hours * 0.1 return tax class BonusSalaryVisitor(SalaryVisitor): def visit_fullltime(self, fulltime_employee): bonus = fulltime_employee.bonus return bonus def visit_parttime(self, parttime_employee): return 0 # 创建实例 fulltime_employee = FulltimeEmployee(10000, 5000) parttime_employee = ParttimeEmployee(50, 160) tax_visitor = TaxSalaryVisitor() bonus_visitor = BonusSalaryVisitor() full_tax = fulltime_employee.accept(tax_visitor) full_bonus = fulltime_employee.accept(bonus_visitor) part_tax = parttime_employee.accept(tax_visitor) part_bonus = parttime_employee.accept(bonus_visitor) print(f\\\"全职员工：税：{full_tax}, 奖金：{full_bonus}\\\") print(f\\\"兼职员工：税：{part_tax}, 奖金：{part_bonus}\\\") \",\"返回值\",\"# 全职员工：税：1500.0, 奖金：5000 # 兼职员工：税：800.0, 奖金：0 \",\"这个就是一个简单的访问者的示例。\"]},\"1181\":{\"h\":\"三、robot如何使用访问者模式\"},\"1182\":{\"h\":\"访问者\",\"t\":[\"class SuiteVisitor: def visit_suite(self, suite: 'TestSuite'): if self.start_suite(suite) is not False: if suite.has_setup: suite.setup.visit(self) suite.suites.visit(self) suite.tests.visit(self) if suite.has_teardown: suite.teardown.visit(self) self.end_suite(suite) def visit_keyword(self, keyword: 'Keyword'): if self.start_keyword(keyword) is not False: self._possible_setup(keyword) self._possible_body(keyword) self._possible_teardown(keyword) self.end_keyword(keyword) def visit_return(self, return_: 'Return'): if self.start_return(return_) is not False: self._possible_body(return_) self.end_return(return_) \"]},\"1183\":{\"h\":\"被访问者\",\"t\":[\"class TestSuite(ModelObject, Generic[KW, TC]): def visit(self, visitor: SuiteVisitor): \\\"\\\"\\\":mod:`Visitor interface <robot.model.visitor>` entry-point.\\\"\\\"\\\" visitor.visit_suite(self) class Keyword(BodyItem): def visit(self, visitor: 'SuiteVisitor'): \\\"\\\"\\\":mod:`Visitor interface <robot.model.visitor>` entry-point.\\\"\\\"\\\" if self: visitor.visit_keyword(self) class Return(BodyItem): def visit(self, visitor: SuiteVisitor): visitor.visit_return(self) \"]},\"1184\":{\"c\":[\"源码分析\",\"设计模式\",\"robotframework\"]},\"1185\":{\"c\":[\"源码分析\",\"robotframework\",\"访问者模式\"]},\"1186\":{\"h\":\"关键字驱动的思路\",\"t\":[\"robotframework是一个以关键字驱动的测试框架，我也在编写一个工作流的框架，其中也会用到动态生成关键字方面的需求。我觉得robot中关键字比较好用，是值得我来借鉴的地方，所以我想学习下robot 关键字相关的实现方式。\"]},\"1187\":{\"h\":\"一、获取关键字\",\"t\":[\"KeywordCreator使用library和name创建所用的关键字，并保存到keywords列表中 \",\"具体实现需要KeywordCreator调用create方法，这里返回的是关键字library,关键字名称,参数，文档和tag的集合 \",\"create方法又是使用LibraryKeyword来进行创建的\",\"DynamicKeyword作为LibraryKeyword的子类其中一个重要的属性method，这个method实际上就是一个可执行的对象\",\"这个method就是KeywordCreator调用create的返回值\",\"class KeywordCreator: def __init__(self, library: TestLibrary, getting_method_failed_level='INFO'): self.library = library self.getting_method_failed_level = getting_method_failed_level def create_keywords(self, names: 'list[str]|None' = None): library = self.library library.keyword_finder.invalidate_cache() instance = library.instance keywords = library.keywords = [] if names is None: names = self.get_keyword_names() seen = NormalizedDict(ignore='_') for name in names: try: # 这里调用的就是KeywordCreator的create方法，生成关键字 kw = self._create_keyword(instance, name) except DataError as err: self._adding_keyword_failed(name, err, self.getting_method_failed_level) else: if not kw: continue try: if kw.embedded: self._validate_embedded(kw) else: self._handle_duplicates(kw, seen) except DataError as err: self._adding_keyword_failed(kw.name, err) else: keywords.append(kw) library._logger.debug(f\\\"Created keyword '{kw.name}'.\\\") K = TypeVar('K', bound='LibraryKeyword') class KeywordCreator(Generic[K]): keyword_class: 'type[K]' def __init__(self, name: str, library: 'TestLibrary|None' = None): self.name = name self.library = library self.extra = {} if library and RUN_KW_REGISTER.is_run_keyword(library.real_name, name): resolve_until = RUN_KW_REGISTER.get_args_to_process(library.real_name, name) self.extra['resolve_args_until'] = resolve_until @property def instance(self) -> Any: return self.library.instance def create(self, **extra) -> K: tags = self.get_tags() doc, doc_tags = split_tags_from_doc(self.get_doc()) kw = self.keyword_class( owner=self.library, name=self.get_name(), args=self.get_args(), doc=doc, tags=tags + doc_tags, **self.extra, **extra ) kw.args.name = lambda: kw.full_name return kw \"]},\"1188\":{\"h\":\"二、运行关键字\",\"t\":[\"DynamicMethod： \",\"通过传入library, 关键字名称，参数动态生成可执行的关键字\",\"其中有个重要的属性method，就是我们要运行的关键字\",\"RunKeyword： \",\"__call__通过关键字名称获取可执行对象。\",\"返回的self.method也是父类的_get_method(self, instance)的返回值，是个可执行函数\",\"原理：使用getattr反射方式获取的callable对象\",\"class DynamicMethod: _underscore_name = NotImplemented def __init__(self, instance): self.instance = instance self.method = self._get_method(instance) def _get_method(self, instance): for name in self._underscore_name, self._camelCaseName: method = getattr(instance, name, None) if callable(method): return method return no_dynamic_method class RunKeyword(DynamicMethod): _underscore_name = 'run_keyword' def __init__(self, instance, keyword_name: 'str|None' = None, supports_named_args: 'bool|None' = None): super().__init__(instance) self.keyword_name = keyword_name self._supports_named_args = supports_named_args @property def supports_named_args(self) -> bool: if self._supports_named_args is None: spec = PythonArgumentParser().parse(self.method) self._supports_named_args = len(spec.positional) == 3 return self._supports_named_args def __call__(self, *positional, **named): if self.supports_named_args: args = (self.keyword_name, positional, named) elif named: # This should never happen. raise ValueError(f\\\"'named' should not be used when named-argument \\\" f\\\"support is not enabled, got {named}.\\\") else: args = (self.keyword_name, positional) # 这里的self.method是它父类的_get_method(self, instance)的返回值，是个可执行函数 return self.method(*args) class DynamicKeyword(LibraryKeyword): \\\"\\\"\\\"Represents a keyword in a dynamic library.\\\"\\\"\\\" owner: 'DynamicLibrary' __slots__ = ['run_keyword', '_orig_name', '__source_info'] def __init__(self, owner: 'DynamicLibrary', name: str = '', args: 'ArgumentSpec|None' = None, doc: str = '', tags: 'Tags|Sequence[str]' = (), resolve_args_until: 'int|None' = None, parent: 'BodyItemParent|None' = None, error: 'str|None' = None): super().__init__(owner, printable_name(name, code_style=True), args, doc, tags, resolve_args_until, parent, error) self._orig_name = name self.__source_info = None @property def method(self) -> Callable[..., Any]: \\\"\\\"\\\"Dynamic ``run_keyword`` method.\\\"\\\"\\\" return RunKeyword(self.owner.instance, self._orig_name, self.owner.supports_named_args) \",\"总结 其实robot的运行关键字思路也是比较简单的\",\"获取关键字\",\"robot先获取所用的关键字放在一个list中，这些关键字对象包括library、关键字名称，可执行对象，参数，文档。也是相当于导包的作用\",\"运行关键字\",\"运行关键字是通过关键字名称，library获取可执行对象，把参数放进来就是执行关键字了\",\"def __call__(self, *positional, **named): if self.supports_named_args: args = (self.keyword_name, positional, named) elif named: # This should never happen. raise ValueError(f\\\"'named' should not be used when named-argument \\\" f\\\"support is not enabled, got {named}.\\\") else: args = (self.keyword_name, positional) # 这里的self.method是它父类的_get_method(self, instance)的返回值，是个可执行函数 return self.method(*args) \"]},\"1189\":{\"h\":\"三、个人实现\",\"t\":[\"我自己也实现了个类似的功能，我实现的代码比较简单，但是原理和robot类似都是使用反射的机制来运行关键字， 不过有一点不同，我不是一开始就把所有的内置组件类全部实例化一遍，把他们存起来等待使用。我是使用的时候在进行实例化对应的组件库，进行了一个懒加载。 我这样做有个好处就是有些不用的组件库可以在这次运行中不加载，减少机器内存消耗，但是也有点不好就是运行到一半发现对应的组件库没有，可能发现问题的 时机会延后。不过我是通过UI来生成流程的所有上面说的这个问题可以大概率避免。\",\"import importlib import inspect from typing import List def dynamic_import(module_name: str, class_names: List[str]) -> dict: \\\"\\\"\\\" 动态导入组件库，这里类名必须要和模块名一致 Import component libraries dynamically, where the class name must match the module name :param module_name: 模块名，参考配置文件中的标准库.Module name, refer to the standard library in the configuration file :param class_names: 类名数组.Class names :return: \\\"\\\"\\\" modules = dict() for _class in class_names: module_str = f'{module_name}.{_class}' module = importlib.import_module(module_str) for name, sub in inspect.getmembers(module, inspect.isclass): if modules.get(name): raise ValueError(f'class name {name} already exists') if sub.__base__.__name__ == 'BaseTask': modules[name] = sub return modules print(dynamic_import('orderlines.libraries', ['BuiltIn'])) # {'BuiltIn': <class 'orderlines.libraries.BuiltIn.BuiltIn'>} \",\"dynamic_import('orderlines.libraries', ['BuiltIn']这个代码相当于from module_name import class_name把组件类放到modules中 当我们传过来一个关键字的时候，通过library和method_name可以通过反射getattr获取可执行对象，通过传过来的参数运行函数 我们传来的参数格式大概如下\",\"data = { \\\"module_name\\\": \\\"BuiltIn\\\", \\\"method_name\\\": \\\"start\\\" } modules = dynamic_import('orderlines.libraries', ['BuiltIn']) module = modules.get(data.get('module_name')) getattr(module, data.get('method_name'))() \"]},\"1190\":{\"c\":[\"源码分析\",\"robotframework\"]},\"1191\":{\"c\":[\"源码分析\",\"robotframework\"]},\"1192\":{\"h\":\"robot的运行流程\"},\"1193\":{\"h\":\"一、 RobotFrameWork 类构造\",\"t\":[\"class Application: def __init__(self, usage, name=None, version=None, arg_limits=None, env_options=None, logger=None, **auto_options): self._ap = ArgumentParser(usage, name, version, arg_limits, self.validate, env_options, **auto_options) self._logger = logger or DefaultLogger() class RobotFramework(Application): def __init__(self): super().__init__(USAGE, arg_limits=(1,), env_options='ROBOT_OPTIONS', logger=LOGGER) \",\"这里类的实例化比较简单。只是初始化了参数解析器和日志打印工具。\"]},\"1194\":{\"h\":\"二、运行逻辑\",\"t\":[\"def run_cli(arguments=None, exit=True): if arguments is None: arguments = sys.argv[1:] # 1、入口函数 return RobotFramework().execute_cli(arguments, exit=exit) \",\"class App: def _execute(self, arguments, options): try: # 3、主体运行逻辑 rc = self.main(arguments, **options) except DataError as err: return self._report_error(err.message, help=True) except (KeyboardInterrupt, SystemExit): return self._report_error('Execution stopped by user.', rc=STOPPED_BY_USER) except: error, details = get_error_details(exclude_robot_traces=False) return self._report_error('Unexpected error: %s' % error, details, rc=FRAMEWORK_ERROR) else: return rc or 0 class RobotFramework(APP): def execute_cli(self, cli_arguments, exit=True): with self._logger: self._logger.info('%s %s' % (self._ap.name, self._ap.version)) # 2、解析参数 options, arguments = self._parse_arguments(cli_arguments) rc = self._execute(arguments, options) if exit: self._exit(rc) return rc def main(self, datasources, **options): try: settings = RobotSettings(options) except: LOGGER.register_console_logger(stdout=options.get('stdout'), stderr=options.get('stderr')) raise LOGGER.register_console_logger(**settings.console_output_config) LOGGER.info(f'Settings:\\\\n{settings}') # 3.1、获取配置信息 if settings.pythonpath: sys.path = settings.pythonpath + sys.path builder = TestSuiteBuilder( included_extensions=settings.extension, included_files=settings.parse_include, custom_parsers=settings.parsers, rpa=settings.rpa, lang=settings.languages, allow_empty_suite=settings.run_empty_suite) suite = builder.build(*datasources) if settings.pre_run_modifiers: suite.visit(ModelModifier(settings.pre_run_modifiers, settings.run_empty_suite, LOGGER)) suite.configure(**settings.suite_config) settings.rpa = suite.validate_execution_mode() # 3.2、在当前上下文中运行 with pyloggingconf.robot_handler_enabled(settings.log_level): old_max_error_lines = text.MAX_ERROR_LINES old_max_assign_length = text.MAX_ASSIGN_LENGTH text.MAX_ERROR_LINES = settings.max_error_lines text.MAX_ASSIGN_LENGTH = settings.max_assign_length try: # 3.3、运行suite result = suite.run(settings) finally: text.MAX_ERROR_LINES = old_max_error_lines text.MAX_ASSIGN_LENGTH = old_max_assign_length LOGGER.info(\\\"Tests execution ended. Statistics:\\\\n%s\\\" % result.suite.stat_message) if settings.log or settings.report or settings.xunit: # 4、处理返回值，生成报告信息 writer = ResultWriter(settings.output if settings.log else result) writer.write_results(settings.get_rebot_settings()) return result.return_code class TestSuite(model.TestSuite[Keyword, TestCase]): def visit(self, visitor: SuiteVisitor): \\\"\\\"\\\":mod:`Visitor interface <robot.model.visitor>` entry-point.\\\"\\\"\\\" visitor.visit_suite(self) def run(self, settings=None, **options): from .namespace import IMPORTER from .signalhandler import STOP_SIGNAL_MONITOR from .suiterunner import SuiteRunner with LOGGER: if not settings: settings = RobotSettings(options) LOGGER.register_console_logger(**settings.console_output_config) with pyloggingconf.robot_handler_enabled(settings.log_level): with STOP_SIGNAL_MONITOR: IMPORTER.reset() output = Output(settings) runner = SuiteRunner(output, settings) # 3.4、真正的运行逻辑 self.visit(runner) output.close(runner.result) return runner.result class SuiteVisitor: def visit_suite(self, suite: 'TestSuite'): # 3.5、这里也就是访问者的意义所在。对象和算法进行分离，被访问者提供接口改变被访问者状态和信息 if self.start_suite(suite) is not False: if suite.has_setup: suite.setup.visit(self) suite.suites.visit(self) suite.tests.visit(self) if suite.has_teardown: suite.teardown.visit(self) self.end_suite(suite) \",\"我们总结下来robot的运行流程如下\",\"解析参数\",\"获取配置信息\",\"运行suite \",\"运行setup：初始化函数\",\"运行tests：测试用例\",\"运行teardown：运行结束函数\",\"获取运行状态，生成报告\",\"这里self.visit(runner)在robot中多处源码都有出现，这里实际上使用了访问者模式，将测试suite,和suite运行分离，好处就是对对象结构中的不同元素suite, test, keyword, 也包括if、for、try-except可以进行不同的操作。\"]},\"1195\":{\"c\":[\"源码分析\",\"robotframework\"]},\"1196\":{\"c\":[\"源码分析\",\"robotframework\"]},\"1197\":{\"h\":\"1、顺子问题\"},\"1198\":{\"h\":\"659. 分割数组为连续子序列\",\"t\":[\"给你一个按 非递减顺序 排列的整数数组 nums 。\",\"请你判断是否能在将 nums 分割成 一个或多个子序列 的同时满足下述 两个 条件：\",\"每个子序列都是一个 连续递增序列（即，每个整数 恰好 比前一个整数大 1 ）。\",\"所有子序列的长度 至少 为 3 。\",\"如果可以分割 nums 并满足上述条件，则返回 true ；否则，返回 false 。\",\"示例 1：\",\"输入：nums = [1,2,3,3,4,5] 输出：true 解释：nums 可以分割成以下子序列： [1,2,3,3,4,5] --> 1, 2, 3 [1,2,3,3,4,5] --> 3, 4, 5 \",\"示例 2：\",\"输入：nums = [1,2,3,3,4,4,5,5] 输出：true 解释：nums 可以分割成以下子序列： [1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5 [1,2,3,3,4,4,5,5] --> 3, 4, 5 \",\"示例 3：\",\"输入：nums = [1,2,3,4,4,5] 输出：false 解释：无法将 nums 分割成长度至少为 3 的连续递增子序列。 \",\"思路：\",\"我们需要对于元素进行分配，那些是需要自成一个子序列，那些是需要接到其他子序列的后面\",\"所以情况有两种\",\"当前元素 v 自成一派，「以自己开头」构成一个长度至少为 3 的序列。\",\"当前元素 v 接到已经存在的子序列后面。\",\"问题又来了如果元素两个条件都可以满足该怎么办。\",\"这里是需要先判断是否可以接到其他子序列后面，在判断是否可以自成顺子\",\"但是我们如何知道当前元素是需要自成顺子还是接到其他的顺子后面，这里肯定需要数据结构的辅助。\",\"但是需要什么数据结构呢？\",\"可以使用字典来辅助：一个字典counter用来判断当前元素的数量，另一个字典need用来判断那些数字需要接着其他子序列后面\",\"class Solution: def isPossible(self, nums: List[int]) -> bool: \\\"\\\"\\\" 思路： 我们遍历整个数字，判断数字是需要单成顺子还是作为其他顺子的后续 这两个情况是需要又先后顺序的，需要先判断是否先为其他顺子的后续，在判断是否自成顺子 我们如果满足这个情况呢。可以使用两个数据结构来辅助。 counter用来判断当前字符串剩余的数量 need 记录哪些元素可以被接到其他子序列后面 \\\"\\\"\\\" counter = Counter(nums) need = defaultdict(int) for num in nums: if counter[num] == 0: continue if need[num] > 0: counter[num] -= 1 need[num] -= 1 need[num + 1] += 1 elif counter[num] > 0 and counter[num + 1] > 0 and counter[num + 2] > 0: counter[num] -= 1 counter[num + 1] -= 1 counter[num + 2] -= 1 need[num + 3] += 1 else: return False return True \",\"如果需要判断把子序列都打印出来怎么办，这个时候need需要修改为记录那些子序列产生的需求\",\"# need[6] = 2 说明有两个子序列需要 6 need = {} # need[6] = [ # [3,4,5], # [2,3,4,5], # ] \",\"class Solution: def isPossible(self, nums: List[int]) -> List[int]: counter = Counter(nums) need = defaultdict(list) result = [] for num in nums: if counter[num] == 0: continue if len(need[num]) > 0: counter[num] -= 1 temp = need[num].pop() temp.append(num) need[num + 1] += [temp] elif counter[num] > 0 and counter[num + 1] > 0 and counter[num + 2] > 0: counter[num] -= 1 counter[num + 1] -= 1 counter[num + 2] -= 1 temp = [num, num + 1, num + 2] need[num + 3] += [temp] else: return result for key, val in need.items(): result += val return result print(Solution().isPossible([1, 2, 3, 3, 4, 4, 5, 5])) #[[3, 4, 5], [1, 2, 3, 4, 5]] \",\"那么如果是求最大的顺子呢\",\"我们可以使用动态规划的思路来解决\",\"dp[i]代表着i位置最长的顺子\",\"递推公式：if nums[i] == nums[j] + 1: dp[i] = dp[j] + 1\",\"初始化：每个数字都是一个长度为1的顺子\",\"遍历顺序从左到右\",\"打印dp\",\"def max_length_subsequence(nums: List[int]): nums.sort() dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] == nums[j] + 1: dp[i] = dp[j] + 1 print(dp) return max(dp) \"]},\"1199\":{\"c\":[\"算法笔记\",\"贪心\"]},\"1200\":{\"c\":[\"顺子问题\",\"双指针\"]},\"1201\":{\"h\":\"看似一致的面积问题\",\"t\":[\"这两道题看起来是比较类似的，都是求二维矩阵中的面积问题，但是两题的解题思路完全不一致。\",\"第一道题可以使用使用二维dp数组表示构成最大正方形的最长边长，但是第二题不行，它边长是由长宽构成，如果使用动态规划，那么需要两个dp数组，一个代表最长宽，一个代表最长高。\",\"如果用第二题dp代表最大矩形面积，这样又会没有递推关系。\",\"但是关于矩形面积都有一个统一思路就是求，最长宽高，得到最长的宽高也就得到了最大矩形面积\"]},\"1202\":{\"h\":\"221. 最大正方形 ——正方形最大面积\",\"t\":[\"在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。\",\"示例 1：\",\"img\",\"输入：matrix = [[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\"],[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\"],[\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\"],[\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\"]] 输出：4 \",\"示例 2：\",\"img\",\"输入：matrix = [[\\\"0\\\",\\\"1\\\"],[\\\"1\\\",\\\"0\\\"]] 输出：1 \",\"示例 3：\",\"输入：matrix = [[\\\"0\\\"]] 输出：0 \",\"提示：\",\"m == matrix.length\",\"n == matrix[i].length\",\"1 <= m, n <= 300\",\"matrix[i][j] 为 '0' 或 '1'\",\"思路看注释\",\"class Solution: def maximalSquare(self, matrix: List[List[str]]) -> int: \\\"\\\"\\\" dp数组含义： dp[i][j]代表着，i,j处所能构成最大正方形的最大边长 递推公式： if matrix[i][j] == '1': dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])+1 初始化： 第0行和第0列值为1需要进行初始化为1 遍历顺序： 从左到右，从上到下，正序 \\\"\\\"\\\" m = len(matrix) n = len(matrix[0]) if m == n == 0: return 0 dp = [[0] * n for _ in range(m)] for i in range(m): if matrix[i][0] == \\\"1\\\": dp[i][0] = 1 for j in range(n): if matrix[0][j] == \\\"1\\\": dp[0][j] = 1 for i in range(1, m): for j in range(1, n): if matrix[i][j] == \\\"1\\\": dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1 # print(dp) return max([max(i) for i in dp]) ** 2 \"]},\"1203\":{\"h\":\"LCR 040. 最大矩形 ——最大矩形\",\"t\":[\"给定一个由 0 和 1 组成的矩阵 matrix ，找出只包含 1 的最大矩形，并返回其面积。\",\"**注意：**此题 matrix 输入格式为一维 01 字符串数组。\",\"示例 1：\",\"img\",\"输入：matrix = [\\\"10100\\\",\\\"10111\\\",\\\"11111\\\",\\\"10010\\\"] 输出：6 解释：最大矩形如上图所示。 \",\"示例 2：\",\"输入：matrix = [] 输出：0 \",\"示例 3：\",\"输入：matrix = [\\\"0\\\"] 输出：0 \",\"示例 4：\",\"输入：matrix = [\\\"1\\\"] 输出：1 \",\"示例 5：\",\"输入：matrix = [\\\"00\\\"] 输出：0 \",\"提示：\",\"rows == matrix.length\",\"cols == matrix[0].length\",\"0 <= row, cols <= 200\",\"matrix[i][j] 为 '0' 或 '1'\"]},\"1204\":{\"c\":[\"算法笔记\",\"动态规划\",\"单调栈\"]},\"1205\":{\"c\":[\"动态规划\",\"单调栈\"]},\"1206\":{\"h\":\"最长递增子序列\"},\"1207\":{\"h\":\"300. 最长递增子序列\",\"t\":[\"给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。\",\"子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。\",\"示例 1：\",\"输入：nums = [10,9,2,5,3,7,101,18] 输出：4 解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。 \",\"示例 2：\",\"输入：nums = [0,1,0,3,2,3] 输出：4 \",\"示例 3：\",\"输入：nums = [7,7,7,7,7,7,7] 输出：1 \",\"提示：\",\"1 <= nums.length <= 2500\",\"-104 <= nums[i] <= 104\",\"进阶：\",\"你能将算法的时间复杂度降低到 O(n log(n)) 吗?\",\"思路：\",\"动态规划：\",\"遇到子序列，子数组，子串问题的第一个思路就是，从左到右遍历。\",\"假设数组为[1,3,2,4,6,7]其中最长递增子序列为[1,2,4,6,7]当遍历到4时我们需要得到前面数组的信息，比如j=2,如果nums[3]>nums[2],以3结尾的数组的最长子序列要加一\",\"按照动态规划五部曲\",\"第一步定义dp数组含义\",\"dp[i]的值代表nums以num**s[i]结尾的最长子序列长度\",\"初始化参数，每个数都可以是子数组长度为1的最长子序列，所以初始化为1\",\"确定遍历顺序：前面说了从左到右\",\"递归方程：num[i]>num[j],dp[i] = max(dp[j] + 1, dp[i])\",\"打印dp数组\",\"class Solution: def lengthOfLIS(self, nums: List[int]) -> int: dp = [1] * (len(nums)) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[j] + 1, dp[i]) # print(dp) return max(dp) \",\"二分法：\",\"由于获取到j要遍历0-i之间的所有数，所以可以省略这一步吗。\",\"答案是可以的，定义一个数组来接住递增数组的每一个元素就可以了。\",\"定义个tail 数组，用于保存当前找到的LIS中的最小可能尾部值，保证这个数组是连续递增的\",\"bisect_left 函数用来查找 nums[i] 在 tail 中应插入的位置，从而保证 tail 数组始终是有序的。\",\"如果 nums[i] 大于 tail 数组中的所有元素，则它将扩展当前的LIS；否则，它会替换掉 tail 中比它大的第一个元素，这样可以确保后续的数字有更小的目标去匹配，有助于形成更长的递增子序列。\",\"import bisect class Solution: def lengthOfLIS(self, nums: List[int]) -> int: # 初始化一个长度与nums相同，但是所有元素都是正无穷大的列表。 tail = [float('inf')] * len(nums) ans = 0 for i in range(len(nums)): # 使用二分查找找到nums[i]在tail中的位置 index = bisect.bisect_left(tail, nums[i]) # 更新该位置的值为nums[i] tail[index] = nums[i] # 计算tail中实际包含的有效元素数量（即不为正无穷大的元素数量） for num in tail: if num != float('inf'): ans += 1 else: break return ans \"]},\"1208\":{\"h\":\"673. 最长递增子序列的个数\",\"t\":[\"给定一个未排序的整数数组 nums ， 返回最长递增子序列的个数 。\",\"注意 这个数列必须是 严格 递增的。\",\"示例 1:\",\"输入: [1,3,5,4,7] 输出: 2 解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。 \",\"示例 2:\",\"输入: [2,2,2,2,2] 输出: 5 解释: 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。 \",\"提示:\",\"1 <= nums.length <= 2000\",\"-106 <= nums[i] <= 106\",\"思路：\",\"dp[i] 表示以 nums[i] 结尾的最长递增子序列的长度，count[i] 表示这些子序列的数量。\",\"当 dp[j] + 1 > dp[i] 时，这意味着通过将 nums[i] 添加到以 nums[j] 结尾的递增子序列中，可以获得一个比当前以 nums[i] 结尾的最长递增子序列还要长的新序列。因此，你需要更新 dp[i] 为 dp[j] + 1，同时将 count[i] 更新为 count[j]，因为现在 nums[i] 的最长递增子序列数量与 nums[j] 的相同。\",\"当 dp[j] + 1 == dp[i] 时，这表示可以通过添加 nums[i] 到以 nums[j] 结尾的递增子序列来获得与当前以 nums[i] 结尾的最长递增子序列一样长的新序列。这意味着存在多条路径到达相同的最长递增子序列长度。因此，你需要将 count[j] 加到 count[i] 上，以累计所有可能的路径数。\",\"class Solution: def findNumberOfLIS(self, nums: List[int]) -> int: count = [1] * len(nums) dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: if dp[i] < dp[j] + 1: dp[i] = max(dp[i], dp[j] + 1) count[i] = count[j] elif dp[j] + 1 == dp[i]: count[i] += count[j] max_size = max(dp) ans = 0 for i in range(len(nums)): if dp[i] == max_size: ans += count[i] return ans \"]},\"1209\":{\"h\":\"354. 俄罗斯套娃信封问题\",\"t\":[\"给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i 个信封的宽度和高度。\",\"当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。\",\"请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。\",\"注意：不允许旋转信封。\",\"示例 1：\",\"输入：envelopes = [[5,4],[6,4],[6,7],[2,3]] 输出：3 解释：最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。 \",\"示例 2：\",\"输入：envelopes = [[1,1],[1,1],[1,1]] 输出：1 \",\"提示：\",\"1 <= envelopes.length <= 105\",\"envelopes[i].length == 2\",\"1 <= wi, hi <= 105\",\"思路：\",\"和上题连续递增子序列完全一致，当时我在做就是在纠结信封的宽度一致如何处理，其实只需要将高度递减就可以避免同宽的情况了，因为它先被选中了，后续的就不会被再次选中了\",\"class Solution: def maxEnvelopes(self, envelopes: List[List[int]]) -> int: # 降序保证在同宽里高是最大的, 先被选择 envelopes = sorted(envelopes, key=lambda obj: (obj[0] , -obj[1])) tails = [float('inf')] * len(envelopes) for i in range(len(envelopes)): index = bisect.bisect_left(tails, envelopes[i][-1]) tails[index] = envelopes[i][-1] ans = 0 for temp in tails: if temp == float('inf'): break else: ans += 1 return ans \"]},\"1210\":{\"h\":\"田忌赛马——优势洗牌\"},\"1211\":{\"c\":[\"算法笔记\",\"数组\"]},\"1212\":{\"c\":[\"数组\"]},\"1213\":{\"h\":\"1、二叉树的遍历\"},\"1214\":{\"c\":[\"算法笔记\",\"二叉树\"]},\"1215\":{\"c\":[\"二叉树\"]},\"1216\":{\"h\":\"1、图论基础\"},\"1217\":{\"h\":\"一、图的逻辑结构\",\"t\":[\"图是由边和节点组成的。\",\"img\",\"本质上就是个高级点的多叉树而已，适用于树的 DFS/BFS 遍历算法，全部适用于图。\",\"实际上我们表示一个图一般使用邻接表或者邻接矩阵来实现。\",\"img\",\"img\",\"邻接表很直观，我把每个节点 x 的邻居都存到一个列表里，然后把 x 和这个列表关联起来，这样就可以通过一个节点 x 找到它的所有相邻节点。\",\"邻接矩阵则是一个二维布尔数组，我们权且称为 matrix，如果节点 x 和 y 是相连的，那么就把 matrix[x][y] 设为 true（上图中绿色的方格代表 true）。如果想找节点 x 的邻居，去扫一圈 matrix[x][..] 就行了。\",\"# 邻接表 # graph[x] 存储 x 的所有邻居节点 graph: List[List[int]] # 邻接矩阵 # matrix[x][y] 记录 x 是否有一条指向 y 的边 matrix: List[List[bool]] \",\"邻接表：占用空间少但是无法快速判断两个节点是否相邻。但对于邻接矩阵就简单了，只要看看 matrix[1][3] 就知道了\"]},\"1218\":{\"h\":\"二、图的相关概念\",\"t\":[\"最后，我们再明确一个图论中特有的度（degree）的概念，在无向图中，「度」就是每个节点相连的边的条数。\",\"由于有向图的边有方向，所以有向图中每个节点「度」被细分为入度（indegree）和出度（outdegree），比如下图\",\"img\",\"其中节点 3 的入度为 3（有三条边指向它），出度为 1（它有 1 条边指向别的节点）。\"]},\"1219\":{\"h\":\"三、图的分类\",\"t\":[\"有向图，无向图，有向加权图，无向加权图。\",\"有向加权图怎么表示\",\"使用邻接表、我们不仅仅存储某个节点 x 的所有邻居节点，还存储 x 到每个邻居的权重，就实现了加权有向图\",\"使用邻接矩阵我们矩阵中存储权值即可。\",\"什么是无向图，无向图就是双向图。\"]},\"1220\":{\"h\":\"四、图的遍历\",\"t\":[\"数据结构被发明出来很多时候都是为了遍历和访问。所以遍历是所有数据结构的基础。\",\"图应该如何遍历，可以参考下多叉树的遍历。\",\"def traverse(root): if root is None: return # 前序位置 for child in root.children: traverse(child) \",\"但是多叉树和图最大的区别就是，图中可能是包含环的，从图中的某一个节点开始遍历，有可能走了一圈又回到该节点，所以我们应该使用一个visited数组进行辅助，这个visited数组可以避免我们走回头路。\",\"visited = [] on_path = [] def traver(graph, s): if visited[s]: return visited[s] = True on_path[s] = True for neighbor in graph.neighbors(s): traverse(graph, neighbor) on_path[s] = False \",\"我们可以粗略的理解为visited 数组为灰色的节点，on_path数组相当于绿色的数组。\",\"在 visited 中被标记为 true 的节点用灰色表示，在 onPath 中被标记为 true 的节点用绿色表示，类比贪吃蛇游戏，visited 记录蛇经过过的格子，而 onPath 仅仅记录蛇身。在图的遍历过程中，onPath 用于判断是否成环，类比当贪吃蛇自己咬到自己（成环）的场景，这下你可以理解它们二者的区别了吧。\",\"图的遍历和回溯算法区别为，：回溯算法关注的不是节点，而是树枝\",\"# DFS 算法，关注点在节点 def traverse(root: TreeNode): if root is None: return print(\\\"进入节点\\\", root) for child in root.children: traverse(child) print(\\\"离开节点\\\", root) # 回溯算法，关注点在树枝 def backtrack(root: TreeNode): if root is None: return for child in root.children: # 做选择 print(\\\"从\\\", root, \\\"到\\\", child) backtrack(child) # 撤销选择 print(\\\"从\\\", child, \\\"到\\\", root) \",\"如果执行这段代码，你会发现根节点被漏掉了：\",\"def traverse(root): if root is None: return for child in root.children: print(\\\"进入节点 {}\\\".format(child)) traverse(child) print(\\\"离开节点 {}\\\".format(child)) \",\"所以对于这里「图」的遍历，我们应该用 DFS 算法，即把 onPath 的操作放到 for 循环外面，否则会漏掉记录起始点的遍历。\"]},\"1221\":{\"h\":\"五、题目实践—— 797. 所有可能的路径\",\"t\":[\"给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出（不要求按特定顺序）\",\"graph[i] 是一个从节点 i 可以访问的所有节点的列表（即从节点 i 到节点 graph[i][j]存在一条有向边）。\",\"示例 1：\",\"img\",\"输入：graph = [[1,2],[3],[3],[]] 输出：[[0,1,3],[0,2,3]] 解释：有两条路径 0 -> 1 -> 3 和 0 -> 2 -> 3 \",\"示例 2：\",\"img\",\"输入：graph = [[4,3,1],[3,2,4],[3],[4],[]] 输出：[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]] \",\"提示：\",\"n == graph.length\",\"2 <= n <= 15\",\"0 <= graph[i][j] < n\",\"graph[i][j] != i（即不存在自环）\",\"graph[i] 中的所有元素 互不相同\",\"保证输入为 有向无环图（DAG）\",\"思路：\",\"这里只需要遍历一遍图即可知道答案，那么我们遍历图需要哪些条件呢\",\"邻接表\",\"开始节点\",\"我们只需要这两个数据就可以了，那么我们遍历图需要两个数组第一个visited,第二个onpath,这两个数据是干嘛的。\",\"visited是为了避免走回头路，避免图中有环走入死循环，onpath是为了记录图中的数据，题目中已经说了没有环，所以我们就不再需要visited数组了。\",\"from typing import List class Solution: def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]: path = [] result = [] self.traverse(graph, 0, path, result) return result def traverse(self, graph: List[List[int]], s: int, path: List[int], result): path.append(s) if s == len(graph) - 1: result.append(path[:]) for v in graph[s]: self.traverse(graph, v, path, result) path.pop() \",\"但是这个代码还是有坑的，我们一般写递归条件需要return\",\"但是我们发现这里没有return，为什么没有return呢？是因为我们一旦return,就会把前面path.append(s)这里的值进行重复添加。所以当我们需要return时需要这么写\",\"from typing import List class Solution: def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]: path = [] result = [] self.traverse(graph, 0, path, result) return result def traverse(self, graph: List[List[int]], s: int, path: List[int], result): path.append(s) if s == len(graph) - 1: result.append(path[:]) path.pop() return for v in graph[s]: self.traverse(graph, v, path, result) path.pop() \",\"但是这里和我们代码随想录中写的还不一样，代码随想录中path的处理是在for循环中的，这里是在for循环外的，这里我们先要分清在for里面和外面的区别，里面是对路径进行回溯，外面是对节点进行回溯。\",\"如果写在里面会少个根节点。那么我们可以为了维持我们之前的习惯，还是选择写在里面\",\"from typing import List class Solution: def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]: path = [0] result = [] self.traverse(graph, 0, path, result) return result def traverse(self, graph: List[List[int]], s: int, path: List[int], result): if s == len(graph) - 1: result.append(path[:]) return for v in graph[s]: path.append(v) self.traverse(graph, v, path, result) path.pop() \"]},\"1222\":{\"c\":[\"算法笔记\",\"图论\"]},\"1223\":{\"c\":[\"图基础遍历\"]},\"1224\":{\"h\":\"1、并查集\"},\"1225\":{\"h\":\"一、基础概念\",\"t\":[\"什么叫做并查集。并查集是一种用于管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点表示对应集合中的元素。\",\"主要是解决图论中「动态连通性」问题的\",\"简单说，动态连通性其实可以抽象成给一幅图连线。比如下面这幅图，总共有 10 个节点，他们互不相连，分别用 0~9 标记：\",\"我们并查集中主要实现的是这三个api\",\"class UnionFind: def union(self, p: int, q: int): # 将p和q进行连接 pass def connected(self, p: int, q: int): # 判断p和q是否连通 pass def find(self, q: int): # 找到q的father节点 pass \",\"这里所说的「连通」是一种等价关系，也就是说具有如下三个性质：\",\"1、自反性：节点p和p是连通的。\",\"2、对称性：如果节点p和q连通，那么q和p也连通。\",\"3、传递性：如果节点p和q连通，q和r连通，那么p和r也连通。\",\"比如说之前那幅图，0～9 任意两个不同的点都不连通，调用connected都会返回 false，连通分量为 10 个。\",\"如果现在调用union(0, 1)，那么 0 和 1 被连通，连通分量降为 9 个。\",\"再调用union(1, 2)，这时 0,1,2 都被连通，调用connected(0, 2)也会返回 true，连通分量变为 8 个。\",\"判断这种「等价关系」非常实用，比如说编译器判断同一个变量的不同引用，比如社交网络中的朋友圈计算等等。\",\"如果某两个节点被连通，则让其中的（任意）一个节点的根节点接到另一个节点的根节点上：\",\"这样，如果节点p和q连通的话，它们一定拥有相同的根节点：\",\"那么这个算法的复杂度是多少呢？我们发现，主要 APIconnected和union中的复杂度都是find函数造成的，所以说它们的复杂度和find一样。\",\"find主要功能就是从某个节点向上遍历到树根，其时间复杂度就是树的高度。我们可能习惯性地认为树的高度就是logN，但这并不一定。logN的高度只存在于平衡二叉树，对于一般的树可能出现极端不平衡的情况，使得「树」几乎退化成「链表」，树的高度最坏情况下可能变成 N。\",\"对于并查集的优化一般有两个方向\",\"路径压缩，就是当一个子节点的根节点为a时，a的所有子节点直接挂到a上\",\"小挂大，也就是合并时数量小的集合直接挂到数量大的集合上\"]},\"1226\":{\"h\":\"路径压缩\",\"t\":[\"其实我们并不在乎每棵树的结构长什么样，只在乎根节点。\",\"这样每个节点的父节点就是整棵树的根节点，find就能以 O(1) 的时间找到某一节点的根节点，相应的，connected和union复杂度都下降为 O(1)。\",\"def find(p): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] \",\"用语言描述就是，每次 while 循环都会把一对儿父子节点改到同一层，这样每次调用find函数向树根遍历的同时，顺手就将树高缩短了，最终所有树高都会是一个常数，那么所有方法的复杂度也就都是 O(1)。\",\"这种路径压缩的效果如下：\",\"小挂大的意思就是说\",\"rank 小的树合入 到 rank大 的树，这样可以保证最后合成的树rank 最小，降低在树上查询的路径长度。\"]},\"1227\":{\"h\":\"二、并查集的实现\",\"t\":[\"不实现小挂大\",\"class UnionFind: def __init__(self, data: list): self.parent = [i for i in range(len(data))] def union(self, p: int, q: int): # 将p和q进行连接 parent_p = self.find(p) parent_q = self.find(q) if parent_p != parent_q: self.parent[parent_q] = parent_p def connected(self, p: int, q: int): # 判断p和q是否连通 return self.parent[self.find(q)] == self.find(p) def find(self, q: int): # 找到q的father节点 if self.parent[q] != q: self.parent[q] = self.find(self.parent[q]) return self.parent[q] \",\"实现小挂大\",\"class DisjointSet: def __init__(self, size): self.parent = [i for i in range(size)] self.rank = [0] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) # 路径压缩 return self.parent[p] def union(self, p, q): root_x = self.find(p) root_y = self.find(q) if root_x != root_y: if self.rank[root_x] < self.rank[root_y]: self.parent[root_x] = root_y elif self.rank[root_x] > self.rank[root_y]: self.parent[root_y] = root_x else: self.parent[root_x] = root_y self.rank[root_y] += 1 def connected(self, p, q): return self.find(q) == self.find(p) \"]},\"1228\":{\"h\":\"三、经典例题：\"},\"1229\":{\"h\":\"1971. 寻找图中是否存在路径\",\"t\":[\"有一个具有 n 个顶点的 双向 图，其中每个顶点标记从 0 到 n - 1（包含 0 和 n - 1）。图中的边用一个二维整数数组 edges 表示，其中 edges[i] = [ui, vi] 表示顶点 ui 和顶点 vi 之间的双向边。 每个顶点对由 最多一条 边连接，并且没有顶点存在与自身相连的边。\",\"请你确定是否存在从顶点 source 开始，到顶点 destination 结束的 有效路径 。\",\"给你数组 edges 和整数 n、source 和 destination，如果从 source 到 destination 存在 有效路径 ，则返回 true，否则返回 false 。\",\"示例 1：\",\"img\",\"输入：n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2 输出：true 解释：存在由顶点 0 到顶点 2 的路径: - 0 → 1 → 2 - 0 → 2 \",\"示例 2：\",\"img\",\"输入：n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5 输出：false 解释：不存在由顶点 0 到顶点 5 的路径. \",\"提示：\",\"1 <= n <= 2 * 105\",\"0 <= edges.length <= 2 * 105\",\"edges[i].length == 2\",\"0 <= ui, vi <= n - 1\",\"ui != vi\",\"0 <= source, destination <= n - 1\",\"不存在重复边\",\"不存在指向顶点自身的边\",\"思路\",\"dfs思路\",\"对应数据结构的题目我们的第一思路应该是能不能通过遍历一遍得到答案，对于这个问题我们很容易想到可以通过遍历一遍看看是否存在从source到target的路径，所以我们可以使用dfs进行遍历一遍图即可得到答案。\",\"class Solution: def __init__(self): self.result = [] def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool: graph = self.build_graph(n, edges) self.visited = [False] * n return self.dfs(graph, source, destination) def build_graph(self, n, edges): graph = [[] for _ in range(n)] for edge in edges: _from, _to = edge graph[_from].append(_to) graph[_to].append(_from) return graph def dfs(self, graph, node, destination): if node == destination: return True self.visited[node] = True for val in graph[node]: if not self.visited[val] and self.dfs(graph, val, destination): return True return False \",\"并查集思路\",\"这个题目判断的是从一个节点是否存在到达另一个节点的路径，我们可以看这两个节点是否在同一个集合中，也就是这两个节点连通性的判断，所以我们可以直接套用模版。\",\"class Solution: def validPath( self, n: int, edges: List[List[int]], source: int, destination: int ) -> bool: union_set = UnionSet(n) for edge in edges: from_, to_ = edge union_set.union(from_, to_) return union_set.is_same(source, destination) class UnionSet: def __init__(self, n): self.parent = [i for i in range(n)] def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p: int, q: int): self.parent[self.find(p)] = self.find(q) def is_same(self, p:int, q:int): p_father = self.find(p) q_father = self.find(q) return p_father == q_father \"]},\"1230\":{\"h\":\"684. 冗余连接\",\"t\":[\"树可以看成是一个连通且 无环 的 无向 图。\",\"给定往一棵 n 个节点 (节点值 1～n) 的树中添加一条边后的图。添加的边的两个顶点包含在 1 到 n 中间，且这条附加的边不属于树中已存在的边。图的信息记录于长度为 n 的二维数组 edges ，edges[i] = [ai, bi] 表示图中在 ai 和 bi 之间存在一条边。\",\"请找出一条可以删去的边，删除后可使得剩余部分是一个有着 n 个节点的树。如果有多个答案，则返回数组 edges 中最后出现的那个。\",\"示例 1：\",\"img\",\"输入: edges = [[1,2], [1,3], [2,3]] 输出: [2,3] \",\"示例 2：\",\"img\",\"输入: edges = [[1,2], [2,3], [3,4], [1,4], [1,5]] 输出: [1,4] \",\"提示:\",\"n == edges.length\",\"3 <= n <= 1000\",\"edges[i].length == 2\",\"1 <= ai < bi <= edges.length\",\"ai != bi\",\"edges 中无重复元素\",\"给定的图是连通的\",\"思路：\",\"当我们发现题目中有连通两个词那么我们不妨试试并查集。\",\"题目说是无向图，返回一条可以删去的边，使得结果图是一个有着N个节点的树，那么我们可以从前到后遍历每一个边，如果边的每个节点不是同一个集合就连接起来，加入为同一个集合\",\"如果边的两个节点已经出现在同一个集合里，说明着边的两个节点已经连在一起了，再加入这条边一定就出现环了。\",\"已经判断 节点A 和 节点B 在在同一个集合（同一个根），如果将 节点A 和 节点B 连在一起就一定会出现环。\",\"所以代码如下\",\"class Solution: def findRedundantConnection(self, edges: List[List[int]]) -> List[int]: union_set = UnionSet() result = [] for p, q in edges: if not union_set.is_same(p, q): union_set.union(p, q) else: result = [p, q] return result class UnionSet: def __init__(self): self.parent = [i for i in range(1001)] def find(self, q: int): if self.parent[q] != q: self.parent[q] = self.find(self.parent[q]) return self.parent[q] def union(self, p: int, q: int): p_father = self.find(p) q_father = self.find(q) self.parent[p_father] = q_father def is_same(self, p, q): p_father = self.find(p) q_father = self.find(q) return p_father == q_father \"]},\"1231\":{\"c\":[\"算法笔记\",\"图论\"]},\"1232\":{\"c\":[\"并查集\"]},\"1233\":{\"h\":\"2、二分图\"},\"1234\":{\"h\":\"一、二分图的定义\",\"t\":[\"官方定义比较绕口，二分图的顶点集可分割为两个互不相交的子集，图中每条边依附的两个顶点都分属于这两个子集，且两个子集内的顶点不相邻。但是通俗理解就是能不能将一个边的两个节点分别属于不同颜色的集合中\",\"，如何存储电影演员和电影之间的关系？\",\"如果用哈希表存储，需要两个哈希表分别存储「每个演员到电影列表」的映射和「每部电影到演员列表」的映射。\",\"但如果用「图」结构存储，将电影和参演的演员连接，很自然地就成为了一幅二分图：\",\"每个电影节点的相邻节点就是参演该电影的所有演员，每个演员的相邻节点就是该演员参演过的所有电影，非常方便直观。\"]},\"1235\":{\"h\":\"二分图的判定方法\",\"t\":[\"我们可以遍历一遍图，边遍历边进行染色，看看能不能使用两种颜色给所有的节点进行染色，且相邻节点的颜色都不同\",\"图的遍历框架为\",\"visited = [] def dfs(graph, node): if visited[node]: return visited[node] = True for val in graph[node]: dfs(graph, val) \",\"这是一个标准的后序遍历，后序遍历的优点就是可以在我们遍历完数据后得到返回值后进行处理。\",\"二分图是要求我们获取到该节点和其相邻节点的颜色都不一致。如果该节点和它的相邻节点颜色一致了，那么这就不是一个二分图了\",\"那么我们稍微修改一下，可以写成这样边遍历边进行染色\",\"visited = [] def dfs(graph, node): visited[node] = True for val in graph[node]: if visited[val]: # 这里就不是一个二分图 else: dfs(graph, val) \"]},\"1236\":{\"h\":\"785. 判断二分图\",\"t\":[\"存在一个 无向图 ，图中有 n 个节点。其中每个节点都有一个介于 0 到 n - 1 之间的唯一编号。给你一个二维数组 graph ，其中 graph[u] 是一个节点数组，由节点 u 的邻接节点组成。形式上，对于 graph[u] 中的每个 v ，都存在一条位于节点 u 和节点 v 之间的无向边。该无向图同时具有以下属性：\",\"不存在自环（graph[u] 不包含 u）。\",\"不存在平行边（graph[u] 不包含重复值）。\",\"如果 v 在 graph[u] 内，那么 u 也应该在 graph[v] 内（该图是无向图）\",\"这个图可能不是连通图，也就是说两个节点 u 和 v 之间可能不存在一条连通彼此的路径。\",\"二分图 定义：如果能将一个图的节点集合分割成两个独立的子集 A 和 B ，并使图中的每一条边的两个节点一个来自 A 集合，一个来自 B 集合，就将这个图称为 二分图 。\",\"如果图是二分图，返回 true ；否则，返回 false 。\",\"示例 1：\",\"img\",\"输入：graph = [[1,2,3],[0,2],[0,1,3],[0,2]] 输出：false 解释：不能将节点分割成两个独立的子集，以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点。 \",\"示例 2：\",\"img\",\"输入：graph = [[1,3],[0,2],[1,3],[0,2]] 输出：true 解释：可以将节点分成两组: {0, 2} 和 {1, 3} 。 \",\"提示：\",\"graph.length == n\",\"1 <= n <= 100\",\"0 <= graph[u].length < n\",\"0 <= graph[u][i] <= n - 1\",\"graph[u] 不会包含 u\",\"graph[u] 的所有值 互不相同\",\"如果 graph[u] 包含 v，那么 graph[v] 也会包含 u\",\"class Solution12: def __init__(self): # 表示不能将图的每个节点分到两个不同集合中，也就是表示不是二分图 self.flag = False self.visited = None self.color = None def isBipartite(self, graph: List[List[int]]) -> bool: n = len(graph) self.visited = [False] * n self.color = [False] * n for i in range(n): if not self.visited[i]: self.dfs(graph, i) return not self.flag def dfs(self, graph, node): if self.flag: return self.visited[node] = True for val in graph[node]: if not self.visited[val]: self.color[val] = not self.color[node] self.dfs(graph, val) else: if self.color[val] == self.color[node]: self.flag = True \"]},\"1237\":{\"h\":\"886. 可能的二分法 ——有向图，需要自己构造图\",\"t\":[\"给定一组 n 人（编号为 1, 2, ..., n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。\",\"给定整数 n 和数组 dislikes ，其中 dislikes[i] = [ai, bi] ，表示不允许将编号为 ai 和 bi的人归入同一组。当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。\",\"示例 1：\",\"输入：n = 4, dislikes = [[1,2],[1,3],[2,4]] 输出：true 解释：group1 [1,4], group2 [2,3] \",\"示例 2：\",\"输入：n = 3, dislikes = [[1,2],[1,3],[2,3]] 输出：false \",\"示例 3：\",\"输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]] 输出：false \",\"提示：\",\"1 <= n <= 2000\",\"0 <= dislikes.length <= 104\",\"dislikes[i].length == 2\",\"1 <= dislikes[i][j] <= n\",\"ai < bi\",\"dislikes 中每一组都 不同\",\"思路：\",\"本题和上题最大的不同就是本题是有向图，上一道题为无向图，且本题的图需要自己构造。\",\"整体思路都是一致的。\",\"class Solution: def __init__(self): self.color = None self.visited = None self.flag = False # 是二分图 def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool: self.visited = [False] * n self.color = [False] * n # 构造图 graph = self.build_graph(n, dislikes) # 进行二分判定 for i in range(n): if not self.visited[i]: self.dfs(graph, i) return not self.flag def dfs(self, graph, node): if self.flag: return self.visited[node] = True for val in graph[node]: if self.visited[val]: if self.color[val] == self.color[node]: self.flag = True # 不是二分图 else: self.color[val] = not self.color[node] self.dfs(graph, val) def build_graph(self, n, dislikes): graph = [[] for _ in range(n)] for edge in dislikes: _from, _to = edge graph[_from -1].append(_to - 1) graph[_to - 1 ].append(_from - 1) return graph \",\"这个代码需要注意两点\",\"我们要判断从每个节点开始都可不可以放到两个集合中\",\"需要注意当前节点和上个的相邻节点是不是同一种颜色\"]},\"1238\":{\"c\":[\"算法笔记\",\"图论\"]},\"1239\":{\"c\":[\"二分图\"]},\"1240\":{\"h\":\"3、环检测和拓扑排序\",\"t\":[\"图这种数据结构有一些比较特殊的算法，比如二分图判断，有环图无环图的判断，拓扑排序等。\",\"而对于拓扑排序首先就是要判断图中是不是有环，如果有环就没有必要进行排序了。\",\"而什么叫做拓扑排序呢就是\",\"直观地说就是，让你把一幅图「拉平」，而且这个「拉平」的图里面，所有箭头方向都是一致的，比如上图所有箭头都是朝右的。\",\"如果一幅有向图中存在环，是无法进行拓扑排序的，因为肯定做不到所有箭头方向一致；反过来，如果一幅图是「有向无环图」，那么一定可以进行拓扑排序。\"]},\"1241\":{\"h\":\"一、环检测—— 207. 课程表\",\"t\":[\"你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。\",\"在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程 bi 。\",\"例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。\",\"请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。\",\"示例 1：\",\"输入：numCourses = 2, prerequisites = [[1,0]] 输出：true 解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。 \",\"示例 2：\",\"输入：numCourses = 2, prerequisites = [[1,0],[0,1]] 输出：false 解释：总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。 \",\"提示：\",\"1 <= numCourses <= 2000\",\"0 <= prerequisites.length <= 5000\",\"prerequisites[i].length == 2\",\"0 <= ai, bi < numCourses\",\"prerequisites[i] 中的所有课程对 互不相同\",\"思路：\",\"这里题目求得是课程之间是否存在相互依赖的关系，如果存在相互依赖关系，那么课程之间就不可能学习完成，如果不存在相互依赖那么就可以学习完成全部的课程。\",\"因为求得是相互依赖的关系所以我们可以使用有向图来表示，求是不是相互依赖，这里指的是所有的节点是否存在相互依赖的关系，那么我们就可以转化为求图中是否存在环。\",\"题目中给的是一个图的边，\",\"第一步我们需要将边的信息转化为图的信息。这里需要注意我们是使用依赖的关系还是被依赖的关系，比如[1,0]我们需要转化为[[], [0]]这种关系\",\"第二步我们需要检测图中每个节点是否存在互相依赖的关系\",\"class Solution: def __init__(self): self.flag = False self.visited = None self.on_path = None def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool: # 创建邻接表 graph = self.build_graph(numCourses, prerequisites) print(graph) # 判断节点之间是否存在互相依赖，这里需要注意需要遍历所有的节点 self.visited = [False] * numCourses self.on_path = [False] * numCourses # 注意图中并不是所有节点都相连，所以要用一个for循环将所有节点都作为起点调用一次 DFS 搜索算法。 for i in range(numCourses): self.dfs(graph, i) return not self.flag def dfs(self, graph, node): if self.on_path[node]: self.flag = True if self.visited[node] or self.flag: return self.visited[node] = True self.on_path[node] = True for val in graph[node]: self.dfs(graph, val) self.on_path[node] = False def build_graph(self, numCourses, prerequisites): graph = [[] for _ in range(numCourses)] for edge in prerequisites: from_, to_ = edge graph[from_].append(to_) return graph \"]},\"1242\":{\"h\":\"210. 课程表 II ——拓扑排序\",\"t\":[\"现在你总共有 numCourses 门课需要选，记为 0 到 numCourses - 1。给你一个数组 prerequisites ，其中 prerequisites[i] = [ai, bi] ，表示在选修课程 ai 前 必须 先选修 bi 。\",\"例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示：[0,1] 。\",\"返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 任意一种 就可以了。如果不可能完成所有课程，返回 一个空数组 。\",\"示例 1：\",\"输入：numCourses = 2, prerequisites = [[1,0]] 输出：[0,1] 解释：总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。 \",\"示例 2：\",\"输入：numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] 输出：[0,2,1,3] 解释：总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。 因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。 \",\"示例 3：\",\"输入：numCourses = 1, prerequisites = [] 输出：[0] \",\"提示：\",\"1 <= numCourses <= 2000\",\"0 <= prerequisites.length <= numCourses * (numCourses - 1)\",\"prerequisites[i].length == 2\",\"0 <= ai, bi < numCourses\",\"ai != bi\",\"所有[ai, bi]互不相同\",\"这里课程表的第一题有一点不同的就是这里不仅仅要得到是否可以学完全部的课程还要得到课程的排序\",\"class Solution: def __init__(self): visited = None on_path = None self.flag = False# 这里的True就是有环，不可以学完全部的课程 self.result = [] def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]: # 构建图 graph = self.build_graph(numCourses, prerequisites) self.visited = [False] * numCourses self.on_path = [False] * numCourses # 环检测加收集信息 for i in range(numCourses): self.dfs(graph, i) # print(\\\"result::\\\", self.result, self.flag) if self.flag is True: return [] return self.result[::-1] def dfs(self, graph, node): if self.on_path[node]: self.flag = True if self.visited[node] or self.flag: return self.on_path[node] = True self.visited[node] = True for val in graph[node]: self.dfs(graph, val) self.result.append(node) self.on_path[node] = False def build_graph(self, numCourses, prerequisites): graph = [[] for _ in range(numCourses)] for temp in prerequisites: to_, from_ = temp graph[from_].append(to_) return graph \"]},\"1243\":{\"c\":[\"算法笔记\",\"图论\"]},\"1244\":{\"c\":[\"环检测\",\"拓扑排序\"]},\"1245\":{\"h\":\"1、链表操作\"},\"1246\":{\"c\":[\"链表\"]},\"1247\":{\"c\":[\"链表\"]},\"1248\":{\"h\":\"1、优先级队列\"},\"1249\":{\"c\":[\"算法笔记\",\"堆、优先级队列\"]},\"1250\":{\"c\":[\"优先级队列\"]},\"1251\":{\"h\":\"2、栈和单调栈\"},\"1252\":{\"c\":[\"算法笔记\",\"栈、单调栈\"]},\"1253\":{\"c\":[\"单调栈\"]},\"1254\":{\"h\":\"左右指针\"},\"1255\":{\"h\":\"一、概念\",\"t\":[\"所谓左右指针，就是两个指针相向而行或者相背而行；而所谓快慢指针，就是两个指针同向而行，一快一慢。\",\"左右指针在我们算法中使用是非常广泛的，一般解决问题包括但是不仅限于两数之和类问题，翻转数组，双指针问题又可以进行细分为，滑动窗口，二分查找等具体的技巧。但是滑动窗口，二分查找，已经开始自立门派，自成体系了。\"]},\"1256\":{\"h\":\"二、经典题目\"},\"1257\":{\"h\":\"15. 三数之和\",\"t\":[\"给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请\",\"你返回所有和为 0 且不重复的三元组。\",\"**注意：**答案中不可以包含重复的三元组。\",\"示例 1：\",\"输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。 \",\"示例 2：\",\"输入：nums = [0,1,1] 输出：[] 解释：唯一可能的三元组和不为 0 。 \",\"示例 3：\",\"输入：nums = [0,0,0] 输出：[[0,0,0]] 解释：唯一可能的三元组和为 0 。 \",\"class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: result = list() # 先对数组进行排序 nums.sort() length = len(nums) # 然后从左到右进行遍历 for i in range(length - 2): if nums[i] >0: break # 遇到相同元素跳过 if i > 0 and nums[i] == nums[i - 1]: continue left = i + 1 right = length - 1 item = nums[i] while left < right: item1 = nums[left] item2 = nums[right] if item + item1 + item2 == 0: result.append([item, item1, item2]) left += 1 right -= 1 # 遇到相同元素进行跳过 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif item + item1 + item2 > 0: right -= 1 while left < right and nums[right] == nums[right + 1]: right -= 1 else: left += 1 while left < right and nums[left] == nums[left - 1]: left += 1 return result \"]},\"1258\":{\"h\":\"344. 反转字符串\",\"t\":[\"编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。\",\"不要给另外的数组分配额外的空间，你必须**原地修改输入数组**、使用 O(1) 的额外空间解决这一问题。\",\"示例 1：\",\"输入：s = [\\\"h\\\",\\\"e\\\",\\\"l\\\",\\\"l\\\",\\\"o\\\"] 输出：[\\\"o\\\",\\\"l\\\",\\\"l\\\",\\\"e\\\",\\\"h\\\"] \",\"示例 2：\",\"输入：s = [\\\"H\\\",\\\"a\\\",\\\"n\\\",\\\"n\\\",\\\"a\\\",\\\"h\\\"] 输出：[\\\"h\\\",\\\"a\\\",\\\"n\\\",\\\"n\\\",\\\"a\\\",\\\"H\\\"] \",\"class Solution: def reverseString(self, s: List[str]) -> None: \\\"\\\"\\\" Do not return anything, modify s in-place instead. \\\"\\\"\\\" left = 0 right = len(s)-1 while left <= right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 \"]},\"1259\":{\"h\":\"5. 最长回文子串\",\"t\":[\"如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。\",\"示例 1：\",\"输入：s = \\\"babad\\\" 输出：\\\"bab\\\" 解释：\\\"aba\\\" 同样是符合题意的答案。 \",\"示例 2：\",\"输入：s = \\\"cbbd\\\" 输出：\\\"bb\\\" \",\"class Solution: def longestPalindrome(self, s: str) -> str: result = \\\"\\\" for i in range(len(s)): # 这个分成奇数和偶数分别进行判断 s1 = self.isvaild(s, i, i + 1) s2 = self.isvaild(s, i, i) result = s1 if len(s1) > len(result) else result result = s2 if len(result) < len(s2) else result return result def isvaild(self, s, left, right): # 逐个判断每个字符 while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1 : right] \"]},\"1260\":{\"c\":[\"算法笔记\",\"左右指针\"]},\"1261\":{\"c\":[\"双指针\"]},\"1262\":{\"h\":\"快慢指针\"},\"1263\":{\"h\":\"一、概念\",\"t\":[\"什么叫做快慢指针呢？就是两指针都是从头开始，一起向某个方向移动，这个在链表中使用更加多，但是在数组中用到的也是非常多的，这一类题目基本上有个比较明显的特征，就是原地修改数组，比如原地去重，原地修改，当我们遇到这些关键字就需要注意了我们需要用到快慢指针。\",\"关于使用快慢指针还有一点比较重要，就是快指针代表着什么，慢指针表示着什么，当它们相遇时我们需要做什么。\",\"基本上就是统一的思路\",\"快指针：表示我们要遍历的元素信息\",\"慢指针：表示我们要维护元素\"]},\"1264\":{\"h\":\"二、经典例题\"},\"1265\":{\"h\":\"27. 移除元素\",\"t\":[\"给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。\",\"不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。\",\"元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\",\"示例 1：\",\"输入：nums = [3,2,2,3], val = 3 输出：2, nums = [2,2] 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。 \",\"示例 2：\",\"输入：nums = [0,1,2,2,3,0,4,2], val = 2 输出：5, nums = [0,1,3,0,4] 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。 \",\"class Solution: def removeElement(self, nums: List[int], val: int) -> int: slow = 0 for fast in range(len(nums)): # fast指的是我们需要遍历的元素，slow指的是我们要维护的元素 if nums[fast] != val: nums[fast], nums[slow] = nums[slow], nums[fast] slow += 1 return slow \"]},\"1266\":{\"h\":\"26. 删除有序数组中的重复项\",\"t\":[\"给你一个 非严格递增排列 的数组 nums ，请你** 原地** 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。\",\"考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：\",\"更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。\",\"返回 k 。\",\"判题标准:\",\"系统会用下面的代码来测试你的题解:\",\"int[] nums = [...]; // 输入数组 int[] expectedNums = [...]; // 长度正确的期望答案 int k = removeDuplicates(nums); // 调用 assert k == expectedNums.length; for (int i = 0; i < k; i++) { assert nums[i] == expectedNums[i]; } \",\"如果所有断言都通过，那么您的题解将被 通过。\",\"示例 1：\",\"输入：nums = [1,1,2] 输出：2, nums = [1,2,_] 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 \",\"示例 2：\",\"输入：nums = [0,0,1,1,1,2,2,3,3,4] 输出：5, nums = [0,1,2,3,4] 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。 \",\"class Solution: def removeDuplicates(self, nums: List[int]) -> int: slow = 0 # fast指的是要遍历的元素，slow指的是我们要维护的元素的末尾元素 for fast in range(len(nums)): if nums[fast] != nums[slow]: slow += 1 nums[fast],nums[slow] = nums[slow], nums[fast] print(nums) return slow \"]},\"1267\":{\"c\":[\"算法笔记\",\"快慢指针\"]},\"1268\":{\"c\":[\"双指针\"]},\"1269\":{\"h\":\"1、背包问题\"},\"1270\":{\"h\":\"一、01 背包\",\"t\":[\"有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。这是标准的背包问题。但是力扣上没有标准的背包问题，有的只是一些变形问题。\",\"但是只有基本的背包问题理解清楚，其他的变形问题才能够完全明白，因此我们先拿标准的背包问题进行分析。\",\"重量\",\"价值\",\"物品0\",\"1\",\"15\",\"物品1\",\"3\",\"20\",\"物品2\",\"4\",\"30\"]},\"1271\":{\"h\":\"二维数组\",\"t\":[\"问背包能背的物品最大价值是多少？\",\"按照动规5部曲的思路进行分析\",\"确定dp数组的含义\",\"dp[i][j]指的是背包容量为j,0-i件物品任取，背包所能获取的最大价值。i指的是物品、j指的是背包\",\"确定递归公式\",\"能获取的价值在于第i个物品要不要取\",\"取得话为dp[i-1][j-weight[i]]+value[i]\",\"不取的话dp[i-1][j]\",\"dp[i][j]能获取的最大价值就是dp[i][j]=max(dp[i-1][j], dp[i-1][j-weight[i]]+value[i])\",\"dp数组初始化\",\"当背包容量为0时，dp[i][0]一定为0\",\"当物品为0时，也就是存放物品编号为0时，各个容量的背包所能存放的最大价值 \",\"j < weight[0]的时候，dp[0][j] 应该是 0，因为背包容量比编号0的物品重量还小。\",\"j >= weight[0]时，dp[0][j] 应该是value[0]，因为背包容量放足够放编号0物品。\",\"dp数组的遍历顺序\",\"由于dp[i][j]是由dp[i-1][j-weight[i]]推导出来，我们可以确定dp[i][j]是由它的左上角得出来的，因此需要从左到右，从上到下进行遍历\",\"那么物品和背包的遍历顺序有影响吗？ \",\"二维数组是没有影响的，因为无论是先物品还是先背包都是先得到左上角的值\"]},\"1272\":{\"h\":\"代码\",\"t\":[\"def bag01(weight: List[int], value: List, bag_value: int): dp = [[0] * (bag_value + 1) for _ in range(len(weight))] for j in range(weight[0], bag_value + 1): dp[0][j] = value[0] for i in range(1, len(weight)): for j in range(bag_value + 1): if j < weight[i]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]) print(dp) return dp[-1][-1] \"]},\"1273\":{\"h\":\"一维滚动数组\",\"t\":[\"在使用二维数组的时候，递推公式：dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);\",\"其实可以发现如果把dp[i - 1]那一层拷贝到dp[i]上，表达式完全可以是：dp[i][j] = max(dp[i][j], dp[i][j - weight[i]] + value[i]);\",\"与其把dp[i - 1]这一层拷贝到dp[i]上，不如只用一个一维数组了，只用dp[j]（一维数组，也可以理解是一个滚动数组）。\",\"动规五部曲\",\"dp数组含义：dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]。\",\"递推公式：dp[j]有两个选择，一个是取自己dp[j] 相当于 二维dp数组中的dp[i-1][j]，即不放物品i，一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的\",\"dp[j] = max(dp[j], dp[j-weight[i]]+value[i])\",\"一维dp数组初始化\",\"容量为j的背包，所背的物品价值可以最大为dp[j]，那么dp[0]就应该是0，因为背包容量为0所背的物品的最大价值就是0。\",\"dp数组在推导的时候一定是取价值最大的数，如果题目给的价值都是正整数那么非0下标都初始化为0就可以了。\",\"、\",\"遍历顺序\",\"先物品再背包，背包倒叙\",\"倒序遍历是为了保证物品i只被放入一次！\",\"def bag01_1(weight: list, value: list, bag_weight: int): dp = [0]*(bag_weight+1) for i in range(len(weight)): for j in range(bag_weight, weight[i]-1, -1): dp[j] = max(dp[j], dp[j-weight[i]]+value[i]) print(dp) bag01_1([1, 3, 4], [15, 20, 30], 4) \"]},\"1274\":{\"h\":\"01背包的变形\",\"t\":[\"01背包题目在力扣中没有原题，有的只是一些变形题目。\",\"416. 分割等和子集——weight==value\",\"给你一个 只包含正整数 的 非空 数组 nums 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。\",\"示例 1：\",\"输入：nums = [1,5,11,5] 输出：true 解释：数组可以分割成 [1, 5, 5] 和 [11] 。 \",\"示例 2：\",\"输入：nums = [1,2,3,5] 输出：false 解释：数组不能分割成两个元素和相等的子集。 \",\"class Solution: def canPartition(self, nums: List[int]) -> bool: total = sum(nums) if total % 2 == 1: return False count = total // 2 dp = [0] * (count + 1) for i in range(len(nums)): for j in range(count, nums[i] - 1, -1): dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]) print(dp) return dp[-1] * 2 == total \",\"1049. 最后一块石头的重量 II——weight==value\",\"有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。\",\"每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：\",\"如果 x == y，那么两块石头都会被完全粉碎；\",\"如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。\",\"最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0。\",\"示例 1：\",\"输入：stones = [2,7,4,1,8,1] 输出：1 解释： 组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]， 组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]， 组合 2 和 1，得到 1，所以数组转化为 [1,1,1]， 组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。 \",\"示例 2：\",\"输入：stones = [31,26,33,21,40] 输出：5 \",\"class Solution: def lastStoneWeightII(self, stones: List[int]) -> int: total = sum(stones) size = total // 2 dp = [0] * (size + 1) for i in range(len(stones)): for j in range(size, stones[i] - 1, -1): dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]) print(dp) return total - (dp[-1] * 2) \",\"494. 目标和 ——01背包组合dp[j]+=dp[j-nums[i]]\",\"给你一个非负整数数组 nums 和一个整数 target 。\",\"向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：\",\"例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 \\\"+2-1\\\" 。\",\"返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。\",\"示例 1：\",\"输入：nums = [1,1,1,1,1], target = 3 输出：5 解释：一共有 5 种方法让最终目标和为 3 。 -1 + 1 + 1 + 1 + 1 = 3 +1 - 1 + 1 + 1 + 1 = 3 +1 + 1 - 1 + 1 + 1 = 3 +1 + 1 + 1 - 1 + 1 = 3 +1 + 1 + 1 + 1 - 1 = 3 \",\"示例 2：\",\"输入：nums = [1], target = 1 输出：1 \",\"class Solution: def findTargetSumWays(self, nums: List[int], target: int) -> int: \\\"\\\"\\\" 思路 left + right = total left - right = target right = left - target left + left - target = total left = (total + target)/2 if target > total or -target > total: rerurn 0 if (total + target) % 2 == 1: return 0 \\\"\\\"\\\" total = sum(nums) if target > total or -target > total: return 0 if (total + target) % 2 == 1: return 0 size = (total + target) // 2 dp = [0] * (size + 1) dp[0] = 1 for i in range(len(nums)): for j in range(size, nums[i] - 1, -1): dp[j] += dp[j - nums[i]] print(dp) return dp[-1] \",\"474. 一和零——背包双维度\",\"给你一个二进制字符串数组 strs 和两个整数 m 和 n 。\",\"请你找出并返回 strs 的最大子集的长度，该子集中 最多 有 m 个 0 和 n 个 1 。\",\"如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。\",\"示例 1：\",\"输入：strs = [\\\"10\\\", \\\"0001\\\", \\\"111001\\\", \\\"1\\\", \\\"0\\\"], m = 5, n = 3 输出：4 解释：最多有 5 个 0 和 3 个 1 的最大子集是 {\\\"10\\\",\\\"0001\\\",\\\"1\\\",\\\"0\\\"} ，因此答案是 4 。 其他满足题意但较小的子集包括 {\\\"0001\\\",\\\"1\\\"} 和 {\\\"10\\\",\\\"1\\\",\\\"0\\\"} 。{\\\"111001\\\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。 \",\"示例 2：\",\"输入：strs = [\\\"10\\\", \\\"0\\\", \\\"1\\\"], m = 1, n = 1 输出：2 解释：最大的子集是 {\\\"0\\\", \\\"1\\\"} ，所以答案是 2 。 \",\"class Solution: def findMaxForm(self, strs: List[str], m: int, n: int) -> int: dp = [[0] * (n + 1) for _ in range(m + 1)] for s in strs: count0 = s.count(\\\"0\\\") count1 = s.count(\\\"1\\\") for i in range(m, count0 - 1, -1): for j in range(n, count1 - 1, -1): dp[i][j] = max(dp[i][j], dp[i - count0][j - count1] + 1) print(dp) return dp[-1][-1] \"]},\"1275\":{\"h\":\"二、完全背包\",\"t\":[\"有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品都有无限个（也就是可以放入背包多次），求解将哪些物品装入背包里物品价值总和最大。\",\"完全背包和01背包问题唯一不同的地方就是，每种物品有无限件。\",\"对于完全的完全背包问题，物品和背包的遍历顺序是没有影响的，但是这也是只是针对于完全背包问题。但是针对于求组合问题和排序问题，遍历顺序还是有很多的注意点的。\",\"组合问题先物品再背包\",\"排列问题先背包再物品\",\"组合和排列问题区别为，组合是不管顺序的，排序是需要关心顺序的\",\"标准的完全背包问题的递推公式为dp[j] = max(dp[j], dp[j-witght[i]]+value[i])\",\"对于完全背包的求组合和排列问题都是dp[j]+=dp[j-nums[i]]\",\"518. 零钱兑换 II——完全背包求组合问题\",\"示例 1：\",\"输入：amount = 5, coins = [1, 2, 5] 输出：4 解释：有四种方式可以凑成总金额： 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 \",\"示例 2：\",\"输入：amount = 3, coins = [2] 输出：0 解释：只用面额 2 的硬币不能凑成总金额 3 。 \",\"示例 3：\",\"输入：amount = 10, coins = [10] 输出：1 \",\"思路：\",\"[2,2,1]和[1,2,2]是没有区别的所以求得是组合问题\",\"物品为coins，背包大小为amount,求得是装满背包有多少种方法，由于零钱是可以重复使用的，所以这是完全背包问题\",\"class Solution: def change(self, amount: int, coins: List[int]) -> int: # 求得是组合问题，[2,2,1]和[1,2,2]是没有区别的，因此需要先物品再背包 # 组合和排列的递推公式都是dp[j] += dp[j-nums[i]] # 这里dp数组长度需要初始化为背包大小，由于需要包括amount,所以需要加一 dp = [0] * (amount + 1) # 求组合问题，dp[0]一定为1，可以理解为装满背包大小为0的背包需要1个方法 dp[0] = 1 for i in range(len(coins)): for j in range(coins[i], amount + 1): dp[j] += dp[j - coins[i]] print(dp) return dp[-1] \",\"377. 组合总和 Ⅳ——排列问题的完全背包\",\"给你一个由 不同 整数组成的数组 nums ，和一个目标整数 target 。请你从 nums 中找出并返回总和为 target 的元素组合的个数。\",\"题目数据保证答案符合 32 位整数范围。\",\"示例 1：\",\"输入：nums = [1,2,3], target = 4 输出：7 解释： 所有可能的组合为： (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) 请注意，顺序不同的序列被视作不同的组合。 \",\"示例 2：\",\"输入：nums = [9], target = 3 输出：0 \",\"由于(1, 1, 2)、(1, 2, 1)在这里算不同的组合，所以这里求的是排列问题，遍历顺序为先背包再物品\",\"class Solution: def combinationSum4(self, nums: List[int], target: int) -> int: # 这里求的是排列问题 dp = [0] * (target + 1) dp[0] = 1 for j in range(1, target + 1): for i in range(len(nums)): if j >= nums[i]: dp[j] += dp[j - nums[i]] print(dp) return dp[-1] \"]},\"1276\":{\"h\":\"完全背包排列组合问题总结\",\"t\":[\"排列：先背包再物品\",\"组合：先物品再背包\",\"dp公式都是：dp[j]+=dp[j-nums[i]]\",\"初始化都是dp[0] = 1\",\"dp数组长度都是背包大小\",\"279. 完全平方数 ——装满背包的最小价值\",\"给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。\",\"完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。\",\"示例 1：\",\"输入：n = 12 输出：3 解释：12 = 4 + 4 + 4 \",\"示例 2：\",\"输入：n = 13 输出：2 解释：13 = 4 + 9 \",\"提示：\",\"1 <= n <= 104\",\"完全平方数 是一个完全平方数就是物品（可以无限件使用），凑个正整数n就是背包，问凑满这个背包最少有多少物品？\",\"标准的背包问题求得是装满背包的最大价值，这里求得是装满背包的最小价值。所以我们需要再初始值和递推公式上稍微做点改变。\",\"初始值，就不能为0了，因为是求得最小值所以我们可以初始为最大值。dp[0]我们可以初始为0，同样代表着背包大小为0的最小价值为0\",\"class Solution: def numSquares(self, n: int) -> int: # dp[j]：和为j的完全平方数的最少数量为dp[j] if n == 1: return 1 dp = [float('inf')] * (n + 1) dp[0] = 0 # 这里i的范围为n//2+1就可以了 for i in range((n // 2) + 1): for j in range(i**2, n + 1): if j >= i**2: dp[j] = min(dp[j], dp[j - i**2] + 1) # print(dp) return dp[-1] \",\"139. 单词拆分——\",\"给你一个字符串 s 和一个字符串列表 wordDict 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 s 则返回 true。\",\"**注意：**不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。\",\"示例 1：\",\"输入: s = \\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"] 输出: true 解释: 返回 true 因为 \\\"leetcode\\\" 可以由 \\\"leet\\\" 和 \\\"code\\\" 拼接成。 \",\"示例 2：\",\"输入: s = \\\"applepenapple\\\", wordDict = [\\\"apple\\\", \\\"pen\\\"] 输出: true 解释: 返回 true 因为 \\\"applepenapple\\\" 可以由 \\\"apple\\\" \\\"pen\\\" \\\"apple\\\" 拼接成。 注意，你可以重复使用字典中的单词。 \",\"示例 3：\",\"输入: s = \\\"catsandog\\\", wordDict = [\\\"cats\\\", \\\"dog\\\", \\\"sand\\\", \\\"and\\\", \\\"cat\\\"] 输出: false \",\"单词就是物品，字符串s就是背包，单词能否组成字符串s，就是问物品能不能把背包装满。\",\"拆分时可以重复使用字典中的单词，说明就是一个完全背包！\",\"dp[j] : 字符串长度为j的话，dp[j]为true，表示可以拆分为一个或多个在字典中出现的单词。\",\"class Solution: def wordBreak(self, s: str, wordDict: List[str]) -> bool: # 背包为字符串的长度len(s) # 物品为word # 求得是任取words中的字符串是否可以装满背包s # 因为words中的字符一定要按照某种顺序才能装满字符串，因此是求得排列问题 # 排列问题是先背包后物品 dp = [False] * (len(s) + 1) dp[0] = True for j in range(1, len(s) + 1): for i in range(j): if dp[i] and s[i:j] in wordDict: dp[j] = True break print(dp) return dp[-1] \"]},\"1277\":{\"c\":[\"算法\"]},\"1278\":{\"c\":[\"算法\",\"背包问题\",\"动态规划\"]},\"1279\":{\"h\":\"2、打家劫舍\"},\"1280\":{\"h\":\"198. 打家劫舍\",\"t\":[\"你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\",\"给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\",\"示例 1：\",\"输入：[1,2,3,1] 输出：4 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。 偷窃到的最高金额 = 1 + 3 = 4 。 \",\"示例 2：\",\"输入：[2,7,9,3,1] 输出：12 解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。 偷窃到的最高金额 = 2 + 9 + 1 = 12 。 \",\"提示：\",\"1 <= nums.length <= 100\",\"0 <= nums[i] <= 400\",\"打家劫舍也是动态规划中一个很经典的问题。对于这个系列我们要关注的点要放在偷或者不偷。\",\"偷就是前前家的总和加上当前家的总和 dp[i-2]+nums[i]\",\"不偷就是前一家的总和 dp[i-1]\",\"我们获取最大值dp[i] = max(dp[i-1], dp[i-2]+nums[i])\",\"采用动规五部曲进行分析\",\"确定dp数组的函数到第i家能获取到的金额总和dp[i]\",\"确定dp公式dp[i] = max(dp[i-1], dp[i-2]+nums[i])\",\"初始化，0位置为nums[0], 1为这前两家能获取的最大值，其他位置都是由前面推出来的，但是不能覆盖推出来的值，所以用0\",\"遍历顺序，公式从左到右，因此从小到大\",\"class Solution: def rob(self, nums: List[int]) -> int: # dp[i] 到第i家能获取到的金额总和 # dp[i] = max(dp[i-1], dp[i-2]+nums[i]) # 打家劫舍的问题关键在于偷或者不偷 # 偷就是前前家的总和加上当前家的总和 dp[i-2]+nums[i] # 不偷就是前一家的总和 dp[i-1] if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) print(dp) return dp[-1] \",\"213. 打家劫舍 II——成环\",\"你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。\",\"给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。\",\"示例 1：\",\"输入：nums = [2,3,2] 输出：3 解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。 \",\"示例 2：\",\"输入：nums = [1,2,3,1] 输出：4 解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。 偷窃到的最高金额 = 1 + 3 = 4 。 \",\"示例 3：\",\"输入：nums = [1,2,3] 输出：3 \",\"class Solution: def rob(self, nums: List[int]) -> int: if len(nums) == 1: return nums[0] r1 = self.helper(nums[1:]) r2 = self.helper(nums[: len(nums) - 1]) return max(r1, r2) def helper(self, nums: list): n = len(nums) if len(nums) == 1: return nums[0] dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) return dp[-1] \"]},\"1281\":{\"h\":\"740. 删除并获得点数\",\"t\":[\"给你一个整数数组 nums ，你可以对它进行一些操作。\",\"每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除 所有 等于 nums[i] - 1 和 nums[i] + 1 的元素。\",\"开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。\",\"示例 1：\",\"输入：nums = [3,4,2] 输出：6 解释： 删除 4 获得 4 个点数，因此 3 也被删除。 之后，删除 2 获得 2 个点数。总共获得 6 个点数。 \",\"示例 2：\",\"输入：nums = [2,2,3,3,3,4] 输出：9 解释： 删除 3 获得 3 个点数，接着要删除两个 2 和 4 。 之后，再次删除 3 获得 3 个点数，再次删除 3 获得 3 个点数。 总共获得 9 个点数。 \",\"提示：\",\"1 <= nums.length <= 2 * 104\",\"1 <= nums[i] <= 104\",\"思路：\",\"一开始拿到题目我是有点蒙圈的，我是看完解释才明白的。\",\"由于删除它并获得 nums[i] 的点数。之后，你必须删除 所有 等于 nums[i] - 1 和 nums[i] + 1 的元素。\",\"所以我们可以理解为相邻的两个元素是不可以取得，所以和打家劫舍连续起来。\",\"[2,2,3,3,3,4]我可以生成一个字典{1:0， 2:4，3:9，4:1}我们就是来获取其中最大的元素这个时候就和打家劫舍一模一样了。\",\"dp长度为max_num+1,因为{1:0， 2:4，3:9，4:1}可以表达为{0:0，1:0， 2:4，3:9，4:1}所以长度为max_num+1\",\"其他的就不用解释了\",\"import collections class Solution: def deleteAndEarn(self, nums: List[int]) -> int: count = collections.defaultdict(int) max_num = 0 for num in nums: count[num] += num max_num = max(max_num, num) dp = [0] * (max_num + 1) dp[1] = count[1] for i in range(2, max_num + 1): dp[i] = max(dp[i - 1], dp[i - 2] + count[i]) return dp[-1] \"]},\"1282\":{\"h\":\"1388. 3n 块披萨\",\"t\":[\"给你一个披萨，它由 3n 块不同大小的部分组成，现在你和你的朋友们需要按照如下规则来分披萨：\",\"你挑选 任意 一块披萨。\",\"Alice 将会挑选你所选择的披萨逆时针方向的下一块披萨。\",\"Bob 将会挑选你所选择的披萨顺时针方向的下一块披萨。\",\"重复上述过程直到没有披萨剩下。\",\"每一块披萨的大小按顺时针方向由循环数组 slices 表示。\",\"请你返回你可以获得的披萨大小总和的最大值。\",\"示例 1：\",\"输入：slices = [1,2,3,4,5,6] 输出：10 解释：选择大小为 4 的披萨，Alice 和 Bob 分别挑选大小为 3 和 5 的披萨。然后你选择大小为 6 的披萨，Alice 和 Bob 分别挑选大小为 2 和 1 的披萨。你获得的披萨总大小为 4 + 6 = 10 。 \",\"示例 2：\",\"输入：slices = [8,9,8,6,1,1] 输出：16 解释：两轮都选大小为 8 的披萨。如果你选择大小为 9 的披萨，你的朋友们就会选择大小为 8 的披萨，这种情况下你的总和不是最大的。 \",\"提示：\",\"1 <= slices.length <= 500\",\"slices.length % 3 == 0\",\"1 <= slices[i] <= 1000\",\"思路：\",\"这种有明确的index,rest直接暴力规划解决，先把它解决出来，然后再想着优化\",\"这道题其实和打家劫舍也是有点像，相邻的元素不能同时取，而且还有环。\",\"我们需要求解的问题可以转化为：在一个长度为 3n 的环形数组中，选择其中 n 个不相邻的数，使得这 n 个数的和最大。\",\"class Solution: def maxSizeSlices(self, slices: List[int]) -> int: n = len(slices) // 3 p1 = slices[0:len(slices) - 1] p2 = slices[1: len(slices)] return max(self.process(p1, 0, n, {}), self.process(p2, 0, n, {})) def process(self, nums, index, rest, seen): \\\"\\\"\\\" 在index未知剩余rest个披萨的情况下可以获得的最多披萨个数 index:当前披萨的位置 rest:剩余披萨的个数 \\\"\\\"\\\" if index >= len(nums) or rest == 0: return 0 if (index, rest) in seen: return seen[(index, rest)] # 拿当前披萨 cur_point = nums[index] take_point = self.process(nums, index + 2, rest - 1, seen) + cur_point skip_point = self.process(nums, index + 1, rest, seen) ans = max(take_point, skip_point) seen[(index, rest)] = ans return ans \"]},\"1283\":{\"c\":[\"算法\"]},\"1284\":{\"c\":[\"算法\",\"打家劫舍\",\"动态规划\"]},\"1285\":{\"h\":\"3、递增子序列\"},\"1286\":{\"h\":\"300. 最长递增子序列 ——子序列可以是不连续\",\"t\":[\"给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。\",\"子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。\",\"示例 1：\",\"输入：nums = [10,9,2,5,3,7,101,18] 输出：4 解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。 \",\"示例 2：\",\"输入：nums = [0,1,0,3,2,3] 输出：4 \",\"示例 3：\",\"输入：nums = [7,7,7,7,7,7,7] 输出：1 \",\"思路\",\"什么是递增子序列，就是后一个数大于前面的一个数，但是可以不连续。\",\"动规五部曲：\",\"确定dp数组含义：dp[i]是指以i结尾的字符串中最长的递增子序列，这里最长的子序列不一定为最后一个字符结尾的\",\"递推公式：dp[i] = max(dp[i], dp[j]+1)\",\"初始化：每个字符串都是一个长度为一的递增子序列\",\"遍历顺序：从左到右\",\"class Solution: def lengthOfLIS(self, nums: List[int]) -> int: n = len(nums) if n <= 1: return n dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[j] + 1, dp[i]) # print(dp) return max(dp) \"]},\"1287\":{\"h\":\"674. 最长连续递增序列 ——最长联系递增子序列\",\"t\":[\"给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。\",\"连续递增的子序列 可以由两个下标 l 和 r（l < r）确定，如果对于每个 l <= i < r，都有 nums[i] < nums[i + 1] ，那么子序列 [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] 就是连续递增子序列。\",\"示例 1：\",\"输入：nums = [1,3,5,4,7] 输出：3 解释：最长连续递增序列是 [1,3,5], 长度为3。 尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。 \",\"示例 2：\",\"输入：nums = [2,2,2,2,2] 输出：1 解释：最长连续递增序列是 [2], 长度为1。 \",\"思路：\",\"和上题一致，还要比上题简单\",\"class Solution: def findLengthOfLCIS(self, nums: List[int]) -> int: n = len(nums) if n <= 1: return n dp = [1] * n for i in range(1, n): if nums[i] > nums[i - 1]: dp[i] = max(dp[i], dp[i - 1] + 1) print(dp) return max(dp) \"]},\"1288\":{\"h\":\"673. 最长递增子序列的个数 ——最长递增子序列个数\",\"t\":[\"给定一个未排序的整数数组 nums ， 返回最长递增子序列的个数 。\",\"注意 这个数列必须是 严格 递增的。\",\"示例 1:\",\"输入: [1,3,5,4,7] 输出: 2 解释: 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。 \",\"示例 2:\",\"输入: [2,2,2,2,2] 输出: 5 解释: 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。 \",\"思路：\",\"这题和第一题看起来相似但是差别很大。\",\"这题因为要求最长递增子序列个数，所以也需要求最长子序列的长度。然后再统计个数(最长子序列的个数)\",\"如果我们直接定义dp[i]为最长子序列个数为dp[i],我们找不到递推公式。\",\"所以我们需要定义两个dp数组，\",\"第一个dp是最长子序列长度，第二个是最长子序列个数，个数根据最长子序列长度来算出来\",\"class Solution: def findNumberOfLIS(self, nums: List[int]) -> int: n = len(nums) if n <= 1: return n dp = [1] * n count = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: if dp[j] + 1 > dp[i]: dp[i] = dp[j] + 1 count[i] = count[j] elif dp[j] + 1 == dp[i]: count[i] += count[j] max_length = max(dp) result = 0 for i in range(n): if dp[i] ==max_length: result += count[i] return result \"]},\"1289\":{\"h\":\"334. 递增的三元子序列 ——递增三元子序列\",\"t\":[\"给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。\",\"如果存在这样的三元组下标 (i, j, k) 且满足 i < j < k ，使得 nums[i] < nums[j] < nums[k] ，返回 true ；否则，返回 false 。\",\"示例 1：\",\"输入：nums = [1,2,3,4,5] 输出：true 解释：任何 i < j < k 的三元组都满足题意 \",\"示例 2：\",\"输入：nums = [5,4,3,2,1] 输出：false 解释：不存在满足题意的三元组 \",\"示例 3：\",\"输入：nums = [2,1,5,0,4,6] 输出：true 解释：三元组 (3, 4, 5) 满足题意，因为 nums[3] == 0 < nums[4] == 4 < nums[5] == 6 \",\"一开始我想用dp数组的方式，但是超时了\",\"class Solution: def increasingTriplet(self, nums: List[int]) -> bool: if len(set(nums)) < 3: return False n = len(nums) if n < 3: return False dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[j]+1, dp[i]) if dp[i] == 3: return True return False \",\"正确思路应该是贪心\",\"class Solution: def increasingTriplet(self, nums: List[int]) -> bool: if len(set(nums)) < 3: return False n = len(nums) if n < 3: return False first = float('inf') second = float('inf') for three in nums: if three > second: return True elif three <= first: first = three else: second = three return False \"]},\"1290\":{\"c\":[\"算法\"]},\"1291\":{\"c\":[\"算法\",\"递增子序列\",\"动态规划\"]},\"1292\":{\"h\":\"4、股票交易\",\"t\":[\"121. 买卖股票的最佳时机\",\"给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。\",\"你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。\",\"返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。\",\"示例 1：\",\"输入：[7,1,5,3,6,4] 输出：5 解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。 \",\"示例 2：\",\"输入：prices = [7,6,4,3,1] 输出：0 解释：在这种情况下, 没有交易完成, 所以最大利润为 0 \",\"股票交易最重要的是确定持有或者不持有\",\"持有就是买入，减去当前的股票价格\",\"不持有就是卖出，加上当前的股票价格\",\"我们使用0代表持有，1代表卖出\",\"dp数组含义：dp[0][i]持有股票的最大利润，dp[1][i]不持有股票的最大利润\",\"持有：dp[0][i]前一天持有股票的最大利润dp[0][i-1]，和今天买入的利润0-prices[i]\",\"不持有：dp[1][i]昨天不持有股票今天卖出的利润dp[1][i-1]和今天买入的状态dp[0][i-1]+prices[i]\",\"递归五部曲\",\"确定dp数组含义：dp[0][i]持有股票的最大利润，dp[1][i]不持有股票的最大利润\",\"递推表达式：dp[i][0] = max(dp[0][i-1],0-prices[i] ) dp[i][1] = max(dp[1][i-1], dp[0][i-1]+prices[i])\",\"初始化：dp[0][0]第一天买入股票-prices[0], dp[0][0]第一天卖出股票，当天没有股票所以为0\",\"遍历顺序：从左到右\",\"打印dp\",\"class Solution: def maxProfit(self, prices: List[int]) -> int: # dp[i][0]表示第i天表示持有股票的最大现金 买入 钱会表少 - # dp[i][1]表示第i天表示不持有股票的最大现金 卖出 钱会变多 + dp = [[0]*2 for _ in range(len(prices))] dp[0][0] = -prices[0] dp[0][1] = 0 for i in range(1, len(prices)): dp[i][0] = max(dp[i-1][0], 0 - prices[i]) dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]) print(dp) return max([max(i) for i in dp]) \",\"122. 买卖股票的最佳时机 II——多次交易\",\"给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。\",\"在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。\",\"返回 你能获得的 最大 利润 。\",\"示例 1：\",\"输入：prices = [7,1,5,3,6,4] 输出：7 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。 总利润为 4 + 3 = 7 。 \",\"示例 2：\",\"输入：prices = [1,2,3,4,5] 输出：4 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。 总利润为 4 。 \",\"示例 3：\",\"输入：prices = [7,6,4,3,1] 输出：0 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。 \",\"提示：\",\"1 <= prices.length <= 3 * 104\",\"0 <= prices[i] <= 104\",\"本题和上题的区别就是这里可以交易多次，而上一题只可以交易一次\",\"class Solution: def maxProfit(self, prices: List[int]) -> int: dp = [[0]*2 for _ in range(len(prices))] dp[0][0] = -prices[0] dp[0][1] = 0 for i in range(1, len(prices)): dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i]) dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]) # print(dp) return max([max(item) for item in dp]) \",\"121. 买卖股票的最佳时机——最多交易2次\",\"给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。\",\"你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。\",\"返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。\",\"示例 1：\",\"输入：[7,1,5,3,6,4] 输出：5 解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。 \",\"示例 2：\",\"输入：prices = [7,6,4,3,1] 输出：0 解释：在这种情况下, 没有交易完成, 所以最大利润为 0。 \",\"这题的特殊点在于可以交易2次\",\"dp[i][0]:不操作\",\"dp[i][1]:第一次持有股票 减\",\"dp[i][2]:第一次不持有股票 加\",\"dp[i][3]:第二次持有股票 减\",\"dp[i][4]:第二次不持有股票 加\",\"class Solution: def maxProfit(self, prices: List[int]) -> int: if len(prices) == 0: return 0 dp = [[0] * 5 for _ in range(len(prices))] dp[0][1] = -prices[0] dp[0][3] = -prices[0] for i in range(1, len(prices)): dp[i][0] = dp[i-1][0] dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]) dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i]) dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i]) dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i]) return dp[-1][4] \",\"188. 买卖股票的最佳时机 IV——最多交易k次\",\"给你一个整数数组 prices 和一个整数 k ，其中 prices[i] 是某支给定的股票在第 i 天的价格。\",\"设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。\",\"**注意：**你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\",\"示例 1：\",\"输入：k = 2, prices = [2,4,1] 输出：2 解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。 \",\"示例 2：\",\"输入：k = 2, prices = [3,2,6,5,0,3] 输出：7 解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。 随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。 \",\"188. 买卖股票的最佳时机 IV\",\"给你一个整数数组 prices 和一个整数 k ，其中 prices[i] 是某支给定的股票在第 i 天的价格。\",\"设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。\",\"**注意：**你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\",\"示例 1：\",\"输入：k = 2, prices = [2,4,1] 输出：2 解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。 \",\"示例 2：\",\"输入：k = 2, prices = [3,2,6,5,0,3] 输出：7 解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。 随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。 \",\"class Solution: def maxProfit(self, k: int, prices: List[int]) -> int: dp = [[0] * (2 * k+1) for _ in range(len(prices))] for j in range(2 * k+1): if j % 2 == 1: dp[0][j] = -prices[0] for i in range(1, len(prices)): for j in range(0, 2 * k-1, 2): dp[i][j + 1] = max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]) dp[i][j + 2] = max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]) print(dp) return dp[-1][-1] \",\"309. 买卖股票的最佳时机含冷冻期\",\"给定一个整数数组prices，其中第 prices[i] 表示第 *i* 天的股票价格 。\",\"设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:\",\"卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。\",\"**注意：**你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\",\"示例 1:\",\"输入: prices = [1,2,3,0,2] 输出: 3 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出] \",\"示例 2:\",\"输入: prices = [1] 输出: 0 \",\"思路：\",\"持有: 买 - 卖出：卖 + 冷冻期：不操作\",\"状态转移方式：\",\"因此\",\"dp[0] 持有 dp[i][0] = max(dp[i-1][0], dp[i-1][2]-prices[i])持有的等于上一次持有的、上一次冷冻期减去当前值的取最大值\",\"dp[1] 不持有 dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i])不持有的取上次不持有的 、上次持有的加当前的值的最大值\",\"dp[2] 冷冻期 dp[i][2] = max(dp[i-1][2], dp[i-1][1])上次冷冻期、和上次持有的最大值\",\"class Solution: def maxProfit(self, prices: List[int]) -> int: \\\"\\\"\\\" 持有: 买 - 卖出：卖 + 冷冻期：不操作 dp[0] 持有 dp[i][0] = max(dp[i-1][0], dp[i-1][2]-prices[i]) dp[1] 不持有 dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]) dp[2] 冷冻期 dp[i][2] = max(dp[i-1][2], dp[i-1][1]) \\\"\\\"\\\" dp = [[0]*3 for _ in range(len(prices))] dp[0][0] = -prices[0] dp[0][1] = 0 dp[0][2] = 0 for i in range(1, len(prices)): dp[i][0] = max(dp[i-1][0], dp[i-1][2]-prices[i]) dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]) dp[i][2] = max(dp[i-1][2], dp[i-1][1]) print(dp) return dp[-1][1] \",\"714. 买卖股票的最佳时机含手续费\",\"给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。\",\"你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。\",\"返回获得利润的最大值。\",\"**注意：**这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。\",\"示例 1：\",\"输入：prices = [1, 3, 2, 8, 4, 9], fee = 2 输出：8 解释：能够达到的最大利润: 在此处买入 prices[0] = 1 在此处卖出 prices[3] = 8 在此处买入 prices[4] = 4 在此处卖出 prices[5] = 9 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8 \",\"示例 2：\",\"输入：prices = [1,3,7,5,10,3], fee = 3 输出：6 \",\"思路：\",\"这个比较简单和上面第二个比较类似\",\"就是不持有的时候减个手续费\",\"class Solution: def maxProfit(self, prices: List[int], fee: int) -> int: dp = [[0]*2 for i in range(len(prices))] dp[0][0] = - prices[0] dp[0][1] = 0 for i in range(1, len(prices)): dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i]) dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]-fee) return dp[-1][-1] \"]},\"1293\":{\"c\":[\"算法\"]},\"1294\":{\"c\":[\"算法\",\"股票交易\",\"动态规划\"]},\"1295\":{\"h\":\"5、回文子串\"},\"1296\":{\"h\":\"一、定义\",\"t\":[\"回文字符串\",\"是正着读和倒过来读一样的字符串。\",\"和奇数数量有关\",\"倒叙挺好用的\",\"双指针和动态规划是一般的解题方法\"]},\"1297\":{\"h\":\"二、验证回文串\",\"t\":[\"125 验证回文串\",\"如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 回文串 。\",\"字母和数字都属于字母数字字符。\",\"给你一个字符串 s，如果它是 回文串 ，返回 true ；否则，返回 false 。\",\"示例 1：\",\"输入: s = \\\"A man, a plan, a canal: Panama\\\" 输出：true 解释：\\\"amanaplanacanalpanama\\\" 是回文串。 \",\"示例 2：\",\"输入：s = \\\"race a car\\\" 输出：false 解释：\\\"raceacar\\\" 不是回文串。 \",\"示例 3：\",\"输入：s = \\\" \\\" 输出：true 解释：在移除非字母数字字符之后，s 是一个空字符串 \\\"\\\" 。 由于空字符串正着反着读都一样，所以是回文串。 \",\"思路：\",\"我们可以根据回文串的定义使用双指针的方式，前后两个指针分别指向字符的前后，前后两个指针的字符串一致即可\",\"其他条件小写字符，移除非字母数字的字符\",\"class Solution: def isPalindrome(self, s: str) -> bool: left = 0 right = len(s) - 1 while left <= right: if not s[left].isdigit() and not s[left].isalpha(): left += 1 continue if not s[right].isdigit() and not s[right].isalpha(): right -= 1 continue if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True \",\"680. 验证回文串 II\",\"给你一个字符串 s，最多 可以从中删除一个字符。\",\"请你判断 s 是否能成为回文字符串：如果能，返回 true ；否则，返回 false\",\"示例 1：\",\"输入：s = \\\"aba\\\" 输出：true \",\"示例 2：\",\"输入：s = \\\"abca\\\" 输出：true 解释：你可以删除字符 'c' 。 \",\"示例 3：\",\"输入：s = \\\"abc\\\" 输出：false \",\"提示：\",\"1 <= s.length <= 105\",\"s 由小写英文字母组成\"]},\"1298\":{\"h\":\"思路：\",\"t\":[\"最多删除一个字符，假如一个字符本身就是回文串，那么它的直接倒叙就是它本身，如果字符串的倒叙和字符串本身删除第一个不相同的字符不相同，那么它则不是回文串\",\"class Solution: def validPalindrome(self, s: str) -> bool: s1 = s[::-1] if s == s1: return True for i in range(len(s)): if s[i] != s1[i]: new1 = s[:i] + s[i + 1 :] new2 = s1[:i] + s1[i + 1 :] return new1 == new1[::-1] or new2 == new2[::-1] return False \"]},\"1299\":{\"h\":\"回文子串和子序列问题\",\"t\":[\"5. 最长回文子串\",\"给你一个字符串 s，找到 s 中最长的回文子串。\",\"如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。\",\"示例 1：\",\"输入：s = \\\"babad\\\" 输出：\\\"bab\\\" 解释：\\\"aba\\\" 同样是符合题意的答案。 \",\"示例 2：\",\"输入：s = \\\"cbbd\\\" 输出：\\\"bb\\\" \",\"提示：\",\"1 <= s.length <= 1000\",\"s 仅由数字和英文字母组成\",\"思路：\",\"回文子串问题一般的解题思路都是动态规划或者是双指针\",\"关于这个题我们首先使用动态规划的思路处理\",\"如果s[i]==s[j]这个时候我们需要看i和j之间的距离，i和j距离大于1，那我们需要判断dp[i+1][j-1]之间是不是回文串就可以，假如i和j之间的距离小于1，就比如这样aa,那么它一定是回文串。我们这里进行一个曲线救国，就是先找到所有的回文串，然后再找最长的。\",\"我们使用动规五部曲进行处理\",\"确定dp数据含义，表示区间范围[i,j] （注意是左闭右闭）的子串是否是回文子串，如果是dpi][j]为true，否则为false。\",\"递推公式\",\"我们判断的条件都是在i==j的情况下\",\"j-i>1:s[i] == s[j] and s[i+1][j-1]\",\"j-i<=1: s[i] == s[j]\",\"初始化：一开始i==j的时候初始化为True,其他情况都初始化为False。可以先不初始化。\",\"遍历顺序：所以i是从下到上，j是从左到右\",\"打印dp\",\"class Solution: def longestPalindrome(self, s: str) -> str: start = 0 max_length = 0 n = len(s) dp = [[False] * n for _ in range(n )] for i in range(n - 1, -1, -1): for j in range(i, n): if j - i > 1: dp[i][j] = dp[i + 1][j - 1] and s[i] == s[j] else: dp[i][j] = s[i] == s[j] if dp[i][j] and j - i + 1 > max_length: max_length = max(max_length, j - i + 1) start = i return s[start : start + max_length] \",\"647. 回文子串\",\"给你一个字符串 s ，请你统计并返回这个字符串中 回文子串 的数目。\",\"回文字符串 是正着读和倒过来读一样的字符串。\",\"子字符串 是字符串中的由连续字符组成的一个序列。\",\"具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。\",\"示例 1：\",\"输入：s = \\\"abc\\\" 输出：3 解释：三个回文子串: \\\"a\\\", \\\"b\\\", \\\"c\\\" \",\"示例 2：\",\"输入：s = \\\"aaa\\\" 输出：6 解释：6个回文子串: \\\"a\\\", \\\"a\\\", \\\"a\\\", \\\"aa\\\", \\\"aa\\\", \\\"aaa\\\" \",\"这个题是不是和上一题是一致的\",\"连思路都是一样的\",\"class Solution: def countSubstrings(self, s: str) -> int: n = len(s) dp = [[False] * n for _ in range(n)] result = 0 for i in range(n - 1, -1, -1): for j in range(i, n): if j - i > 1: dp[i][j] = dp[i + 1][j - 1] and s[i] == s[j] else: dp[i][j] = s[i] == s[j] if dp[i][j]: result += 1 return result \",\"516. 最长回文子序列\",\"给你一个字符串 s ，找出其中最长的回文子序列，并返回该序列的长度。\",\"子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。\",\"示例 1：\",\"输入：s = \\\"bbbab\\\" 输出：4 解释：一个可能的最长回文子序列为 \\\"bbbb\\\" 。 \",\"示例 2：\",\"输入：s = \\\"cbbd\\\" 输出：2 解释：一个可能的最长回文子序列为 \\\"bb\\\" 。 \",\"提示：\",\"1 <= s.length <= 1000\",\"s 仅由小写英文字母组成\",\"思路：\",\"确定dp数组含义：dp[i][j]：字符串s在[i, j]范围内最长的回文子序列的长度为dp[i][j]。\",\"确定递推公式 \",\"如果s[i]与s[j]相同，那么dp[i][j] = dp[i + 1][j - 1] + 2;\",\"如果s[i]与s[j]不相同，说明s[i]和s[j]的同时加入 并不能增加[i,j]区间回文子序列的长度，那么分别加入s[i]、s[j]看看哪一个可以组成最长的回文子序列\",\"即：dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);\",\"初始化 \",\"当i与j相同，那么dp[i][j]一定是等于1的，即：一个字符的回文子序列长度就是1。\",\"确定遍历顺序\",\"clclass Solution: def longestPalindromeSubseq(self, s: str) -> int: n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for i in range(n - 1, -1, -1): # 当i=j时这时dp[i][j]的长度已经确定了，所以要从i+1开始算起 for j in range(i + 1, n): if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return max([max(i) for i in dp]) \"]},\"1300\":{\"h\":\"构造回文串\",\"t\":[\"1400. 构造 K 个回文字符串\",\"给你一个字符串 s 和一个整数 k 。请你用 s 字符串中 所有字符 构造 k 个非空 回文串 。\",\"如果你可以用 s 中所有字符构造 k 个回文字符串，那么请你返回 True ，否则返回 False 。\",\"示例 1：\",\"输入：s = \\\"annabelle\\\", k = 2 输出：true 解释：可以用 s 中所有字符构造 2 个回文字符串。 一些可行的构造方案包括：\\\"anna\\\" + \\\"elble\\\"，\\\"anbna\\\" + \\\"elle\\\"，\\\"anellena\\\" + \\\"b\\\" \",\"示例 2：\",\"输入：s = \\\"leetcode\\\", k = 3 输出：false 解释：无法用 s 中所有字符构造 3 个回文串。 \",\"示例 3：\",\"输入：s = \\\"true\\\", k = 4 输出：true 解释：唯一可行的方案是让 s 中每个字符单独构成一个字符串。 \",\"示例 4：\",\"输入：s = \\\"yzyzyzyzyzyzyzy\\\", k = 2 输出：true 解释：你只需要将所有的 z 放在一个字符串中，所有的 y 放在另一个字符串中。那么两个字符串都是回文串。 \",\"示例 5：\",\"输入：s = \\\"cr\\\", k = 7 输出：false 解释：我们没有足够的字符去构造 7 个回文串。 \",\"class Solution: def canConstruct(self, s: str, k: int) -> bool: if len(s) < k: return False from collections import Counter counter = Counter(s) result = 0 for key, value in counter.items(): if value %2 ==1: result +=1 return result <= k \"]},\"1301\":{\"c\":[\"算法\"]},\"1302\":{\"c\":[\"回文子串\",\"动态规划\",\"双指针\"]},\"1303\":{\"h\":\"6、矩形路径\",\"t\":[\"62. 不同路径——基础类型\",\"一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\",\"机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。\",\"问总共有多少条不同的路径？\",\"示例 1：\",\"img\",\"输入：m = 3, n = 7 输出：28 \",\"示例 2：\",\"输入：m = 3, n = 2 输出：3 解释： 从左上角开始，总共有 3 条路径可以到达右下角。 1. 向右 -> 向下 -> 向下 2. 向下 -> 向下 -> 向右 3. 向下 -> 向右 -> 向下 \",\"示例 3：\",\"输入：m = 7, n = 3 输出：28 \",\"示例 4：\",\"输入：m = 3, n = 3 输出：6 \",\"思路\",\"dp[i][j]：表示着到达i，j位置一共有dp[i][j]种方法\",\"dp[i][j]一共有几种方式可以到达 上方或者是左方 `dp[i][j] = dp[i-1][j] + dp[i][j-1]` 初始化： `dp[0][j], dp[i][0] = 1, 1` 遍历顺序：从左到右，从上到下 \",\"class Solution: def uniquePaths(self, m: int, n: int) -> int: \\\"\\\"\\\" dp[i][j]：表示着到达i，j位置一共有dp[i][j]种方法 dp[i][j]一共有几种方式可以到达 上方或者是左方 dp[i][j] = dp[i-1][j] + dp[i][j-1] 初始化： dp[0][j], dp[i][0] = 1, 1 遍历顺序：从左到右，从上到下 \\\"\\\"\\\" dp = [[0] * n for _ in range(m)] for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 for i in range(1, m): for j in range(1,n): dp[i][j] = dp[i-1][j] + dp[i][j-1] print(dp) return dp[-1][-1] \",\"63. 不同路径 II——障碍物版本\",\"一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。\",\"机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。\",\"现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\",\"网格中的障碍物和空位置分别用 1 和 0 来表示。\",\"示例 1：\",\"img\",\"输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] 输出：2 解释：3x3 网格的正中间有一个障碍物。 从左上角到右下角一共有 2 条不同的路径： 1. 向右 -> 向右 -> 向下 -> 向下 2. 向下 -> 向下 -> 向右 -> 向右 \",\"示例 2：\",\"img\",\"输入：obstacleGrid = [[0,1],[0,0]] 输出：1 \",\"提示：\",\"m == obstacleGrid.length\",\"n == obstacleGrid[i].length\",\"1 <= m, n <= 100\",\"obstacleGrid[i][j] 为 0 或 1\",\"思路和递推公式基本一致，只是初始化不一样，增加点判断条件\",\"class Solution: def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int: if not obstacleGrid: return 0 m = len(obstacleGrid) n = len(obstacleGrid[0]) dp = [[0] * n for _ in range(m)] for j in range(n): if obstacleGrid[0][j] == 1: break else: dp[0][j] = 1 for i in range(m): if obstacleGrid[i][0] == 1: break else: dp[i][0] = 1 for i in range(1, m): for j in range(1, n): if obstacleGrid[i][j] == 1: continue dp[i][j] = dp[i - 1][j] + dp[i][j - 1] print(dp) return dp[-1][-1] \",\"64. 最小路径和——路径和\",\"给定一个包含非负整数的 *m* x *n* 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\",\"**说明：**每次只能向下或者向右移动一步。\",\"示例 1：\",\"img\",\"输入：grid = [[1,3,1],[1,5,1],[4,2,1]] 输出：7 解释：因为路径 1→3→1→1→1 的总和最小。 \",\"示例 2：\",\"输入：grid = [[1,2,3],[4,5,6]] 输出：12 \",\"思路：\",\"这道题求得是到达右下角的最短路径，（ij）的位置只能从(i-1, j)和(im j-1)得来，那么如何得来呢 (i-1, j)+grid[i][j](i, j-1)+grid[i][j]\",\"递归五部曲：\",\"确定dp数组含义:dp[i][j]到达(i,j)位置的最小路径\",\"递推公式：dp[i][j]=min(dp[i-1][j], dp[i][j-1])+grid[i][j]\",\"初始化：首行首列需要递加求和\",\"遍历顺序：从左到右，从上到下正序即可\",\"打印\",\"class Solution: def minPathSum(self, grid: List[List[int]]) -> int: m = len(grid) n = len(grid[0]) dp = [[0] * n for _ in range(m)] # dp[i][j] = min(dp[i-1][j]+grid[i][j], dp[i][j-1]+grid[i][j]) dp[0][0] = grid[0][0] for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] for i in range(1,m): for j in range(1,n): dp[i][j] = min(dp[i - 1][j] + grid[i][j], dp[i][j - 1] + grid[i][j]) return dp[-1][-1] \",\"174. 地下城游戏\",\"恶魔们抓住了公主并将她关在了地下城 dungeon 的 右下角 。地下城是由 m x n 个房间组成的二维网格。我们英勇的骑士最初被安置在 左上角 的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。\",\"骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。\",\"有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。\",\"为了尽快解救公主，骑士决定每次只 向右 或 向下 移动一步。\",\"返回确保骑士能够拯救到公主所需的最低初始健康点数。\",\"**注意：**任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。\",\"示例 1：\",\"img\",\"输入：dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]] 输出：7 解释：如果骑士遵循最佳路径：右 -> 右 -> 下 -> 下 ，则骑士的初始健康点数至少为 7 。 \",\"示例 2：\",\"输入：dungeon = [[0]] 输出：1 \",\"思路：\",\"一开始我想的是从左上角到右下角进行遍历\",\"但是这里有个问题就是我们一开始初始化这个左上角的值后，我们在遍历的过程中需要不断的更新我们初始化的值，这样是非常麻烦的。\",\"因此我们可以从右下角往左上角进行遍历。\",\"我们这里需要确保每个格子的初始hp都是1，初始化的就是1，和前一个格子-当前格子的血量取最大值\",\"遍历顺序是从下往上，从右到左，也就是倒叙\",\"动规五部曲\",\"确定dp数组含义：dp[i][j]到达i，j位置需要的最小血量\",\"dp公式：dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1])- dungeon[i][j], 1)前一个格子的最小血量减去当前格子的血量，且最小值为1\",\"初始化：\",\"dp[0][0]最后一个格子的需要的血量 max(1-dungeon[i][j], 1)\",\"dp[-1][j] = max(1, dp[-1][i + 1] - dungeon[-1][i])\",\"dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\",\"遍历顺序倒序\",\"for i in range(m - 2, -1, -1): for j in range(n - 2, -1, -1): \",\"class Solution: def calculateMinimumHP(self, dungeon: List[List[int]]) -> int: if not dungeon: return 0 m = len(dungeon) n = len(dungeon[0]) dp = [[0] * (n) for _ in range(m)] dp[-1][-1] = max(1, 1 - dungeon[-1][-1]) for i in range(n - 2, -1, -1): dp[-1][i] = max(1, dp[-1][i + 1] - dungeon[-1][i]) for i in range(m - 2, -1, -1): dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1]) for i in range(m - 2, -1, -1): for j in range(n - 2, -1, -1): temp = min(dp[i + 1][j], dp[i][j + 1]) dp[i][j] = max(temp - dungeon[i][j], 1) print(dp) return dp[0][0] \"]},\"1304\":{\"c\":[\"算法\"]},\"1305\":{\"c\":[\"算法\",\"矩形面积\",\"动态规划\",\"双指针\"]},\"1306\":{\"h\":\"7、重复子数组问题\"},\"1307\":{\"h\":\"718. 最长重复子数组 ——连续子序列\",\"t\":[\"给两个整数数组 nums1 和 nums2 ，返回 两个数组中 公共的 、长度最长的子数组的长度 。\",\"示例 1：\",\"输入：nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7] 输出：3 解释：长度最长的公共子数组是 [3,2,1] 。 \",\"示例 2：\",\"输入：nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0] 输出：5 \",\"提示：\",\"1 <= nums1.length, nums2.length <= 1000\",\"0 <= nums1[i], nums2[i] <= 100\",\"思路：\",\"我开始想到是递推公式为dp[i][j] = dp[i-1][j-1]+1\",\"这个公式是正确的，前两个用例也是可以通过的，但是其中边界条件有问题，先写上错误代码\",\"class Solution: def findLength(self, nums1: List[int], nums2: List[int]) -> int: m = len(nums1) n = len(nums2) dp = [[0]*n for _ in range(m)] for i in range(m): for j in range(n): if nums1[i] == nums2[j]: dp[i][j] = dp[i-1][j-1] + 1 print(dp) return max(max(item) for item in dp) \",\"错误原因总结：\",\"错误一： \",\"我想的是以i,j结尾的字符中最长的公共重复子数组。这里的判断条件有问题，当nums1[i]==nums2[j] 应该为 dp[i+1][j+1] = dp[i][j] + 1\",\"错误二： \",\"dp数组长度有问题，以i,j结尾，dp数组长度应为dp = [[0] * (n + 1) for _ in range(m + 1)]\",\"正确思路：\",\"这个图比较明确点，当i=j时，我们判断的点应该是i+1和j+1的最长子数组\",\"这点明确后我们开始递归五部曲\",\"确定dp数组含义，以i结尾的nums1，以j结尾的nums2的最长子数组长度为dp[i][j]\",\"递归公式：nums1[i] == nums2[j] dp[i+1][j+1] = dp[i][j]+1\",\"初始化：所有的初始化为即可\",\"遍历顺序：从前到后，从上到下。正序遍历\",\"class Solution: def findLength(self, nums1: List[int], nums2: List[int]) -> int: m = len(nums1) n = len(nums2) dp = [[0] * (n + 1) for _ in range(m + 1)] result = 0 for i in range(m): for j in range(n): if nums1[i] == nums2[j]: dp[i+1][j+1] = dp[i][j] + 1 result = max(dp[i+1][j+1], result) # print(dp) return result \",\"下面是代码随想录中的解答\",\"class Solution: def findLength(self, nums1: List[int], nums2: List[int]) -> int: # dp[i][j] m = len(nums1) n = len(nums2) dp = [[0] * (n + 1) for _ in range(m + 1)] result = 0 for i in range(1, m + 1): for j in range(1, n + 1): if nums1[i - 1] == nums2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 result = max(dp[i][j], result) # print(dp) return result \"]},\"1308\":{\"h\":\"1143. 最长公共子序列 ——非连续子序列\",\"t\":[\"给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。\",\"一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。\",\"例如，\\\"ace\\\" 是 \\\"abcde\\\" 的子序列，但 \\\"aec\\\" 不是 \\\"abcde\\\" 的子序列。\",\"两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。\",\"示例 1：\",\"输入：text1 = \\\"abcde\\\", text2 = \\\"ace\\\" 输出：3 解释：最长公共子序列是 \\\"ace\\\" ，它的长度为 3 。 \",\"示例 2：\",\"输入：text1 = \\\"abc\\\", text2 = \\\"abc\\\" 输出：3 解释：最长公共子序列是 \\\"abc\\\" ，它的长度为 3 。 \",\"示例 3：\",\"输入：text1 = \\\"abc\\\", text2 = \\\"def\\\" 输出：0 解释：两个字符串没有公共子序列，返回 0 。 \",\"提示：\",\"1 <= text1.length, text2.length <= 1000\",\"text1 和 text2 仅由小写英文字符组成。\",\"这里的思路和上题不同的是我们需要判断text1[i-1] != text2[j-1]的情况\",\"当不同时我们取两个最大的就可以了\",\"class Solution: def longestCommonSubsequence(self, text1: str, text2: str) -> int: m = len(text1) n = len(text2) dp = [[0]* (n+1) for _ in range(m+1)] result = 0 for i in range(1, m+1): for j in range(1, n+1): if text1[i-1] == text2[j-1]: dp[i][j] = dp[i-1][j-1]+1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) result = max(result, dp[i][j]) print(dp) return result \",\"class Solution: def longestCommonSubsequence(self, text1: str, text2: str) -> int: m = len(text1) n = len(text2) dp = [[0]* (n+1) for _ in range(m+1)] result = 0 for i in range( m): for j in range( n): if text1[i] == text2[j]: dp[i+1][j+1] = dp[i][j]+1 else: dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j]) result = max(result, dp[i+1][j+1]) # print(dp) return result \"]},\"1309\":{\"h\":\"1035. 不相交的线 ——换皮题，最长子序列\",\"t\":[\"在两条独立的水平线上按给定的顺序写下 nums1 和 nums2 中的整数。\",\"现在，可以绘制一些连接两个数字 nums1[i] 和 nums2[j] 的直线，这些直线需要同时满足满足：\",\"nums1[i] == nums2[j]\",\"且绘制的直线不与任何其他连线（非水平线）相交。\",\"请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。\",\"以这种方法绘制线条，并返回可以绘制的最大连线数。\",\"示例 1：\",\"输入：nums1 = [1,4,2], nums2 = [1,2,4] 输出：2 解释：可以画出两条不交叉的线，如上图所示。 但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。 \",\"示例 2：\",\"输入：nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2] 输出：3 \",\"示例 3：\",\"输入：nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1] 输出：2 \",\"提示：\",\"1 <= nums1.length, nums2.length <= 500\",\"1 <= nums1[i], nums2[j] <= 2000\",\"基本代码都不用改的直接用\",\"class Solution: def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int: # 换皮题，同样也是获取最大公共子序列题目 m = len(nums1) n = len(nums2) if not m or not n: return dp = [[0]* (n+1) for _ in range(m+1)] result = 0 for i in range( m): for j in range( n): if nums1[i] == nums2[j]: dp[i+1][j+1] = dp[i][j]+1 else: dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j]) result = max(result, dp[i+1][j+1]) # print(dp) return result \"]},\"1310\":{\"c\":[\"算法\"]},\"1311\":{\"c\":[\"算法\",\"重复子数组\",\"动态规划\"]},\"1312\":{\"h\":\"8、字符串编辑距离\"},\"1313\":{\"h\":\"392. 判断子序列 ——入门题(公共子序列问题)\",\"t\":[\"给定字符串 s 和 t ，判断 s 是否为 t 的子序列。\",\"字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，\\\"ace\\\"是\\\"abcde\\\"的一个子序列，而\\\"aec\\\"不是）\",\"进阶：\",\"如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？\",\"示例 1：\",\"输入：s = \\\"abc\\\", t = \\\"ahbgdc\\\" 输出：true \",\"示例 2：\",\"输入：s = \\\"axc\\\", t = \\\"ahbgdc\\\" 输出：false \",\"提示：\",\"0 <= s.length <= 100\",\"0 <= t.length <= 10^4\",\"两个字符串都只由小写字符组成。\",\"思路：\",\"当s[i]==t[j],dp[i+1][j+1] = dp[i][j]+1\",\"当s[i]!=t[j],dp[i+1][j+1] = max(dp[i+1][j], dp[i][j])\",\"递归五部曲\",\"dp数组含义：表示以下标i为结尾的字符串s，和以下标j为结尾的字符串t，相同子序列的长度为dp[i][j]。\",\"递归公式 \",\"s[i]==t[j],dp[i+1][j+1] = dp[i][j]+1\",\"s[i]!=t[j],dp[i+1][j+1] = max(dp[i+1][j], dp[i][j])\",\"初始化0即可\",\"遍历顺序，从上到下从左到右，正序\",\"class Solution: def isSubsequence(self, s: str, t: str) -> bool: m = len(s) n = len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): if s[i] == t[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j]) # print(dp) return dp[-1][-1] == m \"]},\"1314\":{\"h\":\"115. 不同的子序列 ——出现个数\",\"t\":[\"给你两个字符串 s 和 t ，统计并返回在 s 的 子序列 中 t 出现的个数，结果需要对 109 + 7 取模。\",\"示例 1：\",\"输入：s = \\\"rabbbit\\\", t = \\\"rabbit\\\" 输出：3 解释： 如下所示, 有 3 种可以从 s 中得到 \\\"rabbit\\\" 的方案。 rabbbit rabbbit rabbbit \",\"示例 2：\",\"输入：s = \\\"babgbag\\\", t = \\\"bag\\\" 输出：5 解释： 如下所示, 有 5 种可以从 s 中得到 \\\"bag\\\" 的方案。 babgbag babgbag babgbag babgbag babgbag \",\"class Solution: def numDistinct(self, s: str, t: str) -> int: m = len(s) n = len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(len(s)): dp[i][0] = 1 for j in range(1, len(t)): dp[0][j] = 0 for i in range(m): for j in range(n): if s[i] == t[j]: dp[i + 1][j + 1] = dp[i][j] + dp[i][j+1] else: dp[i + 1][j + 1] = dp[i][j + 1] # print(dp) return dp[-1][-1] \"]},\"1315\":{\"c\":[\"算法\"]},\"1316\":{\"c\":[\"算法\",\"字符串\",\"编辑距离\",\"动态规划\"]},\"1317\":{\"h\":\"回溯算法基础\"},\"1318\":{\"c\":[\"算法笔记\",\"回溯算法\"]},\"1319\":{\"c\":[\"回溯算法\"]},\"1320\":{\"h\":\"1、位运算\"},\"1321\":{\"h\":\"一、基本概念\",\"t\":[\"位运算是用来操作二进制的。\",\"python中一共有六中位运算的操作符。二进制在python中表示为”0b”。例如 a = 0b100110。bin函数可以把十进制转化为二进制数。\"]},\"1322\":{\"h\":\"&与\",\"t\":[\"如果两个二进制相同位数为1，返回1，否则为0\"]},\"1323\":{\"h\":\"|或\",\"t\":[\"如果两个二进制相同位数至少有一个1，则返回的数字的二进制在该位置值也为1，否则为0。\"]},\"1324\":{\"h\":\"^ 异或\",\"t\":[\"简单理解就是非进位相加，相同为0，不同为1\",\"异或运算有很多的技巧，首先就是\",\"异或运算就是无进位相加\",\"满足交换律，即 a ^ b = b ^ a，也就是异或运算满足交换律、结合律，也就是同一批数字，不管异或顺序是什么，最终的结果都是一个。\",\"相同两个数异或为0 ，即 a ^ a = 0，0异或一个数为那个数本身，即 0 ^ a = a。\",\"整体异或和如果是x，整体中某个部分的异或和如果是y，那么剩下部分的异或和是x^y\"]},\"1325\":{\"h\":\"~ 取反\",\"t\":[\"将数字转化为二进制后，数字前加一个负号，二进制加1，再返回变换后二进制对应的数。\",\"~a = -(a+1)所以-a=~a+1\"]},\"1326\":{\"h\":\"<< 左移\",\"t\":[\"将数字转化为二进制后，向二进制里添加几个零（取决于左移的位数），再返回变换后二进制对应的数。\",\"a = 2 a << 1# 等于 2**2 \"]},\"1327\":{\"h\":\">>右移\",\"t\":[\"将数字转化为二进制后，将二进制里最后面的几个数剔除（取决于右移的位数），再返回变换后二进制对应的数。\"]},\"1328\":{\"h\":\"二、常用技巧\",\"t\":[\"袋子里一共a个白球，b个黑球，每次从袋子里拿2个球，每个球每次被拿出机会均等如果拿出的是2个白球、或者2个黑球，那么就往袋子里重新放入1个白球如果拿出的是1个白球和1个黑球，那么就往袋子里重新放入1个黑球那么最终袋子里一定会只剩1个球，请问最终的球是黑的概率是多少?用a和b来表达这个概率。\",\"答案: 黑球的数量如果是偶数，最终的球是黑的概率是0%\",\"黑球的数量如果是奇数，最终的球是黑的概率是100%完全和白球的数量无关。\"]},\"1329\":{\"h\":\"1、打印32位的二进制的数字\",\"t\":[\"def print_binary(num): result = '' for i in range(32, 0, -1): result += str('0' if num & (1 << i) == 0 else '1') print(len(result)) print_binary(10) \"]},\"1330\":{\"h\":\"2、交换顺序, a需要不等于b\",\"t\":[\"a = 1 b = 2 a = a ^ b # a ^ b b = a ^ b # a ^ b ^ b a = a ^ b # a ^ b ^ a ^ b ^ b print(a, b) \"]},\"1331\":{\"h\":\"3、 面试题 17.04. 消失的数字\",\"t\":[\"# 数组nums包含从0到n的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗？ class Solution: def missingNumber(self, nums: List[int]) -> int: all_num = 0 has_num = 0 for i in range(len(nums) + 1): all_num ^= i for num in nums: has_num ^= num return all_num ^ has_num \"]},\"1332\":{\"h\":\"4、判断奇数偶数\",\"t\":[\"a = 1 a & 1 == 1 b = 2 b $ 1 == 0 \"]},\"1333\":{\"h\":\"5、找到右边第一个为1的数字\",\"t\":[\"right = num & (-num) \"]},\"1334\":{\"h\":\"三、经典题目\"},\"1335\":{\"h\":\"面试题 17.04. 消失的数字\",\"t\":[\"数组nums包含从0到n的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗？\",\"**注意：**本题相对书上原题稍作改动\",\"示例 1：\",\"输入：[3,0,1] 输出：2 \",\"示例 2：\",\"输入：[9,6,4,2,3,5,7,0,1] 输出：8 \",\"思路：\",\"任何数本身都是0，我们先把0-n之间的所有数都一遍，得到a1^a2^a3...^an\",\"再把数组中所有的数一遍，再把两个结果进行,就得到缺失的数\",\"class Solution: def missingNumber(self, nums: List[int]) -> int: temp1 = 0 temp2 = 0 for i in range(len(nums)+1): temp1 ^= i for num in nums: temp2 ^= num return temp1 ^ temp2 \"]},\"1336\":{\"h\":\"136. 只出现一次的数字\",\"t\":[\"给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\",\"你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。\",\"示例 1 ：\",\"输入：nums = [2,2,1] 输出：1 \",\"示例 2 ：\",\"输入：nums = [4,1,2,1,2] 输出：4 \",\"示例 3 ：\",\"输入：nums = [1] 输出：1 \",\"提示：\",\"1 <= nums.length <= 3 * 104\",\"-3 * 104 <= nums[i] <= 3 * 104\",\"除了某个元素只出现一次以外，其余每个元素均出现两次。\"]},\"1337\":{\"h\":\"思路一\",\"t\":[\"任何数字^本身都是0，那么出现偶数的数字异或结果都会是0，留下来的数字就会是那个出现一次的数字\",\"class Solution: def singleNumber(self, nums: List[int]) -> int: result = 0 for num in nums: result ^= num return result \"]},\"1338\":{\"h\":\"思路二\",\"t\":[\"题目给定的是一个数组，那么我们是不是可以先进行排序，每次跳跃两个索引，如果当前索引和下一个索引不一致那么它就是不同的数字\",\"class Solution: def singleNumber(self, nums: List[int]) -> int: # result = 0 # for num in nums: # result ^= num # return result nums.sort() nums.append(float('inf'))# 我们加个一个元素就是防止越界 for i in range(1, len(nums), 2): if nums[i-1] != nums[i]: return nums[i-1] \"]},\"1339\":{\"h\":\"137. 只出现一次的数字 II\",\"t\":[\"给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 **三次 。**请你找出并返回那个只出现了一次的元素。\",\"你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题。\",\"示例 1：\",\"输入：nums = [2,2,3,2] 输出：3 \",\"示例 2：\",\"输入：nums = [0,1,0,1,0,1,99] 输出：99 \",\"提示：\",\"1 <= nums.length <= 3 * 104\",\"-231 <= nums[i] <= 231 - 1\",\"nums 中，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次\",\"思路一：\",\"和上题一致\",\"class Solution: def singleNumber(self, nums: List[int]) -> int: nums.sort() nums.append(float(\\\"inf\\\")) for i in range(1, len(nums), 3): if i > 0 and nums[i] != nums[i - 1]: return nums[i - 1] \",\"思路二：\",\"这个题和上一题相比就差别比较大了\",\"上题是有偶数个，求出现一次的数，本题是都是出现了奇数个，求出现一次的个数\",\"我们可以统计每个数在32位下1的出现个数，然后除以3，看那个数字不是3的倍数，在使用或|运算计算每位1的影响值\",\"class Solution: def singleNumber(self, nums: List[int]) -> int: count = [0] * 32 # 统计每个数32位下出现的个数 for num in nums: for i in range(32): count[i] += (num >> i) & 1 result = 0 for i in range(32): if count[i] % 3 != 0: if i == 31: # 这个判断条件是因为Python的特殊性 result -= 1 << i else: # 使用或|运算计算每位1对于结果的影响值 result = result | 1 << i return result \"]},\"1340\":{\"h\":\"260. 只出现一次的数字 III\",\"t\":[\"给你一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。\",\"你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。\",\"示例 1：\",\"输入：nums = [1,2,1,3,2,5] 输出：[3,5] 解释：[5, 3] 也是有效的答案。 \",\"示例 2：\",\"输入：nums = [-1,0] 输出：[-1,0] \",\"示例 3：\",\"输入：nums = [0,1] 输出：[1,0] \",\"提示：\",\"2 <= nums.length <= 3 * 104\",\"-231 <= nums[i] <= 231 - 1\",\"除两个只出现一次的整数外，nums 中的其他数字都出现两次\",\"思路：\",\"当我们发现出现了偶数次我们第一反应就是使用,因为可以消除掉偶数次数的影响，那么把结果全部都完得到的就是那两个不同的数a^b\",\"得到a^b之后，我们如何得到a和b不同的数呢？\",\"由于a和b不相同，所以啊a^b一定有一，所以我们可以得出其中一个数最右边一定不为1，另外一个最右边一定是1\",\"我们可以获取到右边第一个不为一的数right_one =（num & (-num)）\",\"我们将数组中所有的数字都和右边第一个不为一的数进行&运算，当num & right_one == 0,代表着这里面一定有a或b其中一个\",\"所以我们在和ab进行运算即可消除\",\"class Solution: def singleNumber(self, nums: List[int]) -> List[int]: num1 = 0 for num in nums: num1 ^= num right_one = num1 & (-num1) # print(right_one) num2 = 0 for num in nums: if num & right_one: num2 ^= num return [num2, num1 ^ num2] \"]},\"1341\":{\"h\":\"2595. 奇偶位数\",\"t\":[\"给你一个 正 整数 n 。\",\"用 even 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的偶数下标的个数。用 odd 表示在 n 的二进制形式（下标从 0 开始）中值为 1 的奇数下标的个数。请注意，在数字的二进制表示中，位下标的顺序 从右到左。返回整数数组 answer ，其中 answer = [even, odd] 。\",\"示例 1：\",\"**输入：**n = 50\",\"输出：[1,2]\",\"**解释：**50 的二进制表示是 110010。在下标 1，4，5 对应的值为 1。\",\"示例 2：\",\"**输入：**n = 2\",\"输出：[0,1]\",\"**解释：**2 的二进制表示是 10。只有下标 1 对应的值为 1。\",\"提示：\",\"1 <= n <= 1000\",\"思路：\",\"把n当成一个二进制数来遍历。\",\"遍历的顺序是从低位到高位。具体来说，通过n & 1取二进制的最低位，然后把n右移一位，继续计算n & 1，这样可以取到次低位。如此循环，直到n=0为止。\",\"class Solution: def evenOddBit(self, n: int) -> List[int]: ans = [0, 0] i = 1 while n: ans[i] += n & 1 n >>= 1 i ^= 1 return ans \"]},\"1342\":{\"c\":[\"算法笔记\",\"位运算\"]},\"1343\":{\"c\":[\"位运算\"]},\"1344\":{\"h\":\"1、广度优先遍历\"},\"1345\":{\"h\":\"一、基础概念\",\"t\":[\"bfs，这个算法我一开始接触的时候简直就是一脸懵，在学习回溯算法的时候就看到有的题解中提到了dfs,学习递归的时候也有人提到bfs，它的出现频率特别高。在学习二叉树时候bfs的出现频率更高。终于在学习图论的时候我来把它搞清楚。\",\"dfs是可一个方向去搜，不到黄河不回头，直到遇到绝境了，搜不下去了，再换方向（换方向的过程就涉及到了回溯）。\",\"下面我借用代码随想录中的图片进行解释\",\"上面说道dfs是可一个方向搜，不到黄河不回头。 那么我们来举一个例子。\",\"如图一，是一个无向图，我们要搜索从节点1到节点6的所有路径。\",\"图一\",\"那么dfs搜索的第一条路径是这样的： （假设第一次延默认方向，就找到了节点6），图二\",\"图二\",\"此时我们找到了节点6，（遇到黄河了，是不是应该回头了），那么应该再去搜索其他方向了。 如图三：\",\"图三\",\"路径2撤销了，改变了方向，走路径3（红色线）， 接着也找到终点6。 那么撤销路径2，改为路径3，在dfs中其实就是回溯的过程（这一点很重要，很多录友不理解dfs代码中回溯是用来干什么的）\",\"又找到了一条从节点1到节点6的路径，又到黄河了，此时再回头，下图图四中，路径4撤销（回溯的过程），改为路径5。\",\"图四\",\"搜索方向，是认准一个方向搜，直到碰壁之后再换方向\",\"换方向是撤销原路径，改为节点链接的下一个路径，回溯的过程。\"]},\"1346\":{\"h\":\"二、dfs其他\"},\"1347\":{\"h\":\"2.1、dfs和递归\",\"t\":[\"正是因为dfs搜索可一个方向，并需要回溯，所以用递归的方式来实现是最方便的。\",\"递归是一种代码技巧，dfs把递归更加具象化，是一种解决特定问题的方式，也是递归的一种。\",\"所以递归三部曲中同样也适用于dfs\"]},\"1348\":{\"h\":\"2.1、dfs和回溯\",\"t\":[\"回溯是dfs中的一种解决类似二叉树问题的一种具体解决方式。但是dfs不仅可以解决二叉树问题也可以解决图论中的问题。\",\"关于回溯算法之前的算法模版类似于\",\"def backtracking(参数) { if (终止条件) { 存放结果; return; } for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) { 处理节点; backtracking(路径，选择列表); // 递归 回溯，撤销处理结果 } } \",\"但是图论中的dfs又是这样的\",\"# 记录被遍历过的节点 visited = [] # 记录从起点到当前节点的路径 onPath = [] \\\"\\\"\\\" 图遍历框架 \\\"\\\"\\\" def traverse(graph, s): if visited[s]: return # 经过节点 s，标记为已遍历 visited[s] = True # 做选择：标记节点 s 在路径上 onPath[s] = True for neighbor in graph.neighbors(s): traverse(graph, neighbor) # 撤销选择：节点 s 离开路径 onPath[s] = False \",\"有没有发现回溯的地方不一致。这里是因为\",\"DFS 算法，关注点在节点\",\"回溯算法，关注点在树枝\",\"如果执行这段代码，你会发现根节点被漏掉了：\",\"def traverse(root): if root is None: return for child in root.children: print(\\\"进入节点 {}\\\".format(child)) traverse(child) print(\\\"离开节点 {}\\\".format(child)) \"]},\"1349\":{\"c\":[\"算法笔记\",\"dfs\"]},\"1350\":{\"c\":[\"dfs\"]},\"1351\":{\"h\":\"岛屿问题中的dfs\"},\"1352\":{\"h\":\"200. 岛屿数量\",\"t\":[\"给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。\",\"岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\",\"此外，你可以假设该网格的四条边均被水包围。\",\"示例 1：\",\"输入：grid = [ [\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"0\\\"], [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\"], [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"], [\\\"0\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"] ] 输出：1 \",\"示例 2：\",\"输入：grid = [ [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"], [\\\"1\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"0\\\"], [\\\"0\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\"], [\\\"0\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\"] ] 输出：3 \",\"提示：\",\"m == grid.length\",\"n == grid[i].length\",\"1 <= m, n <= 300\",\"grid[i][j] 的值为 '0' 或 '1'\",\"class Solution: def __init__(self): self.visited = None self.dirs = None self.m = None self.n = None self.grid = None def numIslands(self, grid: List[List[str]]) -> int: self.m, self.n = len(grid), len(grid[0]) self.visited = [[False] * self.n for _ in range(self.m)] self.dirs = [(0, 1), (1, 0), (-1, 0), (0, -1)] result = 0 for i in range(self.m): for j in range(self.n): if not self.visited[i][j] and grid[i][j] == \\\"1\\\": self.visited[i][j] = True result += 1 self.dfs(grid, i, j) return result def dfs(self, grid, x, y): for dir_x, dir_y in self.dirs: next_x = x + dir_x next_y = y + dir_y if next_x < 0 or next_x >= self.m or next_y < 0 or next_y >= self.n: continue if not self.visited[next_x][next_y] and grid[next_x][next_y] == \\\"1\\\": self.visited[next_x][next_y] = True self.dfs(grid, next_x, next_y) \"]},\"1353\":{\"h\":\"695. 岛屿的最大面积\",\"t\":[\"给你一个大小为 m x n 的二进制矩阵 grid 。\",\"岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。\",\"岛屿的面积是岛上值为 1 的单元格的数目。\",\"计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。\",\"示例 1：\",\"img\",\"输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]] 输出：6 解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。 \",\"示例 2：\",\"输入：grid = [[0,0,0,0,0,0,0,0]] 输出：0 \",\"提示：\",\"m == grid.length\",\"n == grid[i].length\",\"1 <= m, n <= 50\",\"grid[i][j] 为 0 或 1\",\"class Solution: def __init__(self): self.visited = None self.dirs = [(1, 0), (0, -1), (-1, 0), (0, 1)] def maxAreaOfIsland(self, grid: List[List[int]]) -> int: m = len(grid) n = len(grid[0]) result = 0 self.visited = [[False] * n for _ in range(m)] for i in range(m): for j in range(n): if grid[i][j] == 1 and not self.visited[i][j]: self.total = 0 self.dfs(grid, i, j, m, n) result = max(result, self.total, 1) return result def dfs(self, grid, x, y, m, n): for dir_x, dir_y in self.dirs: next_x, next_y = x + dir_x, y + dir_y if next_x < 0 or next_x >= m or next_y < 0 or next_y >= n: continue if not self.visited[next_x][next_y] and grid[next_x][next_y] == 1: self.visited[next_x][next_y] = True self.total += 1 self.dfs(grid, next_x, next_y, m, n) \"]},\"1354\":{\"h\":\"1020. 飞地的数量\",\"t\":[\"给你一个大小为 m x n 的二进制矩阵 grid ，其中 0 表示一个海洋单元格、1 表示一个陆地单元格。\",\"一次 移动 是指从一个陆地单元格走到另一个相邻（上、下、左、右）的陆地单元格或跨过 grid 的边界。\",\"返回网格中 无法 在任意次数的移动中离开网格边界的陆地单元格的数量。\",\"示例 1：\",\"img\",\"输入：grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]] 输出：3 解释：有三个 1 被 0 包围。一个 1 没有被包围，因为它在边界上。 \",\"示例 2：\",\"img\",\"输入：grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]] 输出：0 解释：所有 1 都在边界上或可以到达边界。 \",\"提示：\",\"m == grid.length\",\"n == grid[i].length\",\"1 <= m, n <= 500\",\"grid[i][j] 的值为 0 或 1\",\"本题要求找到不靠边的陆地面积，那么我们只要从周边找到陆地然后 通过 dfs或者bfs 将周边靠陆地且相邻的陆地都变成海洋，然后再去重新遍历地图的时候，统计此时还剩下的陆地就可以了。\",\"class Solution: def __init__(self): self.position = [[-1, 0], [0, 1], [1, 0], [0, -1]] # 四个方向 # 深度优先遍历，把可以通向边缘部分的 1 全部标记成 true def dfs(self, grid: List[List[int]], row: int, col: int, visited: List[List[bool]]) -> None: for current in self.position: newRow, newCol = row + current[0], col + current[1] # 索引下标越界 if newRow < 0 or newRow >= len(grid) or newCol < 0 or newCol >= len(grid[0]): continue # 当前位置值不是 1 或者已经被访问过了 if grid[newRow][newCol] == 0 or visited[newRow][newCol]: continue visited[newRow][newCol] = True self.dfs(grid, newRow, newCol, visited) def numEnclaves(self, grid: List[List[int]]) -> int: rowSize, colSize, ans = len(grid), len(grid[0]), 0 # 标记数组记录每个值为 1 的位置是否可以到达边界，可以为 True，反之为 False visited = [[False for _ in range(colSize)] for _ in range(rowSize)] # 搜索左边界和右边界，对值为 1 的位置进行深度优先遍历 for row in range(rowSize): if grid[row][0] == 1: visited[row][0] = True self.dfs(grid, row, 0, visited) if grid[row][colSize - 1] == 1: visited[row][colSize - 1] = True self.dfs(grid, row, colSize - 1, visited) # 搜索上边界和下边界，对值为 1 的位置进行深度优先遍历，但是四个角不需要，因为上面遍历过了 for col in range(1, colSize - 1): if grid[0][col] == 1: visited[0][col] = True self.dfs(grid, 0, col, visited) if grid[rowSize - 1][col] == 1: visited[rowSize - 1][col] = True self.dfs(grid, rowSize - 1, col, visited) # 找出矩阵中值为 1 但是没有被标记过的位置，记录答案 for row in range(rowSize): for col in range(colSize): if grid[row][col] == 1 and not visited[row][col]: ans += 1 return ans \"]},\"1355\":{\"c\":[\"算法笔记\",\"岛屿问题\"]},\"1356\":{\"c\":[\"bfs\"]},\"1357\":{\"h\":\"0、贪心算法概述\"},\"1358\":{\"h\":\"一、什么是贪心\",\"t\":[\"贪心就是每一阶段选择最优解，从而达到全局最优。\",\"贪心是我觉得最难也是最简单的算法，可能我们就发现不了我们使用的贪心，但是我们实际却使用到了贪心，也有可能我们觉得思路就该是这样的但是我们就是写不出来。\",\"例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？\",\"指定每次拿最大的，最终结果就是拿走最大数额的钱。\",\"每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。\"]},\"1359\":{\"h\":\"二、什么时候使用贪心\",\"t\":[\"我也不知道什么时候使用贪心，当我们发现手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心。\",\"有些问题中可能会有一些答案比如。问题中有设计最大值，最小值，或者是能不能到达某个目标这个有可能是使用贪心。但是也是需要具体分析。\",\"贪心能解决什么类型的问题，大体可以总结为以下方面但是绝对不全面\",\"最值问题\",\"区间问题\",\"能否问题\"]},\"1360\":{\"h\":\"三、贪心的一般解题步骤\",\"t\":[\"找到局部最优是什么，如果推导出全局最优，其实就够了\",\"贪心如果不做个50题，可能感觉很难培养。\"]},\"1361\":{\"c\":[\"算法\"]},\"1362\":{\"c\":[\"算法\",\"贪心算法\"]},\"1363\":{\"h\":\"1、常识类贪心问题\"},\"1364\":{\"h\":\"455. 分发饼干 ——常识题，使用小饼干来满足小胃口的孩子\",\"t\":[\"假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。\",\"对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。\",\"示例 1:\",\"输入: g = [1,2,3], s = [1,1] 输出: 1 解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。 所以你应该输出1。 \",\"示例 2:\",\"输入: g = [1,2], s = [1,2,3] 输出: 2 解释: 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。 你拥有的饼干数量和尺寸都足以让所有孩子满足。 所以你应该输出2. \",\"class Solution: def findContentChildren(self, g: List[int], s: List[int]) -> int: g.sort() s.sort() # 用小饼干来满足小胃口 index = 0 for i in range(len(s)): if index < len(g) and g[index] <= s[i]: index += 1 return index \"]},\"1365\":{\"h\":\"1005. K 次取反后最大化的数组和 ——常识题，负值取反为正，正值取最小数\",\"t\":[\"给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组：\",\"选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。\",\"重复这个过程恰好 k 次。可以多次选择同一个下标 i 。\",\"以这种方式修改数组后，返回数组 可能的最大和 。\",\"示例 1：\",\"输入：nums = [4,2,3], k = 1 输出：5 解释：选择下标 1 ，nums 变为 [4,-2,3] 。 \",\"示例 2：\",\"输入：nums = [3,-1,0,2], k = 3 输出：6 解释：选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。 \",\"示例 3：\",\"输入：nums = [2,-3,-1,5,-4], k = 2 输出：13 解释：选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。 \",\"class Solution: def largestSumAfterKNegations(self, nums: List[int], k: int) -> int: nums.sort(key=lambda obj: abs(obj)) for i in range(len(nums) - 1, -1, -1): if nums[i] < 0 and k > 0: nums[i] = -nums[i] k -= 1 if k % 2 == 1: nums[0] = -nums[0] return sum(nums) \"]},\"1366\":{\"h\":\"860. 柠檬水找零 ——模拟题\",\"t\":[\"在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。\",\"每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。\",\"注意，一开始你手头没有任何零钱。\",\"给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。\",\"示例 1：\",\"输入：bills = [5,5,5,10,20] 输出：true 解释： 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。 由于所有客户都得到了正确的找零，所以我们输出 true。 \",\"示例 2：\",\"输入：bills = [5,5,10,10,20] 输出：false 解释： 前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。 对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。 对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。 由于不是每位顾客都得到了正确的找零，所以答案是 false。 \",\"class Solution: def lemonadeChange(self, bills: List[int]) -> bool: if bills[0] > 5: return False data = {5: 0, 10: 0} for i in range(len(bills)): if bills[i] == 5: data[5] += 1 elif bills[i] == 10: if not data.get(5): return False else: data[5] -= 1 data[10] += 1 else: if not data.get(5): return False elif data.get(5) and data.get(10): data[5] -= 1 data[10] -= 1 elif data.get(5) >= 3: data[5] -= 3 else: return False return True \"]},\"1367\":{\"c\":[\"算法\"]},\"1368\":{\"c\":[\"算法\",\"贪心算法\"]},\"1369\":{\"h\":\"2、区间问题\"},\"1370\":{\"c\":[\"算法笔记\",\"贪心\"]},\"1371\":{\"c\":[\"贪心区间\"]},\"1372\":{\"h\":\"3、数字乘积\"},\"1373\":{\"c\":[\"算法笔记\",\"贪心\"]},\"1374\":{\"c\":[\"贪心数字乘积\"]},\"1375\":{\"h\":\"4、贪心双指针问题\"},\"1376\":{\"h\":\"605. 种花问题 ——种花问题\",\"t\":[\"假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。\",\"给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false 。\",\"示例 1：\",\"输入：flowerbed = [1,0,0,0,1], n = 1 输出：true \",\"示例 2：\",\"输入：flowerbed = [1,0,0,0,1], n = 2 输出：false \",\"提示：\",\"1 <= flowerbed.length <= 2 * 104\",\"flowerbed[i] 为 0 或 1\",\"flowerbed 中不存在相邻的两朵花\",\"0 <= n <= flowerbed.length\",\"我觉得这道题非常巧妙，难度也不算太大，但是思路也还是比较巧妙的，让你觉得有思路但是又有点难以下手。其实只要把条件处理清楚了也是比较好做的。\",\"1 0 0 0 1 0 0 1\",\"情况一：当i = 0, nums[i]==1,我们需要判断i=3的情况，\",\"情况二：当i=3，nums[i] =0，我们有需要分两个情况：\",\"情况一：nums[i+1] == 1,i = i+1+2,加一是到情况一，再加2是从情况一开始判断\",\"情况二：nums[i+1] == 0,这个位置我们是可以种花的\",\"问题一，能不能种n个花：\",\"class Solution: def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool: left = 0 while left < len(flowerbed) and n > 0: if flowerbed[left] == 1: left += 2 elif flowerbed[left] == 0: if left + 1 == len(flowerbed) or flowerbed[left + 1] == 0: n -= 1 left += 2 else: left += 3 return n == 0 \",\"问题二：最多中多少个花\",\"class Solution: def canPlaceFlowers(self, flowerbed: List[int]) -> bool: left = 0 result = 0 while left < len(flowerbed): if flowerbed[left] == 1: left += 2 elif flowerbed[left] == 0: if left + 1 == len(flowerbed) or flowerbed[left + 1] == 0: result += 1 left += 2 else: left += 3 return result \",\"问题三：返回种完花的花坛\",\"class Solution: def canPlaceFlowers(self, flowerbed: List[int]) -> bool: left = 0 while left < len(flowerbed): if flowerbed[left] == 1: left += 2 elif flowerbed[left] == 0: if left + 1 == len(flowerbed) or flowerbed[left + 1] == 0: flowerbed[left] = 1 left += 2 else: left += 3 return flowerbed \"]},\"1377\":{\"h\":\"11. 盛最多水的容器\",\"t\":[\"给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。\",\"找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\",\"返回容器可以储存的最大水量。\",\"**说明：**你不能倾斜容器。\",\"示例 1：\",\"img\",\"输入：[1,8,6,2,5,4,8,3,7] 输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 \",\"示例 2：\",\"输入：height = [1,1] 输出：1 \",\"思路：\",\"当前矩形的面积是多少：(right-left)*min(height[left], height[right])\",\"只要能想到这里就很好解决了\",\"class Solution: def maxArea(self, height: List[int]) -> int: result = 0 left = 0 right = len(height) - 1 while left <= right: cur_area = min(height[left], height[right]) * (right - left ) result = max(cur_area, result) if height[left] < height[right]: left += 1 else: right -= 1 return result \"]},\"1378\":{\"h\":\"881. 救生艇\",\"t\":[\"给定数组 people 。people[i]表示第 i 个人的体重 ，船的数量不限，每艘船可以承载的最大重量为 limit。\",\"每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。\",\"返回 承载所有人所需的最小船数 。\",\"示例 1：\",\"输入：people = [1,2], limit = 3 输出：1 解释：1 艘船载 (1, 2) \",\"示例 2：\",\"输入：people = [3,2,2,1], limit = 3 输出：3 解释：3 艘船分别载 (1, 2), (2) 和 (3) \",\"示例 3：\",\"输入：people = [3,5,3,4], limit = 5 输出：4 解释：4 艘船分别载 (3), (3), (4), (5) \",\"思路：\",\"优先让船装重量小的两个人，然后在装重量大的一个人的，那么我们需要先对重量进行排序，让重量少的尽量在一起且有序，然后使用双指针进行遍历\",\"class Solution: def numRescueBoats(self, people: List[int], limit: int) -> int: result = 0 left = 0 right = len(people) - 1 people.sort() while left <= right: if people[left] + people[right] > limit: right -= 1 else: left += 1 right -= 1 result += 1 return result \"]},\"1379\":{\"h\":\"611. 有效三角形的个数\",\"t\":[\"给定一个包含非负整数的数组 nums ，返回其中可以组成三角形三条边的三元组个数。\",\"示例 1:\",\"输入: nums = [2,2,3,4] 输出: 3 解释:有效的组合是: 2,3,4 (使用第一个 2) 2,3,4 (使用第二个 2) 2,2,3 \",\"示例 2:\",\"输入: nums = [4,2,3,4] 输出: 4 \",\"提示:\",\"1 <= nums.length <= 1000\",\"0 <= nums[i] <= 1000\",\"这题我一开始使用的回溯算法，因为我看到了这个是求的是组合\",\"class Solution: def triangleNumber(self, nums: List[int]) -> int: result = [] self.back_tracking(nums, [], result, 0) print(result) return len(result) def check(self, path: list): x, y, z = path return x + y > z and x + z > y and y + z > x def back_tracking(self, nums: list, path: list, result: list, index: int): if len(path) == 3 and self.check(path): result.append(path[:]) return for i in range(index, len(nums)): path.append(nums[i]) self.back_tracking(nums, path, result, i + 1) path.pop() \",\"正确思路：\",\"三角形的定义，任意两边之和要大于第三边，因此我们需要先对数据进行排序，然后遍历数据用较短的两个边相加和第三个边进行比较，判断是否满足条件，感觉和三数之和有点相似\",\"class Solution: def triangleNumber(self, nums: List[int]) -> int: # x, y, z从小到大，一定满足x+y > z nums.sort() result = 0 for right in range(2, len(nums)): left = 0 middle = right - 1 # 先确定最右边 while left < middle : if nums[left] + nums[middle] > nums[right]: # 这里一旦满足条件就可以证明[left, middle]之间的所有数都是可以组合为三角形的 result += middle - left middle -= 1 else: left += 1 return result \",\"问题：为什么要先确定最右边，先确定最左边结果如何算，先确定中间做不到\",\"for left in range( len(nums)-2): middle = left + 1 right = len(nums)-1 while middle <= right: if nums[left] + nums[middle] > nums[right]: result += ? \"]},\"1380\":{\"h\":\"524. 通过删除字母匹配到字典里最长单词\",\"t\":[\"给你一个字符串 s 和一个字符串数组 dictionary ，找出并返回 dictionary 中最长的字符串，该字符串可以通过删除 s 中的某些字符得到。\",\"如果答案不止一个，返回长度最长且字母序最小的字符串。如果答案不存在，则返回空字符串。\",\"示例 1：\",\"输入：s = \\\"abpcplea\\\", dictionary = [\\\"ale\\\",\\\"apple\\\",\\\"monkey\\\",\\\"plea\\\"] 输出：\\\"apple\\\" \",\"示例 2：\",\"输入：s = \\\"abpcplea\\\", dictionary = [\\\"a\\\",\\\"b\\\",\\\"c\\\"] 输出：\\\"a\\\" \",\"提示：\",\"1 <= s.length <= 1000\",\"1 <= dictionary.length <= 1000\",\"1 <= dictionary[i].length <= 1000\",\"s 和 dictionary[i] 仅由小写英文字母组成\",\"思路：\",\"求dictionary长度最长且字母序最小的字符串是否在s中出现\",\"我们首先可以通过双指针判断字符串a是否存在于字符串b中，接下来就是字母序最小，长度最长，这个可以通过排序实现\",\"dictionary = [\\\"ale\\\", \\\"apple\\\", \\\"monkey\\\", \\\"plea\\\"] dictionary.sort(key=lambda obj: obj) dictionary.sort(key=lambda obj: len(obj), reverse=True) print(dictionary) # ['monkey', 'apple', 'plea', 'ale'] \",\"这个排序有可能不熟，其实我也不熟\",\"class Solution: def findLongestWord(self, s: str, dictionary: List[str]) -> str: # 排序字典序最小且长度最长 dictionary.sort(key=lambda obj: (-len(obj), obj)) s_length = len(s) for word in dictionary: word_index = 0 s_index = 0 word_length = len(word) while word_index < word_length and s_index < s_length: if word[word_index] == s[s_index]: word_index += 1 s_index += 1 if word_index == word_length: return word return \\\"\\\" \"]},\"1381\":{\"c\":[\"算法\"]},\"1382\":{\"c\":[\"算法\",\"贪心算法\",\"双指针\"]},\"1383\":{\"h\":\"5、字典问题\"},\"1384\":{\"h\":\"1090. 受标签影响的最大值\",\"t\":[\"我们有一个 n 项的集合。给出两个整数数组 values 和 labels ，第 i 个元素的值和标签分别是 values[i] 和 labels[i]。还会给出两个整数 numWanted 和 useLimit 。\",\"从 n 个元素中选择一个子集 s :\",\"子集 s 的大小 小于或等于numWanted 。\",\"s 中 最多 有相同标签的 useLimit 项。\",\"一个子集的 分数 是该子集的值之和。\",\"返回子集 s 的最大 分数 。\",\"示例 1：\",\"输入：values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1 输出：9 解释：选出的子集是第一项，第三项和第五项。 \",\"示例 2：\",\"输入：values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2 输出：12 解释：选出的子集是第一项，第二项和第三项。 \",\"示例 3：\",\"输入：values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1 输出：16 解释：选出的子集是第一项和第四项。 \",\"思路：\",\"我们需要对组合后的集合进行排序，然后找到最多numWanted，每个标签最多useLimit的子集\",\"class Solution: def largestValsFromLabels( self, values: List[int], labels: List[int], numWanted: int, useLimit: int ) -> int: from collections import defaultdict result = 0 items = [] for item in zip(labels, values): items.append(item) items.sort(key=lambda obj: obj[1], reverse=True) hash_data = defaultdict(int) for item in items: lable, val = item if hash_data[lable] < useLimit and numWanted > 0: result += val numWanted -= 1 hash_data[lable] += 1 else: continue return result \"]},\"1385\":{\"h\":\"763. 划分字母区间\",\"t\":[\"给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。\",\"注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 s 。\",\"返回一个表示每个字符串片段的长度的列表。\",\"示例 1：\",\"输入：s = \\\"ababcbacadefegdehijhklij\\\" 输出：[9,7,8] 解释： 划分结果为 \\\"ababcbaca\\\"、\\\"defegde\\\"、\\\"hijhklij\\\" 。 每个字母最多出现在一个片段中。 像 \\\"ababcbacadefegde\\\", \\\"hijhklij\\\" 这样的划分是错误的，因为划分的片段数较少。 \",\"示例 2：\",\"输入：s = \\\"eccbbbbdec\\\" 输出：[10] \",\"提示：\",\"1 <= s.length <= 500\",\"s 仅由小写英文字母组成\",\"思路：\",\"存储每个字符最后出现的位置\",\"找到当前字符出现的最远位置\",\"如果当前位置是最远位置，表示可以分割出一个区间\",\"class Solution: def partitionLabels(self, s: str) -> List[int]: last_distance = dict() for i, char in enumerate(s): last_distance[char] = i result = [] start = 0 end = 0 for i in range(len(s)): end = max(end, last_distance[s[i]]) if end == i: result.append(end - start + 1) start = i + 1 return result \"]},\"1386\":{\"c\":[\"算法\"]},\"1387\":{\"c\":[\"算法\",\"贪心算法\",\"hash\"]},\"1388\":{\"h\":\"1、二分搜索个人总结\"},\"1389\":{\"h\":\"一、二分查找定义\",\"t\":[\"二分查找的基本思想是很简单的可能很多小学生都可以思考出来，但是实际去 写又会遇到很多问题。因为里面有很多细节需要注意。一不小心就会写失败。\",\"二分查找的基本算法思想为：通过确定目标元素所在的区间范围，反复将查找范围减半，直到找到元素或找不到该元素为止。\"]},\"1390\":{\"h\":\"二、二分查找的算法步骤\",\"t\":[\"初始化：首先，确定要查找的有序数据集合。可以是一个数组或列表，确保其中的元素按照升序或者降序排列。\",\"确定查找范围：将整个有序数组集合的查找范围确定为整个数组范围区间，即左边界 left 和右边界 right。\",\"计算中间元素：根据 mid=⌊(left+right)/2⌋ 计算出中间元素下标位置 mid。\",\"比较中间元素：将目标元素target 与中间元素 nums[mid]进行比较： \",\"target == nums[mid]找到目标索引\",\"target < nums[mid]目标位置在[left, mid-1], right=mid-1\",\"target > nums[mid]目标位置在[mid+1, right],left=mid+1\",\"我们可以使用一个简单的例子来说明\",\"704. 二分查找\",\"给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\",\"示例 1:\",\"输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4 \",\"示例 2:\",\"输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1 \",\"提示：\",\"你可以假设 nums 中的所有元素是不重复的。\",\"n 将在 [1, 10000]之间。\",\"nums 的每个元素都将在 [-9999, 9999]之间。\",\"class Solution: def search(self, nums: List[int], target: int) -> int: left, right = 0, len(nums) - 1 # 在区间 [left, right] 内查找 target while left <= right: # 取区间中间节点 mid = (left + right) // 2 # 如果找到目标值，则直接返回中心位置 if nums[mid] == target: return mid # 如果 nums[mid] 小于目标值，则在 [mid + 1, right] 中继续搜索 elif nums[mid] < target: left = mid + 1 # 如果 nums[mid] 大于目标值，则在 [left, mid - 1] 中继续搜索 else: right = mid - 1 # 未搜索到元素，返回 -1 return -1 \"]},\"1391\":{\"h\":\"三、二分查找中的注意点\",\"t\":[\"关于二分查找思路是非常简单的，但是实际写代码可能是非常容易写失败的，因为其中有很多的注意点\",\"区间的开闭问题，开区间、闭区间，左开右闭，左闭右开\",\"mid的取值问题，mid = (left+ right) // 2, mid = (left+right+1) // 2\",\"出界条件的判断,while left < right, while left <= right\",\"搜索区间范围的选择，left = mid + 1, left = mid, right=mid-1，right= mid\"]},\"1392\":{\"h\":\"3.1、区间的开闭问题\",\"t\":[\"关于二分查找算法的左闭右闭区间、左闭右开区间都是可以实现的，但是一般来说左闭右开区间这种写法在解决问题的过程中，会使得问题变得复杂，需要考虑的情况更多，所以不建议使用左闭右开区间这种写法，而是建议：全部使用「左闭右闭区间」这种写法。\"]},\"1393\":{\"h\":\"3.2、mid的取值问题\",\"t\":[\"mid = (left + right) // 2。\",\"mid = (left + right + 1) // 2 。\",\"式子中 // 所代表的含义是「中间数向下取整」。当待查找区间中的元素个数为奇数个，使用这两种取值公式都能取到中间元素的下标位置。\",\"除了上面提到的这两种写法，我们还经常能看到下面两个公式：\",\"mid = left + (right - left) // 2。\",\"mid = left + (right - left + 1) // 2。\",\"这两个公式其实分别等同于之前两个公式，可以看做是之前两个公式的另一种写法。这种写法能够防止整型溢出问题（Python 语言中整型不会溢出，其他语言可能会有整型溢出问题）。\",\"在 left+right的数据量不会超过整型变量最大值时，这两种写法都没有问题。在 left+right 的数据量可能会超过整型变量最大值时，最好使用第二种写法。所以，为了统一和简化二分查找算法的写法，建议统一写成第二种写法：\",\"mid = left + (right - left) // 2。\",\"mid = left + (right - left + 1) // 2。\",\"3.3、出界条件的判断\",\"二分查找算法的写法中，while 语句出界判断条件通常有两种：\",\"left <= right。\",\"left < right。\",\"我们究竟应该使用哪一种写法呢？\",\"如果判断语句为left <= right，并且查找的元素不在有序数组中，则while语句的出界条件是left > right，也就是left == right + 1，写成区间形式就是[right+1,right][right+1,right]，此时待查找区间为空，待查找区间中没有元素存在，此时终止循环时，可以直接返回−1。 \",\"比如说区间[3,2]， 此时左边界大于右边界，直接终止循环，返回 −1即可。\",\"如果判断语句为left < right，并且查找的元素不在有序数组中，则while语句出界条件是left == right，写成区间形式就是[right,right][right,right]。此时区间不为空，待查找区间还有一个元素存在，我们并不能确定查找的元素不在这个区间中，此时终止循环时，如果直接返回−1就是错误的。 \",\"比如说区间 [2,2][2,2]，如果元素 nums[2] 刚好就是目标元素 target，此时终止循环，返回 −1 就漏掉了。\",\"但是如果我们还是想要使用 left < right 的话，怎么办？\",\"可以在出界之后增加一层判断，判断 left所指向位置是否等于目标元素，如果是的话就返回 leftlef**t，如果不是的话返回 −1−1。即：\",\"while left < right: # ... return left if nums[left] == target else -1 \"]},\"1394\":{\"h\":\"3.4 搜索区间范围的选择\",\"t\":[\"在进行区间范围选择的时候，通常有三种写法：\",\"left = mid + 1，right = mid - 1。\",\"left = mid + 1 ，right = mid。\",\"left = mid，right = mid - 1。\",\"这是二分查找的一个难点，写错了很容易造成死循环，或者得不到正确结果。\",\"这其实跟二分查找算法的两种不同思路和三种写法有关。\",\"思路 1：「直接法」—— 在循环体中找到元素后直接返回结果。\",\"思路 2：「排除法」—— 在循环体中排除目标元素一定不存在区间。\"]},\"1395\":{\"h\":\"三、经典例题\",\"t\":[\"34. 在排序数组中查找元素的第一个和最后一个位置\",\"给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。\",\"如果数组中不存在目标值 target，返回 [-1, -1]。\",\"你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。\",\"示例 1：\",\"输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4] \",\"示例 2：\",\"输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1] \",\"示例 3：\",\"输入：nums = [], target = 0 输出：[-1,-1] \",\"提示：\",\"0 <= nums.length <= 105\",\"-109 <= nums[i] <= 109\",\"nums 是一个非递减数组\",\"-109 <= target <= 109\",\"这道题就把以上的注意点很好的概括出来的，中间有涉及到mid的取值问题，left，right的取值范围，while的判断条件。\",\"首先这道题是求得是等于target元素的第一的位置和等于target元素的最后一个元素\",\"举例说明\",\"[1, 2, 2, 3, 4, 5, 5] 0, 1, 2, 3, 4, 5, 6 \",\"假如target为5求得也就是[5, 6]\",\"第一次middle = (left + right) // 2为3，区间范围为[middle+1, right]值的范围，我们要时刻保证我们要取的值在[left,right]区间中\",\"目标是找到target在数组中的起始位置。\",\"使用二分查找法，通过调整搜索范围来逼近目标值的开始位置。\",\"当nums[middle] < target时，说明目标值至少在middle + 1及之后，因此将left更新为middle + 1。\",\"否则，当nums[middle] >= target时，缩小右边界至middle，因为目标值可能在middle或其左边。\",\"最终检查left是否指向了目标值，如果是，则返回其索引；否则返回-1表示未找到。\",\"def find_start(): left, right = 0, len(nums) - 1 while left < right: middle = (left + right) // 2 if nums[middle] < target: left = middle + 1 else: right = middle return left if nums[left] == target else -1 \",\"目标是找到target在数组中的结束位置。\",\"同样使用二分查找法，但为了正确地定位到目标值的最后出现位置，计算中间点middle的方式略有不同：(left + right + 1) // 2。这确保了当left和right相邻时，优先选择右边的元素作为middle，从而避免陷入无限循环。\",\"如果nums[middle] > target，说明目标值最多只到middle - 1，因此将right更新为middle - 1。\",\"否则，当nums[middle] <= target时，移动左边界至middle，以继续向可能的目标值结束位置搜索。\",\"最后检查left是否指向了目标值，如果是，则返回其索引；否则返回-1。\",\"def find_end(): left, right = 0, len(nums) - 1 while left < right: middle = (left + right + 1) // 2 if nums[middle] > target: right = middle - 1 else: left = middle return left if nums[left] == target else -1 \",\"class Solution: def searchRange(self, nums: List[int], target: int) -> List[int]: def find_start(): left, right = 0, len(nums) - 1 while left < right: middle = (left + right) // 2 if nums[middle] < target: left = middle + 1 else: right = middle return left if nums[left] == target else -1 def find_end(): left, right = 0, len(nums) - 1 while left < right: middle = (left + right + 1) // 2 if nums[middle] > target: right = middle - 1 else: left = middle return left if nums[left] == target else -1 if not nums: return [-1, -1] return [find_start(), find_end()] \",\"这种在有序数组中寻找第一个和最后一个位置，也是在很多算法中出现的，可能记起来会比较复杂当然也可以记住一个口诀就是左加右减，右加一\",\"左加：left = middle + 1\",\"右减：right = middle - 1\",\"右加一：middle = (left + right + 1) // 2\"]},\"1396\":{\"c\":[\"算法笔记\",\"左右指针\"]},\"1397\":{\"c\":[\"双指针\"]},\"1398\":{\"h\":\"2、二分查找位置\"},\"1399\":{\"h\":\"35. 搜索插入位置\",\"t\":[\"给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\",\"请必须使用时间复杂度为 O(log n) 的算法。\",\"示例 1:\",\"输入: nums = [1,3,5,6], target = 5 输出: 2 \",\"示例 2:\",\"输入: nums = [1,3,5,6], target = 2 输出: 1 \",\"示例 3:\",\"输入: nums = [1,3,5,6], target = 7 输出: 4 \",\"提示:\",\"1 <= nums.length <= 104\",\"-104 <= nums[i] <= 104\",\"nums 为 无重复元素 的 升序 排列数组\",\"-104 <= target <= 104\",\"class Solution: def searchInsert(self, nums: List[int], target: int) -> int: left, right = 0, len(nums) - 1 while left <= right: middle = left + (right - left) // 2 if nums[middle] == target: return middle elif nums[middle] > target: right = middle - 1 else: left = middle + 1 return left \"]},\"1400\":{\"h\":\"34. 在排序数组中查找元素的第一个和最后一个位置\",\"t\":[\"给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。\",\"如果数组中不存在目标值 target，返回 [-1, -1]。\",\"你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。\",\"示例 1：\",\"输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4] \",\"示例 2：\",\"输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1] \",\"示例 3：\",\"输入：nums = [], target = 0 输出：[-1,-1] \",\"提示：\",\"0 <= nums.length <= 105\",\"-109 <= nums[i] <= 109\",\"nums 是一个非递减数组\",\"-109 <= target <= 109\",\"class Solution: def searchRange(self, nums: List[int], target: int) -> List[int]: def find_start(): left, right = 0, len(nums) - 1 while left < right: middle = (left + right) // 2 if nums[middle] < target: left = middle + 1 else: right = middle return left if nums[left] == target else -1 def find_end(): left, right = 0, len(nums) - 1 while left < right: middle = (left + right + 1) // 2 if nums[middle] > target: right = middle - 1 else: left = middle return left if nums[left] == target else -1 if not nums: return [-1, -1] return [find_start(), find_end()] \"]},\"1401\":{\"c\":[\"二分法\"]},\"1402\":{\"h\":\"4、二分答案法\"},\"1403\":{\"h\":\"275. H 指数 II\",\"t\":[\"给你一个整数数组 citations ，其中 citations[i] 表示研究者的第 i 篇论文被引用的次数，citations 已经按照 升序排列 。计算并返回该研究者的 h 指数。\",\"h 指数的定义：h 代表“高引用次数”（high citations），一名科研人员的 h 指数是指他（她）的 （n 篇论文中）至少 有 h 篇论文分别被引用了至少h 次。\",\"请你设计并实现对数时间复杂度的算法解决此问题。\",\"示例 1：\",\"输入：citations = [0,1,3,5,6] 输出：3 解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 0, 1, 3, 5, 6 次。 由于研究者有3篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3 。 \",\"示例 2：\",\"输入：citations = [1,2,100] 输出：2 \",\"提示：\",\"n == citations.length\",\"1 <= n <= 105\",\"0 <= citations[i] <= 1000\",\"citations 按 升序排列\",\"我对于这个题意总是不太明白，对于很多题解所以也不明白\",\"我们要抓住这句话（n 篇论文中）至少 有 h 篇论文分别被引用了至少h 次。\",\"如果直接暴力遍历的话代码如下\",\"class Solution: def hIndex(self, citations: List[int]) -> int: count = 0 for i in range(len(citations) - 1, -1, -1): if citations[i] > count: count += 1 return count \",\"但是这样不满足对数时间复杂度\",\"所以想到了二分算法\",\"二分算法的前提是数据有序，也是正好用到了数据的有序性\",\"我总结下来二分算法需要问自己以下几个问题\",\"我们求的是什么。\",\"开区间还是闭区间\",\"left,middle,right代表什么\",\"回答\",\"我们要求的是什么：论文数量。（n 篇论文中）至少 有 h 篇论文分别被引用了至少 h 次。可以使用索引来求出\",\"使用开区间还是闭区间，开区间\",\"left, right， middle分别指的是什么 \",\"left:left篇论文至少被引用left次，就是答案\",\"middle:我们需要判断的答案(论文数量)\",\"right:一定不是答案\",\"left,right在循环中会不会意义改变\",\"其实只要回答以上几个问题代码也就随即出来了\",\"def hIndex1(citations: List[int]) -> int: \\\"\\\"\\\" 1、我们要求的是什么：论文数量。（n 篇论文中）至少 有 h 篇论文分别被引用了至少 h 次。可以使用索引来求出 2、使用开区间还是闭区间，开区间 3、left, right， middle分别指的是什么 left:left篇论文至少被引用left次，就是答案 middle:我们需要判断的答案(论文数量) right:一定不是答案 \\\"\\\"\\\" left = 0 right = len(citations) + 1 while left + 1 < right: middle = (left + right) // 2 # 指的是论文数量 # 这里指的是从右到左寻找，当前citations[-middle]引用次数大于它的论文数量 if citations[-middle] >= middle: left = middle else: right = middle return left print(hIndex1([0, 1, 3, 5, 6])) print(hIndex1([1, 2, 100])) \"]},\"1404\":{\"c\":[\"算法笔记\",\"二分算法\"]},\"1405\":{\"c\":[\"二分算法\"]},\"1406\":{\"h\":\"滑动窗口基础知识\"},\"1407\":{\"c\":[\"算法笔记\",\"滑动窗口\"]},\"1408\":{\"c\":[\"滑动窗口\"]},\"1409\":{\"h\":\"Devops\"},\"1410\":{\"h\":\"Posts\"},\"1411\":{\"h\":\"Kubernetes\"},\"1412\":{\"h\":\"Redis\"},\"1413\":{\"h\":\"Mysql\"},\"1414\":{\"h\":\"代码风格\"},\"1415\":{\"h\":\"模块设计\"},\"1416\":{\"h\":\"设计模式\"},\"1417\":{\"h\":\"Flask学习\"},\"1418\":{\"h\":\"Python\"},\"1419\":{\"h\":\"基础知识\"},\"1420\":{\"h\":\"网络协议\"},\"1421\":{\"h\":\"进阶知识\"},\"1422\":{\"h\":\"Flask源码分析\"},\"1423\":{\"h\":\"源码分析\"},\"1424\":{\"h\":\"Robot源码分析\"},\"1425\":{\"h\":\"经典问题\"},\"1426\":{\"h\":\"算法笔记\"},\"1427\":{\"h\":\"二叉树\"},\"1428\":{\"h\":\"数据结构\"},\"1429\":{\"h\":\"图论问题\"},\"1430\":{\"h\":\"链表问题\"},\"1431\":{\"h\":\"栈和队列\"},\"1432\":{\"h\":\"双指针\"},\"1433\":{\"h\":\"算法技巧\"},\"1434\":{\"h\":\"动态规划\"},\"1435\":{\"h\":\"回溯算法\"},\"1436\":{\"h\":\"位运算\"},\"1437\":{\"h\":\"广度优先\"},\"1438\":{\"h\":\"深度优先\"},\"1439\":{\"h\":\"贪心算法\"},\"1440\":{\"h\":\"二分搜索\"},\"1441\":{\"h\":\"滑动窗口\"}},\"dirtCount\":0,\"index\":[[\"论文数量\",{\"1\":{\"1403\":4}}],[\"篇论文分别被引用了至少\",{\"1\":{\"1403\":2}}],[\"篇论文分别被引用了至少h\",{\"1\":{\"1403\":2}}],[\"篇论文\",{\"1\":{\"1403\":1}}],[\"篇论文中\",{\"1\":{\"1403\":4}}],[\"篇论文被引用的次数\",{\"1\":{\"1403\":1}}],[\"她\",{\"1\":{\"1403\":1}}],[\"怎么办\",{\"1\":{\"1393\":1}}],[\"−1−1\",{\"1\":{\"1393\":1}}],[\"−1\",{\"1\":{\"1393\":1}}],[\"−1即可\",{\"1\":{\"1393\":1}}],[\"刚好就是目标元素\",{\"1\":{\"1393\":1}}],[\"待查找区间还有一个元素存在\",{\"1\":{\"1393\":1}}],[\"待查找区间中没有元素存在\",{\"1\":{\"1393\":1}}],[\"待落盘的数据修改记录\",{\"1\":{\"390\":1}}],[\"式子中\",{\"1\":{\"1393\":1}}],[\"闭区间\",{\"1\":{\"1391\":1}}],[\"闭包\",{\"2\":{\"994\":1}}],[\"闭包函数的实例\",{\"1\":{\"992\":1}}],[\"闭包实例\",{\"0\":{\"992\":1}}],[\"闭包是装饰器的基础\",{\"1\":{\"991\":1}}],[\"闭包可以保存当前的运行环境\",{\"1\":{\"991\":1}}],[\"闭包的作用\",{\"0\":{\"991\":1}}],[\"闭包概念\",{\"1\":{\"990\":1}}],[\"升序排列\",{\"1\":{\"1403\":2}}],[\"升序\",{\"1\":{\"1390\":1,\"1399\":1}}],[\"升级策略\",{\"1\":{\"112\":1}}],[\"像\",{\"1\":{\"1385\":1}}],[\"像是短信\",{\"1\":{\"676\":1}}],[\"像是固定电话\",{\"1\":{\"676\":1}}],[\"划分结果为\",{\"1\":{\"1385\":1}}],[\"划分结果需要满足\",{\"1\":{\"1385\":1}}],[\"划分字母区间\",{\"0\":{\"1385\":1}}],[\"受标签影响的最大值\",{\"0\":{\"1384\":1}}],[\"受gil限制\",{\"1\":{\"704\":1}}],[\"感觉和三数之和有点相似\",{\"1\":{\"1379\":1}}],[\"艘船分别载\",{\"1\":{\"1378\":2}}],[\"艘船载\",{\"1\":{\"1378\":1}}],[\"承载所有人所需的最小船数\",{\"1\":{\"1378\":1}}],[\"承重墙和管线系统\",{\"1\":{\"542\":1}}],[\"船的数量不限\",{\"1\":{\"1378\":1}}],[\"救生艇\",{\"0\":{\"1378\":1}}],[\"轴共同构成的容器可以容纳最多的水\",{\"1\":{\"1377\":1}}],[\"盛最多水的容器\",{\"0\":{\"1377\":1}}],[\"情况二\",{\"1\":{\"1376\":2}}],[\"情况一\",{\"1\":{\"1376\":2}}],[\"朵花\",{\"1\":{\"1376\":1}}],[\"花不能种植在相邻的地块上\",{\"1\":{\"1376\":1}}],[\"顾客排队购买你的产品\",{\"1\":{\"1366\":1}}],[\"美元的钞票和一张\",{\"1\":{\"1366\":1}}],[\"美元的钞票\",{\"1\":{\"1366\":6}}],[\"美元或\",{\"1\":{\"1366\":1}}],[\"美元\",{\"1\":{\"1366\":7}}],[\"柠檬水找零\",{\"0\":{\"1366\":1}}],[\"飞地的数量\",{\"0\":{\"1354\":1}}],[\"飞书等即时通讯软件被广泛应用于团队内部沟通\",{\"1\":{\"638\":1}}],[\"水\",{\"1\":{\"1352\":1}}],[\"水平或者竖直的四个方向上\",{\"1\":{\"1353\":1}}],[\"水平分表\",{\"0\":{\"303\":1},\"1\":{\"299\":1,\"303\":1}}],[\"水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力\",{\"1\":{\"302\":1}}],[\"水平分库\",{\"0\":{\"302\":1},\"1\":{\"299\":1,\"303\":1}}],[\"水平扩容\",{\"1\":{\"153\":1}}],[\"陆地\",{\"1\":{\"1352\":1}}],[\"岛屿问题\",{\"2\":{\"1355\":1}}],[\"岛屿问题中的dfs\",{\"0\":{\"1351\":1}}],[\"岛屿的面积是岛上值为\",{\"1\":{\"1353\":1}}],[\"岛屿的最大面积\",{\"0\":{\"1353\":1}}],[\"岛屿\",{\"1\":{\"1353\":1}}],[\"岛屿总是被水包围\",{\"1\":{\"1352\":1}}],[\"岛屿数量\",{\"0\":{\"1352\":1}}],[\"搜不下去了\",{\"1\":{\"1345\":1}}],[\"搜索插入位置\",{\"0\":{\"1399\":1}}],[\"搜索区间范围的选择\",{\"0\":{\"1394\":1},\"1\":{\"1391\":1}}],[\"搜索上边界和下边界\",{\"1\":{\"1354\":1}}],[\"搜索左边界和右边界\",{\"1\":{\"1354\":1}}],[\"搜索方向\",{\"1\":{\"1345\":1}}],[\"搜索算法\",{\"1\":{\"1241\":1}}],[\"搜索条件中虽然出现了索引列\",{\"1\":{\"351\":1}}],[\"广度优先\",{\"0\":{\"1437\":1}}],[\"广度优先遍历\",{\"0\":{\"1344\":1}}],[\"广泛兼容\",{\"1\":{\"1164\":1}}],[\"继续计算n\",{\"1\":{\"1341\":1}}],[\"继承\",{\"1\":{\"1149\":1}}],[\"继承不可变类型\",{\"1\":{\"900\":1}}],[\"继承exception基类\",{\"0\":{\"751\":1}}],[\"继承与多态\",{\"1\":{\"546\":1}}],[\"奇偶位数\",{\"0\":{\"1341\":1}}],[\"留下来的数字就会是那个出现一次的数字\",{\"1\":{\"1337\":1}}],[\"黑球的数量如果是奇数\",{\"1\":{\"1328\":1}}],[\"黑球的数量如果是偶数\",{\"1\":{\"1328\":1}}],[\"黑名单校验\",{\"1\":{\"241\":1}}],[\"袋子里一共a个白球\",{\"1\":{\"1328\":1}}],[\"^an\",{\"1\":{\"1335\":1}}],[\"^=\",{\"1\":{\"1331\":2,\"1335\":2,\"1337\":1,\"1338\":1,\"1340\":2,\"1341\":1}}],[\"^\",{\"0\":{\"1324\":1},\"1\":{\"1324\":4,\"1330\":10,\"1331\":1,\"1335\":1,\"1340\":1}}],[\"称作\",{\"1\":{\"1313\":1}}],[\"称为生成器\",{\"1\":{\"1022\":1}}],[\"称为无状态连接\",{\"1\":{\"962\":1}}],[\"称为卷\",{\"1\":{\"115\":1}}],[\"换方向是撤销原路径\",{\"1\":{\"1345\":1}}],[\"换方向的过程就涉及到了回溯\",{\"1\":{\"1345\":1}}],[\"换皮题\",{\"0\":{\"1309\":1},\"1\":{\"1309\":1}}],[\"换句话说\",{\"1\":{\"198\":1,\"414\":1,\"1276\":1}}],[\"矩形面积\",{\"2\":{\"1305\":1}}],[\"矩形路径\",{\"0\":{\"1303\":1}}],[\"移动左边界至middle\",{\"1\":{\"1395\":1}}],[\"移动\",{\"1\":{\"1354\":1}}],[\"移动一步\",{\"1\":{\"1303\":1}}],[\"移除非字母数字的字符\",{\"1\":{\"1297\":1}}],[\"移除所有数值等于\",{\"1\":{\"1265\":1}}],[\"移除元素\",{\"0\":{\"1265\":1}}],[\"移除并返回优先级最高的元素\",{\"1\":{\"919\":1}}],[\"移除或重新排序\",{\"1\":{\"804\":1}}],[\"移除任务\",{\"1\":{\"606\":1,\"607\":1}}],[\"移除\",{\"1\":{\"125\":1}}],[\"骑士决定每次只\",{\"1\":{\"1303\":1}}],[\"骑士的初始健康点数为一个正整数\",{\"1\":{\"1303\":1}}],[\"房间里的值为\",{\"1\":{\"1303\":1}}],[\"房间设计\",{\"0\":{\"544\":1}}],[\"右减\",{\"1\":{\"1395\":1}}],[\"右加一\",{\"1\":{\"1395\":2}}],[\"右\",{\"1\":{\"1303\":2,\"1354\":1}}],[\"右下角\",{\"1\":{\"1303\":1}}],[\"右移\",{\"1\":{\"43\":1}}],[\"恶魔们抓住了公主并将她关在了地下城\",{\"1\":{\"1303\":1}}],[\"障碍物版本\",{\"1\":{\"1303\":1}}],[\"起始点在下图中标记为\",{\"1\":{\"1303\":2}}],[\"起不到标识的作用\",{\"1\":{\"534\":1}}],[\"网格\",{\"1\":{\"1303\":1}}],[\"网格的正中间有一个障碍物\",{\"1\":{\"1303\":1}}],[\"网格的左上角\",{\"1\":{\"1303\":2}}],[\"网格中的障碍物和空位置分别用\",{\"1\":{\"1303\":1}}],[\"网络原理中\",{\"1\":{\"1093\":1}}],[\"网络传输\",{\"1\":{\"975\":1}}],[\"网络协议\",{\"0\":{\"1420\":1},\"2\":{\"963\":1,\"979\":1}}],[\"网络等\",{\"1\":{\"898\":1}}],[\"网络安全\",{\"0\":{\"817\":1}}],[\"网络流量等关键性能指标的变化趋势\",{\"1\":{\"634\":1}}],[\"网络连接状况等\",{\"1\":{\"631\":1}}],[\"网络连接层\",{\"0\":{\"331\":1}}],[\"网络带宽\",{\"1\":{\"507\":1}}],[\"网络而直接使用\",{\"1\":{\"334\":1}}],[\"网络和存储\",{\"1\":{\"141\":1}}],[\"网络\",{\"1\":{\"112\":1,\"115\":1,\"140\":1,\"269\":1,\"676\":1}}],[\"网络service\",{\"0\":{\"84\":1}}],[\"倒叙挺好用的\",{\"1\":{\"1296\":1}}],[\"倒序遍历是为了保证物品i只被放入一次\",{\"1\":{\"1273\":1}}],[\"冷冻期\",{\"1\":{\"1292\":5}}],[\"卖\",{\"1\":{\"1292\":4}}],[\"卖出股票后\",{\"1\":{\"1292\":1}}],[\"卖出\",{\"1\":{\"1292\":5}}],[\"卖出该股票\",{\"1\":{\"1292\":2}}],[\"笔交易\",{\"1\":{\"1292\":2}}],[\"利润\",{\"1\":{\"1292\":1}}],[\"利用werkzeug运行服务接受请求\",{\"1\":{\"1065\":1}}],[\"利用heapq\",{\"1\":{\"919\":1}}],[\"利用prometheus\",{\"1\":{\"641\":1}}],[\"利用日志分析工具排查具体原因\",{\"1\":{\"631\":1}}],[\"利用子查询优化\",{\"1\":{\"499\":1}}],[\"利用他记录状态\",{\"1\":{\"164\":1}}],[\"利用各自的专业知识共同设计解决方案\",{\"1\":{\"20\":1}}],[\"钱会变多\",{\"1\":{\"1292\":1}}],[\"钱会表少\",{\"1\":{\"1292\":1}}],[\"昨天不持有股票今天卖出的利润dp\",{\"1\":{\"1292\":1}}],[\"减\",{\"1\":{\"1292\":2}}],[\"减去当前的股票价格\",{\"1\":{\"1292\":1}}],[\"减少机器内存消耗\",{\"1\":{\"1189\":1}}],[\"减少手动校验参数的代码\",{\"1\":{\"1154\":1}}],[\"减少维护\",{\"1\":{\"1154\":1}}],[\"减少类间的耦合性\",{\"1\":{\"762\":1}}],[\"减少不必要的异常使用是非常必要的\",{\"1\":{\"758\":1}}],[\"减少不必要的字段查询\",{\"1\":{\"514\":1}}],[\"减少序列化开销\",{\"1\":{\"716\":1}}],[\"减少因人为错误导致的问题\",{\"1\":{\"641\":1}}],[\"减少误报率并提高告警准确性\",{\"1\":{\"635\":1}}],[\"减少内层表的循环匹配次数\",{\"1\":{\"514\":1}}],[\"减少内层表读取的次数\",{\"1\":{\"507\":1,\"520\":1}}],[\"减少回表次数\",{\"1\":{\"455\":2}}],[\"减少了\",{\"1\":{\"441\":1,\"460\":2}}],[\"减少磁盘io操作\",{\"1\":{\"318\":1}}],[\"减少磁盘io\",{\"1\":{\"310\":1,\"394\":1}}],[\"减少修改字符串时带来的内存重分配次数\",{\"1\":{\"227\":1}}],[\"减少副本\",{\"1\":{\"191\":1}}],[\"减少合并时的修复成本\",{\"1\":{\"51\":1}}],[\"减少冲突与技术债务\",{\"1\":{\"51\":1}}],[\"减少人为干预导致的意外故障\",{\"1\":{\"39\":1}}],[\"减少等待时间\",{\"1\":{\"39\":1}}],[\"减少浪费的同时\",{\"1\":{\"18\":1}}],[\"股票\",{\"1\":{\"1292\":1}}],[\"股票价格\",{\"1\":{\"1292\":22}}],[\"股票交易最重要的是确定持有或者不持有\",{\"1\":{\"1292\":1}}],[\"股票交易\",{\"0\":{\"1292\":1},\"2\":{\"1294\":1}}],[\"买\",{\"1\":{\"1292\":2}}],[\"买入\",{\"1\":{\"1292\":3}}],[\"买入这只股票\",{\"1\":{\"1292\":2}}],[\"买卖股票的最佳时机含手续费\",{\"1\":{\"1292\":1}}],[\"买卖股票的最佳时机含冷冻期\",{\"1\":{\"1292\":1}}],[\"买卖股票的最佳时机\",{\"1\":{\"1292\":5}}],[\"隔开\",{\"1\":{\"1287\":1}}],[\"隔离性与稳定性\",{\"1\":{\"714\":1}}],[\"隔离性共同保证的结果\",{\"1\":{\"425\":1}}],[\"隔离性\",{\"1\":{\"425\":4}}],[\"隔离级别支持\",{\"1\":{\"482\":2}}],[\"隔离级别都支持\",{\"1\":{\"482\":1}}],[\"隔离级别都是由\",{\"1\":{\"478\":1}}],[\"隔离级别使用\",{\"1\":{\"482\":1}}],[\"隔离级别的幻读现象\",{\"1\":{\"482\":1}}],[\"隔离级别的实现\",{\"1\":{\"371\":1,\"477\":1}}],[\"隔离级别时\",{\"1\":{\"478\":2}}],[\"隔离级别为\",{\"1\":{\"404\":1}}],[\"隔离级别下为了解决\",{\"1\":{\"482\":1}}],[\"隔离级别下没有间隙锁\",{\"1\":{\"482\":1}}],[\"隔离级别下间隙锁才有效\",{\"1\":{\"482\":1}}],[\"隔离级别下\",{\"1\":{\"372\":2}}],[\"隔离级别\",{\"1\":{\"368\":1}}],[\"隔离\",{\"1\":{\"118\":1}}],[\"拿当前披萨\",{\"1\":{\"1282\":1}}],[\"剩余披萨的个数\",{\"1\":{\"1282\":1}}],[\"剩下存活探针和就绪探针持续运行\",{\"1\":{\"146\":1}}],[\"今晚能够偷窃到的最高金额\",{\"1\":{\"1280\":1}}],[\"围成一圈\",{\"1\":{\"1280\":1}}],[\"偷就是前前家的总和加上当前家的总和\",{\"1\":{\"1280\":2}}],[\"偷窃到的最高金额\",{\"1\":{\"1280\":3}}],[\"偷窃\",{\"1\":{\"1280\":3}}],[\"号房屋\",{\"1\":{\"1280\":9}}],[\"拼接成\",{\"1\":{\"1276\":2}}],[\"凑个正整数n就是背包\",{\"1\":{\"1276\":1}}],[\"ⅳ\",{\"1\":{\"1275\":1}}],[\"零钱兑换\",{\"1\":{\"1275\":1}}],[\"石头\",{\"1\":{\"1274\":1}}],[\"物品为word\",{\"1\":{\"1276\":1}}],[\"物品为coins\",{\"1\":{\"1275\":1}}],[\"物品和背包的遍历顺序是没有影响的\",{\"1\":{\"1275\":1}}],[\"物品2\",{\"1\":{\"1270\":1}}],[\"物品1\",{\"1\":{\"1270\":1}}],[\"物品0\",{\"1\":{\"1270\":1}}],[\"物理日志\",{\"1\":{\"390\":1}}],[\"价值\",{\"1\":{\"1270\":1}}],[\"价值流映射\",{\"1\":{\"33\":1}}],[\"求dictionary长度最长且字母序最小的字符串是否在s中出现\",{\"1\":{\"1380\":1}}],[\"求出现一次的个数\",{\"1\":{\"1339\":1}}],[\"求出现一次的数\",{\"1\":{\"1339\":1}}],[\"求组合问题\",{\"1\":{\"1275\":1}}],[\"求得是任取words中的字符串是否可以装满背包s\",{\"1\":{\"1276\":1}}],[\"求得是组合问题\",{\"1\":{\"1275\":1}}],[\"求得是装满背包有多少种方法\",{\"1\":{\"1275\":1}}],[\"求解将哪些物品装入背包里物品价值总和最大\",{\"1\":{\"1270\":1,\"1275\":1}}],[\"求是不是相互依赖\",{\"1\":{\"1241\":1}}],[\"背包为字符串的长度len\",{\"1\":{\"1276\":1}}],[\"背包大小为amount\",{\"1\":{\"1275\":1}}],[\"背包双维度\",{\"1\":{\"1274\":1}}],[\"背包倒叙\",{\"1\":{\"1273\":1}}],[\"背包所能获取的最大价值\",{\"1\":{\"1271\":1}}],[\"背包\",{\"0\":{\"1270\":1}}],[\"背包问题\",{\"0\":{\"1269\":1},\"2\":{\"1278\":1}}],[\"判题标准\",{\"1\":{\"1266\":1}}],[\"判断奇数偶数\",{\"0\":{\"1332\":1}}],[\"判断\",{\"1\":{\"1313\":1,\"1393\":1}}],[\"判断子序列\",{\"0\":{\"1313\":1}}],[\"判断这个数组中是否存在长度为\",{\"1\":{\"1289\":1}}],[\"判断这种\",{\"1\":{\"1225\":1}}],[\"判断是否满足条件\",{\"1\":{\"1379\":1}}],[\"判断是否存在三元组\",{\"1\":{\"1257\":1}}],[\"判断是否可以进行\",{\"1\":{\"456\":1}}],[\"判断是否可以进行where条件过滤再进行索引查询\",{\"1\":{\"420\":1}}],[\"判断节点之间是否存在互相依赖\",{\"1\":{\"1241\":1}}],[\"判断二分图\",{\"0\":{\"1236\":1}}],[\"判断p和q是否连通\",{\"1\":{\"1225\":1,\"1227\":1}}],[\"判断数字是需要单成顺子还是作为其他顺子的后续\",{\"1\":{\"1198\":1}}],[\"判断该锁对象是否处于上锁状态\",{\"1\":{\"1033\":1}}],[\"判断迭代器对象\",{\"1\":{\"1017\":1}}],[\"判断记录某个版本是否可见的规则如下\",{\"0\":{\"478\":1}}],[\"慢指针\",{\"1\":{\"1263\":1}}],[\"慢指针表示着什么\",{\"1\":{\"1263\":1}}],[\"慢查询\",{\"0\":{\"505\":1}}],[\"慢查询开关\",{\"0\":{\"503\":1}}],[\"慢查询优化思路\",{\"0\":{\"507\":1}}],[\"慢查询优化\",{\"0\":{\"502\":1},\"2\":{\"509\":1}}],[\"慢查询日志\",{\"0\":{\"504\":1},\"1\":{\"334\":1}}],[\"翻转数组\",{\"1\":{\"1255\":1}}],[\"翻译成\",{\"1\":{\"360\":1}}],[\"左加\",{\"1\":{\"1395\":1}}],[\"左闭右闭区间\",{\"1\":{\"1392\":1}}],[\"左闭右开区间都是可以实现的\",{\"1\":{\"1392\":1}}],[\"左闭右开\",{\"1\":{\"1391\":1}}],[\"左开右闭\",{\"1\":{\"1391\":1}}],[\"左\",{\"1\":{\"1354\":1}}],[\"左上角\",{\"1\":{\"1303\":1}}],[\"左右指针在我们算法中使用是非常广泛的\",{\"1\":{\"1255\":1}}],[\"左右指针\",{\"0\":{\"1254\":1},\"2\":{\"1260\":1,\"1396\":1}}],[\"左移\",{\"0\":{\"1326\":1},\"1\":{\"43\":1}}],[\"左移与右移\",{\"0\":{\"43\":1}}],[\"栈和队列\",{\"0\":{\"1431\":1}}],[\"栈和单调栈\",{\"0\":{\"1251\":1}}],[\"栈\",{\"2\":{\"1252\":1}}],[\"栈结构很好的实现了这个前提\",{\"1\":{\"1052\":1}}],[\"栈结构先进后出\",{\"1\":{\"856\":1}}],[\"门课需要选\",{\"1\":{\"1242\":1}}],[\"门课程\",{\"1\":{\"1241\":3,\"1242\":2}}],[\"拓扑排序\",{\"0\":{\"1242\":1},\"2\":{\"1244\":1}}],[\"拓扑排序等\",{\"1\":{\"1240\":1}}],[\"课程表\",{\"0\":{\"1241\":1,\"1242\":1}}],[\"拉平\",{\"1\":{\"1240\":2}}],[\"拉取镜像\",{\"1\":{\"77\":1}}],[\"环检测加收集信息\",{\"1\":{\"1242\":1}}],[\"环检测\",{\"0\":{\"1241\":1},\"2\":{\"1244\":1}}],[\"环检测和拓扑排序\",{\"0\":{\"1240\":1}}],[\"环境\",{\"1\":{\"664\":1}}],[\"环境下客户端连接可以不通过\",{\"1\":{\"334\":1}}],[\"环境下才有的\",{\"1\":{\"334\":1}}],[\"环境下的一个进程文件\",{\"1\":{\"334\":1}}],[\"环境变量\",{\"0\":{\"134\":1}}],[\"环境变量中使用configmap\",{\"1\":{\"73\":1}}],[\"环境中部署更加容易\",{\"1\":{\"130\":1}}],[\"环境雪崩\",{\"1\":{\"44\":1,\"57\":1}}],[\"环境即代码\",{\"0\":{\"44\":1}}],[\"环境一致性\",{\"0\":{\"57\":1},\"1\":{\"42\":1}}],[\"形式上\",{\"1\":{\"1236\":1}}],[\"形成任务接口\",{\"1\":{\"1036\":1}}],[\"形成合力共同应对\",{\"1\":{\"640\":1}}],[\"形成良性的反馈循环机制\",{\"1\":{\"628\":1}}],[\"形成一个负载均衡网络\",{\"1\":{\"125\":1}}],[\"形成示范效应\",{\"1\":{\"33\":1}}],[\"形成闭环\",{\"1\":{\"31\":1,\"43\":1}}],[\"边遍历边进行染色\",{\"1\":{\"1235\":1}}],[\"边连接\",{\"1\":{\"1229\":1}}],[\"冗余连接\",{\"0\":{\"1230\":1}}],[\"几乎退化成\",{\"1\":{\"1225\":1}}],[\"几乎所有\",{\"1\":{\"1164\":1}}],[\"题目给定的是一个数组\",{\"1\":{\"1338\":1}}],[\"题目数据保证答案符合\",{\"1\":{\"1275\":1}}],[\"题目中给的是一个图的边\",{\"1\":{\"1241\":1}}],[\"题目中已经说了没有环\",{\"1\":{\"1221\":1}}],[\"题目说是无向图\",{\"1\":{\"1230\":1}}],[\"题目实践\",{\"0\":{\"1221\":1}}],[\"离开路径\",{\"1\":{\"1348\":1}}],[\"离开节点\",{\"1\":{\"1220\":2,\"1348\":1}}],[\"离职吧\",{\"1\":{\"806\":1}}],[\"度\",{\"1\":{\"1218\":2}}],[\"邻接矩阵\",{\"1\":{\"1217\":1}}],[\"邻接矩阵则是一个二维布尔数组\",{\"1\":{\"1217\":1}}],[\"邻接表\",{\"1\":{\"1217\":2,\"1221\":1}}],[\"邻接表很直观\",{\"1\":{\"1217\":1}}],[\"田忌赛马\",{\"0\":{\"1210\":1}}],[\"俄罗斯套娃\",{\"1\":{\"1209\":1}}],[\"俄罗斯套娃信封问题\",{\"0\":{\"1209\":1}}],[\"严格\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"严重导致打满mysql\",{\"1\":{\"287\":1}}],[\"答案不应该是\",{\"1\":{\"1353\":1}}],[\"答案\",{\"1\":{\"1328\":1}}],[\"答案中不可以包含重复的三元组\",{\"1\":{\"1257\":1}}],[\"答案是可以的\",{\"1\":{\"1207\":1}}],[\"答题思路\",{\"0\":{\"438\":1}}],[\"吗\",{\"1\":{\"1207\":1}}],[\"贪心双指针问题\",{\"0\":{\"1375\":1}}],[\"贪心数字乘积\",{\"2\":{\"1374\":1}}],[\"贪心区间\",{\"2\":{\"1371\":1}}],[\"贪心算法\",{\"0\":{\"1439\":1},\"2\":{\"1362\":1,\"1368\":1,\"1382\":1,\"1387\":1}}],[\"贪心算法概述\",{\"0\":{\"1357\":1}}],[\"贪心如果不做个50题\",{\"1\":{\"1360\":1}}],[\"贪心的一般解题步骤\",{\"0\":{\"1360\":1}}],[\"贪心能解决什么类型的问题\",{\"1\":{\"1359\":1}}],[\"贪心是我觉得最难也是最简单的算法\",{\"1\":{\"1358\":1}}],[\"贪心就是每一阶段选择最优解\",{\"1\":{\"1358\":1}}],[\"贪心\",{\"2\":{\"1199\":1,\"1370\":1,\"1373\":1}}],[\"遍历的顺序是从低位到高位\",{\"1\":{\"1341\":1}}],[\"遍历算法\",{\"1\":{\"1217\":1}}],[\"遍历顺序倒序\",{\"1\":{\"1303\":1}}],[\"遍历顺序是从下往上\",{\"1\":{\"1303\":1}}],[\"遍历顺序为先背包再物品\",{\"1\":{\"1275\":1}}],[\"遍历顺序还是有很多的注意点的\",{\"1\":{\"1275\":1}}],[\"遍历顺序\",{\"1\":{\"1202\":1,\"1273\":1,\"1280\":1,\"1286\":1,\"1292\":1,\"1299\":1,\"1303\":3,\"1307\":1,\"1313\":1}}],[\"遍历顺序从左到右\",{\"1\":{\"1198\":1}}],[\"遍历相对比较慢\",{\"1\":{\"218\":1}}],[\"递推表达式\",{\"1\":{\"1292\":1}}],[\"递推公式\",{\"1\":{\"1198\":1,\"1202\":1,\"1273\":2,\"1286\":1,\"1299\":1,\"1303\":1}}],[\"递增三元子序列\",{\"0\":{\"1289\":1}}],[\"递增子序列\",{\"0\":{\"1285\":1},\"2\":{\"1291\":1}}],[\"递增的三元子序列\",{\"0\":{\"1289\":1}}],[\"递增的\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"递归\",{\"1\":{\"1348\":1}}],[\"递归是一种代码技巧\",{\"1\":{\"1347\":1}}],[\"递归公式\",{\"1\":{\"1307\":1,\"1313\":1}}],[\"递归五部曲\",{\"1\":{\"1292\":1,\"1303\":1,\"1313\":1}}],[\"递归方程\",{\"1\":{\"1207\":1}}],[\"递归锁\",{\"1\":{\"1032\":1}}],[\"构成的组合\",{\"1\":{\"1353\":1}}],[\"构成一个长度至少为\",{\"1\":{\"1198\":1}}],[\"构造\",{\"1\":{\"1300\":2}}],[\"构造回文串\",{\"0\":{\"1300\":1}}],[\"构造图\",{\"1\":{\"1237\":1}}],[\"构建图\",{\"1\":{\"1242\":1}}],[\"构建可视化仪表盘\",{\"0\":{\"634\":1}}],[\"构建标准化\",{\"1\":{\"52\":1}}],[\"构建阶段\",{\"1\":{\"40\":1}}],[\"构建状态\",{\"1\":{\"32\":1}}],[\"构建全员参与的交付生态\",{\"0\":{\"31\":1}}],[\"构建环节是将自然语言的描述转换成计算机可执行的软件\",{\"1\":{\"21\":1}}],[\"恰好\",{\"1\":{\"1198\":1}}],[\"顺序不同的序列被视作不同的组合\",{\"1\":{\"1275\":1}}],[\"顺序写入共享表空间的物理磁盘上\",{\"1\":{\"320\":1,\"469\":1}}],[\"顺手就将树高缩短了\",{\"1\":{\"1226\":1}}],[\"顺子问题\",{\"0\":{\"1197\":1},\"2\":{\"1200\":1}}],[\"税\",{\"1\":{\"1180\":4}}],[\"奖金\",{\"1\":{\"1180\":5}}],[\"奖励协作而非个人英雄主义\",{\"1\":{\"33\":1}}],[\"兼职员工\",{\"1\":{\"1180\":4}}],[\"兼容性\",{\"0\":{\"1164\":1}}],[\"兼容性较好\",{\"1\":{\"666\":1}}],[\"兼容性与透明性\",{\"0\":{\"591\":1}}],[\"兼容\",{\"1\":{\"600\":1,\"1164\":1,\"1173\":1}}],[\"学习递归的时候也有人提到bfs\",{\"1\":{\"1345\":1}}],[\"学习课程\",{\"1\":{\"1241\":2}}],[\"学习曲线低\",{\"1\":{\"1172\":1}}],[\"学生名称\",{\"1\":{\"886\":1}}],[\"学生\",{\"1\":{\"533\":1}}],[\"较新但快速崛起\",{\"1\":{\"1164\":1}}],[\"较为频繁的作为查询条件的字段应该创建索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"勉强支持部分异步功能\",{\"1\":{\"1162\":1}}],[\"聊天应用\",{\"1\":{\"1161\":1}}],[\"活跃维护\",{\"1\":{\"1156\":1}}],[\"遵循以下设计原则\",{\"1\":{\"1144\":1}}],[\"遵循先进先出\",{\"1\":{\"915\":1}}],[\"遵循先进先出的原则\",{\"1\":{\"908\":1}}],[\"清晰的职责划分\",{\"1\":{\"1143\":1}}],[\"闪现\",{\"1\":{\"1110\":1}}],[\"恢复上下文\",{\"1\":{\"1084\":1}}],[\"恢复上下文状态\",{\"1\":{\"1076\":1}}],[\"恢复原始值\",{\"1\":{\"1081\":1}}],[\"恢复时间快\",{\"1\":{\"264\":1}}],[\"恢复时间会无比漫长\",{\"1\":{\"259\":1}}],[\"销毁\",{\"1\":{\"1076\":1}}],[\"轻量级框架\",{\"1\":{\"1169\":1}}],[\"轻量级\",{\"1\":{\"1069\":1,\"1087\":1}}],[\"轻量级进程\",{\"1\":{\"725\":1}}],[\"天的股票价格\",{\"1\":{\"1292\":2}}],[\"天的价格\",{\"1\":{\"1292\":5}}],[\"天\",{\"1\":{\"1292\":23}}],[\"天生支持异步\",{\"1\":{\"1069\":1}}],[\"天分成不同的时间轮层级\",{\"1\":{\"611\":1}}],[\"知道当前请求对应的上下文\",{\"1\":{\"1052\":1}}],[\"放在另一个字符串中\",{\"1\":{\"1300\":1}}],[\"放在一个字符串中\",{\"1\":{\"1300\":1}}],[\"放弃使用了localstock\",{\"1\":{\"1051\":1}}],[\"放入空闲队列中\",{\"1\":{\"1036\":1}}],[\"放入连接池中的连接可以被复用\",{\"1\":{\"578\":1}}],[\"旧版\",{\"0\":{\"1073\":1}}],[\"旧版flask\",{\"1\":{\"1050\":1}}],[\"旧版本global\",{\"1\":{\"1045\":1}}],[\"申明context变量\",{\"1\":{\"1049\":1}}],[\"申明需要使用的持久卷规格\",{\"1\":{\"66\":1}}],[\"源码部分\",{\"1\":{\"1098\":1}}],[\"源码关键路径\",{\"0\":{\"1083\":1}}],[\"源码对比\",{\"1\":{\"1045\":1}}],[\"源码分析\",{\"0\":{\"844\":1,\"1423\":1},\"2\":{\"1054\":1,\"1055\":1,\"1066\":1,\"1067\":1,\"1090\":1,\"1091\":1,\"1096\":1,\"1097\":1,\"1105\":1,\"1106\":1,\"1138\":1,\"1139\":1,\"1157\":1,\"1158\":1,\"1174\":1,\"1175\":1,\"1184\":1,\"1185\":1,\"1190\":1,\"1191\":1,\"1195\":1,\"1196\":1}}],[\"撤销处理结果\",{\"1\":{\"1348\":1}}],[\"撤销选择\",{\"1\":{\"1220\":1,\"1348\":1}}],[\"撤销协程\",{\"1\":{\"1040\":1}}],[\"撤消表空间管理和新的即时ddl\",{\"1\":{\"430\":1}}],[\"屏蔽取消操作\",{\"1\":{\"1040\":1}}],[\"休眠几秒\",{\"1\":{\"1040\":1}}],[\"休眠后再次删除缓存\",{\"1\":{\"289\":1}}],[\"详情还是要看文档\",{\"0\":{\"1040\":1}}],[\"详细信息\",{\"1\":{\"751\":1}}],[\"详细信息参阅官网\",{\"1\":{\"111\":1}}],[\"完全和白球的数量无关\",{\"1\":{\"1328\":1}}],[\"完全平方数\",{\"1\":{\"1276\":3}}],[\"完全背包排列组合问题总结\",{\"0\":{\"1276\":1}}],[\"完全背包求组合问题\",{\"1\":{\"1275\":1}}],[\"完全背包和01背包问题唯一不同的地方就是\",{\"1\":{\"1275\":1}}],[\"完全背包\",{\"0\":{\"1275\":1}}],[\"完全不动了\",{\"1\":{\"1034\":1}}],[\"完成请求\",{\"1\":{\"1103\":1,\"1104\":1}}],[\"完成情况的监控器\",{\"1\":{\"1040\":1}}],[\"完成后通知队列\",{\"1\":{\"925\":1}}],[\"完成后自动结束\",{\"1\":{\"256\":1}}],[\"完成\",{\"1\":{\"469\":1,\"664\":1}}],[\"完成数据落盘\",{\"1\":{\"390\":1}}],[\"完成金丝雀发布\",{\"1\":{\"171\":1}}],[\"完成一次部署\",{\"0\":{\"151\":1}}],[\"跟普通函数不同的是\",{\"1\":{\"1021\":1}}],[\"跟数据库无关\",{\"1\":{\"488\":1}}],[\"跟数据page一起做lru换入换出\",{\"1\":{\"389\":1}}],[\"布尔值\",{\"1\":{\"986\":1}}],[\"布隆过滤器的误判是指多个输入经过哈希之后在相同的bit位置1了\",{\"1\":{\"242\":1}}],[\"布隆过滤器误判率\",{\"0\":{\"242\":1}}],[\"布隆过滤器可以添加元素\",{\"1\":{\"240\":1,\"243\":1}}],[\"布隆过滤器是一种类似set的数据结构\",{\"1\":{\"239\":1}}],[\"布隆过滤器\",{\"0\":{\"237\":1},\"2\":{\"247\":1}}],[\"局部作用域\",{\"0\":{\"983\":1}}],[\"局部最优\",{\"1\":{\"32\":1}}],[\"丢失的数据包需要被重新传输\",{\"1\":{\"978\":1}}],[\"采用动规五部曲进行分析\",{\"1\":{\"1280\":1}}],[\"采用比较官方的话来介绍就是\",{\"1\":{\"1093\":1}}],[\"采用http\",{\"1\":{\"978\":1}}],[\"采取措施\",{\"1\":{\"630\":1,\"631\":1,\"632\":1}}],[\"采取\",{\"1\":{\"159\":1}}],[\"采取额外的预防措施\",{\"1\":{\"76\":1}}],[\"队头阻塞\",{\"0\":{\"978\":1}}],[\"队头阻塞的问题是因为\",{\"1\":{\"977\":1}}],[\"层队头阻塞\",{\"1\":{\"977\":2}}],[\"层之间加入了\",{\"1\":{\"971\":1}}],[\"摘要算法的方式来实现完整性\",{\"1\":{\"972\":1}}],[\"剁手\",{\"1\":{\"971\":1}}],[\"证明淘宝是真的淘宝网\",{\"1\":{\"971\":1}}],[\"身份证书\",{\"1\":{\"971\":1}}],[\"身高\",{\"1\":{\"533\":1}}],[\"竞价排名\",{\"1\":{\"971\":1}}],[\"篡改了就不能正常显示\",{\"1\":{\"971\":1}}],[\"篡改风险\",{\"1\":{\"971\":1}}],[\"账号而没\",{\"1\":{\"971\":1}}],[\"账户与安全\",{\"1\":{\"431\":1}}],[\"冒充风险\",{\"1\":{\"971\":1}}],[\"窃听风险\",{\"1\":{\"971\":1}}],[\"项\",{\"1\":{\"1384\":1}}],[\"项的集合\",{\"1\":{\"1384\":1}}],[\"项中标识的是\",{\"1\":{\"969\":1}}],[\"项目叫orderlines\",{\"1\":{\"0\":1}}],[\"访问者\",{\"0\":{\"1182\":1}}],[\"访问者模式通过定义访问者接口和被访问者接口\",{\"1\":{\"1177\":1}}],[\"访问者模式\",{\"0\":{\"1177\":1},\"1\":{\"1177\":1},\"2\":{\"1185\":1}}],[\"访问\",{\"1\":{\"1151\":1}}],[\"访问应用配置\",{\"1\":{\"1077\":1}}],[\"访问后端服务器发生了错误\",{\"1\":{\"967\":1}}],[\"访问缺失的键\",{\"0\":{\"942\":1}}],[\"敬请期待\",{\"1\":{\"967\":1}}],[\"永久重定向\",{\"1\":{\"967\":1}}],[\"永远用小结果集驱动大结果集\",{\"1\":{\"514\":1}}],[\"永远用小的结果集驱动大的结果集\",{\"1\":{\"507\":1}}],[\"眼里这些都算作\",{\"1\":{\"966\":1}}],[\"紫色方框是可用窗口\",{\"1\":{\"959\":1}}],[\"窗口的实现实际上是操作系统开辟的一个缓存空间\",{\"1\":{\"959\":1}}],[\"窗口大小就是指无需等待确认应答\",{\"1\":{\"959\":1}}],[\"滑动窗口基础知识\",{\"0\":{\"1406\":1}}],[\"滑动窗口\",{\"0\":{\"959\":1,\"1441\":1},\"1\":{\"1255\":1},\"2\":{\"1407\":1,\"1408\":1}}],[\"至少\",{\"1\":{\"1198\":1,\"1403\":5}}],[\"至少运行\",{\"1\":{\"114\":1}}],[\"至此客户端也完成连接的关闭\",{\"1\":{\"953\":1}}],[\"至此服务端已经完成连接的关闭\",{\"1\":{\"953\":1}}],[\"造成不必要的资源浪费\",{\"1\":{\"952\":1}}],[\"造成缓存数据为旧数据\",{\"1\":{\"282\":1}}],[\"报文最大生存时间\",{\"1\":{\"955\":1}}],[\"报文给客户端来表示同意现在关闭连接\",{\"1\":{\"954\":1}}],[\"报文时\",{\"1\":{\"954\":1}}],[\"报文在网络中阻塞了\",{\"1\":{\"952\":1}}],[\"报文在网络中阻塞\",{\"1\":{\"952\":1}}],[\"报文中的序列号知道\",{\"1\":{\"952\":1}}],[\"报文后\",{\"1\":{\"951\":1,\"953\":1}}],[\"报文\",{\"1\":{\"951\":1,\"952\":3,\"953\":2}}],[\"序列号是可靠传输的一个关键因素\",{\"1\":{\"952\":1}}],[\"序列号\",{\"1\":{\"952\":1}}],[\"序列化类\",{\"0\":{\"887\":1}}],[\"序列化配置\",{\"0\":{\"881\":1}}],[\"序列化\",{\"2\":{\"830\":1,\"890\":1}}],[\"序列化常见的使用场景是web\",{\"1\":{\"822\":1}}],[\"序列化问题\",{\"1\":{\"656\":1,\"714\":1}}],[\"序号\",{\"1\":{\"951\":2}}],[\"首行首列需要递加求和\",{\"1\":{\"1303\":1}}],[\"首部\",{\"1\":{\"953\":1}}],[\"首部的\",{\"1\":{\"951\":3}}],[\"首先这道题是求得是等于target元素的第一的位置和等于target元素的最后一个元素\",{\"1\":{\"1395\":1}}],[\"首先就是\",{\"1\":{\"1324\":1}}],[\"首先我们需要定义一个信号\",{\"1\":{\"1111\":1}}],[\"首先我们来看一下第一个功能\",{\"1\":{\"902\":1}}],[\"首先服务端也随机初始化自己的序号\",{\"1\":{\"951\":1}}],[\"首先python是解释型语言\",{\"1\":{\"896\":1}}],[\"首先是分配内存空间\",{\"1\":{\"894\":1}}],[\"首先定位偏移位置的id\",{\"1\":{\"499\":1}}],[\"首先根据索引来查找记录\",{\"1\":{\"420\":2,\"456\":1}}],[\"首先检索辅助索引获得主键\",{\"1\":{\"414\":1}}],[\"首先\",{\"1\":{\"20\":1,\"264\":1,\"689\":1,\"1390\":1}}],[\"键的删除\",{\"0\":{\"944\":1}}],[\"计划偷窃沿街的房屋\",{\"1\":{\"1280\":2}}],[\"计数器更新\",{\"0\":{\"943\":1}}],[\"计算中间点middle的方式略有不同\",{\"1\":{\"1395\":1}}],[\"计算中间元素\",{\"1\":{\"1390\":1}}],[\"计算出中间元素下标位置\",{\"1\":{\"1390\":1}}],[\"计算并返回该研究者的\",{\"1\":{\"1403\":1}}],[\"计算并返回\",{\"1\":{\"1353\":1}}],[\"计算你\",{\"1\":{\"1280\":2}}],[\"计算tail中实际包含的有效元素数量\",{\"1\":{\"1207\":1}}],[\"计算字符串表达式的值\",{\"1\":{\"986\":1}}],[\"计算任务\",{\"1\":{\"725\":1}}],[\"计算总金额\",{\"1\":{\"549\":1}}],[\"却需要你逐个调用才能获取\",{\"1\":{\"941\":1}}],[\"却忽视了流程设计\",{\"1\":{\"42\":1,\"54\":1}}],[\"算术和集合操作\",{\"0\":{\"947\":1},\"1\":{\"940\":1}}],[\"算法技巧\",{\"0\":{\"1433\":1}}],[\"算法笔记\",{\"0\":{\"1426\":1},\"2\":{\"1199\":1,\"1204\":1,\"1211\":1,\"1214\":1,\"1222\":1,\"1231\":1,\"1238\":1,\"1243\":1,\"1249\":1,\"1252\":1,\"1260\":1,\"1267\":1,\"1318\":1,\"1342\":1,\"1349\":1,\"1355\":1,\"1370\":1,\"1373\":1,\"1396\":1,\"1404\":1,\"1407\":1}}],[\"算法的前提是匹配的字段必须建立了索引\",{\"1\":{\"513\":1}}],[\"算法\",{\"0\":{\"513\":1,\"838\":1,\"839\":1,\"1002\":1,\"1003\":1},\"1\":{\"513\":2,\"1220\":2,\"1348\":1},\"2\":{\"1277\":1,\"1278\":1,\"1283\":1,\"1284\":1,\"1290\":1,\"1291\":1,\"1293\":1,\"1294\":1,\"1301\":1,\"1304\":1,\"1305\":1,\"1310\":1,\"1311\":1,\"1315\":1,\"1316\":1,\"1361\":1,\"1362\":1,\"1367\":1,\"1368\":1,\"1381\":1,\"1382\":1,\"1386\":1,\"1387\":1}}],[\"统计此时还剩下的陆地就可以了\",{\"1\":{\"1354\":1}}],[\"统计每个数32位下出现的个数\",{\"1\":{\"1339\":1}}],[\"统计并返回在\",{\"1\":{\"1314\":1}}],[\"统计对象的个数\",{\"0\":{\"940\":1}}],[\"统一错误处理\",{\"1\":{\"1155\":1}}],[\"统一了同步\",{\"1\":{\"1089\":1}}],[\"统一使用\",{\"1\":{\"536\":1}}],[\"统一使用下划线命名\",{\"1\":{\"529\":2}}],[\"偏函数实现\",{\"0\":{\"936\":1}}],[\"偏函数只能根据已有的函数生成一个新的函数\",{\"1\":{\"934\":1}}],[\"偏函数partial是functools\",{\"1\":{\"934\":1}}],[\"偏函数partial\",{\"0\":{\"934\":1}}],[\"偏移量超过\",{\"1\":{\"498\":1}}],[\"耗时\",{\"1\":{\"929\":1}}],[\"充分利用了异步i\",{\"1\":{\"925\":1}}],[\"堆\",{\"2\":{\"1249\":1}}],[\"堆是一个理想的数据结构\",{\"1\":{\"921\":1}}],[\"堆是一个近似完全二叉树的结构\",{\"1\":{\"919\":1}}],[\"堆可实现高效的任务调度算法\",{\"1\":{\"921\":1}}],[\"堆与优先队列\",{\"0\":{\"917\":1}}],[\"何为优先队列及其应用场景\",{\"0\":{\"918\":1}}],[\"何时使用复合索引\",{\"1\":{\"451\":1}}],[\"何时生成\",{\"0\":{\"372\":1}}],[\"灵活应用\",{\"1\":{\"911\":1}}],[\"灵活性\",{\"1\":{\"808\":1}}],[\"介绍与优势\",{\"0\":{\"911\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"真正的运行逻辑\",{\"1\":{\"1194\":1}}],[\"真正的数据内容\",{\"1\":{\"323\":1}}],[\"真实世界中的队列往往期望能够高效地循环利用存储空间\",{\"1\":{\"909\":1}}],[\"效率问题\",{\"1\":{\"909\":1}}],[\"出界条件的判断\",{\"1\":{\"1391\":1,\"1393\":1}}],[\"出售\",{\"1\":{\"1292\":1}}],[\"出度为\",{\"1\":{\"1218\":1}}],[\"出了这个作用域就无法使用了\",{\"1\":{\"983\":1}}],[\"出队操作总是移除优先级最高的元素\",{\"1\":{\"918\":1}}],[\"出队操作的低效\",{\"1\":{\"911\":1}}],[\"出队操作\",{\"1\":{\"908\":1,\"912\":1}}],[\"出队\",{\"1\":{\"908\":1}}],[\"出现在\",{\"1\":{\"1390\":1}}],[\"出现的个数\",{\"1\":{\"1314\":1}}],[\"出现的问题\",{\"1\":{\"283\":1}}],[\"出现个数\",{\"0\":{\"1314\":1}}],[\"出现了\",{\"1\":{\"283\":1}}],[\"出现\",{\"1\":{\"178\":1}}],[\"入门题\",{\"0\":{\"1313\":1}}],[\"入口函数\",{\"1\":{\"1194\":1}}],[\"入队操作\",{\"1\":{\"908\":1,\"912\":1}}],[\"入队\",{\"1\":{\"908\":1,\"911\":1}}],[\"入住\",{\"0\":{\"554\":1}}],[\"浅拷贝通常只复制对象本身\",{\"1\":{\"894\":1}}],[\"叫声像鸭子他就是鸭子\",{\"1\":{\"892\":1}}],[\"走路径3\",{\"1\":{\"1345\":1}}],[\"走路像鸭子\",{\"1\":{\"892\":1}}],[\"走到那个格子时就执行格子对应的延迟任务\",{\"1\":{\"610\":1}}],[\"曾经被问到的面试题\",{\"0\":{\"891\":1}}],[\"曾经在使用flask\",{\"1\":{\"587\":1}}],[\"软删除完成了\",{\"1\":{\"878\":1}}],[\"软删除的好处可以保证数据库索引的顺序\",{\"1\":{\"877\":1}}],[\"软件交付往往被割裂为\",{\"1\":{\"31\":1}}],[\"教师名称\",{\"1\":{\"865\":1,\"886\":1}}],[\"找出并返回\",{\"1\":{\"1380\":1}}],[\"找出其中的两条线\",{\"1\":{\"1377\":1}}],[\"找出其中最长的回文子序列\",{\"1\":{\"1299\":1}}],[\"找出矩阵中值为\",{\"1\":{\"1354\":1}}],[\"找出只出现一次的那两个元素\",{\"1\":{\"1340\":1}}],[\"找出只包含\",{\"1\":{\"1203\":1}}],[\"找出那个只出现了一次的元素\",{\"1\":{\"1336\":1}}],[\"找到目标索引\",{\"1\":{\"1390\":1}}],[\"找到当前字符出现的最远位置\",{\"1\":{\"1385\":1}}],[\"找到局部最优是什么\",{\"1\":{\"1360\":1}}],[\"找到右边第一个为1的数字\",{\"0\":{\"1333\":1}}],[\"找到\",{\"1\":{\"1299\":1}}],[\"找到最长且\",{\"1\":{\"1287\":1}}],[\"找到q的father节点\",{\"1\":{\"1225\":1,\"1227\":1}}],[\"找到它的所有相邻节点\",{\"1\":{\"1217\":1}}],[\"找到其中最长严格递增子序列的长度\",{\"1\":{\"1207\":1,\"1286\":1}}],[\"找到只包含\",{\"1\":{\"1202\":1}}],[\"找到索引也就找到了数据\",{\"1\":{\"439\":1}}],[\"找最小k个元素\",{\"1\":{\"921\":1}}],[\"找最大k个元素\",{\"1\":{\"921\":1}}],[\"找不到记录\",{\"1\":{\"862\":1}}],[\"伪代码如下\",{\"1\":{\"853\":1}}],[\"伪装自己为\",{\"1\":{\"278\":1}}],[\"男\",{\"1\":{\"824\":1,\"825\":2}}],[\"符合开闭原则\",{\"1\":{\"808\":1}}],[\"责任链模式也有一些潜在的缺点\",{\"1\":{\"809\":1}}],[\"责任链模式结构\",{\"0\":{\"805\":1}}],[\"责任链模式提供了一种解决方案\",{\"1\":{\"804\":1}}],[\"责任链模式是一种行为设计模式\",{\"1\":{\"804\":1}}],[\"责任链模式\",{\"0\":{\"803\":1},\"2\":{\"811\":1}}],[\"责任人\",{\"1\":{\"32\":1}}],[\"桥接模式通常会于开发前期进行设计\",{\"1\":{\"800\":1}}],[\"订单中不同商品达到10个或以上时提供7\",{\"1\":{\"776\":1}}],[\"折扣\",{\"1\":{\"776\":3}}],[\"赋值或作为参数传递给其他函数\",{\"1\":{\"776\":2}}],[\"赋予pod自愈和故障转移能力\",{\"1\":{\"153\":1}}],[\"防火墙就将你的浏览器的请求转给互联网\",{\"1\":{\"769\":1}}],[\"防火墙\",{\"1\":{\"769\":1}}],[\"防止出现无限循环的情况\",{\"1\":{\"1016\":1}}],[\"防止历史连接中的数据\",{\"1\":{\"956\":1}}],[\"防止oom或cpu过载\",{\"1\":{\"725\":1}}],[\"防止写入缓存的时候会降低并发性\",{\"1\":{\"289\":1}}],[\"框架偏好\",{\"1\":{\"1172\":1}}],[\"框架\",{\"1\":{\"1164\":1}}],[\"框架也可以看作一种代理模式\",{\"1\":{\"769\":1}}],[\"框架下运行\",{\"1\":{\"588\":1}}],[\"远程\",{\"1\":{\"769\":1}}],[\"装满背包的最小价值\",{\"1\":{\"1276\":1}}],[\"装饰则能为对象提供加强的接口\",{\"1\":{\"800\":1}}],[\"装饰还支持递归组合\",{\"1\":{\"800\":1}}],[\"装饰模式则能在不改变对象接口的前提下强化对象功能\",{\"1\":{\"800\":1}}],[\"装饰模式是为装饰的对象增强功能\",{\"1\":{\"771\":1}}],[\"装饰模式是以对客户端透明的方式扩展对象的功能\",{\"1\":{\"771\":1}}],[\"装饰者\",{\"1\":{\"771\":1}}],[\"装饰器改变了一个函数的行为\",{\"1\":{\"934\":1}}],[\"装饰器\",{\"2\":{\"841\":1,\"1005\":1}}],[\"装饰器可以在不改变原有代码的基础上\",{\"1\":{\"831\":1,\"995\":1}}],[\"装饰器可以在类定义之前应用\",{\"1\":{\"783\":1}}],[\"装饰器模式强调的是增强自身\",{\"1\":{\"771\":1}}],[\"装饰器模式与代理模式的区别\",{\"0\":{\"771\":1}}],[\"装饰器模式的适用场景\",{\"1\":{\"770\":1}}],[\"装饰器模式提供了一种比使用子类更加灵活的替代方案\",{\"1\":{\"770\":1}}],[\"装饰器模式\",{\"0\":{\"770\":1}}],[\"装饰器和代理模式\",{\"0\":{\"768\":1}}],[\"装修\",{\"0\":{\"547\":1}}],[\"抽象工厂模式则非常适合那些需要创建一组相关联的对象的情况\",{\"1\":{\"793\":1}}],[\"抽象工厂模式进一步扩展了工厂方法模式的概念\",{\"1\":{\"792\":1}}],[\"抽象工厂模式缺点\",{\"1\":{\"767\":1}}],[\"抽象工厂模式优点\",{\"1\":{\"767\":1}}],[\"抽象工厂模式\",{\"0\":{\"767\":1,\"792\":1},\"1\":{\"767\":1}}],[\"抽象不应该依赖于细节\",{\"1\":{\"762\":1}}],[\"满足交换律\",{\"1\":{\"1324\":1}}],[\"满足题意\",{\"1\":{\"1289\":1}}],[\"满足\",{\"1\":{\"1257\":1}}],[\"满足对高效数据排序\",{\"1\":{\"921\":1}}],[\"满足父节点的值小于或等于\",{\"1\":{\"919\":1}}],[\"满足开闭原则\",{\"1\":{\"766\":1}}],[\"满容器一定要指定启动探针\",{\"1\":{\"146\":1}}],[\"违背了开闭原则\",{\"1\":{\"767\":1}}],[\"违背了\",{\"1\":{\"765\":1}}],[\"封装了http请求的内容\",{\"1\":{\"1101\":1}}],[\"封装了创建对象的过程\",{\"1\":{\"765\":1}}],[\"封装性\",{\"1\":{\"546\":1}}],[\"迪米特法则\",{\"1\":{\"762\":1}}],[\"泛化关系和实现关系\",{\"1\":{\"762\":1}}],[\"体现了封装的思想\",{\"1\":{\"762\":1}}],[\"派生类也按照这个契约来实现\",{\"1\":{\"762\":1}}],[\"改为节点链接的下一个路径\",{\"1\":{\"1345\":1}}],[\"改为路径5\",{\"1\":{\"1345\":1}}],[\"改为路径3\",{\"1\":{\"1345\":1}}],[\"改变了方向\",{\"1\":{\"1345\":1}}],[\"改进\",{\"0\":{\"975\":1}}],[\"改动成本最小\",{\"1\":{\"762\":1}}],[\"改完以后重启kube\",{\"1\":{\"108\":1}}],[\"粒度更细的类\",{\"1\":{\"762\":1}}],[\"意图表达\",{\"1\":{\"756\":1}}],[\"意味着全表扫描或者在查找使用索引的情况下\",{\"1\":{\"351\":1,\"374\":1}}],[\"意味着无论你在哪里运行它都会得到相同的行为\",{\"1\":{\"130\":1}}],[\"意味着你不需要在应用程序代码中包含机密数据\",{\"1\":{\"76\":1}}],[\"想要给你的孩子们一些小饼干\",{\"1\":{\"1364\":1}}],[\"想要学习课程\",{\"1\":{\"1241\":1,\"1242\":1}}],[\"想要建立一个可重复使用的类\",{\"1\":{\"798\":1}}],[\"想要开发出来健壮的程序必须要做好异常处理\",{\"1\":{\"740\":1}}],[\"想打印出异常的详细信息还要记住这个模块traceback\",{\"1\":{\"755\":1}}],[\"诊断问题的关键实践\",{\"1\":{\"755\":1}}],[\"捕获到异常\",{\"1\":{\"754\":2,\"757\":1}}],[\"捕获特定异常\",{\"0\":{\"747\":1}}],[\"负值取反为正\",{\"0\":{\"1365\":1}}],[\"负载均衡所以出现了分布式\",{\"1\":{\"815\":1}}],[\"负数没有平方根\",{\"1\":{\"753\":2}}],[\"负责将请求的sql解析生成一个\",{\"1\":{\"332\":1}}],[\"负责存储和管理客户端与数据库的连接\",{\"1\":{\"332\":1}}],[\"负责监听和分发事件\",{\"1\":{\"270\":1}}],[\"负责下载镜像\",{\"1\":{\"114\":1}}],[\"负责进行流量转发\",{\"1\":{\"114\":1}}],[\"负责\",{\"1\":{\"114\":1}}],[\"输入数组\",{\"1\":{\"1266\":1}}],[\"输入字符串以字符数组\",{\"1\":{\"1258\":1}}],[\"输入格式为一维\",{\"1\":{\"1203\":1}}],[\"输入\",{\"1\":{\"898\":1,\"1198\":3,\"1202\":3,\"1203\":5,\"1207\":3,\"1208\":2,\"1209\":2,\"1221\":2,\"1229\":2,\"1230\":2,\"1236\":2,\"1237\":3,\"1241\":2,\"1242\":3,\"1257\":3,\"1258\":2,\"1259\":2,\"1265\":2,\"1266\":2,\"1274\":8,\"1275\":5,\"1276\":5,\"1280\":5,\"1281\":2,\"1282\":2,\"1286\":3,\"1287\":2,\"1288\":2,\"1289\":3,\"1292\":15,\"1297\":6,\"1299\":6,\"1300\":5,\"1303\":10,\"1307\":2,\"1308\":3,\"1309\":3,\"1313\":2,\"1314\":2,\"1335\":2,\"1336\":3,\"1339\":2,\"1340\":3,\"1341\":2,\"1352\":2,\"1353\":2,\"1354\":2,\"1364\":2,\"1365\":3,\"1366\":2,\"1376\":2,\"1377\":2,\"1378\":3,\"1379\":2,\"1380\":2,\"1384\":3,\"1385\":2,\"1390\":2,\"1395\":3,\"1399\":3,\"1400\":3,\"1403\":2}}],[\"输入错误\",{\"1\":{\"749\":1}}],[\"输入的数字是\",{\"1\":{\"749\":1}}],[\"输出的顺序和三元组的顺序并不重要\",{\"1\":{\"1257\":1}}],[\"输出原始值\",{\"1\":{\"1081\":1}}],[\"输出结果\",{\"1\":{\"908\":1,\"912\":1,\"921\":1}}],[\"输出\",{\"1\":{\"563\":4,\"566\":2,\"706\":1,\"732\":3,\"753\":1,\"754\":1,\"898\":1,\"900\":1,\"912\":1,\"985\":1,\"1081\":1,\"1198\":3,\"1202\":3,\"1203\":5,\"1207\":3,\"1208\":2,\"1209\":2,\"1221\":2,\"1229\":2,\"1230\":2,\"1236\":2,\"1237\":3,\"1241\":2,\"1242\":3,\"1257\":3,\"1258\":2,\"1259\":2,\"1265\":2,\"1266\":2,\"1274\":8,\"1275\":5,\"1276\":5,\"1280\":5,\"1281\":2,\"1282\":2,\"1286\":3,\"1287\":2,\"1288\":2,\"1289\":3,\"1292\":15,\"1297\":6,\"1299\":6,\"1300\":5,\"1303\":10,\"1307\":2,\"1308\":3,\"1309\":3,\"1313\":2,\"1314\":2,\"1335\":2,\"1336\":3,\"1339\":2,\"1340\":3,\"1341\":2,\"1352\":2,\"1353\":2,\"1354\":2,\"1364\":2,\"1365\":3,\"1366\":2,\"1376\":2,\"1377\":2,\"1378\":3,\"1379\":2,\"1380\":2,\"1384\":3,\"1385\":2,\"1390\":2,\"1395\":3,\"1399\":3,\"1400\":3,\"1403\":2}}],[\"输出中另外一个很重要的列\",{\"1\":{\"351\":1}}],[\"输出指定shell\",{\"1\":{\"124\":1}}],[\"甚至改变它们的顺序\",{\"1\":{\"808\":1}}],[\"甚至需要修改抽象层代码\",{\"1\":{\"767\":1}}],[\"甚至是try块中有return\",{\"1\":{\"749\":1}}],[\"甚至都不需要经过optimizer模块进行执行计划的分析优化\",{\"1\":{\"431\":1}}],[\"请必须使用时间复杂度为\",{\"1\":{\"1399\":1}}],[\"请编写代码找出那个缺失的整数\",{\"1\":{\"1331\":1,\"1335\":1}}],[\"请问最终的球是黑的概率是多少\",{\"1\":{\"1328\":1}}],[\"请找出一条从左上角到右下角的路径\",{\"1\":{\"1303\":1}}],[\"请找出一条可以删去的边\",{\"1\":{\"1230\":1}}],[\"请注意\",{\"1\":{\"1275\":1,\"1309\":1,\"1341\":1}}],[\"请注意这么一句话就是生成器函数可以暂停执行并返回中间结果\",{\"1\":{\"735\":1}}],[\"请\",{\"1\":{\"1257\":1}}],[\"请你设计并实现对数时间复杂度的算法解决此问题\",{\"1\":{\"1403\":1}}],[\"请你计算网格中岛屿的数量\",{\"1\":{\"1352\":1}}],[\"请你用\",{\"1\":{\"1300\":1}}],[\"请你统计并返回这个字符串中\",{\"1\":{\"1299\":1}}],[\"请你判断\",{\"1\":{\"1297\":1}}],[\"请你判断是否可以将这个数组分割成两个子集\",{\"1\":{\"1274\":1}}],[\"请你判断是否可能完成所有课程的学习\",{\"1\":{\"1241\":1}}],[\"请你判断是否能在将\",{\"1\":{\"1198\":1}}],[\"请你返回你可以获得的披萨大小总和的最大值\",{\"1\":{\"1282\":1}}],[\"请你从\",{\"1\":{\"1275\":1}}],[\"请你找出给定目标值在数组中的开始位置和结束位置\",{\"1\":{\"1395\":1,\"1400\":1}}],[\"请你找出并返回那个只出现了一次的元素\",{\"1\":{\"1339\":1}}],[\"请你找出并返回\",{\"1\":{\"1274\":1}}],[\"请你找出所有从节点\",{\"1\":{\"1221\":1}}],[\"请你\",{\"1\":{\"1266\":1}}],[\"请你确定是否存在从顶点\",{\"1\":{\"1229\":1}}],[\"请计算\",{\"1\":{\"1209\":1}}],[\"请输入一个整数\",{\"1\":{\"749\":1}}],[\"请输入一个数字\",{\"1\":{\"749\":1}}],[\"请检查路径是否正确\",{\"1\":{\"742\":1}}],[\"请求参数校验\",{\"0\":{\"1150\":1}}],[\"请求验证\",{\"1\":{\"1146\":1,\"1154\":1,\"1156\":1}}],[\"请求处理函数\",{\"0\":{\"1137\":1}}],[\"请求处理流程\",{\"0\":{\"1084\":1}}],[\"请求结束\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"请求结束后执行\",{\"1\":{\"1110\":1}}],[\"请求开始\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"请求执行出现异常时执行\",{\"1\":{\"1110\":1}}],[\"请求执行完毕后自动执行\",{\"1\":{\"1110\":1}}],[\"请求到来前执行\",{\"1\":{\"1110\":1}}],[\"请求预处理\",{\"1\":{\"1103\":1,\"1104\":1}}],[\"请求函数操作\",{\"1\":{\"1098\":1}}],[\"请求的生命周期这个是比较复杂的我们通过两个方面来进行分析\",{\"1\":{\"1098\":1}}],[\"请求的生命周期\",{\"0\":{\"1098\":1}}],[\"请求上下文和应用上下文的生命周期\",{\"0\":{\"1102\":1}}],[\"请求上下文和应用上下文的关系\",{\"0\":{\"1101\":1}}],[\"请求上下文对象有\",{\"1\":{\"1101\":1}}],[\"请求上下文放入contextvars中\",{\"1\":{\"1100\":1,\"1104\":2}}],[\"请求上下文\",{\"0\":{\"1078\":1}}],[\"请求上下文栈\",{\"1\":{\"1073\":1}}],[\"请求来了\",{\"1\":{\"1064\":1}}],[\"请求方法\",{\"1\":{\"1063\":1}}],[\"请求关闭处理函数\",{\"1\":{\"1060\":1}}],[\"请求后处理函数\",{\"1\":{\"1060\":1}}],[\"请求前处理函数\",{\"1\":{\"1060\":1}}],[\"请求并行执行\",{\"1\":{\"597\":1}}],[\"请求会以非阻塞方式执行\",{\"1\":{\"592\":1}}],[\"请求时\",{\"1\":{\"592\":1}}],[\"请求加第二把锁\",{\"1\":{\"408\":1}}],[\"请求a将新值写入mysql数据库\",{\"1\":{\"283\":1}}],[\"请求a进行写操作\",{\"1\":{\"283\":2}}],[\"请求b将旧值写入redis缓存\",{\"1\":{\"283\":1}}],[\"请求b继续\",{\"1\":{\"283\":1}}],[\"请求b开工\",{\"1\":{\"283\":1}}],[\"请求\",{\"0\":{\"597\":1},\"1\":{\"278\":1,\"977\":1,\"1149\":4}}],[\"请求将发送到列出的\",{\"1\":{\"97\":1}}],[\"元素的\",{\"1\":{\"1266\":1}}],[\"元素的顺序可以改变\",{\"1\":{\"1265\":1}}],[\"元素被赋予一个优先级数字\",{\"1\":{\"915\":1}}],[\"元素带有优先级的队列\",{\"1\":{\"915\":1}}],[\"元组\",{\"1\":{\"731\":1,\"941\":1,\"986\":1}}],[\"元数据存储在单个事务数据字典中\",{\"1\":{\"430\":1}}],[\"元数据信息\",{\"1\":{\"323\":1}}],[\"迭代是python最强大的功能之一\",{\"1\":{\"1014\":1}}],[\"迭代是一种重复获取数据集合中元素的过程\",{\"1\":{\"731\":1}}],[\"迭代器的判断\",{\"0\":{\"1017\":1}}],[\"迭代器的概念\",{\"0\":{\"732\":1}}],[\"迭代器有两个基本的方法\",{\"1\":{\"1014\":1}}],[\"迭代器只能往前不会后退\",{\"1\":{\"1014\":1}}],[\"迭代器对象从集合的第一个元素开始访问\",{\"1\":{\"1014\":1}}],[\"迭代器是一个可以记住遍历的位置的对象\",{\"1\":{\"1014\":1}}],[\"迭代器是一个对象\",{\"1\":{\"732\":1}}],[\"迭代器\",{\"0\":{\"1013\":1},\"1\":{\"734\":1},\"2\":{\"737\":1,\"738\":1}}],[\"迭代器在没有更多元素时抛出stopiteration异常\",{\"1\":{\"732\":1}}],[\"迭代器和生成器的好处\",{\"0\":{\"734\":1}}],[\"迭代器和生成器\",{\"0\":{\"730\":1}}],[\"迭代通常用于遍历序列\",{\"1\":{\"731\":1}}],[\"避坑指南\",{\"0\":{\"725\":1}}],[\"避免图中有环走入死循环\",{\"1\":{\"1221\":1}}],[\"避免直接操作\",{\"1\":{\"1088\":1}}],[\"避免重发\",{\"1\":{\"952\":1}}],[\"避免重复存储结果\",{\"1\":{\"658\":1}}],[\"避免了数据竞争和一致性问题\",{\"1\":{\"914\":1}}],[\"避免了回表的情况发生\",{\"1\":{\"415\":1}}],[\"避免数据库索引的稀疏性\",{\"1\":{\"877\":1}}],[\"避免共享可变状态\",{\"1\":{\"725\":1}}],[\"避免if\",{\"1\":{\"718\":1}}],[\"避免频繁通信\",{\"1\":{\"716\":1}}],[\"避免连接数超限\",{\"1\":{\"714\":1}}],[\"避免因单个任务崩溃影响其他任务\",{\"1\":{\"714\":1}}],[\"避免因频繁触发相同类型的低优先级告警而导致\",{\"1\":{\"626\":1}}],[\"避免spawn的初始化开销\",{\"1\":{\"705\":1}}],[\"避免在任务中执行耗时操作\",{\"1\":{\"661\":1}}],[\"避免在补丁后混用多线程和协程\",{\"1\":{\"599\":1}}],[\"避免阻塞导致的性能瓶颈\",{\"1\":{\"600\":1}}],[\"避免服务中断\",{\"1\":{\"556\":1}}],[\"避免缩写\",{\"1\":{\"548\":1}}],[\"避免过度设计\",{\"1\":{\"546\":1}}],[\"避免过度复杂\",{\"1\":{\"20\":1}}],[\"避免循环导入\",{\"1\":{\"530\":1}}],[\"避免影响业务\",{\"1\":{\"492\":1}}],[\"避免为每个独立的事务分配独立的undo\",{\"1\":{\"389\":1}}],[\"避免问题随时间推移而复杂化\",{\"1\":{\"640\":1}}],[\"避免问题在后期蔓延到更复杂的系统中\",{\"1\":{\"51\":1}}],[\"避免问题蔓延到生产环境\",{\"1\":{\"40\":1}}],[\"避免资源浪费\",{\"1\":{\"40\":1,\"952\":1}}],[\"避免\",{\"1\":{\"31\":1,\"39\":1,\"44\":1,\"52\":1,\"56\":1,\"57\":1,\"664\":1}}],[\"科学计算\",{\"1\":{\"724\":1}}],[\"科学计算加速\",{\"0\":{\"720\":1}}],[\"科学探索\",{\"1\":{\"18\":1}}],[\"危险示例\",{\"1\":{\"713\":1}}],[\"约\",{\"1\":{\"712\":2}}],[\"约束一致性\",{\"1\":{\"425\":1}}],[\"深度优先\",{\"0\":{\"1438\":1}}],[\"深度优先遍历\",{\"1\":{\"1354\":1}}],[\"深度分析\",{\"0\":{\"711\":1}}],[\"深拷贝可能会遇到两个问题\",{\"1\":{\"894\":1}}],[\"深色版本\",{\"1\":{\"664\":1}}],[\"低效的ipc示例\",{\"1\":{\"713\":1}}],[\"低\",{\"1\":{\"710\":2,\"1172\":1}}],[\"低耦合\",{\"1\":{\"543\":1}}],[\"底层使用客户端\",{\"1\":{\"706\":1}}],[\"底层使用os\",{\"1\":{\"706\":1}}],[\"底层实现是由\",{\"1\":{\"461\":1}}],[\"混合加密的方式实现信息的机密性\",{\"1\":{\"972\":1}}],[\"混合模式\",{\"1\":{\"705\":1}}],[\"混合持久化是redis\",{\"1\":{\"264\":1}}],[\"混合持久化是最佳方式吗\",{\"1\":{\"264\":1}}],[\"混合持久化\",{\"0\":{\"264\":1},\"1\":{\"264\":1}}],[\"父进程通过os\",{\"1\":{\"705\":1}}],[\"父进程通过fork\",{\"1\":{\"705\":1}}],[\"独立内存空间\",{\"1\":{\"704\":1}}],[\"独享表空间使用\",{\"1\":{\"334\":1}}],[\"独享表空间和共享表空间\",{\"1\":{\"334\":1}}],[\"签发了\",{\"1\":{\"698\":1}}],[\"签名\",{\"1\":{\"693\":1}}],[\"区间中\",{\"1\":{\"1395\":1}}],[\"区间范围为\",{\"1\":{\"1395\":1}}],[\"区间的开闭问题\",{\"0\":{\"1392\":1},\"1\":{\"1391\":1}}],[\"区间问题\",{\"0\":{\"1369\":1},\"1\":{\"1359\":1}}],[\"区间回文子序列的长度\",{\"1\":{\"1299\":1}}],[\"区分大\",{\"1\":{\"696\":1}}],[\"区别在于\",{\"1\":{\"478\":1}}],[\"区别\",{\"0\":{\"308\":1}}],[\"令牌的唯一标识\",{\"1\":{\"696\":1}}],[\"令牌的颁发时间\",{\"1\":{\"696\":1}}],[\"令牌的过期时间戳\",{\"1\":{\"696\":1}}],[\"令牌的受众\",{\"1\":{\"696\":1}}],[\"令牌颁发者\",{\"1\":{\"696\":1}}],[\"令牌或密钥的对象\",{\"1\":{\"76\":1}}],[\"载荷就是存放有效信息的地方\",{\"1\":{\"696\":1}}],[\"声明response\",{\"1\":{\"1060\":1}}],[\"声明一个类\",{\"1\":{\"847\":1,\"1009\":1}}],[\"声明了所有具体处理者的通用接口\",{\"1\":{\"805\":1}}],[\"声明加密的算法\",{\"1\":{\"695\":1}}],[\"声明类型\",{\"1\":{\"695\":1}}],[\"头部压缩\",{\"1\":{\"976\":1}}],[\"头部\",{\"1\":{\"693\":1}}],[\"头节点里有头节点里同时还有一个参数\",{\"1\":{\"218\":1}}],[\"认证\",{\"0\":{\"692\":1}}],[\"认为失败\",{\"1\":{\"197\":1}}],[\"认为引入ci\",{\"1\":{\"33\":1}}],[\"校验机制\",{\"1\":{\"971\":1}}],[\"校验失败则返回错误码\",{\"1\":{\"691\":1}}],[\"校验成功则返回请求数据\",{\"1\":{\"691\":1}}],[\"浏览器一般会在单个tcp连接中创建并行的几十个乃至上百个传输\",{\"1\":{\"978\":1}}],[\"浏览器会自动在请求头中添加cookie\",{\"1\":{\"689\":1}}],[\"浏览器是无法知道你是否在线的\",{\"1\":{\"686\":1}}],[\"端点\",{\"1\":{\"1146\":1}}],[\"端点的其他方式\",{\"1\":{\"86\":1}}],[\"端\",{\"1\":{\"1093\":1}}],[\"端口和ssl加密\",{\"1\":{\"973\":1}}],[\"端口是分机号\",{\"1\":{\"676\":1}}],[\"端是多对一\",{\"1\":{\"886\":1}}],[\"插座与插头的类比\",{\"1\":{\"676\":1}}],[\"插入元素\",{\"1\":{\"919\":1}}],[\"插入一行\",{\"1\":{\"482\":1}}],[\"插入\",{\"1\":{\"482\":1}}],[\"传递性\",{\"1\":{\"1225\":1}}],[\"传输\",{\"1\":{\"978\":1}}],[\"传输层\",{\"1\":{\"962\":1}}],[\"传输控制协议\",{\"1\":{\"675\":1}}],[\"传统\",{\"1\":{\"1172\":1}}],[\"传统模式\",{\"1\":{\"1169\":1}}],[\"传统同步\",{\"1\":{\"1161\":1}}],[\"传统的\",{\"1\":{\"1142\":1}}],[\"传统组织中\",{\"1\":{\"32\":1}}],[\"传统上\",{\"1\":{\"23\":1}}],[\"套接字\",{\"1\":{\"674\":1}}],[\"→\",{\"1\":{\"670\":3,\"1229\":3}}],[\"决定是否使用缓存的主动性在于浏览器这边\",{\"1\":{\"969\":1}}],[\"决定了任务执行的并发模式和资源管理方式\",{\"1\":{\"662\":1}}],[\"决策是指收到真实的业务数据反馈结果后\",{\"1\":{\"21\":1}}],[\"块不同大小的部分组成\",{\"1\":{\"1282\":1}}],[\"块披萨\",{\"0\":{\"1282\":1}}],[\"块石头的重量\",{\"1\":{\"1274\":1}}],[\"块\",{\"1\":{\"661\":1}}],[\"块嵌套循环连接\",{\"1\":{\"513\":1}}],[\"异或运算就是无进位相加\",{\"1\":{\"1324\":1}}],[\"异或运算有很多的技巧\",{\"1\":{\"1324\":1}}],[\"异或\",{\"0\":{\"1324\":1}}],[\"异步非阻塞\",{\"1\":{\"1163\":1}}],[\"异步接口\",{\"1\":{\"1161\":1}}],[\"异步环境\",{\"1\":{\"1089\":1}}],[\"异步函数中仍可访问\",{\"1\":{\"1088\":1}}],[\"异步友好\",{\"1\":{\"1087\":1}}],[\"异步请求处理\",{\"1\":{\"1079\":1}}],[\"异步示例\",{\"0\":{\"1079\":1}}],[\"异步支持\",{\"1\":{\"1069\":1,\"1078\":1}}],[\"异步编程\",{\"1\":{\"1069\":1}}],[\"异步编程中的队列应用\",{\"0\":{\"924\":1}}],[\"异步io可以实现非阻塞的io操作\",{\"1\":{\"899\":1}}],[\"异步io操作通常以协程\",{\"1\":{\"899\":1}}],[\"异步io依赖于事件循环来调度和执行异步任务\",{\"1\":{\"899\":1}}],[\"异步io通常使用\",{\"1\":{\"899\":1}}],[\"异步io通常与事件循环\",{\"1\":{\"898\":1}}],[\"异步io是一种编程模型\",{\"1\":{\"899\":1}}],[\"异步io和事件循环密切相关\",{\"1\":{\"899\":1}}],[\"异步io和事件循环的关系\",{\"0\":{\"899\":1}}],[\"异步io的优点在于它可以提高程序的并发性和吞吐量\",{\"1\":{\"898\":1}}],[\"异步io\",{\"1\":{\"898\":2,\"899\":1}}],[\"异步操作是指在发起一个操作后\",{\"1\":{\"898\":1}}],[\"异步\",{\"0\":{\"1161\":1},\"1\":{\"898\":2}}],[\"异步任务\",{\"1\":{\"710\":1,\"813\":1}}],[\"异步任务处理是提升用户体验和系统性能的关键\",{\"1\":{\"645\":1}}],[\"异步调用\",{\"1\":{\"652\":1}}],[\"异常\",{\"1\":{\"1025\":1}}],[\"异常用于标识迭代的完成\",{\"1\":{\"1016\":1}}],[\"异常对象的创建\",{\"1\":{\"758\":1}}],[\"异常和性能\",{\"0\":{\"758\":1}}],[\"异常装饰器\",{\"0\":{\"757\":1}}],[\"异常时记录日志信息\",{\"1\":{\"755\":1}}],[\"异常的绝杀\",{\"0\":{\"755\":1}}],[\"异常会向上传递至调用该函数的上一层\",{\"1\":{\"754\":1}}],[\"异常链抛出\",{\"0\":{\"744\":1}}],[\"异常解析\",{\"1\":{\"533\":1}}],[\"异常信息\",{\"1\":{\"532\":1,\"757\":1}}],[\"异常日志必须打印\",{\"1\":{\"532\":1}}],[\"异常处理函数\",{\"1\":{\"1060\":1}}],[\"异常处理耗时\",{\"1\":{\"758\":2}}],[\"异常处理在python中相对昂贵\",{\"1\":{\"758\":1}}],[\"异常处理则更多关注于程序中可能遇到的外部或内部错误\",{\"1\":{\"756\":1}}],[\"异常处理与日志\",{\"0\":{\"550\":1}}],[\"异常处理\",{\"0\":{\"532\":1,\"740\":1},\"1\":{\"550\":1,\"1098\":1},\"2\":{\"760\":1}}],[\"异常容器会自动回收\",{\"1\":{\"178\":1}}],[\"跨平台兼容性\",{\"0\":{\"718\":1}}],[\"跨进程通信需序列化\",{\"1\":{\"713\":1}}],[\"跨团队协作效率\",{\"1\":{\"640\":1}}],[\"跨节点分页\",{\"1\":{\"304\":1}}],[\"跨节点关联查询\",{\"1\":{\"304\":1}}],[\"风险预判与预防措施\",{\"1\":{\"640\":1}}],[\"风格即人品\",{\"0\":{\"557\":1}}],[\"风格即设计\",{\"0\":{\"540\":1}}],[\"故障演练与复盘\",{\"1\":{\"641\":1}}],[\"故障发现的速度与准确性\",{\"1\":{\"640\":1}}],[\"故障被视为改进的机会\",{\"1\":{\"32\":1}}],[\"核心代码对比\",{\"0\":{\"1072\":1}}],[\"核心功能\",{\"1\":{\"1146\":1}}],[\"核心功能详解\",{\"0\":{\"564\":1,\"1148\":1}}],[\"核心功能必须覆盖\",{\"1\":{\"553\":1}}],[\"核对成功后返回response给客户端\",{\"1\":{\"689\":1}}],[\"核实告警接收人名单是否需要更新\",{\"1\":{\"640\":1}}],[\"审视告警渠道是否仍保持畅通无阻\",{\"1\":{\"640\":1}}],[\"评估是否可以通过分析故障前后的指标与日志提前发现风险\",{\"1\":{\"640\":1}}],[\"评估告警文本是否清晰明确\",{\"1\":{\"640\":1}}],[\"评估风险等级\",{\"1\":{\"631\":1}}],[\"频率是否仍然适用\",{\"1\":{\"640\":1}}],[\"频繁的插入和删除可能导致内存碎片\",{\"1\":{\"909\":1}}],[\"频繁使用异常来控制程序流程不仅会影响性能\",{\"1\":{\"758\":1}}],[\"频繁合并代码可以避免因长时间分支隔离导致的代码冲突\",{\"1\":{\"51\":1}}],[\"频繁集成的意义\",{\"0\":{\"51\":1}}],[\"频繁集成\",{\"0\":{\"50\":1}}],[\"便无法识别数据内容\",{\"1\":{\"962\":1}}],[\"便于事后进行详细的故障排查和原因分析\",{\"1\":{\"641\":1}}],[\"便于携带更多信息\",{\"1\":{\"638\":1}}],[\"便可以利用undo\",{\"1\":{\"425\":1}}],[\"钉钉\",{\"1\":{\"638\":1}}],[\"智能化水平\",{\"1\":{\"638\":1}}],[\"智能化告警可以通过机器学习算法自动调整告警阈值\",{\"1\":{\"635\":1}}],[\"电话系统的类比\",{\"1\":{\"676\":1}}],[\"电话\",{\"1\":{\"638\":1}}],[\"电话呼叫等\",{\"1\":{\"627\":1}}],[\"电子邮件仍然是一个可靠的选择\",{\"1\":{\"638\":1}}],[\"电子邮件\",{\"1\":{\"638\":1}}],[\"电子邮件或者im\",{\"1\":{\"636\":1}}],[\"迅速定位故障源\",{\"1\":{\"631\":1}}],[\"考虑\",{\"1\":{\"1266\":1}}],[\"考虑告警信息描述是否准确无误\",{\"1\":{\"640\":1}}],[\"考虑到人员增减\",{\"1\":{\"640\":1}}],[\"考虑到业务逻辑的实际需求\",{\"1\":{\"618\":1}}],[\"考虑扩容或优化现有架构来缓解压力\",{\"1\":{\"631\":1}}],[\"磁盘空间\",{\"1\":{\"631\":1}}],[\"磁盘i\",{\"1\":{\"625\":1}}],[\"寻找图中是否存在路径\",{\"0\":{\"1229\":1}}],[\"寻找视图函数的值\",{\"1\":{\"1094\":1}}],[\"寻找潜在的问题模式\",{\"1\":{\"630\":1}}],[\"寻找数据需要先找到主键值在找到数据\",{\"1\":{\"439\":1}}],[\"管道的状态\",{\"1\":{\"630\":1}}],[\"管理核心对象\",{\"1\":{\"1082\":1}}],[\"管理策略\",{\"1\":{\"190\":1}}],[\"管理资源的回滚\",{\"1\":{\"124\":1}}],[\"管理这些对象时\",{\"1\":{\"120\":1}}],[\"管理\",{\"1\":{\"114\":2}}],[\"调度依然是按照多个线程去进行调度\",{\"1\":{\"1029\":1}}],[\"调试可能会变得较为困难\",{\"1\":{\"809\":1}}],[\"调试信息\",{\"1\":{\"756\":1}}],[\"调试中的异常检查\",{\"0\":{\"756\":1}}],[\"调试\",{\"1\":{\"668\":1,\"670\":1}}],[\"调试方便\",{\"1\":{\"667\":1}}],[\"调试或测试环境\",{\"1\":{\"667\":1}}],[\"调整和完善现有的告警策略\",{\"1\":{\"628\":1}}],[\"调用connected\",{\"1\":{\"1225\":1}}],[\"调用connected都会返回\",{\"1\":{\"1225\":1}}],[\"调用flask在其中添加数据时\",{\"1\":{\"1110\":1}}],[\"调用一个生成器函数\",{\"1\":{\"1021\":1}}],[\"调用任务\",{\"0\":{\"652\":1}}],[\"调用模型方法\",{\"1\":{\"545\":1}}],[\"调用模型类完成数据操作\",{\"1\":{\"545\":1}}],[\"调用\",{\"1\":{\"388\":1,\"594\":1,\"665\":1,\"893\":1,\"1266\":1}}],[\"吞吐量\",{\"1\":{\"625\":1}}],[\"告警\",{\"2\":{\"643\":1}}],[\"告警设计\",{\"2\":{\"642\":1}}],[\"告警设计关键点\",{\"0\":{\"624\":1}}],[\"告警上报和backup机制是否需要调整\",{\"1\":{\"640\":1}}],[\"告警接收人的适当性\",{\"1\":{\"640\":1}}],[\"告警渠道的合理性\",{\"1\":{\"640\":1}}],[\"告警项的有效性\",{\"1\":{\"640\":1}}],[\"告警复盘的关键点\",{\"0\":{\"640\":1}}],[\"告警复盘是确保系统稳定性和提高应急响应能力的重要环节\",{\"1\":{\"639\":1}}],[\"告警复盘\",{\"0\":{\"639\":1}}],[\"告警通知的方式已经从传统的邮件\",{\"1\":{\"638\":1}}],[\"告警通知\",{\"0\":{\"638\":1}}],[\"告警数据一般都是一堆大量的数据\",{\"1\":{\"633\":1}}],[\"告警展示是确保系统稳定性和快速响应故障的关键环节\",{\"1\":{\"633\":1}}],[\"告警展示\",{\"0\":{\"633\":1}}],[\"告警分类\",{\"0\":{\"629\":1}}],[\"告警疲劳\",{\"1\":{\"626\":1}}],[\"告警触发条件应当精确地反映出系统异常状态\",{\"1\":{\"626\":1}}],[\"告警触发条件与级别设定\",{\"0\":{\"626\":1}}],[\"告警扮演着至关重要的角色\",{\"1\":{\"624\":1}}],[\"告警事故频发\",{\"0\":{\"623\":1}}],[\"滴滴app发生了全国大面积崩溃\",{\"1\":{\"623\":1}}],[\"滴滴出行长时间瘫痪\",{\"1\":{\"623\":1}}],[\"阿里云多次故障\",{\"1\":{\"623\":1}}],[\"互不相同\",{\"1\":{\"1221\":1,\"1236\":1,\"1241\":1,\"1242\":1}}],[\"互不认识的\",{\"1\":{\"688\":1}}],[\"互联网大厂的服务不可用案例频繁出现在公众视野中\",{\"1\":{\"623\":1}}],[\"互相等待\",{\"1\":{\"408\":1}}],[\"综上所述\",{\"1\":{\"619\":1}}],[\"短语正着读和反着读都一样\",{\"1\":{\"1297\":1}}],[\"短连接造成的性能开销\",{\"1\":{\"975\":1}}],[\"短信等基础形式逐渐演进为更加多样化和智能化的形式\",{\"1\":{\"638\":1}}],[\"短信\",{\"1\":{\"627\":1,\"636\":1,\"638\":1}}],[\"短信或者其他即时通讯工具通知相关人员来进行审批\",{\"1\":{\"616\":1}}],[\"短期利益冲突\",{\"1\":{\"33\":1}}],[\"间隔执行\",{\"1\":{\"613\":1}}],[\"间隙\",{\"1\":{\"482\":1}}],[\"间隙锁的引入\",{\"1\":{\"482\":1}}],[\"间隙锁和行锁合称\",{\"1\":{\"482\":1}}],[\"间隙锁\",{\"1\":{\"405\":1,\"482\":1}}],[\"槽位\",{\"1\":{\"610\":1}}],[\"社区活跃度\",{\"1\":{\"1156\":1}}],[\"社区相对较小\",{\"1\":{\"607\":1}}],[\"社区支持广泛\",{\"1\":{\"666\":1}}],[\"社区支持\",{\"1\":{\"607\":1}}],[\"易于与各种python框架集成\",{\"1\":{\"607\":1}}],[\"易于使用\",{\"1\":{\"606\":1}}],[\"固定时间间隔以及cron类型的调度\",{\"1\":{\"607\":1}}],[\"固定时间点以及cron表达式的调度方式\",{\"1\":{\"607\":1}}],[\"专为异步\",{\"1\":{\"1173\":1}}],[\"专为高性能异步设计\",{\"1\":{\"1170\":1}}],[\"专注于业务代码的实现\",{\"1\":{\"846\":1,\"1008\":1}}],[\"专注于定时任务调度\",{\"1\":{\"607\":1}}],[\"专门给\",{\"1\":{\"469\":1}}],[\"官方定义比较绕口\",{\"1\":{\"1234\":1}}],[\"官方文档\",{\"1\":{\"600\":1}}],[\"官方测试\",{\"1\":{\"299\":1}}],[\"串行执行\",{\"1\":{\"598\":1}}],[\"补丁后\",{\"1\":{\"598\":1}}],[\"补丁前\",{\"1\":{\"598\":1}}],[\"补丁前后的区别\",{\"0\":{\"598\":1}}],[\"~a\",{\"1\":{\"1325\":1}}],[\"~\",{\"0\":{\"1325\":1}}],[\"~2秒\",{\"1\":{\"597\":1}}],[\"~6秒\",{\"1\":{\"597\":1}}],[\"已被替换为\",{\"1\":{\"594\":1}}],[\"已经按照\",{\"1\":{\"1403\":1}}],[\"已经开始自立门派\",{\"1\":{\"1255\":1}}],[\"已经判断\",{\"1\":{\"1230\":1}}],[\"已经为\",{\"1\":{\"227\":1}}],[\"已经完成的不删\",{\"1\":{\"198\":1}}],[\"协商缓存\",{\"0\":{\"970\":1}}],[\"协程的\",{\"1\":{\"1078\":1}}],[\"协程环境\",{\"1\":{\"1069\":1}}],[\"协程数据隔离\",{\"0\":{\"1051\":1}}],[\"协程基础与async\",{\"0\":{\"923\":1}}],[\"协程等\",{\"1\":{\"899\":1}}],[\"协程和asyncio\",{\"0\":{\"922\":1}}],[\"协程和异步生成器\",{\"1\":{\"736\":1}}],[\"协程和生成器都可以通过yield语句来暂停执行并保存当前状态\",{\"1\":{\"736\":1}}],[\"协程池\",{\"1\":{\"669\":1}}],[\"协程实现高并发非阻塞\",{\"1\":{\"668\":1}}],[\"协程\",{\"0\":{\"1039\":1},\"1\":{\"665\":1,\"666\":1,\"923\":1},\"2\":{\"602\":1,\"1043\":1}}],[\"协程中非阻塞执行\",{\"1\":{\"600\":1}}],[\"协程可切换到其他任务\",{\"1\":{\"598\":1}}],[\"协程可以切换到其他任务\",{\"1\":{\"592\":1}}],[\"协程无法切换\",{\"1\":{\"598\":1}}],[\"协作式调度\",{\"1\":{\"590\":1,\"682\":1}}],[\"协议改成了\",{\"1\":{\"977\":1}}],[\"协议的通信双方\",{\"1\":{\"952\":1}}],[\"协议传输\",{\"1\":{\"698\":1}}],[\"协议明码传输\",{\"1\":{\"698\":1}}],[\"协议支持\",{\"0\":{\"1162\":1},\"1\":{\"675\":1,\"1172\":1}}],[\"协议\",{\"1\":{\"278\":1,\"971\":1}}],[\"库\",{\"1\":{\"666\":1}}],[\"库实现\",{\"1\":{\"666\":1}}],[\"库中的一个核心函数\",{\"1\":{\"588\":1}}],[\"库快速构建和管理状态机\",{\"1\":{\"560\":1}}],[\"遇到黄河了\",{\"1\":{\"1345\":1}}],[\"遇到相同元素进行跳过\",{\"1\":{\"1257\":1}}],[\"遇到相同元素跳过\",{\"1\":{\"1257\":1}}],[\"遇到子序列\",{\"1\":{\"1207\":1}}],[\"遇到问题容易找到解决方案\",{\"1\":{\"607\":1}}],[\"遇到一些莫名奇妙的错误\",{\"1\":{\"587\":1}}],[\"遇到这种情况\",{\"1\":{\"92\":1}}],[\"切记不要一直维持着一个事务而不去结束\",{\"1\":{\"583\":1}}],[\"切换流量\",{\"1\":{\"170\":1}}],[\"超过这个时间报文将被丢弃\",{\"1\":{\"955\":1}}],[\"超过此时间的token会作废\",{\"1\":{\"696\":1}}],[\"超过了当前使用的engine所配置的并发连接数目上限\",{\"1\":{\"580\":1}}],[\"超时\",{\"1\":{\"135\":1}}],[\"添加的边的两个顶点包含在\",{\"1\":{\"1230\":1}}],[\"添加到以\",{\"1\":{\"1208\":1}}],[\"添加静态文件路由\",{\"1\":{\"1060\":1}}],[\"添加后置处理参数\",{\"1\":{\"1059\":1,\"1062\":1}}],[\"添加前置处理参数\",{\"1\":{\"1059\":1,\"1062\":1}}],[\"添加额外的上下文或重新抛出异常\",{\"1\":{\"744\":1}}],[\"添加条件和回调函数增强功能\",{\"1\":{\"574\":1}}],[\"添加如下内容\",{\"1\":{\"503\":1}}],[\"回答\",{\"1\":{\"1403\":1}}],[\"回答一般都会涉及到gil\",{\"1\":{\"1029\":1}}],[\"回溯\",{\"1\":{\"1348\":1}}],[\"回溯是dfs中的一种解决类似二叉树问题的一种具体解决方式\",{\"1\":{\"1348\":1}}],[\"回溯的过程\",{\"1\":{\"1345\":2}}],[\"回溯算法基础\",{\"0\":{\"1317\":1}}],[\"回溯算法\",{\"0\":{\"1435\":1},\"1\":{\"1220\":1,\"1348\":1},\"2\":{\"1318\":1,\"1319\":1}}],[\"回溯算法关注的不是节点\",{\"1\":{\"1220\":1}}],[\"回文串\",{\"1\":{\"1297\":2,\"1300\":1}}],[\"回文字符串\",{\"1\":{\"1296\":1,\"1299\":1}}],[\"回文子串问题一般的解题思路都是动态规划或者是双指针\",{\"1\":{\"1299\":1}}],[\"回文子串和子序列问题\",{\"0\":{\"1299\":1}}],[\"回文子串\",{\"0\":{\"1295\":1},\"1\":{\"1299\":2},\"2\":{\"1302\":1}}],[\"回收系统资源\",{\"1\":{\"1036\":1}}],[\"回一个\",{\"1\":{\"953\":1}}],[\"回调函数\",{\"0\":{\"566\":1}}],[\"回滚策略\",{\"1\":{\"556\":1}}],[\"回滚日志\",{\"1\":{\"425\":1}}],[\"回滚指针\",{\"1\":{\"325\":1,\"369\":1,\"476\":1}}],[\"回滚应用\",{\"1\":{\"180\":1}}],[\"回滚\",{\"1\":{\"165\":1}}],[\"回滚也是直接让指定的rs生效\",{\"1\":{\"164\":1}}],[\"回滚解释\",{\"0\":{\"164\":1}}],[\"回滚到指定版本\",{\"1\":{\"125\":1}}],[\"回滚操作\",{\"1\":{\"125\":1}}],[\"初始值\",{\"1\":{\"1276\":1}}],[\"初始化0即可\",{\"1\":{\"1313\":1}}],[\"初始化的就是1\",{\"1\":{\"1303\":1}}],[\"初始化都是dp\",{\"1\":{\"1276\":1}}],[\"初始化一个长度与nums相同\",{\"1\":{\"1207\":1}}],[\"初始化参数\",{\"1\":{\"1207\":1}}],[\"初始化函数\",{\"1\":{\"1194\":1}}],[\"初始化flask对象\",{\"1\":{\"1065\":1}}],[\"初始化\",{\"0\":{\"1060\":1},\"1\":{\"1198\":1,\"1202\":1,\"1280\":1,\"1286\":1,\"1292\":1,\"1299\":2,\"1303\":4,\"1307\":1,\"1390\":1}}],[\"初始化状态机\",{\"1\":{\"563\":1,\"574\":1}}],[\"初始队列\",{\"1\":{\"908\":2,\"912\":2}}],[\"初学者掌握的命令\",{\"1\":{\"124\":1}}],[\"演示如何用\",{\"1\":{\"563\":1}}],[\"停止维护\",{\"1\":{\"1156\":1}}],[\"停止\",{\"1\":{\"561\":1}}],[\"停止pod\",{\"0\":{\"148\":1}}],[\"长度最长\",{\"1\":{\"1380\":1}}],[\"长度最长的公共子数组是\",{\"1\":{\"1307\":1}}],[\"长度最长的子数组的长度\",{\"1\":{\"1307\":1}}],[\"长度为1\",{\"1\":{\"1287\":1}}],[\"长度为3\",{\"1\":{\"1287\":1}}],[\"长度正确的期望答案\",{\"1\":{\"1266\":1}}],[\"长度的复杂度仅为\",{\"1\":{\"227\":1}}],[\"长轮询等\",{\"1\":{\"1170\":1}}],[\"长连接或实时通信\",{\"1\":{\"1172\":1}}],[\"长连接\",{\"1\":{\"1161\":1}}],[\"长期维护\",{\"1\":{\"557\":1}}],[\"细节应该依赖于抽象\",{\"1\":{\"762\":1}}],[\"细节精致\",{\"1\":{\"557\":1}}],[\"细节打磨\",{\"0\":{\"547\":1}}],[\"好处就是对对象结构中的不同元素suite\",{\"1\":{\"1194\":1}}],[\"好的代码就像一座精心设计的建筑\",{\"1\":{\"557\":1}}],[\"好例子\",{\"1\":{\"548\":1,\"549\":1}}],[\"搬家指南\",{\"0\":{\"555\":1}}],[\"绿灯通知\",{\"1\":{\"1035\":1}}],[\"绿灯为true\",{\"1\":{\"1035\":1}}],[\"绿\",{\"1\":{\"553\":1}}],[\"红色线\",{\"1\":{\"1345\":1}}],[\"红色的与绿色的数据流\",{\"1\":{\"978\":1}}],[\"红灯为false\",{\"1\":{\"1035\":1}}],[\"红\",{\"1\":{\"553\":1}}],[\"红绿重构\",{\"1\":{\"553\":1}}],[\"红包的存储使用list\",{\"1\":{\"295\":1}}],[\"红包的拆分算法\",{\"1\":{\"295\":1}}],[\"红包退回\",{\"1\":{\"293\":1}}],[\"红包过期\",{\"1\":{\"293\":1}}],[\"≥\",{\"1\":{\"553\":1}}],[\"覆盖率\",{\"1\":{\"553\":1}}],[\"覆盖索引的定义与注意事项\",{\"1\":{\"415\":1}}],[\"覆盖索引是一种避免回表查询的优化策略\",{\"1\":{\"415\":1}}],[\"覆盖索引\",{\"1\":{\"351\":1}}],[\"黄金标准\",{\"0\":{\"553\":1}}],[\"黄金三角\",{\"0\":{\"546\":1}}],[\"验房\",{\"0\":{\"551\":1}}],[\"验证回文串\",{\"0\":{\"1297\":1},\"1\":{\"1297\":2}}],[\"验证缺失等问题\",{\"1\":{\"1146\":1}}],[\"验证信息\",{\"1\":{\"689\":1}}],[\"验证响应\",{\"1\":{\"552\":1}}],[\"验证模块间的协作\",{\"1\":{\"552\":1}}],[\"验证单个函数或类的正确性\",{\"1\":{\"552\":1}}],[\"验证失败时返回none\",{\"1\":{\"549\":1}}],[\"验证用户凭证并返回会话id\",{\"1\":{\"549\":1}}],[\"验证集群\",{\"1\":{\"108\":1}}],[\"验证secret\",{\"1\":{\"79\":1}}],[\"验证环节尽可能左移到开发阶段\",{\"1\":{\"43\":1}}],[\"验证环的主要工作内容是将最小可行性解决方案从描述性语言转换成可运行的软件包\",{\"1\":{\"21\":1}}],[\"验证环的目标是让质量可靠的解决方案以最快的速度到达客户手中\",{\"1\":{\"21\":1}}],[\"验证环\",{\"0\":{\"21\":1}}],[\"登录成功\",{\"1\":{\"550\":1}}],[\"错误二\",{\"1\":{\"1307\":1}}],[\"错误一\",{\"1\":{\"1307\":1}}],[\"错误原因总结\",{\"1\":{\"1307\":1}}],[\"错误信息\",{\"1\":{\"751\":1}}],[\"错误处理\",{\"1\":{\"661\":1}}],[\"错误率等也应纳入考虑范围\",{\"1\":{\"625\":1}}],[\"错误堆栈\",{\"1\":{\"550\":1}}],[\"错误日志\",{\"1\":{\"334\":1}}],[\"明确地以\",{\"1\":{\"797\":1}}],[\"明确优化目标\",{\"1\":{\"507\":1}}],[\"明文\",{\"1\":{\"549\":1}}],[\"动规五部曲\",{\"1\":{\"1273\":1,\"1286\":1,\"1303\":1}}],[\"动静分离\",{\"0\":{\"818\":1}}],[\"动词开头\",{\"1\":{\"548\":1}}],[\"动态连通性其实可以抽象成给一幅图连线\",{\"1\":{\"1225\":1}}],[\"动态连通性\",{\"1\":{\"1225\":1}}],[\"动态规划\",{\"0\":{\"1434\":1},\"1\":{\"1207\":1},\"2\":{\"1204\":1,\"1205\":1,\"1278\":1,\"1284\":1,\"1291\":1,\"1294\":1,\"1302\":1,\"1305\":1,\"1311\":1,\"1316\":1}}],[\"动态导入组件库\",{\"1\":{\"1189\":1}}],[\"动态的给一个对象添加一些额外的职责\",{\"1\":{\"770\":1}}],[\"动态添加\",{\"1\":{\"607\":1}}],[\"动态更新\",{\"1\":{\"181\":1}}],[\"动态扩缩容\",{\"0\":{\"167\":1}}],[\"命中缓存\",{\"1\":{\"839\":1,\"1003\":1}}],[\"命名空间管理\",{\"1\":{\"1146\":1}}],[\"命名空间\",{\"0\":{\"1152\":1},\"1\":{\"679\":1}}],[\"命名规范\",{\"1\":{\"548\":1}}],[\"命令行选项运行python程序时\",{\"1\":{\"756\":1}}],[\"命令概述\",{\"0\":{\"124\":1}}],[\"命令格式\",{\"1\":{\"81\":1}}],[\"命令操作secret\",{\"0\":{\"79\":1}}],[\"坏例子\",{\"1\":{\"548\":1,\"549\":1}}],[\"家具\",{\"0\":{\"548\":1}}],[\"隐藏内部实现细节\",{\"1\":{\"546\":1}}],[\"隐式类型转换\",{\"1\":{\"416\":1}}],[\"映射数据库表结构\",{\"1\":{\"545\":1}}],[\"映照出团队的协作能力\",{\"1\":{\"34\":1}}],[\"└──\",{\"1\":{\"542\":4}}],[\"│\",{\"1\":{\"542\":2}}],[\"├──\",{\"1\":{\"542\":3}}],[\"难度也不算太大\",{\"1\":{\"1376\":1}}],[\"难以在多个方法间共享数据或状态\",{\"1\":{\"1142\":1}}],[\"难以维护\",{\"1\":{\"542\":1}}],[\"难道没有修改到呢\",{\"1\":{\"503\":1}}],[\"面条式\",{\"1\":{\"542\":1}}],[\"面试题中还考过用自定义函数实现对象的深拷贝操作\",{\"1\":{\"894\":1}}],[\"面试题\",{\"0\":{\"210\":1,\"1331\":1,\"1335\":1}}],[\"地下城是由\",{\"1\":{\"1303\":1}}],[\"地下城游戏\",{\"1\":{\"1303\":1}}],[\"地图\",{\"0\":{\"549\":1}}],[\"地基扎实\",{\"1\":{\"557\":1}}],[\"地基\",{\"0\":{\"541\":1}}],[\"地址是电话号码\",{\"1\":{\"676\":1}}],[\"地址和有关如何运行容器的信息\",{\"1\":{\"115\":1}}],[\"地址不同\",{\"1\":{\"115\":1}}],[\"地址\",{\"1\":{\"93\":2}}],[\"拆解代码开发的五个关键步骤\",{\"1\":{\"540\":1}}],[\"拆分时可以重复使用字典中的单词\",{\"1\":{\"1276\":1}}],[\"拆分成多个功能更加单一的\",{\"1\":{\"762\":1}}],[\"拆分成多个小的sql\",{\"1\":{\"507\":1,\"524\":1}}],[\"拆分\",{\"1\":{\"762\":1}}],[\"拆分为独立函数\",{\"1\":{\"548\":1}}],[\"拆分红包\",{\"1\":{\"295\":1}}],[\"拆分算法如何\",{\"1\":{\"294\":1}}],[\"既然它这么固定\",{\"1\":{\"935\":1}}],[\"既可以从左侧添加或移除元素\",{\"1\":{\"912\":1}}],[\"既可以是\",{\"1\":{\"762\":1}}],[\"既能满足当前需求\",{\"1\":{\"540\":1}}],[\"既缓存索引\",{\"1\":{\"308\":1}}],[\"密集型\",{\"1\":{\"670\":2}}],[\"密集型任务\",{\"1\":{\"592\":1,\"664\":2,\"665\":1,\"666\":1,\"668\":2,\"1161\":1}}],[\"密集型任务中无法充分利用多核\",{\"1\":{\"590\":1,\"682\":1}}],[\"密钥\",{\"1\":{\"536\":2}}],[\"密码破解\",{\"1\":{\"724\":1}}],[\"密码\",{\"1\":{\"536\":1,\"549\":1}}],[\"密码强度等等\",{\"1\":{\"430\":1}}],[\"空行\",{\"1\":{\"536\":1}}],[\"空格\",{\"1\":{\"536\":1}}],[\"空间索引和空间功能\",{\"1\":{\"430\":1}}],[\"空间参考系统\",{\"1\":{\"430\":1}}],[\"空间一定会用完\",{\"1\":{\"390\":1}}],[\"空间复杂度o\",{\"1\":{\"233\":1}}],[\"空间预分配用于优化\",{\"1\":{\"227\":1}}],[\"空间预分配\",{\"1\":{\"227\":1}}],[\"随后\",{\"1\":{\"1292\":3}}],[\"随\",{\"1\":{\"1101\":1}}],[\"随着新功能的不断加入\",{\"1\":{\"804\":1}}],[\"随着技术的进步以及对用户体验的关注增加\",{\"1\":{\"638\":1}}],[\"随着查询记录量越大\",{\"1\":{\"498\":1}}],[\"随意为类添加属性\",{\"1\":{\"534\":1}}],[\"私有方法外部引用\",{\"1\":{\"534\":1}}],[\"私有变量不可以对外暴露\",{\"1\":{\"529\":1}}],[\"唱歌\",{\"1\":{\"533\":1}}],[\"女\",{\"1\":{\"533\":2}}],[\"性别\",{\"1\":{\"533\":1,\"865\":1}}],[\"性能更高\",{\"1\":{\"1069\":1,\"1087\":1}}],[\"性能对比\",{\"0\":{\"710\":1}}],[\"性能极低\",{\"1\":{\"667\":1}}],[\"性能优化\",{\"0\":{\"659\":1},\"1\":{\"1155\":1}}],[\"性能低\",{\"1\":{\"598\":1}}],[\"性能也一般\",{\"1\":{\"513\":1}}],[\"性能下降的原因\",{\"0\":{\"506\":1}}],[\"性能不如前两者\",{\"1\":{\"487\":1}}],[\"性能很高\",{\"1\":{\"469\":1}}],[\"性能很低\",{\"1\":{\"260\":1}}],[\"性能\",{\"0\":{\"1163\":1},\"1\":{\"430\":1}}],[\"性能高\",{\"1\":{\"264\":1,\"598\":1}}],[\"性能较好\",{\"1\":{\"260\":1}}],[\"性能和安全都比较中庸的方式\",{\"1\":{\"260\":1}}],[\"性能测试确保系统负载能力\",{\"1\":{\"56\":1}}],[\"性能测试\",{\"1\":{\"40\":1,\"552\":1}}],[\"爱好\",{\"1\":{\"533\":1}}],[\"嵌套字段\",{\"1\":{\"1156\":1}}],[\"嵌套作用域\",{\"0\":{\"984\":1}}],[\"嵌套\",{\"1\":{\"533\":1}}],[\"嵌入版本标签\",{\"1\":{\"116\":1}}],[\"嵌入到流程中\",{\"1\":{\"45\":1}}],[\"年龄\",{\"1\":{\"531\":1,\"533\":1}}],[\"姓名\",{\"1\":{\"531\":1,\"533\":1}}],[\"忽视代码风格\",{\"1\":{\"557\":1}}],[\"忽视文化变革\",{\"1\":{\"33\":1}}],[\"忽略大小写\",{\"1\":{\"530\":1}}],[\"少使用全局变量\",{\"1\":{\"536\":1}}],[\"少导入不用的代码\",{\"1\":{\"530\":1}}],[\"少用\",{\"1\":{\"530\":1}}],[\"导入其他模块之前\",{\"1\":{\"594\":1}}],[\"导入应该按照从最通用到最不通用的顺序分组\",{\"1\":{\"530\":1}}],[\"导入总应该放在文件顶部\",{\"1\":{\"530\":1}}],[\"导入格式\",{\"1\":{\"530\":1}}],[\"导入\",{\"0\":{\"530\":1}}],[\"导致内存使用效率不高\",{\"1\":{\"909\":1}}],[\"导致数据库的查询数据变慢\",{\"1\":{\"877\":1}}],[\"导致资源浪费\",{\"1\":{\"664\":1}}],[\"导致其他协程无法执行\",{\"1\":{\"590\":1}}],[\"导致其它请求读取的还是旧值\",{\"1\":{\"283\":1}}],[\"导致事务需要回滚\",{\"1\":{\"425\":1}}],[\"导致请求再次访问\",{\"1\":{\"284\":1}}],[\"导致b读到了旧值2\",{\"1\":{\"283\":1}}],[\"导致需求理解偏差\",{\"1\":{\"31\":1}}],[\"杨勇\",{\"1\":{\"529\":2}}],[\"反复将查找范围减半\",{\"1\":{\"1389\":1}}],[\"反转字符串\",{\"0\":{\"1258\":1}}],[\"反过来\",{\"1\":{\"1240\":1}}],[\"反向\",{\"1\":{\"886\":1}}],[\"反序列化\",{\"1\":{\"713\":1}}],[\"反思潜在的风险是否得到了有效的跟进与防范\",{\"1\":{\"640\":1}}],[\"反例\",{\"1\":{\"529\":3,\"530\":1,\"533\":1,\"534\":2}}],[\"反之为\",{\"1\":{\"1354\":1}}],[\"反之\",{\"1\":{\"557\":1}}],[\"反之亦然\",{\"1\":{\"380\":1}}],[\"反之用hashtable\",{\"1\":{\"220\":1}}],[\"强制超时\",{\"1\":{\"1040\":1}}],[\"强制缓存\",{\"0\":{\"969\":1}}],[\"强制终止\",{\"1\":{\"717\":1}}],[\"强制\",{\"1\":{\"529\":3,\"531\":1,\"532\":1}}],[\"强调要以业务为导向\",{\"1\":{\"18\":1}}],[\"扫描的时候\",{\"1\":{\"513\":1}}],[\"极大的提升了\",{\"1\":{\"513\":1}}],[\"极大提升系统的并发性\",{\"1\":{\"368\":1}}],[\"变为\",{\"1\":{\"1365\":3}}],[\"变量作用域\",{\"0\":{\"981\":1},\"2\":{\"988\":1}}],[\"变量名总体要求\",{\"1\":{\"529\":1}}],[\"变量名\",{\"0\":{\"529\":1},\"1\":{\"529\":1}}],[\"变更管理\",{\"1\":{\"630\":1}}],[\"变成了\",{\"1\":{\"513\":1}}],[\"变长字段的长度是不固定的\",{\"1\":{\"323\":1}}],[\"变长字段长度列表\",{\"1\":{\"323\":3}}],[\"转向\",{\"1\":{\"1169\":1}}],[\"转到\",{\"1\":{\"565\":1}}],[\"转换\",{\"1\":{\"561\":1}}],[\"转换成代码执行时的思路是这样的\",{\"1\":{\"513\":1}}],[\"转变为全组织的\",{\"1\":{\"31\":1}}],[\"循环都会把一对儿父子节点改到同一层\",{\"1\":{\"1226\":1}}],[\"循环外面\",{\"1\":{\"1220\":1}}],[\"循环监控完成情况\",{\"1\":{\"1040\":1}}],[\"循环利用问题\",{\"1\":{\"909\":1}}],[\"循环判断每秒是否堆顶的任务是否应该执行\",{\"1\":{\"609\":1}}],[\"循环\",{\"1\":{\"513\":1}}],[\"筛选并合并出符合我们要求的结果集\",{\"1\":{\"511\":1}}],[\"经典问题\",{\"0\":{\"1425\":1}}],[\"经典题目\",{\"0\":{\"1256\":1,\"1334\":1}}],[\"经典例题\",{\"0\":{\"1228\":1,\"1264\":1,\"1395\":1}}],[\"经典的例子就是操作文件时使用的\",{\"1\":{\"846\":1,\"1008\":1}}],[\"经典的缓存算法有3个\",{\"1\":{\"836\":1,\"1000\":1}}],[\"经常会遇到\",{\"1\":{\"506\":1}}],[\"经过节点\",{\"1\":{\"1348\":1}}],[\"经过重放\",{\"1\":{\"383\":1}}],[\"经过优化器的计算\",{\"1\":{\"356\":1}}],[\"限制大小\",{\"1\":{\"912\":1}}],[\"限制\",{\"1\":{\"664\":1}}],[\"限制的是从结果集的\",{\"1\":{\"499\":1}}],[\"限制最大大小\",{\"1\":{\"136\":1}}],[\"差距不大\",{\"1\":{\"498\":1}}],[\"条线的两个端点是\",{\"1\":{\"1377\":1}}],[\"条垂线\",{\"1\":{\"1377\":1}}],[\"条不同的路径\",{\"1\":{\"1303\":1}}],[\"条路径可以到达右下角\",{\"1\":{\"1303\":1}}],[\"条边指向别的节点\",{\"1\":{\"1218\":1}}],[\"条输出\",{\"1\":{\"499\":1}}],[\"条\",{\"1\":{\"498\":1}}],[\"条件锁\",{\"1\":{\"1032\":1}}],[\"条件过滤再进行索引查询\",{\"1\":{\"456\":1}}],[\"条件来过滤记录\",{\"1\":{\"456\":1}}],[\"条件\",{\"1\":{\"451\":1,\"1198\":1}}],[\"条件建索引\",{\"1\":{\"451\":1}}],[\"备份\",{\"1\":{\"492\":1}}],[\"影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统\",{\"1\":{\"1280\":1}}],[\"影响响应速度\",{\"1\":{\"645\":1}}],[\"影响真正重要信息的关注度\",{\"1\":{\"626\":1}}],[\"影响并发度\",{\"1\":{\"482\":1}}],[\"影响redis的读写\",{\"1\":{\"257\":1}}],[\"依旧可以通过\",{\"1\":{\"1052\":1}}],[\"依旧在werkzeug库\",{\"1\":{\"856\":1}}],[\"依然可以搜索垃圾广告\",{\"1\":{\"971\":1}}],[\"依照python官方文档的说法\",{\"1\":{\"902\":1}}],[\"依赖关系\",{\"1\":{\"762\":1}}],[\"依赖倒置原则的好处\",{\"1\":{\"762\":1}}],[\"依赖倒置原则是实现开闭原则的重要途径之一\",{\"1\":{\"762\":1}}],[\"依赖倒置原则\",{\"1\":{\"762\":2}}],[\"依赖于所选的消息中间件\",{\"1\":{\"607\":1}}],[\"依赖的\",{\"1\":{\"594\":1}}],[\"依赖管理混乱\",{\"1\":{\"58\":1}}],[\"依靠\",{\"1\":{\"482\":1}}],[\"做选择\",{\"1\":{\"1220\":1,\"1348\":1}}],[\"做一些额外的操作\",{\"1\":{\"903\":1}}],[\"做主键比较\",{\"1\":{\"499\":1}}],[\"做出如下解释\",{\"1\":{\"482\":1}}],[\"做对比\",{\"1\":{\"477\":1}}],[\"历史版本\",{\"1\":{\"482\":1}}],[\"落在黄色部分\",{\"1\":{\"478\":1}}],[\"落在红色部分\",{\"1\":{\"478\":1}}],[\"落在绿色部分\",{\"1\":{\"478\":1}}],[\"落盘之后\",{\"1\":{\"389\":1}}],[\"链表问题\",{\"0\":{\"1430\":1}}],[\"链表操作\",{\"0\":{\"1245\":1}}],[\"链表\",{\"1\":{\"1225\":1},\"2\":{\"1246\":1,\"1247\":1}}],[\"链表在内存中一般是不连续的\",{\"1\":{\"218\":1}}],[\"链路上之后的内容就都需要等待\",{\"1\":{\"978\":1}}],[\"链条进行连接通过这样的设计方式\",{\"1\":{\"476\":1}}],[\"刷脏页用的\",{\"1\":{\"469\":1}}],[\"刷一次数据文件保存数据不就可以了\",{\"1\":{\"469\":1}}],[\"刷到\",{\"1\":{\"388\":1}}],[\"页的存储是连续的\",{\"1\":{\"469\":1}}],[\"页的写入后\",{\"1\":{\"469\":1}}],[\"页刷新到磁盘真正的位置前\",{\"1\":{\"469\":1}}],[\"页大小一般为\",{\"1\":{\"468\":1}}],[\"页面锁\",{\"1\":{\"402\":1}}],[\"冲突\",{\"1\":{\"462\":1,\"463\":2}}],[\"冲突的数据组合为一个链表\",{\"1\":{\"242\":1}}],[\"哈希码是一个较小的值\",{\"1\":{\"461\":1}}],[\"哈希索引只包含哈希值和行指针\",{\"1\":{\"461\":1}}],[\"哈希对象保存的键值对数量小于\",{\"1\":{\"220\":1}}],[\"见下面的\",{\"1\":{\"460\":1}}],[\"见下面的innodb架构图\",{\"1\":{\"314\":1,\"420\":1}}],[\"架构\",{\"2\":{\"820\":1}}],[\"架构图\",{\"1\":{\"460\":1}}],[\"架构中的缓存中\",{\"1\":{\"460\":1}}],[\"架构设计\",{\"0\":{\"295\":1}}],[\"次取反后最大化的数组和\",{\"0\":{\"1365\":1}}],[\"次写\",{\"1\":{\"468\":1}}],[\"次\",{\"1\":{\"455\":1,\"513\":4,\"1292\":4,\"1365\":1,\"1403\":7}}],[\"次数\",{\"1\":{\"441\":1}}],[\"次数限制\",{\"1\":{\"294\":1}}],[\"张\",{\"1\":{\"455\":3,\"1366\":2}}],[\"结束的\",{\"1\":{\"1229\":1}}],[\"结束时间\",{\"1\":{\"619\":1}}],[\"结尾的递增子序列来获得与当前以\",{\"1\":{\"1208\":1}}],[\"结尾的递增子序列中\",{\"1\":{\"1208\":1}}],[\"结尾的最长递增子序列一样长的新序列\",{\"1\":{\"1208\":1}}],[\"结尾的最长递增子序列还要长的新序列\",{\"1\":{\"1208\":1}}],[\"结尾的最长递增子序列的长度\",{\"1\":{\"1208\":1}}],[\"结尾的最长子序列长度\",{\"1\":{\"1207\":1}}],[\"结合律\",{\"1\":{\"1324\":1}}],[\"结合\",{\"1\":{\"1155\":1}}],[\"结合使用\",{\"1\":{\"898\":1}}],[\"结合异常处理与日志记录\",{\"1\":{\"755\":1}}],[\"结合多进程和消息队列实现分布式任务\",{\"1\":{\"722\":1}}],[\"结合多进程\",{\"1\":{\"714\":1}}],[\"结合fork和spawn\",{\"1\":{\"705\":1}}],[\"结合图例\",{\"1\":{\"439\":1}}],[\"结语\",{\"0\":{\"557\":1}}],[\"结构存储\",{\"1\":{\"1234\":1}}],[\"结构清晰\",{\"1\":{\"557\":1}}],[\"结构\",{\"1\":{\"542\":1}}],[\"结果需要对\",{\"1\":{\"1314\":1}}],[\"结果2221\",{\"1\":{\"856\":1}}],[\"结果是\",{\"1\":{\"748\":1}}],[\"结果通知\",{\"0\":{\"617\":1}}],[\"结果\",{\"1\":{\"498\":2,\"847\":1,\"855\":1,\"1009\":1}}],[\"结果不一致\",{\"1\":{\"425\":1}}],[\"结果mysql宕机了\",{\"1\":{\"425\":1}}],[\"结果可信\",{\"1\":{\"46\":1}}],[\"辅助索引\",{\"1\":{\"439\":1}}],[\"删改操作\",{\"1\":{\"434\":1}}],[\"删除某些字符或者不删除任何字符形成的一个序列\",{\"1\":{\"1299\":1}}],[\"删除它并获得\",{\"1\":{\"1281\":1}}],[\"删除并获得点数\",{\"0\":{\"1281\":1}}],[\"删除重复出现的元素\",{\"1\":{\"1266\":1}}],[\"删除有序数组中的重复项\",{\"0\":{\"1266\":1}}],[\"删除后可使得剩余部分是一个有着\",{\"1\":{\"1230\":1}}],[\"删除成功\",{\"1\":{\"862\":1}}],[\"删除任务需要重新堆化\",{\"1\":{\"609\":1}}],[\"删除操作\",{\"1\":{\"482\":1}}],[\"删除缓存数据\",{\"1\":{\"285\":1}}],[\"删除缓存后\",{\"1\":{\"283\":2}}],[\"删除数据可能会造成删除多个值\",{\"1\":{\"245\":1}}],[\"删除马上要过期的key\",{\"1\":{\"212\":1}}],[\"删除或者收缩\",{\"1\":{\"190\":1}}],[\"删除一个\",{\"1\":{\"186\":1}}],[\"删除\",{\"1\":{\"178\":1,\"197\":1,\"1207\":1,\"1281\":3,\"1286\":1}}],[\"删除和更新的机制\",{\"1\":{\"177\":1}}],[\"删除之前的即可\",{\"1\":{\"108\":1}}],[\"删除secret\",{\"1\":{\"79\":1}}],[\"替代\",{\"1\":{\"599\":1}}],[\"替代方案\",{\"1\":{\"431\":1}}],[\"替换为\",{\"1\":{\"1365\":1}}],[\"替换的前提是面向对象语言所支持的多态特性\",{\"1\":{\"762\":1}}],[\"替换标准库模块\",{\"1\":{\"590\":1,\"591\":1}}],[\"替换当前运行的任务\",{\"1\":{\"202\":1}}],[\"替换\",{\"1\":{\"202\":1,\"595\":1}}],[\"替换旧的rs\",{\"1\":{\"165\":1}}],[\"太大的result\",{\"1\":{\"431\":1}}],[\"尤其在处理i\",{\"1\":{\"924\":1}}],[\"尤其对于频繁更新的表\",{\"1\":{\"431\":1}}],[\"尤其是在各个对象之间存在着复杂的依赖关系时\",{\"1\":{\"793\":1}}],[\"尤其是在devops环境中\",{\"1\":{\"639\":1}}],[\"尤其是alter\",{\"1\":{\"393\":1}}],[\"尤其是验证环的四个工作原则\",{\"1\":{\"26\":1}}],[\"尤其是书中提出的探索验证8字环模型\",{\"1\":{\"19\":1}}],[\"热点\",{\"1\":{\"430\":1}}],[\"您可以使用json数据的sql机制\",{\"1\":{\"430\":1}}],[\"您可以在创建kubernetes对象时为其添加标签\",{\"1\":{\"120\":1}}],[\"幻读指的是一个事务在前后两次查询同一个范围的时候\",{\"1\":{\"482\":1}}],[\"幻读在\",{\"1\":{\"482\":1}}],[\"幻读\",{\"1\":{\"425\":2,\"482\":2},\"2\":{\"484\":1}}],[\"脏读\",{\"1\":{\"425\":1}}],[\"靠的是undo\",{\"1\":{\"425\":1}}],[\"估计使用全表扫描要比使用索引快\",{\"1\":{\"416\":1}}],[\"估算出的查询时需要遍历的行数\",{\"1\":{\"349\":1}}],[\"联合索引\",{\"1\":{\"416\":1}}],[\"联接\",{\"1\":{\"332\":1}}],[\"十分低效\",{\"1\":{\"414\":1}}],[\"过渡方案\",{\"1\":{\"1173\":1}}],[\"过于庞大的类\",{\"1\":{\"534\":1}}],[\"过多的重复代码\",{\"1\":{\"536\":1}}],[\"过多的函数参数\",{\"1\":{\"533\":1}}],[\"过多使用会对更新操作效率有很大影响\",{\"1\":{\"451\":1}}],[\"过长的函数\",{\"1\":{\"533\":1}}],[\"过长的主索引会令辅助索引变得过大\",{\"1\":{\"414\":1}}],[\"过滤掉不符合条件的记录\",{\"1\":{\"455\":1}}],[\"过程类似\",{\"1\":{\"261\":1}}],[\"过程\",{\"1\":{\"159\":1}}],[\"了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助\",{\"1\":{\"414\":1}}],[\"聚合关系\",{\"1\":{\"762\":1}}],[\"聚集索引这种实现方式使得按主键的搜索十分高效\",{\"1\":{\"414\":1}}],[\"聚簇索引不适合\",{\"1\":{\"441\":1}}],[\"聚簇索引默认是主键\",{\"1\":{\"439\":1}}],[\"聚簇索引的优点\",{\"0\":{\"441\":1}}],[\"聚簇索引的缺点\",{\"0\":{\"442\":1},\"1\":{\"438\":1}}],[\"聚簇索引的特点\",{\"1\":{\"438\":1}}],[\"聚簇索引的查询\",{\"0\":{\"418\":1}}],[\"聚簇索引和非聚簇索引\",{\"0\":{\"437\":1},\"1\":{\"421\":1}}],[\"聚簇索引\",{\"0\":{\"439\":1},\"1\":{\"308\":1,\"340\":1,\"439\":1},\"2\":{\"445\":1}}],[\"图遍历框架\",{\"1\":{\"1348\":1}}],[\"图四\",{\"1\":{\"1345\":1}}],[\"图三\",{\"1\":{\"1345\":1}}],[\"图二\",{\"1\":{\"1345\":2}}],[\"图一\",{\"1\":{\"1345\":1}}],[\"图这种数据结构有一些比较特殊的算法\",{\"1\":{\"1240\":1}}],[\"图中垂直线代表输入数组\",{\"1\":{\"1377\":1}}],[\"图中有\",{\"1\":{\"1236\":1}}],[\"图中每条边依附的两个顶点都分属于这两个子集\",{\"1\":{\"1234\":1}}],[\"图中的边用一个二维整数数组\",{\"1\":{\"1229\":1}}],[\"图中可能是包含环的\",{\"1\":{\"1220\":1}}],[\"图基础遍历\",{\"2\":{\"1223\":1}}],[\"图论问题\",{\"0\":{\"1429\":1}}],[\"图论\",{\"2\":{\"1222\":1,\"1231\":1,\"1238\":1,\"1243\":1}}],[\"图论基础\",{\"0\":{\"1216\":1}}],[\"图应该如何遍历\",{\"1\":{\"1220\":1}}],[\"图的信息记录于长度为\",{\"1\":{\"1230\":1}}],[\"图的遍历框架为\",{\"1\":{\"1235\":1}}],[\"图的遍历和回溯算法区别为\",{\"1\":{\"1220\":1}}],[\"图的遍历\",{\"0\":{\"1220\":1}}],[\"图的分类\",{\"0\":{\"1219\":1}}],[\"图的相关概念\",{\"0\":{\"1218\":1}}],[\"图的逻辑结构\",{\"0\":{\"1217\":1}}],[\"图是由边和节点组成的\",{\"1\":{\"1217\":1}}],[\"图片\",{\"1\":{\"567\":1}}],[\"图\",{\"1\":{\"455\":2,\"1220\":1,\"1229\":1,\"1230\":1,\"1234\":1}}],[\"图11为定义在col3上的一个辅助索引\",{\"1\":{\"414\":1}}],[\"图像处理\",{\"1\":{\"724\":1}}],[\"图像处理等\",{\"1\":{\"664\":1}}],[\"图像\",{\"1\":{\"219\":1}}],[\"示意\",{\"1\":{\"413\":1}}],[\"示例代码对比\",{\"0\":{\"1165\":1}}],[\"示例代码\",{\"0\":{\"1077\":1}}],[\"示例代码如下\",{\"1\":{\"919\":1}}],[\"示例url列表\",{\"1\":{\"924\":1}}],[\"示例\",{\"0\":{\"73\":1,\"596\":1,\"1166\":1,\"1167\":1},\"1\":{\"591\":1,\"921\":1,\"924\":1,\"1198\":3,\"1202\":3,\"1203\":5,\"1207\":3,\"1208\":2,\"1209\":2,\"1221\":2,\"1229\":2,\"1230\":2,\"1236\":2,\"1237\":3,\"1241\":2,\"1242\":3,\"1257\":3,\"1258\":2,\"1259\":2,\"1265\":2,\"1266\":2,\"1274\":8,\"1275\":5,\"1276\":5,\"1280\":5,\"1281\":2,\"1282\":2,\"1286\":3,\"1287\":2,\"1288\":2,\"1289\":3,\"1292\":15,\"1297\":6,\"1299\":6,\"1300\":5,\"1303\":10,\"1307\":2,\"1308\":3,\"1309\":3,\"1313\":2,\"1314\":2,\"1335\":2,\"1336\":3,\"1339\":2,\"1340\":3,\"1341\":2,\"1352\":2,\"1353\":2,\"1354\":2,\"1364\":2,\"1365\":3,\"1366\":2,\"1376\":2,\"1377\":2,\"1378\":3,\"1379\":2,\"1380\":2,\"1384\":3,\"1385\":2,\"1390\":2,\"1395\":3,\"1399\":3,\"1400\":3,\"1403\":2}}],[\"叶子节点存储的是聚簇索引的主键值\",{\"1\":{\"439\":1}}],[\"叶子节点之间有引用\",{\"1\":{\"345\":1}}],[\"叶节点的data域存放的是数据记录的地址\",{\"1\":{\"413\":1}}],[\"均可使用此\",{\"1\":{\"460\":1}}],[\"均满足过滤条件\",{\"1\":{\"408\":1}}],[\"均满足条件\",{\"1\":{\"408\":1}}],[\"均会触发bgsave\",{\"1\":{\"256\":1}}],[\"于是产生死锁\",{\"1\":{\"408\":1}}],[\"于同一位置运行在相同的节点上\",{\"1\":{\"130\":1}}],[\"仔细分析程序的逻辑\",{\"1\":{\"407\":1}}],[\"死锁就发生了\",{\"1\":{\"408\":1}}],[\"死锁\",{\"0\":{\"406\":1,\"1034\":1}}],[\"死亡并在\",{\"1\":{\"116\":1}}],[\"范围内最长的回文子序列的长度为dp\",{\"1\":{\"1299\":1}}],[\"范围性数据聚簇索引会更加适合\",{\"1\":{\"441\":1}}],[\"范围分别加gap\",{\"1\":{\"405\":1}}],[\"范围锁\",{\"1\":{\"405\":1,\"482\":1}}],[\"举例说明\",{\"1\":{\"1395\":1}}],[\"举例\",{\"1\":{\"1101\":2}}],[\"举例子分析下\",{\"1\":{\"405\":1}}],[\"举个例子\",{\"1\":{\"227\":3,\"579\":1,\"758\":1}}],[\"降序保证在同宽里高是最大的\",{\"1\":{\"1209\":1}}],[\"降级为recordlock\",{\"1\":{\"405\":1}}],[\"降低在树上查询的路径长度\",{\"1\":{\"1226\":1}}],[\"降低了请求发送者与接收者之间的耦合度\",{\"1\":{\"808\":1}}],[\"降低了内循环的个数\",{\"1\":{\"513\":1}}],[\"降低并行开发引起的风险\",{\"1\":{\"762\":1}}],[\"降低它们之间的耦合性\",{\"1\":{\"762\":1}}],[\"降低树的高度\",{\"1\":{\"345\":1}}],[\"降低风险\",{\"1\":{\"39\":1,\"55\":1}}],[\"降低工作效率\",{\"1\":{\"30\":1}}],[\"降低人为错误的可能性\",{\"1\":{\"25\":1}}],[\"种花问题\",{\"0\":{\"1376\":2}}],[\"种可以从\",{\"1\":{\"1314\":2}}],[\"种方法\",{\"1\":{\"1303\":2}}],[\"种方法让最终目标和为\",{\"1\":{\"1274\":1}}],[\"种\",{\"1\":{\"405\":1}}],[\"悲观锁\",{\"1\":{\"403\":1}}],[\"乐观锁\",{\"1\":{\"403\":1}}],[\"又到黄河了\",{\"1\":{\"1345\":1}}],[\"又找到了一条从节点1到节点6的路径\",{\"1\":{\"1345\":1}}],[\"又包含了支付的一些操作\",{\"1\":{\"762\":1}}],[\"又不会因为过长的等待时间而浪费过多资源\",{\"1\":{\"611\":1}}],[\"又不对kubernetes的核心逻辑产生影响\",{\"1\":{\"120\":1}}],[\"又能适应未来的变化\",{\"1\":{\"540\":1}}],[\"又能修改数据\",{\"1\":{\"404\":1}}],[\"又需要能够获得更高的系统性能\",{\"1\":{\"503\":1}}],[\"又希望数据最大化一致\",{\"1\":{\"395\":1}}],[\"企业微信等方式实现\",{\"1\":{\"617\":1}}],[\"企业场景如何选择binlog的模式\",{\"1\":{\"395\":1}}],[\"企业领导者必须成为这一变革的领导者\",{\"1\":{\"30\":1}}],[\"批量发送\",{\"1\":{\"716\":1}}],[\"批量传输数据而非逐条发送\",{\"1\":{\"716\":1}}],[\"批量修改时\",{\"1\":{\"394\":1}}],[\"批量操作\",{\"1\":{\"393\":1}}],[\"得来\",{\"1\":{\"1303\":1}}],[\"得到的字符串仍然是\",{\"1\":{\"1385\":1}}],[\"得到的价值是value\",{\"1\":{\"1270\":1,\"1275\":1}}],[\"得到a^b之后\",{\"1\":{\"1340\":1}}],[\"得到a1^a2^a3\",{\"1\":{\"1335\":1}}],[\"得到\",{\"1\":{\"1274\":4}}],[\"得到最长的宽高也就得到了最大矩形面积\",{\"1\":{\"1201\":1}}],[\"得停下来先擦掉一些记录\",{\"1\":{\"390\":1}}],[\"得不偿失\",{\"1\":{\"218\":1}}],[\"追踪代码的运行流程\",{\"1\":{\"729\":1}}],[\"追加了排他锁\",{\"1\":{\"405\":1}}],[\"追加了共享锁\",{\"1\":{\"405\":1}}],[\"追加写入\",{\"1\":{\"385\":1}}],[\"追上\",{\"1\":{\"390\":1}}],[\"未搜索到元素\",{\"1\":{\"1390\":1}}],[\"未来的某一个不同的日子\",{\"1\":{\"1292\":2}}],[\"未来的告警通知不仅需要快速准确地传达信息\",{\"1\":{\"638\":1}}],[\"未来通过purge来删除\",{\"1\":{\"389\":1}}],[\"未打补丁时\",{\"1\":{\"597\":1}}],[\"未满足条件\",{\"1\":{\"565\":1}}],[\"未知\",{\"1\":{\"534\":1}}],[\"未使用索引的查询也被记录到慢查询日志中\",{\"1\":{\"503\":1}}],[\"未明确设置\",{\"1\":{\"100\":1}}],[\"整型数组\",{\"1\":{\"1390\":1}}],[\"整数数组\",{\"1\":{\"1336\":1}}],[\"整数\",{\"1\":{\"1292\":1,\"1341\":1}}],[\"整数组成的数组\",{\"1\":{\"1275\":1}}],[\"整体中某个部分的异或和如果是y\",{\"1\":{\"1324\":1}}],[\"整体异或和如果是x\",{\"1\":{\"1324\":1}}],[\"整体思路都是一致的\",{\"1\":{\"1237\":1}}],[\"整体可以分为三个部分\",{\"1\":{\"1098\":1}}],[\"整体流程\",{\"0\":{\"356\":1}}],[\"整个tcp连接就会暂停\",{\"1\":{\"978\":1}}],[\"整个服务器挂了才会损失1秒的事务提交数据\",{\"1\":{\"388\":1}}],[\"挂了数据没有损失\",{\"1\":{\"388\":1}}],[\"挂载文件\",{\"1\":{\"77\":1}}],[\"挂载的\",{\"0\":{\"74\":1}}],[\"挂载到名为\",{\"1\":{\"69\":1}}],[\"含义\",{\"1\":{\"388\":1}}],[\"另有一个数\",{\"1\":{\"1376\":1}}],[\"另一部分却没有\",{\"1\":{\"1376\":1}}],[\"另一方面\",{\"1\":{\"800\":1}}],[\"另一种则是\",{\"1\":{\"461\":1}}],[\"另一个正确的排序是\",{\"1\":{\"1242\":1}}],[\"另一个字典need用来判断那些数字需要接着其他子序列后面\",{\"1\":{\"1198\":1}}],[\"另一个常见的导致连接用尽的原因是连接在被使用之后没有被释放\",{\"1\":{\"582\":1}}],[\"另一个事务又在该范围插入了新行\",{\"1\":{\"482\":1}}],[\"另一个用户b访问表b\",{\"1\":{\"407\":1}}],[\"另一个是磁盘上的日志文件\",{\"1\":{\"382\":1}}],[\"另外一个最右边一定是1\",{\"1\":{\"1340\":1}}],[\"另外也可以这样用\",{\"1\":{\"1093\":1}}],[\"另外\",{\"1\":{\"264\":1}}],[\"逻辑的方式来实现\",{\"1\":{\"762\":1}}],[\"逻辑不混乱\",{\"1\":{\"557\":1}}],[\"逻辑类\",{\"1\":{\"545\":1}}],[\"逻辑日志就会记录1\",{\"1\":{\"390\":1}}],[\"逻辑日志\",{\"1\":{\"380\":1,\"390\":1}}],[\"逻辑错误等问题\",{\"1\":{\"51\":1}}],[\"小挂大的意思就是说\",{\"1\":{\"1226\":1}}],[\"小挂大\",{\"1\":{\"1225\":1}}],[\"小时\",{\"1\":{\"1180\":1}}],[\"小数据用queue\",{\"1\":{\"725\":1}}],[\"小顶堆算法\",{\"0\":{\"609\":1}}],[\"小花\",{\"1\":{\"533\":2}}],[\"小于目标值\",{\"1\":{\"1390\":1}}],[\"小于或等于numwanted\",{\"1\":{\"1384\":1}}],[\"小于0\",{\"1\":{\"533\":1}}],[\"小于10\",{\"1\":{\"533\":1}}],[\"小于100\",{\"1\":{\"533\":1}}],[\"小于readview中的min\",{\"1\":{\"371\":1}}],[\"小的树合入\",{\"1\":{\"1226\":1}}],[\"小的结果集驱动大的结果集\",{\"0\":{\"520\":1}}],[\"小的数据集驱动大的数据集\",{\"1\":{\"507\":1,\"520\":1}}],[\"小步快跑\",{\"1\":{\"33\":1,\"55\":1}}],[\"版本后支持通过\",{\"1\":{\"1169\":1}}],[\"版本控制与回滚\",{\"1\":{\"641\":1}}],[\"版本兼容性\",{\"1\":{\"599\":1}}],[\"版本之间通过\",{\"1\":{\"476\":1}}],[\"版本之间通过undo\",{\"1\":{\"370\":1}}],[\"版本变更这是对于一个公司来说非常重要的一件事\",{\"1\":{\"58\":1}}],[\"检测记录的成本是\",{\"1\":{\"361\":1}}],[\"检查一个对象是否是一个已知的类型\",{\"1\":{\"986\":1}}],[\"检查双方的语言表达能力和语言接受能力\",{\"1\":{\"952\":1}}],[\"检查两个实例是否是同一个对象\",{\"1\":{\"900\":1}}],[\"检查以下几点\",{\"0\":{\"656\":1}}],[\"检查当前的oncall排班表是否合理\",{\"1\":{\"640\":1}}],[\"检查每一个告警等级是否合理\",{\"1\":{\"640\":1}}],[\"检查授权\",{\"1\":{\"124\":1}}],[\"检查安装的结果\",{\"1\":{\"96\":1}}],[\"显然我们可以使用pickle模块的dumps和loads来做到\",{\"1\":{\"894\":1}}],[\"显然它与行数有关\",{\"1\":{\"361\":1}}],[\"显著提升了代码的整洁度和健壮性\",{\"1\":{\"745\":1}}],[\"显著提升吞吐量\",{\"1\":{\"592\":1}}],[\"显式指定\",{\"1\":{\"664\":1}}],[\"显示资源列表\",{\"1\":{\"125\":1}}],[\"显示资源\",{\"1\":{\"124\":1}}],[\"显示集群信息\",{\"1\":{\"124\":1}}],[\"显示一个或多个资源\",{\"1\":{\"124\":1}}],[\"成环\",{\"1\":{\"1220\":1,\"1280\":1}}],[\"成熟稳定\",{\"1\":{\"1171\":1}}],[\"成功后服务器返回token给客户端\",{\"1\":{\"691\":1}}],[\"成功阈值\",{\"1\":{\"147\":5}}],[\"成本更低\",{\"1\":{\"507\":1}}],[\"成本最小的那个索引来执行\",{\"1\":{\"361\":1}}],[\"成本是\",{\"1\":{\"361\":1}}],[\"成本\",{\"1\":{\"361\":4}}],[\"成本和\",{\"1\":{\"361\":1}}],[\"双向\",{\"1\":{\"1229\":1}}],[\"双指针和动态规划是一般的解题方法\",{\"1\":{\"1296\":1}}],[\"双指针问题又可以进行细分为\",{\"1\":{\"1255\":1}}],[\"双指针\",{\"0\":{\"1432\":1},\"2\":{\"1200\":1,\"1261\":1,\"1268\":1,\"1302\":1,\"1305\":1,\"1382\":1,\"1397\":1}}],[\"双方都处于\",{\"1\":{\"951\":1}}],[\"双方都是通过数据库连接池来管理各个连接的\",{\"1\":{\"358\":2}}],[\"双端访问\",{\"1\":{\"912\":1}}],[\"双端队列\",{\"1\":{\"911\":1}}],[\"双写缓冲区\",{\"0\":{\"469\":1},\"1\":{\"312\":1,\"460\":1}}],[\"业务告警也是要关注的\",{\"1\":{\"629\":1}}],[\"业务告警\",{\"0\":{\"632\":1},\"1\":{\"629\":1}}],[\"业务逻辑正确性\",{\"1\":{\"632\":1}}],[\"业务逻辑\",{\"1\":{\"542\":1}}],[\"业务逻辑和数据访问混在一起\",{\"1\":{\"542\":1}}],[\"业务系统是并发的\",{\"1\":{\"358\":2}}],[\"业务清晰\",{\"1\":{\"301\":1}}],[\"交换顺序\",{\"0\":{\"1330\":1}}],[\"交易无法获得正利润\",{\"1\":{\"1292\":1}}],[\"交通灯状态机\",{\"0\":{\"563\":1}}],[\"交互信息无法被窃取\",{\"1\":{\"971\":1}}],[\"交互\",{\"1\":{\"543\":1}}],[\"交给sql查询优化器\",{\"1\":{\"356\":1}}],[\"交给sql接口\",{\"1\":{\"356\":1}}],[\"交付等环节串联为一个无缝衔接的价值流\",{\"1\":{\"37\":1}}],[\"交付\",{\"1\":{\"31\":1,\"38\":1}}],[\"交付周期冗长\",{\"1\":{\"31\":1}}],[\"属于典型的空间换时间操作\",{\"1\":{\"1036\":1}}],[\"属于创建型模式\",{\"1\":{\"767\":1}}],[\"属于当前读\",{\"1\":{\"482\":1}}],[\"属于范围查找\",{\"1\":{\"350\":1}}],[\"属于精确查找\",{\"1\":{\"350\":3}}],[\"属性可能会失效\",{\"1\":{\"845\":1,\"1007\":1,\"1048\":1}}],[\"属性同样大小的未使用空间\",{\"1\":{\"227\":1}}],[\"属性的值相同\",{\"1\":{\"227\":1}}],[\"属性的值将和\",{\"1\":{\"227\":1}}],[\"属性的值\",{\"1\":{\"227\":1}}],[\"属性将这些字节的数量\",{\"1\":{\"227\":1}}],[\"属性记录\",{\"1\":{\"227\":1}}],[\"属性中记录了\",{\"1\":{\"227\":1}}],[\"越小的数字代表越高的优先级\",{\"1\":{\"915\":1}}],[\"越往后查询越慢\",{\"1\":{\"498\":1}}],[\"越少越好\",{\"1\":{\"349\":1}}],[\"越先执行\",{\"1\":{\"349\":1}}],[\"展示了在异步编程中队列的高效应用\",{\"1\":{\"925\":1}}],[\"展示\",{\"1\":{\"349\":1}}],[\"哪些是已经被对方收到的\",{\"1\":{\"952\":1}}],[\"哪些列或者常量被用来与索引的值进行比较\",{\"1\":{\"349\":1}}],[\"哪一步都是非常重要的\",{\"1\":{\"58\":1}}],[\"列表容量是有限的\",{\"1\":{\"1022\":1}}],[\"列表或元组对象都可用于创建迭代器\",{\"1\":{\"1014\":1}}],[\"列表里的元素是元组\",{\"1\":{\"946\":1}}],[\"列表提供了append\",{\"1\":{\"908\":1}}],[\"列表作为python中使用最常见的一种数据类型\",{\"1\":{\"908\":1}}],[\"列表作为队列的简单应用\",{\"0\":{\"908\":1}}],[\"列表的切片操作\",{\"1\":{\"894\":1}}],[\"列表\",{\"0\":{\"907\":1},\"1\":{\"706\":1,\"941\":1}}],[\"列表示使用的索引的长度\",{\"1\":{\"349\":1}}],[\"列表示哪个索引被使用了\",{\"1\":{\"349\":1}}],[\"列出查询中可能被使用到的一个或多个索引\",{\"1\":{\"349\":1}}],[\"列列出了所使用的索引的长度\",{\"1\":{\"349\":1}}],[\"列列出了使用到的索引\",{\"1\":{\"349\":1}}],[\"列名\",{\"0\":{\"485\":1},\"1\":{\"325\":1,\"485\":1,\"486\":1,\"487\":2,\"488\":1}}],[\"语言中整型不会溢出\",{\"1\":{\"1393\":1}}],[\"语言传统的字符串表示\",{\"1\":{\"225\":1}}],[\"语音报警\",{\"1\":{\"638\":1}}],[\"语雀经历了长达近8小时的服务中断事件\",{\"1\":{\"623\":1}}],[\"语雀8小时的服务中断事件\",{\"1\":{\"623\":1}}],[\"语句出界判断条件通常有两种\",{\"1\":{\"1393\":1}}],[\"语句用于管理上下文语句\",{\"1\":{\"845\":1,\"1007\":1}}],[\"语句之后\",{\"1\":{\"506\":1}}],[\"语句都复用这个\",{\"1\":{\"478\":1}}],[\"语句时生成一个\",{\"1\":{\"478\":1}}],[\"语句时都生成一个\",{\"1\":{\"478\":1}}],[\"语句\",{\"1\":{\"361\":2,\"383\":1,\"405\":3,\"487\":1,\"494\":1}}],[\"语句进行解析\",{\"1\":{\"360\":1}}],[\"语句去交给\",{\"1\":{\"359\":1}}],[\"语句中\",{\"1\":{\"349\":1}}],[\"子字符串\",{\"1\":{\"1299\":1}}],[\"子集\",{\"1\":{\"1274\":1,\"1384\":1}}],[\"子串问题的第一个思路就是\",{\"1\":{\"1207\":1}}],[\"子数组\",{\"1\":{\"1207\":1}}],[\"子序列定义为\",{\"1\":{\"1299\":1}}],[\"子序列可以是不连续\",{\"0\":{\"1286\":1}}],[\"子序列\",{\"1\":{\"1207\":1,\"1286\":1,\"1308\":1,\"1314\":1}}],[\"子进程复制父进程内存空间\",{\"1\":{\"705\":1}}],[\"子进程完成rdb持久化后会发消息给主进程\",{\"1\":{\"257\":1}}],[\"子状态\",{\"1\":{\"569\":1}}],[\"子句就可以实现\",{\"1\":{\"498\":1}}],[\"子句的结果总是\",{\"1\":{\"349\":1}}],[\"子句进行条件过滤\",{\"1\":{\"349\":1}}],[\"子查询中\",{\"1\":{\"349\":2}}],[\"子查询中的第一个\",{\"1\":{\"349\":1}}],[\"外\",{\"1\":{\"1339\":2}}],[\"外面是对节点进行回溯\",{\"1\":{\"1221\":1}}],[\"外函数结束的时候发现内部函数将会用到自己的临时变量\",{\"1\":{\"992\":1}}],[\"外函数的返回值是内函数的引用\",{\"1\":{\"992\":1}}],[\"外函数把临时变量绑定给内函数\",{\"1\":{\"991\":1}}],[\"外函数返回了内函数的引用\",{\"1\":{\"991\":1}}],[\"外键软删除自定义\",{\"0\":{\"876\":1}}],[\"外的函数定义\",{\"1\":{\"718\":1}}],[\"外层表的行数\",{\"1\":{\"513\":1}}],[\"外层表行数\",{\"1\":{\"513\":1}}],[\"外层的\",{\"1\":{\"349\":1}}],[\"外部负载均衡器可以将流量路由到自动创建的\",{\"1\":{\"93\":1}}],[\"涉及到一些功能操作和实现\",{\"1\":{\"534\":1}}],[\"涉及多个\",{\"1\":{\"349\":1}}],[\"涉及企业内多个部门与角色的合作\",{\"1\":{\"30\":1}}],[\"他会立即死亡\",{\"1\":{\"1303\":1}}],[\"他会将\",{\"1\":{\"360\":1}}],[\"他必须穿过地下城并通过对抗恶魔来拯救公主\",{\"1\":{\"1303\":1}}],[\"他不需要我们去关心底层local字典内部的细节\",{\"1\":{\"855\":1}}],[\"他们互不相连\",{\"1\":{\"1225\":1}}],[\"他们保持了两个线程之间的数据的独立\",{\"1\":{\"855\":1}}],[\"他们之间的边界确实比较模糊\",{\"1\":{\"771\":1}}],[\"他的主键索引和辅助索引是相互独立的\",{\"1\":{\"440\":1}}],[\"他的根节点和支节点不保存数据区\",{\"1\":{\"345\":1}}],[\"他说\",{\"1\":{\"58\":1}}],[\"树中节点孩子的数量就是集合的大小\",{\"1\":{\"1348\":1}}],[\"树中的节点表示对应集合中的元素\",{\"1\":{\"1225\":1}}],[\"树可以看成是一个连通且\",{\"1\":{\"1230\":1}}],[\"树的高度最坏情况下可能变成\",{\"1\":{\"1225\":1}}],[\"树的高度表示最多的i\",{\"1\":{\"341\":1}}],[\"树\",{\"1\":{\"1225\":1}}],[\"树节点中的多个索引值从左到右升序排列\",{\"1\":{\"340\":1}}],[\"白色块部分是指针\",{\"1\":{\"340\":1}}],[\"灰色节点\",{\"1\":{\"339\":1}}],[\"灰度期\",{\"1\":{\"171\":1}}],[\"灰度发布\",{\"1\":{\"153\":1}}],[\"拥有四个线程的进程比拥有一个线程的进程拥有更多的cpu时间片\",{\"1\":{\"1029\":1}}],[\"拥有一个庞大而活跃的社区\",{\"1\":{\"607\":1}}],[\"拥有良好的社区支持\",{\"1\":{\"605\":1}}],[\"拥有的子节点数目最多\",{\"1\":{\"339\":1}}],[\"拥抱\",{\"1\":{\"18\":1}}],[\"颗子树\",{\"1\":{\"338\":1}}],[\"根节点至少有两个子树\",{\"1\":{\"338\":1}}],[\"根节点除外\",{\"1\":{\"338\":1}}],[\"根据\",{\"1\":{\"1390\":1}}],[\"根据url来将请求分配到指定的一个\",{\"1\":{\"1093\":1}}],[\"根据处理的情况分成四个部分\",{\"1\":{\"959\":1}}],[\"根据传入的参数动态决定创建哪种类型的对象\",{\"1\":{\"900\":1}}],[\"根据table\",{\"1\":{\"862\":1}}],[\"根据类与类之间的耦合度从弱到强排列\",{\"1\":{\"762\":1}}],[\"根据任务的不同需求\",{\"1\":{\"613\":1}}],[\"根据事件从一个状态转移到另一个状态的规则\",{\"1\":{\"561\":1}}],[\"根据促销规则\",{\"1\":{\"549\":1}}],[\"根据实际情况\",{\"1\":{\"531\":1}}],[\"根据获取到的id值向后查询\",{\"1\":{\"499\":1}}],[\"根据索引键值\",{\"1\":{\"460\":2}}],[\"根据索引的数据结构思考为什么是最左前缀原则\",{\"1\":{\"421\":1}}],[\"根据最左前缀法则\",{\"1\":{\"455\":1}}],[\"根据io成本和cpu成本计算出一条条的执行计划\",{\"1\":{\"356\":1}}],[\"根据表的业务不同\",{\"1\":{\"303\":1}}],[\"根据auto\",{\"1\":{\"262\":1}}],[\"根据探索环中已确定的相应衡量指标进行对比分析\",{\"1\":{\"21\":1}}],[\"包围\",{\"1\":{\"1354\":1}}],[\"包围着\",{\"1\":{\"1353\":1}}],[\"包\",{\"1\":{\"1093\":1}}],[\"包括骑士进入的左上角房间以及公主被监禁的右下角房间\",{\"1\":{\"1303\":1}}],[\"包括但是不局限于before\",{\"1\":{\"1108\":1}}],[\"包括queue\",{\"1\":{\"914\":1}}],[\"包括异步io操作\",{\"1\":{\"899\":1}}],[\"包括简单工厂模式\",{\"1\":{\"788\":1}}],[\"包括堆栈展开\",{\"1\":{\"758\":1}}],[\"包括服务器资源利用率\",{\"1\":{\"631\":1}}],[\"包括内存\",{\"1\":{\"607\":1}}],[\"包括固定间隔\",{\"1\":{\"606\":1}}],[\"包括了所有的列\",{\"1\":{\"486\":1}}],[\"包括两部分\",{\"1\":{\"382\":1}}],[\"包括索引\",{\"1\":{\"334\":1}}],[\"包括表结构的定义信息等\",{\"1\":{\"334\":1}}],[\"包含\",{\"1\":{\"1229\":1,\"1236\":1}}],[\"包含接受访问者访问的方法\",{\"1\":{\"1179\":1}}],[\"包含对不同类型元素的不同访问方法\",{\"1\":{\"1179\":1}}],[\"包含处理请求的实际代码\",{\"1\":{\"805\":1}}],[\"包含在其中的对数据库的操作要么全部被执行\",{\"1\":{\"425\":1}}],[\"包含运行应用程序所需的一切\",{\"1\":{\"131\":1}}],[\"包含依赖环境在内的标准\",{\"1\":{\"130\":1}}],[\"权限缓存\",{\"1\":{\"332\":1}}],[\"权限管理等关键问题\",{\"1\":{\"42\":1}}],[\"投影\",{\"1\":{\"332\":1}}],[\"选出的子集是第一项和第四项\",{\"1\":{\"1384\":1}}],[\"选出的子集是第一项\",{\"1\":{\"1384\":2}}],[\"选取\",{\"1\":{\"332\":1}}],[\"选择下标\",{\"1\":{\"1365\":3}}],[\"选择某个下标\",{\"1\":{\"1365\":1}}],[\"选择列表\",{\"1\":{\"1348\":1}}],[\"选择其中\",{\"1\":{\"1282\":1}}],[\"选择大小为\",{\"1\":{\"1282\":1}}],[\"选择任意一个\",{\"1\":{\"1281\":1}}],[\"选择\",{\"1\":{\"1172\":2,\"1348\":1}}],[\"选择适合高并发的框架\",{\"1\":{\"815\":1}}],[\"选择可用的最佳折扣\",{\"1\":{\"776\":1}}],[\"选择合适的ipc方式\",{\"1\":{\"725\":1}}],[\"选择合适的监控指标对于准确反映系统健康状况至关重要\",{\"1\":{\"625\":1}}],[\"选择合适的连接池类型取决于应用的特性和需求\",{\"1\":{\"579\":1}}],[\"选择性补丁\",{\"0\":{\"595\":1}}],[\"选择联合索引时\",{\"1\":{\"507\":2,\"525\":2}}],[\"选择优化分方向有三个\",{\"1\":{\"507\":1}}],[\"选择默认的语句模式\",{\"1\":{\"395\":1}}],[\"选择符\",{\"0\":{\"156\":1}}],[\"选择器\",{\"1\":{\"124\":1}}],[\"选择该值时服务只能够在集群内部访问\",{\"1\":{\"93\":1}}],[\"选择一个关键项目或团队试点\",{\"1\":{\"33\":1}}],[\"视觉污染\",{\"1\":{\"971\":1}}],[\"视图函数为值的字典列表\",{\"1\":{\"1063\":1}}],[\"视图处理函数\",{\"1\":{\"1060\":1}}],[\"视图类\",{\"0\":{\"867\":1,\"888\":1}}],[\"视图\",{\"1\":{\"332\":1}}],[\"视频\",{\"1\":{\"227\":1,\"966\":1}}],[\"客户端向服务端发送\",{\"1\":{\"954\":1}}],[\"客户端在经过\",{\"1\":{\"953\":1}}],[\"客户端在使用\",{\"1\":{\"769\":1}}],[\"客户端收到服务端的\",{\"1\":{\"953\":2}}],[\"客户端收到数据后保存在客户端\",{\"1\":{\"691\":1}}],[\"客户端打算关闭连接\",{\"1\":{\"953\":1}}],[\"客户端主动关闭连接\",{\"1\":{\"953\":1}}],[\"客户端没有接收到\",{\"1\":{\"952\":1}}],[\"客户端和服务端就可以相互发送数据了\",{\"1\":{\"951\":1}}],[\"客户端处于\",{\"1\":{\"951\":1}}],[\"客户端会随机初始化序号\",{\"1\":{\"951\":1}}],[\"客户端会发送一个http请求到服务器端\",{\"1\":{\"689\":1}}],[\"客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链\",{\"1\":{\"805\":1}}],[\"客户端与其接口不兼容\",{\"1\":{\"799\":1}}],[\"客户端接口\",{\"1\":{\"799\":1}}],[\"客户端\",{\"1\":{\"799\":1}}],[\"客户端不关心对象的创建过程\",{\"1\":{\"765\":1}}],[\"客户端再次访问服务器\",{\"1\":{\"691\":1}}],[\"客户端访问服务器的流程如下\",{\"1\":{\"689\":1}}],[\"客户端连接器\",{\"1\":{\"331\":1}}],[\"客户体验影响\",{\"1\":{\"632\":1}}],[\"客户与市场团队需及时反馈用户需求与使用数据\",{\"1\":{\"31\":1}}],[\"接到已经存在的子序列后面\",{\"1\":{\"1198\":1}}],[\"接受访问\",{\"1\":{\"1180\":1}}],[\"接受请求的线程呢\",{\"1\":{\"358\":2}}],[\"接收方没有空间\",{\"1\":{\"959\":1}}],[\"接收方还有空间\",{\"1\":{\"959\":1}}],[\"接收方可以根据数据包的序列号按序接收\",{\"1\":{\"952\":1}}],[\"接收方可以去除重复的数据\",{\"1\":{\"952\":1}}],[\"接收端主机会返回一个确认应答消息\",{\"1\":{\"958\":1}}],[\"接收网络响应等\",{\"1\":{\"898\":1}}],[\"接着也找到终点6\",{\"1\":{\"1345\":1}}],[\"接着要删除两个\",{\"1\":{\"1281\":1}}],[\"接着偷窃\",{\"1\":{\"1280\":1}}],[\"接着执行实例属性\",{\"1\":{\"1057\":1}}],[\"接着服务端进入\",{\"1\":{\"953\":1}}],[\"接着把\",{\"1\":{\"951\":1}}],[\"接着是20个字节的偏移量\",{\"1\":{\"327\":1}}],[\"接下来就是字母序最小\",{\"1\":{\"1380\":1}}],[\"接下来配置信息\",{\"1\":{\"1060\":1}}],[\"接下来我们就进入源码来分析flask提供的自定义扩展点\",{\"1\":{\"1108\":1}}],[\"接下来我们就来好好看看flask为什么要使用contextvar\",{\"1\":{\"1045\":1}}],[\"接下来我们一般的flask程序如下\",{\"1\":{\"1059\":1}}],[\"接下来我们使用个例子来说明如何使用生成器函数实现debug\",{\"1\":{\"735\":1}}],[\"接下来是任务a\",{\"1\":{\"919\":1}}],[\"接下来是怎么处理的呢\",{\"1\":{\"455\":1}}],[\"接下来来继续讲解之前这张图右下角的部分\",{\"1\":{\"856\":1}}],[\"接下来启动所有的应用容器\",{\"1\":{\"142\":1}}],[\"接口请求速度\",{\"1\":{\"814\":1}}],[\"接口的处理速度\",{\"1\":{\"813\":1}}],[\"接口的安全性要求较高\",{\"1\":{\"770\":1}}],[\"接口是所有具体策略的通用接口\",{\"1\":{\"776\":1}}],[\"接口是负责创建一个相关对象的工厂\",{\"1\":{\"767\":1}}],[\"接口隔离原则主要约束接口\",{\"1\":{\"762\":1}}],[\"接口隔离原则和单一职责都是为了提高类的内聚性\",{\"1\":{\"762\":1}}],[\"接口隔离原则与单一职责原则的区别\",{\"1\":{\"762\":1}}],[\"接口隔离原则\",{\"1\":{\"762\":1}}],[\"接口清晰\",{\"1\":{\"543\":1}}],[\"接口传递过来的\",{\"1\":{\"360\":1}}],[\"接口去处理\",{\"1\":{\"359\":1}}],[\"接口\",{\"0\":{\"359\":1,\"813\":1},\"1\":{\"771\":1,\"1171\":1}}],[\"接口屏蔽了不同存储引擎之间的差异\",{\"1\":{\"333\":1}}],[\"唯一可行的方案是让\",{\"1\":{\"1300\":1}}],[\"唯一可能的三元组和为\",{\"1\":{\"1257\":1}}],[\"唯一可能的三元组和不为\",{\"1\":{\"1257\":1}}],[\"唯一性太差的字段主要是指哪些呢\",{\"1\":{\"507\":1,\"525\":1}}],[\"唯一性太差的字段不适合单独创建索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"唯一索引\",{\"0\":{\"448\":1}}],[\"唯一索引等约束\",{\"1\":{\"425\":1}}],[\"唯一键加锁\",{\"1\":{\"405\":1}}],[\"唯一标识一条记录\",{\"1\":{\"325\":1}}],[\"唯一的网络标识\",{\"1\":{\"191\":1}}],[\"否\",{\"1\":{\"325\":1}}],[\"否则为0\",{\"1\":{\"1322\":1,\"1323\":1}}],[\"否则为false\",{\"1\":{\"1299\":1}}],[\"否则返回\",{\"1\":{\"1229\":1,\"1237\":1,\"1300\":1,\"1366\":1,\"1390\":1,\"1395\":2}}],[\"否则会漏掉记录起始点的遍历\",{\"1\":{\"1220\":1}}],[\"否则会使组织成员在设计方案时倾向于\",{\"1\":{\"30\":1}}],[\"否则补丁可能无效\",{\"1\":{\"594\":1}}],[\"否则最先被程序读入的空字符将被误认为是字符串结尾\",{\"1\":{\"227\":1}}],[\"否则\",{\"1\":{\"219\":1,\"405\":1,\"1198\":1,\"1207\":1,\"1236\":1,\"1241\":1,\"1289\":1,\"1297\":2,\"1395\":2}}],[\"否则这些任务永远完不了\",{\"1\":{\"198\":1}}],[\"否则请求会被\",{\"1\":{\"156\":1}}],[\"否则将service负载均衡中剔除\",{\"1\":{\"146\":1}}],[\"值的范围\",{\"1\":{\"1395\":1}}],[\"值得注意的是\",{\"1\":{\"627\":1}}],[\"值\",{\"1\":{\"461\":1,\"477\":1}}],[\"值在readview的min\",{\"1\":{\"371\":1}}],[\"值越大\",{\"1\":{\"349\":1}}],[\"值会递增\",{\"1\":{\"349\":1}}],[\"值为\",{\"1\":{\"349\":1}}],[\"值为正数说明下一条记录在当前记录后面\",{\"1\":{\"324\":1}}],[\"值为0\",{\"1\":{\"324\":1}}],[\"值对\",{\"1\":{\"116\":1}}],[\"预留位2\",{\"1\":{\"324\":1}}],[\"预留位1\",{\"1\":{\"324\":1}}],[\"预生产环境\",{\"1\":{\"40\":1}}],[\"描述\",{\"1\":{\"324\":1,\"325\":1,\"1033\":1,\"1035\":1}}],[\"描述了其他类与客户端代码合作时必须遵循的协议\",{\"1\":{\"799\":1}}],[\"描述了该对象在\",{\"1\":{\"113\":1}}],[\"描述了您对该对象所期望的\",{\"1\":{\"113\":1}}],[\"概是800字节\",{\"1\":{\"318\":1}}],[\"概念\",{\"0\":{\"129\":1,\"169\":1,\"368\":1,\"455\":1,\"1255\":1,\"1263\":1},\"1\":{\"976\":1}}],[\"大体可以总结为以下方面但是绝对不全面\",{\"1\":{\"1359\":1}}],[\"大规模\",{\"1\":{\"1142\":1}}],[\"大部分线程长时间处于闲置状态时\",{\"1\":{\"1036\":1}}],[\"大部分关系型数据库索引则是使用b+树实现\",{\"1\":{\"342\":1}}],[\"大大简化了异步编程模型\",{\"1\":{\"923\":1}}],[\"大家耳熟能详的\",{\"1\":{\"762\":1}}],[\"大数据用共享内存\",{\"1\":{\"725\":1}}],[\"大对象复制可能导致oom\",{\"1\":{\"713\":1}}],[\"大材小用\",{\"1\":{\"606\":1}}],[\"大于目标值\",{\"1\":{\"1390\":1}}],[\"大于\",{\"1\":{\"1207\":1,\"1274\":1}}],[\"大于100\",{\"1\":{\"533\":1}}],[\"大于或等于readview中的max\",{\"1\":{\"371\":1}}],[\"大约\",{\"1\":{\"388\":1}}],[\"大小\",{\"1\":{\"324\":1,\"513\":1}}],[\"大\",{\"1\":{\"318\":1}}],[\"大量的真实删除会造成数据库的索引稀疏\",{\"1\":{\"877\":1}}],[\"大量的请求同时查询一个\",{\"1\":{\"249\":1}}],[\"大量数据使用粗粒度\",{\"1\":{\"264\":1}}],[\"逐个判断每个字符\",{\"1\":{\"1259\":1}}],[\"逐个执行任务\",{\"1\":{\"667\":1}}],[\"逐个与内层表的所有行数据进行比较来获取结果\",{\"1\":{\"513\":1}}],[\"逐个回表\",{\"1\":{\"455\":1}}],[\"逐行进行比较\",{\"1\":{\"315\":1,\"316\":1,\"462\":1,\"463\":1}}],[\"逐步替换旧实例\",{\"1\":{\"556\":1}}],[\"逐步引入流量至新集群直至\",{\"1\":{\"169\":1}}],[\"逐步集成\",{\"1\":{\"55\":1}}],[\"推导出来\",{\"1\":{\"1271\":1}}],[\"推荐\",{\"1\":{\"652\":1,\"668\":1}}],[\"推荐使用innodb\",{\"1\":{\"311\":1}}],[\"推进一下\",{\"1\":{\"390\":1}}],[\"推动代码质量的持续改进\",{\"1\":{\"51\":1}}],[\"推动软件开发向更高的层次发展\",{\"1\":{\"26\":1}}],[\"硬件设备内存较大\",{\"1\":{\"310\":1}}],[\"硬件资源等的瓶颈\",{\"1\":{\"302\":1}}],[\"行长度\",{\"1\":{\"536\":1}}],[\"行\",{\"1\":{\"513\":2}}],[\"行溢出\",{\"0\":{\"466\":1},\"2\":{\"472\":1}}],[\"行数据和索引放在一起\",{\"1\":{\"441\":1}}],[\"行锁只能锁住行\",{\"1\":{\"482\":1}}],[\"行锁是如何实现\",{\"0\":{\"405\":1}}],[\"行锁的是mysql锁中粒度最小的一种锁\",{\"1\":{\"404\":1}}],[\"行锁分为共享锁分为共享锁和排它锁\",{\"1\":{\"404\":1}}],[\"行级锁死锁\",{\"0\":{\"408\":1}}],[\"行级锁\",{\"1\":{\"402\":1}}],[\"行级锁定对高并发有很好的适应能力\",{\"1\":{\"310\":1}}],[\"行记录的三个隐藏字段\",{\"0\":{\"369\":1}}],[\"行记录格式\",{\"0\":{\"322\":1}}],[\"行id\",{\"1\":{\"325\":1}}],[\"行为驱动开发\",{\"1\":{\"52\":1}}],[\"非水平线\",{\"1\":{\"1309\":1}}],[\"非连续子序列\",{\"0\":{\"1308\":1}}],[\"非空\",{\"1\":{\"1274\":1,\"1336\":1}}],[\"非严格递增排列\",{\"1\":{\"1266\":1}}],[\"非常方便直观\",{\"1\":{\"1234\":1}}],[\"非常实用\",{\"1\":{\"1225\":1}}],[\"非常适合实现生产者\",{\"1\":{\"924\":1}}],[\"非常适合在调试过程中查看中间状态\",{\"1\":{\"734\":1,\"735\":1}}],[\"非常适合于\",{\"1\":{\"690\":1}}],[\"非常适合用于需要实时更新的应用场景\",{\"1\":{\"673\":1}}],[\"非常适合根据\",{\"1\":{\"461\":1}}],[\"非常适合简单的查询操作\",{\"1\":{\"434\":1}}],[\"非常适合定时备份\",{\"1\":{\"258\":1}}],[\"非递减顺序\",{\"1\":{\"1198\":1}}],[\"非阻塞\",{\"1\":{\"598\":1,\"665\":1}}],[\"非阻塞模式\",{\"1\":{\"598\":1}}],[\"非阻塞操作\",{\"1\":{\"591\":1}}],[\"非阻塞的\",{\"1\":{\"590\":1,\"682\":1}}],[\"非阻塞的协程操作\",{\"1\":{\"588\":1}}],[\"非单调的主键会造成在插入新记录时数据文件为了维持b+tree的特性而频繁的分裂调整\",{\"1\":{\"414\":1}}],[\"非聚集\",{\"1\":{\"413\":1}}],[\"非聚簇索引放的是索引值和主键值\",{\"1\":{\"419\":1}}],[\"非聚簇索引\",{\"0\":{\"419\":1,\"440\":1},\"1\":{\"308\":1},\"2\":{\"445\":1}}],[\"非唯一键加锁\",{\"1\":{\"405\":1}}],[\"非叶子节点只存储键值信息\",{\"1\":{\"344\":1}}],[\"锁是python提供给我们能够自行操控线程切换的一种手段\",{\"1\":{\"1031\":1}}],[\"锁表导致查询一直处于等待状态\",{\"1\":{\"506\":1}}],[\"锁住了表b\",{\"1\":{\"407\":1}}],[\"锁住了表a\",{\"1\":{\"407\":1}}],[\"锁\",{\"1\":{\"405\":1,\"482\":5}}],[\"锁兼容\",{\"1\":{\"404\":1}}],[\"锁的分类\",{\"0\":{\"399\":1,\"1032\":1}}],[\"锁定索引记录间隙\",{\"1\":{\"405\":1,\"482\":1}}],[\"锁定单个行记录的锁\",{\"1\":{\"405\":1,\"482\":1}}],[\"锁定粒度界于表锁和行锁之间\",{\"1\":{\"402\":1}}],[\"锁定粒度最小\",{\"1\":{\"402\":1}}],[\"锁定粒度大\",{\"1\":{\"402\":1}}],[\"锁定机制问题\",{\"1\":{\"309\":1}}],[\"锁定整张表\",{\"1\":{\"308\":1}}],[\"锁定指定记录\",{\"1\":{\"308\":1}}],[\"锁机制\",{\"1\":{\"308\":1}}],[\"适配器能为被封装对象提供不同的接口\",{\"1\":{\"800\":1}}],[\"适配器则无法实现\",{\"1\":{\"800\":1}}],[\"适配器可以对已有对象的接口进行修改\",{\"1\":{\"800\":1}}],[\"适配器接受客户端通过适配器接口发起的调用\",{\"1\":{\"799\":1}}],[\"适配器\",{\"1\":{\"797\":1,\"799\":1}}],[\"适配器模式通常在已有程序中使用\",{\"1\":{\"800\":1}}],[\"适配器模式结构\",{\"0\":{\"799\":1}}],[\"适配器模式主要解决了以下几种情况下的问题\",{\"1\":{\"798\":1}}],[\"适配器模式的核心思想在于创建一个新的类或对象\",{\"1\":{\"797\":1}}],[\"适配器模式是一种结构型设计模式\",{\"1\":{\"797\":1}}],[\"适配器模式\",{\"0\":{\"796\":1},\"1\":{\"797\":1},\"2\":{\"802\":1}}],[\"适合传统同步场景\",{\"1\":{\"1173\":1}}],[\"适合高并发和实时协议\",{\"1\":{\"1171\":1}}],[\"适合高负载场景\",{\"1\":{\"1163\":1}}],[\"适合同步应用\",{\"1\":{\"1171\":1}}],[\"适合中小型应用或低延迟要求的场景\",{\"1\":{\"1163\":1}}],[\"适合比较固定模式的方式\",{\"1\":{\"806\":1}}],[\"适合对外部用户或下游代码解释错误原因\",{\"1\":{\"756\":1}}],[\"适合批量数据而非高频交互\",{\"1\":{\"713\":1}}],[\"适合异步任务\",{\"1\":{\"709\":1}}],[\"适合简单任务\",{\"1\":{\"708\":1}}],[\"适合cpu密集型任务\",{\"1\":{\"704\":1}}],[\"适合\",{\"1\":{\"666\":1}}],[\"适合需要频繁等待外部服务的任务\",{\"1\":{\"665\":1}}],[\"适合需要高隔离性的任务\",{\"1\":{\"664\":1}}],[\"适合快速构建和管理复杂的业务逻辑\",{\"1\":{\"574\":1}}],[\"适合排序\",{\"1\":{\"441\":1}}],[\"适合等值查询\",{\"1\":{\"315\":1,\"462\":1}}],[\"适合大量的select查询操作\",{\"1\":{\"308\":1}}],[\"适合大量insert或update操作\",{\"1\":{\"308\":1}}],[\"适用场景\",{\"0\":{\"309\":1,\"310\":1,\"724\":1},\"1\":{\"607\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"710\":1,\"765\":1,\"1161\":2}}],[\"适用于树的\",{\"1\":{\"1217\":1}}],[\"适用于异步编程\",{\"1\":{\"899\":1}}],[\"适用于对实时性要求高\",{\"1\":{\"675\":1}}],[\"适用于需要数据完整性的场景\",{\"1\":{\"675\":1}}],[\"适用于大型项目中需要高性能\",{\"1\":{\"607\":1}}],[\"适用于大多数情况\",{\"1\":{\"579\":1}}],[\"适用于一次性操作或者每次操作都需要不同连接的场景\",{\"1\":{\"579\":1}}],[\"适用于\",{\"1\":{\"143\":1}}],[\"适用于该\",{\"1\":{\"97\":1}}],[\"具备本地缓存执行计划的能力\",{\"1\":{\"433\":1}}],[\"具体来说\",{\"1\":{\"1341\":1}}],[\"具体实现需要keywordcreator调用create方法\",{\"1\":{\"1187\":1}}],[\"具体实现可以将其作为单独的\",{\"1\":{\"100\":1}}],[\"具体我们可以用int来作为一个例子\",{\"1\":{\"902\":1}}],[\"具体请参考官网\",{\"1\":{\"849\":1,\"1010\":1}}],[\"具体请看cookie详解\",{\"1\":{\"689\":1}}],[\"具体处理者\",{\"1\":{\"805\":1}}],[\"具体策略b\",{\"1\":{\"776\":1}}],[\"具体策略a\",{\"1\":{\"776\":1}}],[\"具体策略\",{\"1\":{\"776\":1}}],[\"具体区别如下\",{\"1\":{\"771\":1}}],[\"具体操作\",{\"0\":{\"519\":1}}],[\"具体的品牌工厂如\",{\"1\":{\"792\":1}}],[\"具体的实现方式\",{\"1\":{\"415\":1}}],[\"具体的列如下\",{\"1\":{\"325\":1}}],[\"具体可以看mysql\",{\"1\":{\"360\":1}}],[\"具体见\",{\"1\":{\"349\":1}}],[\"具有不同开始位置或结束位置的子串\",{\"1\":{\"1299\":1}}],[\"具有惰性计算特点的序列称为惰性序列\",{\"1\":{\"893\":1}}],[\"具有较好的事务特性\",{\"1\":{\"310\":1}}],[\"具有安全性和完整性\",{\"1\":{\"308\":1}}],[\"排除法\",{\"1\":{\"1394\":1}}],[\"排列数组\",{\"1\":{\"1399\":1}}],[\"排列\",{\"1\":{\"1276\":1}}],[\"排列问题是先背包后物品\",{\"1\":{\"1276\":1}}],[\"排列问题的完全背包\",{\"1\":{\"1275\":1}}],[\"排列问题先背包再物品\",{\"1\":{\"1275\":1}}],[\"排列的整数数组\",{\"1\":{\"1198\":1}}],[\"排列无指定顺序\",{\"1\":{\"946\":1}}],[\"排它锁互斥共享锁和其它排它锁\",{\"1\":{\"404\":1}}],[\"排他锁\",{\"1\":{\"401\":1,\"404\":1}}],[\"排序字典序最小且长度最长\",{\"1\":{\"1380\":1}}],[\"排序是需要关心顺序的\",{\"1\":{\"1275\":1}}],[\"排序是不是有问题\",{\"1\":{\"507\":1}}],[\"排序操作用的比较多\",{\"1\":{\"507\":1,\"521\":1}}],[\"排序\",{\"1\":{\"304\":1}}],[\"排水节点\",{\"1\":{\"124\":1}}],[\"事实上总有一定数目的数据库连接被保存在这个连接池中\",{\"1\":{\"578\":1}}],[\"事物\",{\"1\":{\"482\":1}}],[\"事务\",{\"1\":{\"476\":1}}],[\"事务间天然保证隔离性\",{\"1\":{\"425\":1}}],[\"事务的持久化是为了应对系统崩溃造成的数据丢失\",{\"1\":{\"425\":1}}],[\"事务的持久性保证依赖的日志文件\",{\"1\":{\"425\":1}}],[\"事务应确保数据库的状态从一个一致状态转变为另一个一致状态\",{\"1\":{\"425\":1}}],[\"事务作为一个整体被执行\",{\"1\":{\"425\":1}}],[\"事务2\",{\"1\":{\"408\":1}}],[\"事务1\",{\"1\":{\"408\":1}}],[\"事务读取的都是开启事务时的最新提交行版本\",{\"1\":{\"389\":1}}],[\"事务每次提交都会将\",{\"1\":{\"388\":1}}],[\"事务提交时不会将\",{\"1\":{\"388\":1}}],[\"事务开始之前\",{\"1\":{\"379\":1}}],[\"事务对于某条记录做增删改操作时\",{\"1\":{\"369\":1}}],[\"事务id\",{\"1\":{\"325\":1}}],[\"事务和外键\",{\"1\":{\"308\":1}}],[\"事务一致性问题\",{\"1\":{\"304\":1}}],[\"事件锁是基于条件锁来做的\",{\"1\":{\"1035\":1}}],[\"事件锁\",{\"1\":{\"1032\":1}}],[\"事件驱动系统\",{\"1\":{\"918\":1}}],[\"事件循环是异步io编程的基础\",{\"1\":{\"899\":1}}],[\"事件循环是一个在程序中运行的循环\",{\"1\":{\"899\":1}}],[\"事件循环负责管理异步任务的执行顺序\",{\"1\":{\"899\":1}}],[\"事件循环负责选择要执行的任务\",{\"1\":{\"899\":1}}],[\"事件循环\",{\"0\":{\"1041\":1},\"1\":{\"899\":1}}],[\"事件循环等机制来处理操作的结果\",{\"1\":{\"898\":1}}],[\"事件通知等方式获取io操作的结果\",{\"1\":{\"898\":1}}],[\"事件与转换规则\",{\"1\":{\"563\":1}}],[\"事件和转换规则来定义系统的逻辑流程\",{\"1\":{\"560\":1}}],[\"事件要完成的实际事件\",{\"1\":{\"270\":1}}],[\"事件做出反应\",{\"1\":{\"270\":1}}],[\"事件处理器\",{\"1\":{\"268\":1}}],[\"事件处理程序结束或者\",{\"1\":{\"135\":1}}],[\"事件处理程序结束之后\",{\"1\":{\"135\":1}}],[\"事件处理程序相对于容器中的进程来说是异步的\",{\"1\":{\"135\":1}}],[\"事件处理程序在容器的\",{\"1\":{\"135\":1}}],[\"事件分配器分发给事件处理器\",{\"1\":{\"267\":1}}],[\"事件\",{\"1\":{\"135\":2,\"270\":1,\"561\":1,\"572\":1}}],[\"突破gil限制\",{\"1\":{\"712\":1}}],[\"突破io\",{\"1\":{\"302\":1}}],[\"突然缓存失效\",{\"1\":{\"249\":1}}],[\"维护指向具体策略的引用\",{\"1\":{\"776\":1}}],[\"维护困难\",{\"1\":{\"557\":1}}],[\"维护聚簇索引的成本比较昂贵\",{\"1\":{\"442\":1}}],[\"维护\",{\"1\":{\"301\":1}}],[\"维护成本相对要高\",{\"1\":{\"234\":1}}],[\"产生幻读的原因是\",{\"1\":{\"482\":1}}],[\"产生原因3\",{\"1\":{\"408\":1}}],[\"产生原因2\",{\"1\":{\"408\":1}}],[\"产生原因1\",{\"1\":{\"408\":1}}],[\"产生原因\",{\"1\":{\"407\":1}}],[\"产生的binlog文件会很大\",{\"1\":{\"301\":1}}],[\"产品\",{\"1\":{\"916\":2}}],[\"产品经理需理解技术债务对交付的影响\",{\"1\":{\"32\":1}}],[\"产品团队需明确需求并优先级排序\",{\"1\":{\"31\":1}}],[\"垂直拆分没有彻底解决单表数据量过大的问题\",{\"1\":{\"301\":1}}],[\"垂直拆分带来的一些提升\",{\"1\":{\"301\":1}}],[\"垂直切分是指按照业务的不同将表进行分类\",{\"1\":{\"300\":1}}],[\"垂直分表\",{\"0\":{\"301\":1},\"1\":{\"299\":1,\"303\":1}}],[\"垂直分库一定程度的提高访问性能\",{\"1\":{\"301\":1}}],[\"垂直分库\",{\"0\":{\"300\":1},\"1\":{\"299\":1,\"303\":1}}],[\"确认服务端和客户端的通信能力\",{\"1\":{\"952\":1}}],[\"确认应答号\",{\"1\":{\"951\":2}}],[\"确认告警阈值\",{\"1\":{\"640\":1}}],[\"确定查找范围\",{\"1\":{\"1390\":1}}],[\"确定要查找的有序数据集合\",{\"1\":{\"1390\":1}}],[\"确定递推公式\",{\"1\":{\"1299\":1}}],[\"确定递归公式\",{\"1\":{\"1271\":1}}],[\"确定\",{\"1\":{\"1287\":1}}],[\"确定dp数据含义\",{\"1\":{\"1299\":1}}],[\"确定dp数组含义\",{\"1\":{\"1286\":1,\"1292\":1,\"1299\":1,\"1303\":2,\"1307\":1}}],[\"确定dp数组的函数到第i家能获取到的金额总和dp\",{\"1\":{\"1280\":1}}],[\"确定dp数组的含义\",{\"1\":{\"1271\":1}}],[\"确定dp公式dp\",{\"1\":{\"1280\":1}}],[\"确定遍历顺序\",{\"1\":{\"1207\":1,\"1299\":1}}],[\"确定下个处理者存在后再将请求传递给它\",{\"1\":{\"805\":1}}],[\"确定我们的数据量是不是够大\",{\"1\":{\"299\":1}}],[\"确实效率更高\",{\"1\":{\"345\":1}}],[\"确保其中的元素按照升序或者降序排列\",{\"1\":{\"1390\":1}}],[\"确保线程池与具体的任务无关\",{\"1\":{\"1036\":1}}],[\"确保了在多线程环境下的安全访问\",{\"1\":{\"914\":1}}],[\"确保了在两端执行插入和删除操作的时间复杂度均为o\",{\"1\":{\"911\":1}}],[\"确保变量或表达式的预期状态\",{\"1\":{\"756\":1}}],[\"确保输出2\",{\"1\":{\"717\":1}}],[\"确保redis\",{\"1\":{\"656\":1}}],[\"确保在必要时可以快速回滚到之前的稳定版本\",{\"1\":{\"641\":1}}],[\"确保在更新期间可用的\",{\"1\":{\"159\":1}}],[\"确保及时发现并通知相关人员\",{\"1\":{\"641\":1}}],[\"确保异常信息能在不同团队间迅速传递\",{\"1\":{\"640\":1}}],[\"确保所有下载任务完成后才结束程序\",{\"1\":{\"925\":1}}],[\"确保所有交易都是合法且准确无误的\",{\"1\":{\"632\":1}}],[\"确保所有开发人员在相同环境中构建代码\",{\"1\":{\"52\":1}}],[\"确保ci\",{\"1\":{\"630\":1}}],[\"确保只有经过授权之后才能继续执行\",{\"1\":{\"616\":1}}],[\"确保交付可靠\",{\"1\":{\"557\":1}}],[\"确保交付的不仅是功能\",{\"1\":{\"45\":1}}],[\"确保出现问题时能快速回退到稳定版本\",{\"1\":{\"556\":1}}],[\"确保系统在压力下稳定\",{\"1\":{\"552\":1}}],[\"确保索引记录的间隙不变\",{\"1\":{\"405\":1,\"482\":1}}],[\"确保开发\",{\"1\":{\"57\":1}}],[\"确保每次部署的环境一致性\",{\"1\":{\"44\":1}}],[\"确保不同环境\",{\"1\":{\"39\":1}}],[\"确保它们能够被实际应用\",{\"1\":{\"20\":1}}],[\"把可以通向边缘部分的\",{\"1\":{\"1354\":1}}],[\"把n当成一个二进制数来遍历\",{\"1\":{\"1341\":1}}],[\"把他们存起来等待使用\",{\"1\":{\"1189\":1}}],[\"把参数放进来就是执行关键字了\",{\"1\":{\"1188\":1}}],[\"把任务派发到这个线程中运行\",{\"1\":{\"1036\":1}}],[\"把线程id号作为key保存了起来\",{\"1\":{\"854\":1}}],[\"把对象的创建和使用过程分开\",{\"1\":{\"767\":1}}],[\"把对象的创建和业务逻辑层分开\",{\"1\":{\"765\":1}}],[\"把binlog的内容发送到从库\",{\"1\":{\"494\":1}}],[\"把之前对缓存页做的修改都给回滚了就可以了\",{\"1\":{\"425\":1}}],[\"把行级锁上升为全表记录锁定\",{\"1\":{\"408\":1}}],[\"把\",{\"1\":{\"390\":1,\"977\":1}}],[\"把一个类作为一个迭代器使用需要在类中实现两个方法\",{\"1\":{\"1015\":1}}],[\"把一个page页中的一个数据从1改为2\",{\"1\":{\"390\":1}}],[\"把一张表的数据按照一定规则\",{\"1\":{\"303\":2}}],[\"把瘦高的树变的矮胖\",{\"1\":{\"338\":1}}],[\"把记录在堆中的相对位置给定一个编号\",{\"1\":{\"324\":1}}],[\"把所有变长类型的列的长度都存放在记录的开头部位形成一个列表\",{\"1\":{\"323\":1}}],[\"把红包从redis中出列\",{\"1\":{\"295\":1}}],[\"把旧值写回redis\",{\"1\":{\"283\":1}}],[\"记为\",{\"1\":{\"1241\":1,\"1242\":1}}],[\"记得之前flask实现线程隔离的时候是使用localstock来实现的\",{\"1\":{\"1045\":1}}],[\"记红包使用hash\",{\"1\":{\"295\":1}}],[\"记红包\",{\"1\":{\"295\":1}}],[\"记录答案\",{\"1\":{\"1354\":1}}],[\"记录从起点到当前节点的路径\",{\"1\":{\"1348\":1}}],[\"记录被遍历过的节点\",{\"1\":{\"1348\":1}}],[\"记录蛇经过过的格子\",{\"1\":{\"1220\":1}}],[\"记录哪些元素可以被接到其他子序列后面\",{\"1\":{\"1198\":1}}],[\"记录日志\",{\"1\":{\"771\":1}}],[\"记录每次发布的代码和配置信息\",{\"1\":{\"641\":1}}],[\"记录每一条修改数据的sql语句\",{\"1\":{\"394\":1}}],[\"记录所有发生的告警事件及其处理过程是非常重要的\",{\"1\":{\"637\":1}}],[\"记录所有执行时间超时的查询sql\",{\"1\":{\"334\":1}}],[\"记录和回顾告警历史\",{\"0\":{\"637\":1}}],[\"记录和对应值\",{\"1\":{\"93\":1}}],[\"记录下开始时间\",{\"1\":{\"619\":1}}],[\"记录用户操作\",{\"1\":{\"550\":1}}],[\"记录用户的id和红包金额\",{\"1\":{\"295\":1}}],[\"记录关键信息\",{\"1\":{\"550\":1}}],[\"记录最近一次更新这条数据的事务\",{\"1\":{\"476\":1}}],[\"记录到redo\",{\"1\":{\"425\":1}}],[\"记录锁+范围锁\",{\"1\":{\"405\":1,\"482\":1}}],[\"记录锁和间隙锁组合\",{\"1\":{\"405\":1,\"482\":1}}],[\"记录锁\",{\"1\":{\"405\":1,\"482\":1}}],[\"记录undo这个操作本身也会有对应的redo\",{\"1\":{\"389\":1}}],[\"记录的不是单条sql语句\",{\"1\":{\"394\":1}}],[\"记录的是数据库中物理页的情况\",{\"1\":{\"425\":1}}],[\"记录的是每一个page页面中具体数据是怎么变动的\",{\"1\":{\"390\":1}}],[\"记录的是每一个page页中具体存储的值是多少\",{\"1\":{\"390\":1}}],[\"记录的是原始逻辑\",{\"1\":{\"390\":1}}],[\"记录的是\",{\"1\":{\"390\":1}}],[\"记录的是一条sql语句的原始逻辑\",{\"1\":{\"385\":1}}],[\"记录的真实数据除了插入的那些列的数据\",{\"1\":{\"325\":1}}],[\"记录的真实数据\",{\"1\":{\"321\":1,\"322\":1}}],[\"记录物理日志不一样\",{\"1\":{\"380\":1}}],[\"记录这个库的默认使用的字符集和校验规则\",{\"1\":{\"334\":1}}],[\"记录了对mysql数据库执行的更改操作\",{\"1\":{\"334\":1}}],[\"记录一般查询语句\",{\"1\":{\"334\":1}}],[\"记录缓存\",{\"1\":{\"332\":1}}],[\"记录真实数据部分\",{\"0\":{\"325\":1}}],[\"记录头信息是由固定的5个字节组成\",{\"1\":{\"324\":1}}],[\"记录头信息\",{\"0\":{\"324\":1}}],[\"记录额外信息部分\",{\"0\":{\"323\":1}}],[\"记录放入额外信息\",{\"1\":{\"321\":1,\"322\":1}}],[\"记录起来\",{\"1\":{\"227\":1}}],[\"记录节点的content保存数据的类型和长度\",{\"1\":{\"219\":1}}],[\"记录\",{\"1\":{\"202\":1,\"226\":2,\"1217\":1}}],[\"记录成功任务的上限\",{\"1\":{\"202\":1}}],[\"记录失败数的上限\",{\"1\":{\"202\":1}}],[\"金额\",{\"1\":{\"1280\":9}}],[\"金额总和为红包金额\",{\"1\":{\"295\":1}}],[\"金丝雀部署\",{\"0\":{\"171\":1}}],[\"抢完一个就不能再抢\",{\"1\":{\"293\":1}}],[\"抢红包\",{\"0\":{\"292\":1},\"1\":{\"295\":1},\"2\":{\"297\":1}}],[\"延时刷\",{\"1\":{\"388\":1}}],[\"延误并发时间为插入数据库的时间\",{\"1\":{\"289\":1}}],[\"延迟写\",{\"1\":{\"388\":1}}],[\"延迟写入\",{\"1\":{\"260\":1}}],[\"延迟双删策略\",{\"0\":{\"288\":1}}],[\"延迟双删中的等待时间就不好设置\",{\"1\":{\"287\":1}}],[\"理解异步io就是理解在io操作时\",{\"1\":{\"898\":1}}],[\"理解这一过程对于调试和设计异常处理逻辑非常重要\",{\"1\":{\"754\":1}}],[\"理解它们的区别可以帮助你优化任务执行效率和资源利用\",{\"1\":{\"662\":1}}],[\"理论上用户最多启动65535个进程\",{\"1\":{\"725\":1}}],[\"理论上我们既可以先删除缓存值再更新数据库\",{\"1\":{\"287\":1}}],[\"理由如下\",{\"1\":{\"287\":1}}],[\"加一是到情况一\",{\"1\":{\"1376\":1}}],[\"加\",{\"1\":{\"1292\":2}}],[\"加上当前的股票价格\",{\"1\":{\"1292\":1}}],[\"加入为同一个集合\",{\"1\":{\"1230\":1}}],[\"加到\",{\"1\":{\"1208\":1}}],[\"加载flask默认配置\",{\"1\":{\"1060\":1}}],[\"加载配置参数\",{\"1\":{\"1059\":1}}],[\"加大网络带宽\",{\"1\":{\"507\":1}}],[\"加排他锁\",{\"1\":{\"404\":1}}],[\"加共享锁\",{\"1\":{\"404\":1}}],[\"加锁顺序为\",{\"1\":{\"408\":1}}],[\"加锁顺序为先\",{\"1\":{\"408\":1}}],[\"加锁行为\",{\"1\":{\"405\":4}}],[\"加锁的方式\",{\"1\":{\"404\":1}}],[\"加锁的原因是为了在此期间数据再次发生变化\",{\"1\":{\"286\":1}}],[\"加锁慢\",{\"1\":{\"402\":1}}],[\"加锁快\",{\"1\":{\"402\":1}}],[\"加速问题定位\",{\"1\":{\"39\":1}}],[\"加速反馈\",{\"1\":{\"39\":1}}],[\"读到\",{\"1\":{\"482\":1}}],[\"读到的\",{\"1\":{\"408\":1}}],[\"读到的是旧值\",{\"1\":{\"283\":1}}],[\"读锁\",{\"1\":{\"401\":1}}],[\"读操作下不加锁仍能安全进行\",{\"1\":{\"374\":1}}],[\"读操作可以分为两类\",{\"1\":{\"373\":1,\"482\":1}}],[\"读提交\",{\"1\":{\"371\":1,\"477\":1}}],[\"读已提交隔离级别下\",{\"1\":{\"374\":1}}],[\"读已提交\",{\"1\":{\"368\":1,\"372\":1}}],[\"读写分离\",{\"1\":{\"492\":1,\"814\":1}}],[\"读写不冲突\",{\"1\":{\"368\":1}}],[\"读写阻塞\",{\"1\":{\"308\":1}}],[\"读取主库传过来的binlog内容并写入到relay\",{\"1\":{\"494\":1}}],[\"读取\",{\"1\":{\"482\":1}}],[\"读取相应数据记录\",{\"1\":{\"413\":1}}],[\"读取数据时不用对表数据进行加锁\",{\"1\":{\"373\":1,\"482\":1}}],[\"读取数据页的\",{\"1\":{\"361\":1}}],[\"读取数据的时候才能根据这个长度列表去读取对应长度的数据\",{\"1\":{\"323\":1}}],[\"读取的还是旧值\",{\"1\":{\"284\":1}}],[\"读之间并不阻塞\",{\"1\":{\"308\":1}}],[\"去扫一圈\",{\"1\":{\"1217\":1}}],[\"去执行\",{\"1\":{\"362\":1}}],[\"去数据库查询得到了myslq中的旧值\",{\"1\":{\"283\":1}}],[\"去其他node节点执行\",{\"1\":{\"108\":1}}],[\"缓冲区数据一般情况下是无法直接写入磁盘的\",{\"1\":{\"388\":1}}],[\"缓冲区\",{\"1\":{\"320\":1,\"469\":2,\"513\":1}}],[\"缓冲池\",{\"1\":{\"318\":1}}],[\"缓冲数据和mysql数据不一致\",{\"1\":{\"283\":1}}],[\"缓存高频查询结果\",{\"1\":{\"1155\":1}}],[\"缓存算法\",{\"0\":{\"836\":1,\"1000\":1}}],[\"缓存变化\",{\"0\":{\"431\":1}}],[\"缓存机制是由一系列小缓存组成的\",{\"1\":{\"332\":1}}],[\"缓存\",{\"1\":{\"332\":1,\"814\":1}}],[\"缓存双写\",{\"0\":{\"320\":1}}],[\"缓存双写一致性\",{\"0\":{\"273\":1},\"2\":{\"291\":1}}],[\"缓存中没有数据\",{\"1\":{\"288\":1}}],[\"缓存中读取不到\",{\"1\":{\"283\":1}}],[\"缓存数据和mysql数据不一致\",{\"1\":{\"282\":1}}],[\"缓存数据的双写一致性探讨\",{\"0\":{\"280\":1}}],[\"缓存击穿\",{\"0\":{\"248\":1},\"2\":{\"254\":1}}],[\"缓存淘汰策略\",{\"0\":{\"212\":1}}],[\"缓存淘汰和过期删除\",{\"0\":{\"209\":1},\"2\":{\"215\":1}}],[\"缓存的创建和查询顺序\",{\"1\":{\"252\":1}}],[\"缓存的设计\",{\"0\":{\"250\":1}}],[\"缓存的定期淘汰策略\",{\"0\":{\"211\":1}}],[\"缓存的\",{\"1\":{\"74\":1}}],[\"方便后续查询和审计\",{\"1\":{\"617\":1}}],[\"方法映射\",{\"1\":{\"1149\":1}}],[\"方法时自动触发\",{\"1\":{\"1123\":1,\"1136\":1}}],[\"方法时从当前位置继续运行\",{\"1\":{\"1021\":1}}],[\"方法从队列头部移除并返回一个元素\",{\"1\":{\"915\":1}}],[\"方法用于插入元素到队列尾部\",{\"1\":{\"915\":1}}],[\"方法用于在尾部添加元素\",{\"1\":{\"908\":1}}],[\"方法在列表的末尾添加元素\",{\"1\":{\"908\":1}}],[\"方法主要是当你继承一些不可变的class时\",{\"1\":{\"902\":1}}],[\"方法可以让你控制对象创建时的行为\",{\"1\":{\"901\":1}}],[\"方法可以写在base类中\",{\"1\":{\"828\":1}}],[\"方法来移除并返回列表的第一个元素\",{\"1\":{\"908\":1}}],[\"方法来初始化对象即可\",{\"1\":{\"900\":1}}],[\"方法来实现单例模式\",{\"1\":{\"784\":1}}],[\"方法通常用于以下情况\",{\"1\":{\"900\":1}}],[\"方法通常不需要被直接调用\",{\"1\":{\"900\":1}}],[\"方法只接收类本身\",{\"1\":{\"900\":1}}],[\"方法则用于初始化这个新创建的对象\",{\"1\":{\"900\":1}}],[\"方法则负责返回迭代器的下一个值\",{\"1\":{\"731\":1}}],[\"方法的第一个参数始终是self\",{\"1\":{\"901\":1}}],[\"方法的主要作用是创建一个新对象\",{\"1\":{\"900\":1}}],[\"方法的就是一个上下文管理器\",{\"1\":{\"847\":1,\"1009\":1}}],[\"方法之前被调用的\",{\"1\":{\"900\":1}}],[\"方法是python中类的构造器\",{\"1\":{\"901\":1}}],[\"方法是python中的一个特殊的静态方法\",{\"1\":{\"900\":1}}],[\"方法是什么\",{\"0\":{\"900\":1,\"901\":1}}],[\"方法是可以将对象中的实例属性返回\",{\"1\":{\"825\":1}}],[\"方法中我们可以设置在完成指定循环次数后触发stopiteration异常来结束迭代\",{\"1\":{\"1016\":1}}],[\"方法中\",{\"1\":{\"901\":1}}],[\"方法中创建新实例\",{\"1\":{\"900\":1}}],[\"方法中返回的值\",{\"1\":{\"847\":1,\"1009\":1}}],[\"方法中加入判断逻辑\",{\"1\":{\"784\":1}}],[\"方法内部添加锁机制来保证线程安全性\",{\"1\":{\"784\":1}}],[\"方法并尝试创建新实例\",{\"1\":{\"784\":1}}],[\"方法\",{\"0\":{\"784\":1},\"1\":{\"732\":1,\"746\":1,\"790\":1,\"892\":2,\"900\":2,\"901\":3,\"1033\":1,\"1035\":1,\"1057\":1,\"1143\":1,\"1144\":1,\"1149\":1}}],[\"方法返回一个迭代器对象\",{\"1\":{\"731\":1}}],[\"方法释放session对象\",{\"1\":{\"582\":1}}],[\"方法或者调用orm对应的session的时候\",{\"1\":{\"578\":1}}],[\"方案三\",{\"0\":{\"284\":1}}],[\"方案二\",{\"0\":{\"283\":1}}],[\"方案一\",{\"0\":{\"282\":1}}],[\"方式\",{\"1\":{\"349\":1,\"710\":1}}],[\"方式二\",{\"1\":{\"147\":1,\"289\":1,\"806\":1,\"886\":2}}],[\"方式一\",{\"1\":{\"147\":1,\"289\":1,\"806\":1,\"886\":1}}],[\"方式来实现的自定义资源后端\",{\"1\":{\"97\":1}}],[\"授权cannal连接msyql\",{\"1\":{\"279\":1}}],[\"带有外键的软删除在使用\",{\"1\":{\"878\":1}}],[\"带有参数\",{\"0\":{\"833\":1,\"997\":1}}],[\"带有业务逻辑的增量数据处理\",{\"1\":{\"277\":1}}],[\"带来了一个新的持久化选项\",{\"1\":{\"264\":1}}],[\"收到请求后\",{\"1\":{\"804\":1}}],[\"收到消息\",{\"1\":{\"561\":1}}],[\"收到\",{\"1\":{\"278\":1}}],[\"收到事件后分发\",{\"1\":{\"270\":1}}],[\"收集并存储应用程序及基础设施的日志数据\",{\"1\":{\"641\":1}}],[\"收集和分析日志\",{\"1\":{\"555\":1}}],[\"收集的新的变更操作也将被一并追加到新的aof文件中\",{\"1\":{\"261\":1}}],[\"收集各种运行时数据\",{\"1\":{\"171\":1}}],[\"模型定义\",{\"1\":{\"1156\":1}}],[\"模型类中必须要有这两个方法keys\",{\"1\":{\"828\":1}}],[\"模型类\",{\"0\":{\"886\":1},\"1\":{\"545\":1}}],[\"模型与逻辑\",{\"0\":{\"545\":1}}],[\"模块提供了更灵活的上下文变量管理能力\",{\"1\":{\"1069\":1}}],[\"模块提供的\",{\"1\":{\"899\":1}}],[\"模块里提供的一个函数\",{\"1\":{\"934\":1}}],[\"模块来实现\",{\"1\":{\"899\":1}}],[\"模块来实现异步io操作\",{\"1\":{\"898\":1}}],[\"模块必须可导入\",{\"1\":{\"718\":1}}],[\"模块等告警事件\",{\"1\":{\"629\":1}}],[\"模块的阻塞函数\",{\"1\":{\"595\":1}}],[\"模块\",{\"0\":{\"708\":1},\"1\":{\"550\":1,\"595\":1}}],[\"模块间通过明确定义的接口\",{\"1\":{\"543\":1}}],[\"模块内部紧密协作\",{\"1\":{\"543\":1}}],[\"模块化组织\",{\"1\":{\"1146\":1,\"1152\":1}}],[\"模块化设计确保扩展性\",{\"1\":{\"557\":1}}],[\"模块化设计的黄金法则\",{\"0\":{\"543\":1}}],[\"模块化设计是代码的\",{\"0\":{\"541\":1}}],[\"模块化的优势\",{\"1\":{\"542\":1}}],[\"模块解耦\",{\"1\":{\"535\":1}}],[\"模块设计\",{\"0\":{\"535\":1,\"1415\":1},\"2\":{\"620\":1,\"642\":1}}],[\"模块全局变量和常量之前\",{\"1\":{\"530\":1}}],[\"模块名统一使用下划线命名\",{\"1\":{\"529\":1}}],[\"模块名\",{\"1\":{\"529\":1,\"1189\":1}}],[\"模拟题\",{\"0\":{\"1366\":1}}],[\"模拟消费间隔\",{\"1\":{\"916\":1}}],[\"模拟生产间隔\",{\"1\":{\"916\":1}}],[\"模拟高并发场景\",{\"1\":{\"552\":1}}],[\"模拟请求\",{\"1\":{\"552\":1}}],[\"模拟优化器来执行sql查询\",{\"1\":{\"348\":1,\"377\":1}}],[\"模拟\",{\"1\":{\"278\":1}}],[\"模式定义\",{\"0\":{\"788\":1}}],[\"模式中有\",{\"1\":{\"270\":1}}],[\"模式也叫\",{\"1\":{\"270\":1}}],[\"模式\",{\"1\":{\"270\":2,\"395\":1}}],[\"模板渲染前执行\",{\"1\":{\"1110\":1}}],[\"模板渲染后执行\",{\"1\":{\"1110\":1}}],[\"模板\",{\"1\":{\"154\":1,\"165\":1}}],[\"模板描述了将要创建的pod\",{\"1\":{\"153\":1}}],[\"连线即使在端点也不能相交\",{\"1\":{\"1309\":1}}],[\"连思路都是一样的\",{\"1\":{\"1299\":1}}],[\"连在一起就一定会出现环\",{\"1\":{\"1230\":1}}],[\"连通分量变为\",{\"1\":{\"1225\":1}}],[\"连通分量降为\",{\"1\":{\"1225\":1}}],[\"连通分量为\",{\"1\":{\"1225\":1}}],[\"连通\",{\"1\":{\"1225\":1}}],[\"连续子序列\",{\"0\":{\"1307\":1}}],[\"连续递增的子序列\",{\"1\":{\"1287\":2}}],[\"连续递增序列\",{\"1\":{\"1198\":1}}],[\"连续的空间\",{\"1\":{\"469\":1}}],[\"连续几次失败才算真失败\",{\"1\":{\"147\":5}}],[\"连续几次成才算成功\",{\"1\":{\"147\":5}}],[\"连表查询的方式\",{\"1\":{\"349\":2}}],[\"连接解决了\",{\"1\":{\"977\":1}}],[\"连接就关闭\",{\"1\":{\"962\":1}}],[\"连接就是套接字描述符\",{\"1\":{\"269\":1}}],[\"连接组成的字符串\",{\"1\":{\"697\":1}}],[\"连接完成时\",{\"1\":{\"679\":1}}],[\"连接电源\",{\"1\":{\"676\":1}}],[\"连接没有被释放一般是因为程序中没有显式地调用相应方法导致的\",{\"1\":{\"582\":1}}],[\"连接没有被释放\",{\"0\":{\"582\":1}}],[\"连接的数目最终会到达数据库端的连接数目上限\",{\"1\":{\"578\":1}}],[\"连接复用\",{\"1\":{\"578\":1}}],[\"连接条件是\",{\"1\":{\"513\":1}}],[\"连接用户表与订单表\",{\"1\":{\"513\":1}}],[\"连接到主库\",{\"1\":{\"494\":1}}],[\"连接池的上限小于程序中需要并发使用连接的请求的数目\",{\"0\":{\"581\":1}}],[\"连接池就会无条件地创建新的连接对象来返回给这个请求\",{\"1\":{\"578\":1}}],[\"连接池永远不会阻塞一个新的数据库连接请求\",{\"1\":{\"578\":1}}],[\"连接池特点\",{\"0\":{\"578\":1}}],[\"连接池\",{\"1\":{\"332\":2}}],[\"连接数\",{\"1\":{\"299\":1,\"302\":1}}],[\"连接\",{\"1\":{\"269\":1,\"976\":1}}],[\"线程中异步地运行一个函数\",{\"1\":{\"1040\":1}}],[\"线程并不退出结束\",{\"1\":{\"1036\":1}}],[\"线程池中保存等待被执行的任务的容器\",{\"1\":{\"1036\":1}}],[\"线程池中实际执行的线程以及保存这些线程的容器\",{\"1\":{\"1036\":1}}],[\"线程池管理器\",{\"1\":{\"1036\":1}}],[\"线程池将线程创建和销毁本身所带来的开销分摊到了各个具体的任务上\",{\"1\":{\"1036\":1}}],[\"线程池可以自动销毁一部分线程\",{\"1\":{\"1036\":1}}],[\"线程池在应用程序启动后\",{\"1\":{\"1036\":1}}],[\"线程池就是必选项\",{\"1\":{\"1036\":1}}],[\"线程池是一种用于减少线程本身创建和销毁造成的开销的技术\",{\"1\":{\"1036\":1}}],[\"线程池\",{\"0\":{\"1036\":1}}],[\"线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行\",{\"1\":{\"1031\":1}}],[\"线程安全是多线程或多进程编程中的一个概念\",{\"1\":{\"1031\":1}}],[\"线程安全模式\",{\"1\":{\"784\":2}}],[\"线程锁lock\",{\"0\":{\"1031\":1}}],[\"线程隔离\",{\"0\":{\"1049\":1},\"2\":{\"858\":1}}],[\"线程隔离的栈\",{\"0\":{\"856\":1}}],[\"线程\",{\"0\":{\"704\":1},\"1\":{\"704\":1}}],[\"线程b查询\",{\"1\":{\"288\":1}}],[\"线程b遵守回写机制\",{\"1\":{\"283\":1}}],[\"线程b\",{\"1\":{\"283\":1}}],[\"线程a更新数据库\",{\"1\":{\"288\":1}}],[\"线程a\",{\"1\":{\"283\":1}}],[\"线程从阻塞状态返回\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"线上环境一般禁止使用\",{\"1\":{\"256\":1}}],[\"公共子序列问题\",{\"0\":{\"1313\":1}}],[\"公共子序列\",{\"1\":{\"1308\":3}}],[\"公共的\",{\"1\":{\"1307\":1}}],[\"公共方法要进行方法的抽取\",{\"1\":{\"535\":1}}],[\"公共方法的提取\",{\"1\":{\"535\":1}}],[\"公式从左到右\",{\"1\":{\"1280\":1}}],[\"公司可能都还在使用3\",{\"1\":{\"264\":1}}],[\"公开从集群外部到集群内服务的\",{\"1\":{\"95\":1}}],[\"现在\",{\"1\":{\"1309\":1}}],[\"现在考虑网格中有障碍物\",{\"1\":{\"1303\":1}}],[\"现在你和你的朋友们需要按照如下规则来分披萨\",{\"1\":{\"1282\":1}}],[\"现在你总共有\",{\"1\":{\"1242\":1}}],[\"现在基于\",{\"1\":{\"1071\":1}}],[\"现在为什么不使用栈了\",{\"0\":{\"1053\":1}}],[\"现在再来看源码出现了contextvar让我感觉比较陌生\",{\"1\":{\"1045\":1}}],[\"现在有一个循环和一个生成器列表\",{\"1\":{\"1041\":1}}],[\"现在有很多种存储引擎\",{\"1\":{\"333\":1}}],[\"现在可以转换到\",{\"1\":{\"565\":1}}],[\"现在唯一索引id上加x锁\",{\"1\":{\"405\":1}}],[\"现在很多都不直接使用html加js的实现方式了\",{\"1\":{\"673\":1}}],[\"现在很多\",{\"1\":{\"264\":1}}],[\"现代流水线还需将安全扫描\",{\"1\":{\"45\":1}}],[\"尽可能使用有意义的英文单词给变量命名\",{\"1\":{\"529\":1}}],[\"尽可能避免复杂的\",{\"0\":{\"524\":1},\"1\":{\"507\":1}}],[\"尽可能在索引中完成排序\",{\"0\":{\"521\":1},\"1\":{\"507\":1}}],[\"尽量只依赖必要的接口\",{\"1\":{\"762\":1}}],[\"尽量少用类的多继承\",{\"1\":{\"534\":1}}],[\"尽量索引字段出现在w中比较多的索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"尽量选择针对当前query过滤性更好的索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"尽量以相同的顺序来访问索引记录和表\",{\"1\":{\"408\":1}}],[\"尽量避免同时锁定两个资源\",{\"1\":{\"407\":1}}],[\"尽量按照相同的顺序进行处理\",{\"1\":{\"407\":1}}],[\"尽量保证数据的不丢失\",{\"1\":{\"264\":1}}],[\"尽管\",{\"1\":{\"1287\":1}}],[\"尽管这不是最高效的解决方案\",{\"1\":{\"908\":1}}],[\"尽管异常可以作为一种控制流的手段\",{\"1\":{\"758\":1}}],[\"尽管assert在遇到失败时会引发assertionerror\",{\"1\":{\"756\":1}}],[\"尽管存在一定的延迟性\",{\"1\":{\"638\":1}}],[\"尽管持续集成的理念清晰\",{\"1\":{\"53\":1}}],[\"尽管流水线部署的理论清晰\",{\"1\":{\"41\":1}}],[\"尽管理念清晰\",{\"1\":{\"33\":1}}],[\"增强后你还是你\",{\"1\":{\"771\":1}}],[\"增大\",{\"1\":{\"514\":1}}],[\"增大节点存储数据量\",{\"1\":{\"345\":1}}],[\"增加点判断条件\",{\"1\":{\"1303\":1}}],[\"增加新的产品等级结构麻烦\",{\"1\":{\"767\":1}}],[\"增加新产品时还是需要修改工厂类的代码\",{\"1\":{\"765\":1}}],[\"增加消耗\",{\"1\":{\"507\":1,\"520\":1}}],[\"增加了资源组功能\",{\"1\":{\"430\":1}}],[\"增加查询时的io次数\",{\"1\":{\"342\":1}}],[\"增加并行任务以及利用技术手段\",{\"1\":{\"24\":1}}],[\"增量数据使用细粒度\",{\"1\":{\"264\":1}}],[\"速度很慢\",{\"1\":{\"499\":1}}],[\"速度最慢\",{\"1\":{\"349\":1}}],[\"速度更快\",{\"1\":{\"349\":1,\"415\":1}}],[\"速度就会变慢\",{\"1\":{\"299\":1}}],[\"速度显然比rdb要慢\",{\"1\":{\"263\":1}}],[\"速度比rdb要快\",{\"1\":{\"263\":1}}],[\"消失的数字\",{\"0\":{\"1331\":1,\"1335\":1}}],[\"消费者模型\",{\"1\":{\"924\":1}}],[\"消费者线程\",{\"1\":{\"916\":1}}],[\"消费\",{\"1\":{\"916\":1}}],[\"消费了\",{\"1\":{\"916\":1}}],[\"消防与监控\",{\"0\":{\"550\":1}}],[\"消耗的内存较少\",{\"1\":{\"263\":1}}],[\"消除等待\",{\"0\":{\"24\":1},\"1\":{\"22\":1,\"24\":1}}],[\"人\",{\"1\":{\"1101\":1,\"1237\":1}}],[\"人工干预\",{\"1\":{\"261\":1}}],[\"人人参与\",{\"1\":{\"30\":2}}],[\"函数返回的新长度为\",{\"1\":{\"1265\":1}}],[\"函数应该返回新的长度\",{\"1\":{\"1265\":2,\"1266\":2}}],[\"函数用来查找\",{\"1\":{\"1207\":1}}],[\"函数视图\",{\"1\":{\"1142\":1}}],[\"函数视图的局限性\",{\"0\":{\"1142\":1}}],[\"函数中定义的时候才会有作用域的概念\",{\"1\":{\"982\":1}}],[\"函数被装饰以后\",{\"1\":{\"932\":1}}],[\"函数的本质就是调用对象的\",{\"1\":{\"1025\":1}}],[\"函数的参数没有类型约束\",{\"1\":{\"896\":1}}],[\"函数的if\",{\"1\":{\"533\":1}}],[\"函数重载现象通常出现在编译型语言中\",{\"1\":{\"896\":1}}],[\"函数执行时长\",{\"1\":{\"834\":1,\"998\":1}}],[\"函数执行出错\",{\"1\":{\"833\":1,\"997\":1}}],[\"函数实现\",{\"1\":{\"776\":1}}],[\"函数调用栈中的异常\",{\"0\":{\"754\":1}}],[\"函数task2运行结果\",{\"1\":{\"735\":1}}],[\"函数task1运行结果\",{\"1\":{\"735\":1}}],[\"函数从上次暂停的地方继续执行\",{\"1\":{\"733\":1}}],[\"函数来获取下一个值\",{\"1\":{\"732\":1}}],[\"函数来获取一个对象的迭代器\",{\"1\":{\"732\":1}}],[\"函数职责不明确\",{\"1\":{\"548\":1}}],[\"函数职责单一\",{\"1\":{\"548\":1}}],[\"函数与注释的\",{\"0\":{\"547\":1}}],[\"函数正常情况下返回值为int类型\",{\"1\":{\"533\":1}}],[\"函数长度远大于100行\",{\"1\":{\"533\":1}}],[\"函数设计\",{\"0\":{\"533\":1}}],[\"函数注释统一使用\",{\"1\":{\"531\":1}}],[\"函数名\",{\"1\":{\"529\":1}}],[\"函数将脏页复制到内存中的\",{\"1\":{\"469\":1}}],[\"函数\",{\"0\":{\"548\":1},\"1\":{\"395\":1,\"735\":1}}],[\"函数问题\",{\"1\":{\"304\":1}}],[\"函数就可以保证\",{\"1\":{\"260\":1}}],[\"函数可以将指定文件的内容强制从内核缓存刷到磁盘\",{\"1\":{\"260\":1}}],[\"手动管理进程生命周期\",{\"1\":{\"708\":1}}],[\"手动触发\",{\"1\":{\"262\":1}}],[\"手动触发和自动触发\",{\"1\":{\"262\":1}}],[\"手动触发和自动触发手动触发\",{\"1\":{\"256\":1}}],[\"手把手教你如何在python项目中使用celery\",{\"1\":{\"645\":1}}],[\"手段\",{\"1\":{\"260\":1}}],[\"触发事件\",{\"1\":{\"563\":1}}],[\"触发状态转换的外部输入\",{\"1\":{\"561\":1}}],[\"触发器\",{\"1\":{\"395\":1}}],[\"触发器等\",{\"1\":{\"332\":1}}],[\"触发机制\",{\"0\":{\"262\":1}}],[\"触发下一次rewrite\",{\"1\":{\"260\":1}}],[\"触发规则\",{\"1\":{\"256\":1}}],[\"建房子\",{\"0\":{\"544\":1},\"1\":{\"540\":1}}],[\"建议统一写成第二种写法\",{\"1\":{\"1393\":1}}],[\"建议不要超过三张表\",{\"1\":{\"507\":1,\"524\":1}}],[\"建议开启这个选项\",{\"1\":{\"503\":1}}],[\"建议\",{\"1\":{\"260\":1,\"529\":1,\"530\":2,\"531\":1}}],[\"建立一个session\",{\"1\":{\"689\":1}}],[\"建立相应的索引进行优化\",{\"1\":{\"408\":1}}],[\"建立的连接并不是每次请求都会去创建的\",{\"1\":{\"358\":2}}],[\"建立\",{\"1\":{\"55\":1}}],[\"建立共同语言\",{\"1\":{\"33\":1}}],[\"建立与之相适应的企业文化\",{\"1\":{\"30\":1}}],[\"暂缓\",{\"1\":{\"260\":1}}],[\"暂停定时任务\",{\"1\":{\"202\":1}}],[\"暂停和继续deployment\",{\"1\":{\"180\":1}}],[\"暂停记录版本\",{\"1\":{\"165\":1}}],[\"暂停的\",{\"0\":{\"163\":1},\"1\":{\"163\":1}}],[\"阻塞直到所有任务完成通知\",{\"1\":{\"925\":1}}],[\"阻塞线程\",{\"1\":{\"598\":1}}],[\"阻塞模式\",{\"1\":{\"598\":1}}],[\"阻塞导致整个进程无法对其它客户提供服务\",{\"1\":{\"268\":1}}],[\"阻塞仅指主进程fork子进程的过程\",{\"1\":{\"257\":1}}],[\"阻塞时间很短\",{\"1\":{\"256\":1}}],[\"场景\",{\"0\":{\"597\":1},\"1\":{\"668\":1}}],[\"场景三\",{\"1\":{\"256\":1}}],[\"场景二\",{\"1\":{\"256\":1}}],[\"场景一\",{\"1\":{\"256\":1}}],[\"操作实现\",{\"1\":{\"915\":1}}],[\"操作时\",{\"1\":{\"909\":1}}],[\"操作字典\",{\"1\":{\"854\":1}}],[\"操作在\",{\"1\":{\"600\":1}}],[\"操作在一般情况下往往不能直接返回\",{\"1\":{\"268\":1}}],[\"操作有多种方式\",{\"1\":{\"511\":1}}],[\"操作为例\",{\"1\":{\"405\":1}}],[\"操作的成本\",{\"1\":{\"361\":1}}],[\"操作系统课上我们都学过\",{\"1\":{\"1029\":1}}],[\"操作系统页大小为\",{\"1\":{\"468\":1}}],[\"操作系统通知应用程序\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"操作系统的多进程copy\",{\"1\":{\"256\":1}}],[\"操作\",{\"1\":{\"260\":1,\"499\":1,\"513\":1,\"588\":1,\"590\":2,\"682\":1,\"898\":1}}],[\"操作命令\",{\"1\":{\"125\":1}}],[\"快指针\",{\"1\":{\"1263\":1}}],[\"快慢指针\",{\"0\":{\"1262\":1},\"2\":{\"1267\":1}}],[\"快捷键\",{\"1\":{\"536\":1}}],[\"快照生成的时机因隔离级别不同\",{\"1\":{\"374\":1}}],[\"快照读可以使普通的\",{\"1\":{\"482\":1}}],[\"快照读可以使普通的select\",{\"1\":{\"373\":1}}],[\"快照读是指读取数据时不是读取最新版本的数据\",{\"1\":{\"373\":1,\"482\":1}}],[\"快照读\",{\"0\":{\"373\":1},\"1\":{\"373\":2,\"380\":1,\"482\":3}}],[\"快照\",{\"0\":{\"372\":1},\"1\":{\"477\":1}}],[\"快照和重写需要逐个被执行\",{\"1\":{\"261\":1}}],[\"快照是内存数据的二进制序列化形式\",{\"1\":{\"255\":1}}],[\"快照是一次全量备份\",{\"1\":{\"255\":1}}],[\"快速操作\",{\"1\":{\"911\":1}}],[\"快速动态扩展和撤销一个类的功能场景\",{\"1\":{\"770\":1}}],[\"快速但可能丢失\",{\"1\":{\"676\":1}}],[\"快速反馈\",{\"0\":{\"49\":1,\"50\":1}}],[\"快速反馈优先\",{\"1\":{\"46\":1}}],[\"快速定位到叶子节点满足条件记录的\",{\"1\":{\"460\":2}}],[\"快速定位\",{\"1\":{\"46\":1}}],[\"快速定位故障原因以及保障服务稳定性具有不可替代的作用\",{\"1\":{\"26\":1}}],[\"快速\",{\"1\":{\"32\":1,\"56\":1}}],[\"快速试错\",{\"1\":{\"18\":1,\"20\":1}}],[\"快速验证\",{\"1\":{\"18\":1}}],[\"快速找到正确的业务前进方向\",{\"1\":{\"18\":1}}],[\"两轮都选大小为\",{\"1\":{\"1282\":1}}],[\"两点疑问\",{\"0\":{\"1046\":1}}],[\"两次握手\",{\"1\":{\"952\":1}}],[\"两者都会死去\",{\"1\":{\"1376\":1}}],[\"两者都是对类的方法进行扩展\",{\"1\":{\"771\":1}}],[\"两者之间实现了有效的协同工作\",{\"1\":{\"916\":1}}],[\"两个字符串都只由小写字符组成\",{\"1\":{\"1313\":1}}],[\"两个字符串没有公共子序列\",{\"1\":{\"1308\":1}}],[\"两个字符串的\",{\"1\":{\"1308\":1}}],[\"两个数组中\",{\"1\":{\"1307\":1}}],[\"两个\",{\"1\":{\"1198\":1}}],[\"两个类之间有依赖关系\",{\"1\":{\"762\":1}}],[\"两个session恰好都持有了第一把锁\",{\"1\":{\"408\":1}}],[\"两个事务分别想拿到对方持有的锁\",{\"1\":{\"408\":1}}],[\"两个缓冲设置不同的过期时间\",{\"1\":{\"251\":1}}],[\"两种引擎该如何选择\",{\"0\":{\"311\":1}}],[\"两种方式的对比\",{\"0\":{\"289\":1}}],[\"两种理念基础之上\",{\"1\":{\"18\":1}}],[\"两害相衡趋其轻的原则\",{\"1\":{\"287\":1}}],[\"占用空间\",{\"1\":{\"325\":1}}],[\"占用空间少但是无法快速判断两个节点是否相邻\",{\"1\":{\"1217\":1}}],[\"占用空间少\",{\"1\":{\"240\":1}}],[\"占用1个二进制位\",{\"1\":{\"324\":1}}],[\"占用的字节数\",{\"1\":{\"323\":1}}],[\"占用更少的空间\",{\"1\":{\"244\":1}}],[\"特别适合在协程之间传递数据\",{\"1\":{\"924\":1}}],[\"特别适合处理大量短周期性任务\",{\"1\":{\"610\":1}}],[\"特别适用于需要高效插入和删除元素的场景\",{\"1\":{\"911\":1}}],[\"特别适用于分布式站点的登录场景\",{\"1\":{\"692\":1}}],[\"特别是当队列很大时\",{\"1\":{\"908\":1}}],[\"特别是当不需要复杂的分布式架构时\",{\"1\":{\"607\":1}}],[\"特别是在异常被频繁触发的场景下\",{\"1\":{\"758\":1}}],[\"特别是夜间值班期间\",{\"1\":{\"638\":1}}],[\"特别是对于web应用而言\",{\"1\":{\"631\":1}}],[\"特性\",{\"0\":{\"243\":1},\"1\":{\"607\":1,\"1156\":1}}],[\"特点\",{\"0\":{\"190\":1,\"197\":1,\"201\":1,\"240\":1,\"1022\":1},\"1\":{\"146\":1,\"1171\":1}}],[\"很多录友不理解dfs代码中回溯是用来干什么的\",{\"1\":{\"1345\":1}}],[\"很多时候要针对某一个维度的条件做整体操作\",{\"1\":{\"120\":1}}],[\"很自然地就成为了一幅二分图\",{\"1\":{\"1234\":1}}],[\"很显然这不现实\",{\"1\":{\"959\":1}}],[\"很有可\",{\"1\":{\"762\":1}}],[\"很有可能多个元素共享了某一位\",{\"1\":{\"242\":1}}],[\"很互联网大厂的服务不可用并非孤立事件\",{\"1\":{\"623\":1}}],[\"很可能不走索引\",{\"1\":{\"507\":1,\"522\":1}}],[\"很可能要读磁盘\",{\"1\":{\"349\":1}}],[\"位顾客\",{\"1\":{\"1366\":1}}],[\"位顾客那里\",{\"1\":{\"1366\":4}}],[\"位顾客付的账\",{\"1\":{\"1366\":1}}],[\"位下标的顺序\",{\"1\":{\"1341\":1}}],[\"位运算是用来操作二进制的\",{\"1\":{\"1321\":1}}],[\"位运算\",{\"0\":{\"1320\":1,\"1436\":1},\"2\":{\"1342\":1,\"1343\":1}}],[\"位整数范围\",{\"1\":{\"1275\":1}}],[\"位于模块注释和文档字符串之后\",{\"1\":{\"530\":1}}],[\"位置的最小路径\",{\"1\":{\"1303\":1}}],[\"位置处取出\",{\"1\":{\"499\":1}}],[\"位置放的所有pod\",{\"1\":{\"144\":1}}],[\"位被多次映射且置\",{\"1\":{\"242\":1}}],[\"解锁\",{\"1\":{\"1033\":1}}],[\"解耦\",{\"1\":{\"808\":1}}],[\"解释器只会返回已经加载好的模块对象\",{\"1\":{\"782\":1}}],[\"解释器会执行模块中的代码并将其加载到内存中\",{\"1\":{\"782\":1}}],[\"解释逻辑\",{\"1\":{\"549\":1}}],[\"解释\",{\"1\":{\"350\":1,\"351\":1,\"549\":1,\"1198\":3,\"1203\":1,\"1207\":1,\"1208\":2,\"1209\":1,\"1221\":1,\"1229\":2,\"1236\":2,\"1237\":1,\"1241\":2,\"1242\":2,\"1257\":3,\"1259\":1,\"1265\":2,\"1266\":2,\"1274\":6,\"1275\":3,\"1276\":4,\"1280\":4,\"1281\":2,\"1282\":2,\"1286\":1,\"1287\":2,\"1288\":2,\"1289\":3,\"1292\":13,\"1297\":4,\"1299\":5,\"1300\":5,\"1303\":4,\"1307\":1,\"1308\":3,\"1309\":1,\"1314\":2,\"1340\":1,\"1341\":2,\"1353\":1,\"1354\":2,\"1364\":2,\"1365\":3,\"1366\":2,\"1377\":1,\"1378\":3,\"1379\":1,\"1384\":3,\"1385\":1,\"1390\":2,\"1403\":1}}],[\"解决的问题\",{\"0\":{\"798\":1}}],[\"解决跨平台带来的兼容性问题\",{\"1\":{\"767\":1}}],[\"解决阻塞问题\",{\"0\":{\"590\":1}}],[\"解决方法\",{\"1\":{\"533\":1}}],[\"解决方案1\",{\"1\":{\"408\":1}}],[\"解决方案\",{\"0\":{\"285\":1},\"1\":{\"407\":1,\"408\":1,\"590\":1}}],[\"解决了其文档不足\",{\"1\":{\"1146\":1}}],[\"解决了冒充的风险\",{\"1\":{\"972\":1}}],[\"解决了篡改的风险\",{\"1\":{\"972\":1}}],[\"解决了窃听的风险\",{\"1\":{\"972\":1}}],[\"解决了幻读问题吗\",{\"0\":{\"482\":1}}],[\"解决了因加锁导致读取数据时无法对数据进行修改的问题\",{\"1\":{\"373\":1,\"482\":1}}],[\"解决了因加锁导致的修改数据时无法对数据读取问题\",{\"1\":{\"373\":1,\"482\":1}}],[\"解决业务层面的耦合\",{\"1\":{\"301\":1}}],[\"解决缓存击穿的问题\",{\"0\":{\"251\":1}}],[\"解决缓存穿透\",{\"1\":{\"241\":1}}],[\"解析参数\",{\"1\":{\"1194\":2}}],[\"解析过和优化过的\",{\"1\":{\"361\":1}}],[\"解析树\",{\"1\":{\"332\":2}}],[\"解析器\",{\"1\":{\"332\":2}}],[\"解析\",{\"1\":{\"107\":1,\"278\":1}}],[\"误判只会发生在过滤器没有添加过的元素\",{\"1\":{\"240\":1}}],[\"误区\",{\"1\":{\"42\":1,\"54\":1,\"439\":1,\"507\":1,\"523\":1}}],[\"返回它将会被按顺序插入的位置\",{\"1\":{\"1399\":1}}],[\"返回子集\",{\"1\":{\"1384\":1}}],[\"返回长度最长且字母序最小的字符串\",{\"1\":{\"1380\":1}}],[\"返回其中可以组成三角形三条边的三元组个数\",{\"1\":{\"1379\":1}}],[\"返回容器可以储存的最大水量\",{\"1\":{\"1377\":1}}],[\"返回种完花的花坛\",{\"1\":{\"1376\":1}}],[\"返回数组\",{\"1\":{\"1365\":1}}],[\"返回数据\",{\"1\":{\"863\":1}}],[\"返回数据最多一条\",{\"1\":{\"350\":1}}],[\"返回网格中\",{\"1\":{\"1354\":1}}],[\"返回整数数组\",{\"1\":{\"1341\":1}}],[\"返回答案\",{\"1\":{\"1340\":1}}],[\"返回1\",{\"1\":{\"1322\":1}}],[\"返回10\",{\"1\":{\"652\":1}}],[\"返回这两个字符串的最长\",{\"1\":{\"1308\":1}}],[\"返回确保骑士能够拯救到公主所需的最低初始健康点数\",{\"1\":{\"1303\":1}}],[\"返回获得利润的最大值\",{\"1\":{\"1292\":1}}],[\"返回你可以从这笔交易中获取的最大利润\",{\"1\":{\"1292\":2}}],[\"返回你能通过这些操作获得的最大点数\",{\"1\":{\"1281\":1}}],[\"返回你为了学完所有课程所安排的学习顺序\",{\"1\":{\"1242\":1}}],[\"返回可以通过上述方法构造的\",{\"1\":{\"1274\":1}}],[\"返回此石头\",{\"1\":{\"1274\":1}}],[\"返回删除后数组的新长度\",{\"1\":{\"1266\":1}}],[\"返回最长递增子序列的个数\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"返回语义明确的\",{\"1\":{\"1144\":1}}],[\"返回当前task对象\",{\"1\":{\"1040\":1}}],[\"返回当前全局和局部符号表的字典\",{\"1\":{\"986\":1}}],[\"返回一条可以删去的边\",{\"1\":{\"1230\":1}}],[\"返回一组值中的最小值或最大值\",{\"1\":{\"986\":1}}],[\"返回一个表示每个字符串片段的长度的列表\",{\"1\":{\"1385\":1}}],[\"返回一个事件锁对象\",{\"1\":{\"1035\":1}}],[\"返回一个布尔值\",{\"1\":{\"1033\":1}}],[\"返回一个同步锁对象\",{\"1\":{\"1033\":1}}],[\"返回一个可迭代的数字序列\",{\"1\":{\"986\":1}}],[\"返回一个迭代器\",{\"1\":{\"945\":1}}],[\"返回一个\",{\"1\":{\"893\":1}}],[\"返回对象的属性列表\",{\"1\":{\"986\":1}}],[\"返回对象的类型\",{\"1\":{\"986\":1}}],[\"返回对象\",{\"1\":{\"986\":1}}],[\"返回的self\",{\"1\":{\"1188\":1}}],[\"返回的是一个迭代器对象\",{\"1\":{\"1021\":1}}],[\"返回的是\",{\"1\":{\"969\":1}}],[\"返回的结果是不确定性的\",{\"1\":{\"240\":1}}],[\"返回top\",{\"1\":{\"940\":1}}],[\"返回元素部分\",{\"1\":{\"919\":1}}],[\"返回match对象或none\",{\"1\":{\"895\":1}}],[\"返回消息\",{\"1\":{\"863\":1}}],[\"返回值\",{\"1\":{\"1180\":1}}],[\"返回值只可以为true和false两种\",{\"1\":{\"848\":1,\"1009\":1}}],[\"返回值为none\",{\"1\":{\"533\":1}}],[\"返回集合的下一个元素\",{\"1\":{\"732\":1}}],[\"返回迭代器本身\",{\"1\":{\"732\":1}}],[\"返回asyncresult对象\",{\"1\":{\"652\":1}}],[\"返回\",{\"1\":{\"569\":1,\"1021\":1,\"1198\":1,\"1236\":2,\"1237\":1,\"1241\":2,\"1242\":1,\"1266\":1,\"1276\":3,\"1289\":2,\"1292\":3,\"1297\":4,\"1307\":1,\"1308\":2,\"1366\":1,\"1378\":1,\"1390\":1,\"1393\":2,\"1395\":1,\"1400\":1}}],[\"返回记录数固定对执行时间有什么影响\",{\"1\":{\"498\":1}}],[\"返回记录量低于\",{\"1\":{\"498\":1}}],[\"返回记录量对执行时间有什么影响\",{\"1\":{\"498\":1}}],[\"返回三行\",{\"1\":{\"482\":1}}],[\"返回两行\",{\"1\":{\"482\":1}}],[\"返回匹配某一条件的多条数据\",{\"1\":{\"350\":1}}],[\"返回不是0\",{\"1\":{\"147\":4}}],[\"缺少必要的输入数据\",{\"1\":{\"751\":1}}],[\"缺点与优化建议\",{\"0\":{\"909\":1}}],[\"缺点\",{\"0\":{\"316\":1,\"463\":1,\"713\":1,\"809\":1},\"1\":{\"234\":1,\"244\":1,\"258\":1,\"263\":1,\"342\":1,\"393\":1,\"394\":1,\"605\":1,\"606\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"765\":1,\"766\":1}}],[\"缺陷数量最大化\",{\"1\":{\"32\":1}}],[\"复合索引使用注意事项\",{\"0\":{\"451\":1}}],[\"复合索引可以代替多个单一索引\",{\"1\":{\"450\":1}}],[\"复合索引\",{\"0\":{\"450\":1},\"1\":{\"451\":1}}],[\"复制内存\",{\"1\":{\"894\":1}}],[\"复制大数组\",{\"1\":{\"713\":1}}],[\"复制性能更高\",{\"1\":{\"433\":1}}],[\"复制集控制器或复制控制器设置新的大小\",{\"1\":{\"124\":1}}],[\"复杂的处理需要生成器函数完成\",{\"1\":{\"1024\":1}}],[\"复杂查询能力较强\",{\"1\":{\"433\":1}}],[\"复杂度\",{\"0\":{\"233\":1}}],[\"复用在一条\",{\"1\":{\"976\":1}}],[\"复用模型\",{\"1\":{\"270\":1}}],[\"复用一个或几个线程\",{\"1\":{\"269\":1}}],[\"复用\",{\"1\":{\"269\":1}}],[\"索引下标越界\",{\"1\":{\"1354\":1}}],[\"索引下推\",{\"0\":{\"454\":1},\"1\":{\"420\":1,\"455\":1},\"2\":{\"458\":1}}],[\"索引优化\",{\"0\":{\"517\":1},\"2\":{\"527\":1}}],[\"索引嵌套循环连接\",{\"1\":{\"513\":1}}],[\"索引本来就是排好序的\",{\"1\":{\"507\":1,\"521\":1}}],[\"索引使用分片进行实现的\",{\"1\":{\"460\":1}}],[\"索引是默认开启的\",{\"1\":{\"460\":1}}],[\"索引是数据结构\",{\"1\":{\"412\":1}}],[\"索引进行优化\",{\"1\":{\"460\":1}}],[\"索引只适合搜索等值的查询\",{\"1\":{\"460\":1}}],[\"索引存在于\",{\"1\":{\"460\":1}}],[\"索引底层的数据结构是散列表\",{\"1\":{\"460\":1}}],[\"索引内部就判断了\",{\"1\":{\"455\":1}}],[\"索引里面特意去掉了\",{\"1\":{\"455\":1}}],[\"索引字段的值必须唯一\",{\"1\":{\"448\":1}}],[\"索引字段上使用\",{\"1\":{\"416\":2}}],[\"索引类型\",{\"0\":{\"446\":1},\"2\":{\"453\":1,\"490\":1}}],[\"索引的优缺点\",{\"0\":{\"461\":1}}],[\"索引的名字\",{\"1\":{\"447\":2,\"448\":2,\"450\":2}}],[\"索引的一些特点\",{\"0\":{\"420\":1}}],[\"索引的数据结构特点\",{\"1\":{\"460\":1}}],[\"索引的数据结构\",{\"0\":{\"412\":1}}],[\"索引查询的机制\",{\"0\":{\"417\":1}}],[\"索引失效\",{\"1\":{\"416\":2,\"506\":1}}],[\"索引会失效\",{\"1\":{\"416\":1}}],[\"索引哪些情况下会失效情况\",{\"0\":{\"416\":1}}],[\"索引文件仅保存数据记录的地址\",{\"1\":{\"414\":1}}],[\"索引值和data数据分布在整棵树结构中\",{\"1\":{\"340\":1}}],[\"索引和记录分开\",{\"1\":{\"308\":1}}],[\"索引和记录在一起存储\",{\"1\":{\"308\":1}}],[\"索引结构\",{\"1\":{\"308\":1}}],[\"索引\",{\"0\":{\"459\":1,\"460\":1},\"1\":{\"231\":1,\"412\":1,\"416\":1,\"451\":1,\"460\":2}}],[\"跳表是一个最典型的空间换时间解决方案\",{\"1\":{\"234\":1}}],[\"跳表是可以实现二分查找的有序链表\",{\"1\":{\"231\":1}}],[\"跳表的实现\",{\"0\":{\"232\":1}}],[\"跳表=链表+多级索引\",{\"1\":{\"231\":1}}],[\"压缩包等\",{\"1\":{\"966\":1}}],[\"压缩\",{\"1\":{\"261\":1}}],[\"压缩文件这样的二进制数据\",{\"1\":{\"227\":1}}],[\"压缩列表zlentry节点结构\",{\"1\":{\"219\":1}}],[\"音频\",{\"1\":{\"227\":1}}],[\"配和\",{\"1\":{\"227\":1}}],[\"配置信息\",{\"0\":{\"1061\":1}}],[\"配置一对多关系\",{\"1\":{\"886\":1}}],[\"配置方式\",{\"1\":{\"664\":1,\"665\":1,\"666\":1,\"667\":1}}],[\"配置重试机制\",{\"1\":{\"658\":1}}],[\"配置celery实例\",{\"0\":{\"648\":1}}],[\"配置configmap的四种方式\",{\"0\":{\"71\":1}}],[\"配置到注意事项\",{\"1\":{\"645\":1}}],[\"配置相对复杂\",{\"1\":{\"605\":1}}],[\"配置\",{\"1\":{\"555\":1}}],[\"配置的时候以逗号隔开即可\",{\"1\":{\"503\":1}}],[\"配置变量和错误记录的显着增强\",{\"1\":{\"430\":1}}],[\"配置文件缺失\",{\"1\":{\"744\":1}}],[\"配置文件\",{\"1\":{\"334\":2}}],[\"配置redis\",{\"1\":{\"256\":1}}],[\"配置ipvs\",{\"1\":{\"108\":1}}],[\"配置路由转发\",{\"1\":{\"108\":1}}],[\"配置生效\",{\"1\":{\"63\":1}}],[\"额外空间并\",{\"1\":{\"1265\":1}}],[\"额外的一字节用于保存空字符\",{\"1\":{\"227\":1}}],[\"额外的未使用空间\",{\"1\":{\"227\":1}}],[\"额外分配的未使用空间数量由以下公式决定\",{\"1\":{\"227\":1}}],[\"额外部署一个与稳定集群规模相同的新集群\",{\"1\":{\"169\":1}}],[\"惰性计算还可以在大规模数据处理中平滑处理时间\",{\"1\":{\"893\":1}}],[\"惰性空间释放用于优化\",{\"1\":{\"227\":1}}],[\"惰性空间释放\",{\"1\":{\"227\":1}}],[\"惰性删除\",{\"1\":{\"211\":1}}],[\"些字节的数量就由\",{\"1\":{\"227\":1}}],[\"程序输出结果\",{\"1\":{\"932\":1,\"941\":1}}],[\"程序如何以非阻塞的方式继续执行其他任务\",{\"1\":{\"898\":1}}],[\"程序可以通过回调函数\",{\"1\":{\"898\":1}}],[\"程序可以继续执行其他任务\",{\"1\":{\"898\":1}}],[\"程序不会阻塞当前线程或进程\",{\"1\":{\"898\":1}}],[\"程序不仅会为\",{\"1\":{\"227\":1}}],[\"程序会阻塞\",{\"1\":{\"898\":1}}],[\"程序运行异常定位\",{\"1\":{\"729\":1}}],[\"程序试图执行一个运行时间很长的数据库事务\",{\"0\":{\"583\":1}}],[\"程序并不立即使用内存重分配来回收缩短后多出来的字节\",{\"1\":{\"227\":1}}],[\"程序需要通过内存重分配来释放字符串不再使用的那部分空间\",{\"1\":{\"227\":1}}],[\"程序需要先通过内存重分配来扩展底层数组的空间大小\",{\"1\":{\"227\":1}}],[\"程序必须遍历整个字符串\",{\"1\":{\"227\":1}}],[\"假期等时间点如何停止所有的定时任务\",{\"0\":{\"615\":1}}],[\"假设有一个很长的花坛\",{\"1\":{\"1376\":1}}],[\"假设你是一位很棒的家长\",{\"1\":{\"1364\":1}}],[\"假设第一次延默认方向\",{\"1\":{\"1345\":1}}],[\"假设石头的重量分别为\",{\"1\":{\"1274\":1}}],[\"假设数组为\",{\"1\":{\"1207\":1}}],[\"假设我们的程序要在dest目录下新建一些文件夹\",{\"1\":{\"935\":1}}],[\"假设我们有多个url需要并发下载\",{\"1\":{\"925\":1}}],[\"假设我们以col1为主键\",{\"1\":{\"413\":1}}],[\"假设这里执行的代码可能抛出多种类型的异常\",{\"1\":{\"743\":1}}],[\"假设订单未准备好\",{\"1\":{\"565\":1}}],[\"假设\",{\"1\":{\"482\":1,\"499\":1,\"513\":1}}],[\"假设创建一个\",{\"1\":{\"181\":1}}],[\"假如target为5求得也就是\",{\"1\":{\"1395\":1}}],[\"假如i和j之间的距离小于1\",{\"1\":{\"1299\":1}}],[\"假如一个字符本身就是回文串\",{\"1\":{\"1298\":1}}],[\"假如我们需要一个永远都是正数的整数类型\",{\"1\":{\"902\":1}}],[\"假如服务器给了set\",{\"1\":{\"689\":1}}],[\"假如定位是只读缓存来说\",{\"1\":{\"287\":1}}],[\"假如缓存失败\",{\"1\":{\"284\":1}}],[\"假定用户在执行这个函数时\",{\"1\":{\"227\":1}}],[\"杜绝缓冲区溢出\",{\"1\":{\"227\":1}}],[\"本层集合中元素\",{\"1\":{\"1348\":1}}],[\"本题要求找到不靠边的陆地面积\",{\"1\":{\"1354\":1}}],[\"本题是都是出现了奇数个\",{\"1\":{\"1339\":1}}],[\"本题相对书上原题稍作改动\",{\"1\":{\"1335\":1}}],[\"本题和上题的区别就是这里可以交易多次\",{\"1\":{\"1292\":1}}],[\"本题和上题最大的不同就是本题是有向图\",{\"1\":{\"1237\":1}}],[\"本身包含了认证信息\",{\"1\":{\"698\":1}}],[\"本身的长度\",{\"1\":{\"227\":1}}],[\"本文将介绍如何使用\",{\"1\":{\"560\":1}}],[\"本文将从基础用法\",{\"1\":{\"645\":1}}],[\"本文将从\",{\"1\":{\"540\":1}}],[\"本次rewrite触发时aof文件应该增长的百分比\",{\"1\":{\"260\":1}}],[\"本质上就是个高级点的多叉树而已\",{\"1\":{\"1217\":1}}],[\"本质上是将\",{\"1\":{\"31\":1}}],[\"本质就是访问版本链\",{\"1\":{\"374\":1}}],[\"本质就是判断具体数据存不存在一个大的集合中\",{\"1\":{\"239\":1}}],[\"等价关系\",{\"1\":{\"1225\":1}}],[\"等价于表级锁\",{\"1\":{\"408\":1}}],[\"等框架原生支持\",{\"1\":{\"1173\":1}}],[\"等协议\",{\"1\":{\"1161\":1}}],[\"等代理\",{\"1\":{\"1088\":1}}],[\"等服务端不再发送数据时\",{\"1\":{\"954\":1}}],[\"等多种方式实现\",{\"1\":{\"636\":1}}],[\"等\",{\"1\":{\"588\":1,\"962\":1,\"986\":2,\"1143\":1,\"1162\":1}}],[\"等轻量级数据库时\",{\"1\":{\"579\":1}}],[\"等信息\",{\"1\":{\"504\":1}}],[\"等等\",{\"1\":{\"494\":1}}],[\"等随机数作为主键索引\",{\"1\":{\"442\":1}}],[\"等函数\",{\"1\":{\"394\":1}}],[\"等值查询访问哈希索引的数据非常快\",{\"1\":{\"315\":1,\"462\":1}}],[\"等于0\",{\"1\":{\"533\":1}}],[\"等于\",{\"1\":{\"226\":1,\"1281\":2,\"1326\":1}}],[\"等待\",{\"1\":{\"1035\":3}}],[\"等待服务端处理完数据后\",{\"1\":{\"953\":1}}],[\"等待所有任务完成\",{\"1\":{\"924\":1,\"925\":1}}],[\"等待消费者线程完成\",{\"1\":{\"916\":1}}],[\"等待生产者线程完成\",{\"1\":{\"916\":1}}],[\"等待其他协程完成\",{\"1\":{\"736\":1}}],[\"等待时间长\",{\"1\":{\"506\":1}}],[\"等待锁的时长\",{\"1\":{\"504\":1}}],[\"等待100s再删除\",{\"1\":{\"198\":1}}],[\"等待环境准备或是等待测试结果等\",{\"1\":{\"24\":1}}],[\"取区间中间节点\",{\"1\":{\"1390\":1}}],[\"取决于右移的位数\",{\"1\":{\"1327\":1}}],[\"取决于左移的位数\",{\"1\":{\"1326\":1}}],[\"取决于最终数据的合并效果\",{\"1\":{\"511\":1}}],[\"取反\",{\"0\":{\"1325\":1}}],[\"取模\",{\"1\":{\"1314\":1}}],[\"取得话为dp\",{\"1\":{\"1271\":1}}],[\"取得进展的秒数\",{\"1\":{\"160\":1}}],[\"取出优先级最高的项\",{\"1\":{\"915\":1}}],[\"取当前线程的线程id号\",{\"1\":{\"854\":1}}],[\"取最小值并保留安全余量\",{\"1\":{\"725\":1}}],[\"取值1字节时\",{\"1\":{\"219\":1}}],[\"前两个用例也是可以通过的\",{\"1\":{\"1307\":1}}],[\"前后两个指针的字符串一致即可\",{\"1\":{\"1297\":1}}],[\"前后两个指针分别指向字符的前后\",{\"1\":{\"1297\":1}}],[\"前\",{\"1\":{\"1242\":1,\"1366\":2}}],[\"前序位置\",{\"1\":{\"1220\":1}}],[\"前面说了从左到右\",{\"1\":{\"1207\":1}}],[\"前一个格子的最小血量减去当前格子的血量\",{\"1\":{\"1303\":1}}],[\"前一个请求完成后再处理下一个\",{\"1\":{\"1161\":1}}],[\"前一天持有股票的最大利润dp\",{\"1\":{\"1292\":1}}],[\"前一张表的行在当前这张表中只有一行与之对应\",{\"1\":{\"349\":1}}],[\"前身\",{\"1\":{\"1146\":1}}],[\"前端使用socket\",{\"0\":{\"681\":1}}],[\"前者更侧重于构建一个强大的分布式任务处理系统\",{\"1\":{\"607\":1}}],[\"前缀\",{\"1\":{\"460\":2}}],[\"前节点占用的内存字节数\",{\"1\":{\"219\":1}}],[\"前节点\",{\"1\":{\"219\":1}}],[\"前个任务没执行完\",{\"1\":{\"202\":1}}],[\"z从小到大\",{\"1\":{\"1379\":1}}],[\"z\",{\"1\":{\"839\":1,\"1003\":1,\"1300\":1,\"1379\":5}}],[\"z=20\",{\"1\":{\"839\":1,\"1003\":1}}],[\"zero\",{\"1\":{\"755\":2,\"847\":1,\"848\":3,\"1009\":4}}],[\"zeros\",{\"1\":{\"713\":1}}],[\"zerodivisionerror\",{\"1\":{\"532\":1,\"743\":1,\"748\":1,\"755\":2,\"847\":1,\"848\":2,\"1009\":3}}],[\"zs\",{\"1\":{\"534\":3}}],[\"zip\",{\"1\":{\"1384\":1},\"2\":{\"222\":1}}],[\"ziplist\",{\"1\":{\"218\":1,\"220\":1}}],[\"ziplist是一个经过特殊编码的双向链表\",{\"1\":{\"217\":1}}],[\"zlentry实体结构解析\",{\"0\":{\"219\":1}}],[\"普通的查询是快照读\",{\"1\":{\"482\":2}}],[\"普通的双向链表会有两个指针\",{\"1\":{\"218\":1}}],[\"普通索引\",{\"0\":{\"447\":1},\"1\":{\"448\":1}}],[\"普通数组的遍历是根据数组里存储的数据类型找到下一个元素的\",{\"1\":{\"218\":1}}],[\"紧凑的数据结构\",{\"1\":{\"218\":1}}],[\"简化数据操作\",{\"1\":{\"1155\":1}}],[\"简化版\",{\"1\":{\"1074\":1}}],[\"简而言之\",{\"1\":{\"899\":1}}],[\"简称\",{\"1\":{\"455\":1,\"460\":1}}],[\"简称sql语句复制\",{\"1\":{\"394\":1}}],[\"简称rr\",{\"1\":{\"372\":1}}],[\"简称rc\",{\"1\":{\"372\":1}}],[\"简称bp\",{\"1\":{\"318\":1}}],[\"简称cow\",{\"1\":{\"256\":1}}],[\"简单理解就是非进位相加\",{\"1\":{\"1324\":1}}],[\"简单理解就是对数据在某个时刻的状态拍成照片记录下来\",{\"1\":{\"477\":1}}],[\"简单说\",{\"1\":{\"1225\":1}}],[\"简单同步代码\",{\"1\":{\"1172\":1}}],[\"简单字段支持\",{\"1\":{\"1156\":1}}],[\"简单模式\",{\"1\":{\"784\":2}}],[\"简单工厂模式适合于那些需求明确且不太可能频繁变化的系统\",{\"1\":{\"793\":1}}],[\"简单工厂模式是最基础的形式\",{\"1\":{\"790\":1}}],[\"简单工厂模式\",{\"0\":{\"790\":1}}],[\"简单工厂\",{\"0\":{\"765\":1},\"1\":{\"764\":1}}],[\"简单异常捕获\",{\"0\":{\"742\":1}}],[\"简单任务\",{\"1\":{\"710\":1}}],[\"简单直观\",{\"1\":{\"667\":1}}],[\"简单粗暴容易理解\",{\"1\":{\"513\":1}}],[\"简单的嵌套循环连接\",{\"1\":{\"513\":1}}],[\"简单的说幻读指的的当用户读取某一范围的数据行时\",{\"1\":{\"482\":1}}],[\"简单查询\",{\"1\":{\"349\":1}}],[\"简单讲就是根据表中的数据的逻辑关系\",{\"1\":{\"302\":1}}],[\"简单来说就是上下文\",{\"1\":{\"1048\":1}}],[\"简单来说就是python\",{\"1\":{\"682\":1}}],[\"简单来说迪米特法则想要表达的思想就是\",{\"1\":{\"762\":1}}],[\"简单来说嵌套循环连接算法就是一个双层\",{\"1\":{\"513\":1}}],[\"简单来说\",{\"1\":{\"299\":1,\"674\":1}}],[\"简单示例\",{\"0\":{\"101\":1,\"125\":1,\"832\":1,\"996\":1}}],[\"简短字符串的情况\",{\"1\":{\"218\":1}}],[\"获得\",{\"1\":{\"1281\":5}}],[\"获得当前应用的信息\",{\"1\":{\"1052\":1}}],[\"获得高效的存储空间\",{\"1\":{\"218\":1}}],[\"获准排他锁的事务既能读数据\",{\"1\":{\"404\":1}}],[\"获取运行状态\",{\"1\":{\"1194\":1}}],[\"获取配置信息\",{\"1\":{\"1194\":2}}],[\"获取关键字\",{\"0\":{\"1187\":1},\"1\":{\"1188\":1}}],[\"获取用户信息\",{\"1\":{\"1101\":1}}],[\"获取用户姓名\",{\"1\":{\"531\":1}}],[\"获取的是get请求的参数\",{\"1\":{\"1101\":1}}],[\"获取的结果\",{\"1\":{\"507\":1,\"524\":1}}],[\"获取当前的应用\",{\"1\":{\"1101\":1}}],[\"获取当前请求对象\",{\"1\":{\"1082\":1}}],[\"获取当前应用实例\",{\"1\":{\"1082\":1}}],[\"获取view\",{\"1\":{\"1063\":1}}],[\"获取methods\",{\"1\":{\"1063\":1}}],[\"获取endpoint\",{\"1\":{\"1063\":1}}],[\"获取全部\",{\"1\":{\"862\":1}}],[\"获取jenkins配置信息\",{\"1\":{\"662\":1}}],[\"获取任务结果\",{\"0\":{\"653\":1}}],[\"获取数据库连接\",{\"1\":{\"579\":1}}],[\"获取数据上的排他锁\",{\"1\":{\"404\":1}}],[\"获取连接的超时时间\",{\"1\":{\"579\":1}}],[\"获取类型为node的资源列表\",{\"1\":{\"125\":1}}],[\"获取类型为pod的资源列表\",{\"1\":{\"125\":1}}],[\"获取类型为deployment的资源列表\",{\"1\":{\"125\":1}}],[\"获取一个复制控制器\",{\"1\":{\"124\":1}}],[\"牺牲读取的性能\",{\"1\":{\"218\":1}}],[\"数字乘积\",{\"0\":{\"1372\":1}}],[\"数字前加一个负号\",{\"1\":{\"1325\":1}}],[\"数子证书工作流程\",{\"1\":{\"973\":1}}],[\"数据包的往返时间越长\",{\"1\":{\"959\":1}}],[\"数据同步和线程安全是必须面对的挑战\",{\"1\":{\"914\":1}}],[\"数据级别的高并发\",{\"0\":{\"814\":1}}],[\"数据清理\",{\"1\":{\"804\":1}}],[\"数据编解码等细节隐藏起来\",{\"1\":{\"769\":1}}],[\"数据为空\",{\"1\":{\"751\":1}}],[\"数据\",{\"1\":{\"676\":1,\"693\":1}}],[\"数据泄露迹象等安全相关告警必须得到高度重视\",{\"1\":{\"631\":1}}],[\"数据分析与反馈循环\",{\"0\":{\"628\":1}}],[\"数据持久化逻辑\",{\"1\":{\"545\":1}}],[\"数据模型\",{\"1\":{\"542\":1}}],[\"数据类型\",{\"2\":{\"927\":1}}],[\"数据类型转换\",{\"1\":{\"797\":1}}],[\"数据类型的实现都很精简\",{\"1\":{\"434\":1}}],[\"数据类不要过于凌乱\",{\"1\":{\"536\":1}}],[\"数据类\",{\"1\":{\"534\":1}}],[\"数据类和是实现类\",{\"1\":{\"534\":1}}],[\"数据的吞吐量\",{\"1\":{\"813\":1}}],[\"数据的运算分组\",{\"1\":{\"507\":1}}],[\"数据的一致性更加可靠\",{\"1\":{\"433\":1}}],[\"数据运算花费了太多时间\",{\"1\":{\"507\":1}}],[\"数据访问消耗的了太多的时间\",{\"1\":{\"507\":1}}],[\"数据双写流程\",{\"1\":{\"469\":1}}],[\"数据一致性\",{\"1\":{\"425\":1}}],[\"数据一致性要求较高\",{\"1\":{\"310\":1}}],[\"数据一致性要求不高\",{\"1\":{\"309\":1}}],[\"数据落盘后checkpoint会将日志上的相关记录擦除掉\",{\"1\":{\"390\":1}}],[\"数据恢复\",{\"1\":{\"386\":1}}],[\"数据是被存放在内存或者是磁盘中的\",{\"1\":{\"362\":1}}],[\"数据返回可能是多条\",{\"1\":{\"350\":1}}],[\"数据记录都存放在叶子节点中\",{\"1\":{\"344\":1}}],[\"数据页只保存了前768字节的前缀数据\",{\"1\":{\"327\":1}}],[\"数据页的编号\",{\"1\":{\"318\":1}}],[\"数据文件\",{\"1\":{\"320\":1,\"334\":2,\"469\":1}}],[\"数据更新较为频繁的场景\",{\"1\":{\"310\":1}}],[\"数据修改相对较少\",{\"1\":{\"309\":1}}],[\"数据迁移\",{\"1\":{\"304\":1}}],[\"数据量不够就不要分表\",{\"1\":{\"299\":1}}],[\"数据不一致问题\",{\"1\":{\"283\":1}}],[\"数据库基类设置\",{\"0\":{\"879\":1}}],[\"数据库对于高并发的结构下需要的承受多大的压力\",{\"1\":{\"814\":1}}],[\"数据库查询\",{\"1\":{\"664\":1,\"665\":1}}],[\"数据库\",{\"1\":{\"657\":1}}],[\"数据库的事务是一种非常昂贵的操作\",{\"1\":{\"583\":1}}],[\"数据库的时候\",{\"1\":{\"358\":2}}],[\"数据库连接泄漏\",{\"1\":{\"714\":1}}],[\"数据库连接失败\",{\"1\":{\"550\":1}}],[\"数据库连接池\",{\"0\":{\"358\":1}}],[\"数据库支持同时两种日志存储方式\",{\"1\":{\"503\":1}}],[\"数据库事务的隔离级别有4个\",{\"1\":{\"425\":1}}],[\"数据库中与该条sql的关系\",{\"1\":{\"507\":1}}],[\"数据库中不同的表对应着不同的业务\",{\"1\":{\"300\":1}}],[\"数据库中的值要是最终值\",{\"1\":{\"274\":1}}],[\"数据库实时备份\",{\"1\":{\"277\":1}}],[\"数据库镜像\",{\"1\":{\"277\":1}}],[\"数据就会全部丢失\",{\"1\":{\"255\":1}}],[\"数据结构被发明出来很多时候都是为了遍历和访问\",{\"1\":{\"1220\":1}}],[\"数据结构\",{\"0\":{\"1428\":1},\"2\":{\"222\":1,\"236\":1}}],[\"数据结构ziplist\",{\"0\":{\"216\":1}}],[\"数组nums包含从0到n的所有整数\",{\"1\":{\"1331\":1,\"1335\":1}}],[\"数组不能分割成两个元素和相等的子集\",{\"1\":{\"1274\":1}}],[\"数组可以分割成\",{\"1\":{\"1274\":1}}],[\"数组为灰色的节点\",{\"1\":{\"1220\":1}}],[\"数组始终是有序的\",{\"1\":{\"1207\":1}}],[\"数组\",{\"1\":{\"1207\":1,\"1274\":1},\"2\":{\"1211\":1,\"1212\":1}}],[\"数组的实际长度将为\",{\"1\":{\"227\":1}}],[\"数组的实际长度将变成\",{\"1\":{\"227\":1}}],[\"数组的长度不一定就是字符数量加一\",{\"1\":{\"227\":1}}],[\"数组里面可以包含未使用的字节\",{\"1\":{\"227\":1}}],[\"数组中的所有元素\",{\"1\":{\"1207\":1}}],[\"数组中的元素而不改变其余元素的顺序\",{\"1\":{\"1207\":1,\"1286\":1}}],[\"数组中未使用字节的数量\",{\"1\":{\"226\":1}}],[\"数组中已使用字节的数量\",{\"1\":{\"226\":1}}],[\"数量\",{\"1\":{\"159\":1,\"162\":1,\"197\":1}}],[\"立即创建一定数量的线程\",{\"1\":{\"1036\":1}}],[\"立即启动应急响应计划\",{\"1\":{\"631\":1}}],[\"立即通知相关开发者进行修复\",{\"1\":{\"630\":1}}],[\"立即删除\",{\"1\":{\"211\":1}}],[\"立刻读mysql\",{\"1\":{\"283\":1}}],[\"立刻发送\",{\"1\":{\"135\":1}}],[\"立马查询另外一个缓冲数据这样可以有效的避免缓冲击穿的现象\",{\"1\":{\"251\":1}}],[\"引入的\",{\"1\":{\"1069\":1}}],[\"引入了窗口这个概念\",{\"1\":{\"959\":1}}],[\"引入了async\",{\"1\":{\"923\":1}}],[\"引入了索引下推优化\",{\"1\":{\"455\":1}}],[\"引出了\",{\"1\":{\"976\":1}}],[\"引出下一章内存淘汰策略\",{\"1\":{\"210\":1}}],[\"引言\",{\"0\":{\"540\":1,\"587\":1,\"645\":1,\"702\":1}}],[\"引起数据库整体的并发能力下降\",{\"1\":{\"434\":1}}],[\"引发全表扫描\",{\"1\":{\"408\":1}}],[\"引擎为了解决\",{\"1\":{\"482\":1}}],[\"引擎数据页的可靠性\",{\"1\":{\"469\":1}}],[\"引擎根据查询统计发现某一查询满足\",{\"1\":{\"460\":1}}],[\"引擎\",{\"1\":{\"404\":1}}],[\"引擎共用\",{\"1\":{\"385\":1}}],[\"引擎缓存等\",{\"1\":{\"332\":1}}],[\"引用次数大于它的论文数量\",{\"1\":{\"1403\":1}}],[\"引用源代码的变量和返回值从而可以改变源代码的行为\",{\"1\":{\"831\":1,\"995\":1}}],[\"引用\",{\"1\":{\"69\":1}}],[\"周\",{\"1\":{\"203\":1,\"611\":1}}],[\"周期性地创建\",{\"1\":{\"200\":1}}],[\"月\",{\"1\":{\"203\":1}}],[\"日志的级别设置\",{\"1\":{\"755\":1}}],[\"日志聚合\",{\"1\":{\"714\":1}}],[\"日志管理和分析\",{\"1\":{\"641\":1}}],[\"日志和异常处理让维护无忧\",{\"1\":{\"557\":1}}],[\"日志规范\",{\"1\":{\"550\":1}}],[\"日志记录\",{\"0\":{\"619\":1},\"1\":{\"1142\":1}}],[\"日志记录到系统的专用日志表中\",{\"1\":{\"503\":1}}],[\"日志记录的是内存数据修改的指令记录文本\",{\"1\":{\"255\":1}}],[\"日志复制到从服务器上执行一遍\",{\"1\":{\"494\":1}}],[\"日志量小\",{\"1\":{\"394\":1}}],[\"日志中会记录每一行数据被修改的情况\",{\"1\":{\"393\":1}}],[\"日志有三种模式\",{\"0\":{\"392\":1}}],[\"日志文件\",{\"1\":{\"334\":2}}],[\"日志文件存在一起\",{\"1\":{\"264\":1}}],[\"日志就可以完全替代之前的\",{\"1\":{\"264\":1}}],[\"日志很小\",{\"1\":{\"264\":1}}],[\"日志不再是全量的日志\",{\"1\":{\"264\":1}}],[\"日志不丢失\",{\"1\":{\"260\":1}}],[\"日志性能相对\",{\"1\":{\"264\":1}}],[\"日志是连续的增量备份\",{\"1\":{\"255\":1}}],[\"日志\",{\"0\":{\"259\":1,\"755\":1},\"1\":{\"255\":1,\"264\":1,\"494\":1}}],[\"日志分析等手段快速恢复\",{\"1\":{\"32\":1}}],[\"日\",{\"1\":{\"203\":1}}],[\"表基类\",{\"1\":{\"879\":1}}],[\"表达开发者对代码状态的期望\",{\"1\":{\"756\":1}}],[\"表达式完全可以是\",{\"1\":{\"1273\":1}}],[\"表达式\",{\"1\":{\"202\":1,\"1274\":2}}],[\"表也只需要访问一次\",{\"1\":{\"513\":1}}],[\"表进行批量比较\",{\"1\":{\"513\":1}}],[\"表进行比较\",{\"1\":{\"513\":1}}],[\"表扫描\",{\"1\":{\"513\":2}}],[\"表有\",{\"1\":{\"513\":2}}],[\"表名\",{\"1\":{\"498\":1}}],[\"表结构\",{\"1\":{\"482\":1}}],[\"表来实现的\",{\"1\":{\"461\":1}}],[\"表\",{\"1\":{\"460\":1}}],[\"表数据存储在独立的地方\",{\"1\":{\"440\":1}}],[\"表数据文件本身就是按b+tree组织的一个索引结构\",{\"1\":{\"414\":1}}],[\"表锁\",{\"1\":{\"407\":4}}],[\"表级死锁\",{\"0\":{\"407\":1}}],[\"表级锁\",{\"1\":{\"402\":1}}],[\"表里所有行和间隙都会加x锁\",{\"1\":{\"405\":1}}],[\"表明生成该版本的事务在当前事务生成readview后才开启\",{\"1\":{\"371\":1}}],[\"表明生成该版本的事务在当前事务生成readview前已经提交\",{\"1\":{\"371\":1}}],[\"表明当前事务在访问自己修改过的记录\",{\"1\":{\"371\":1}}],[\"表明查询使用了\",{\"1\":{\"349\":1}}],[\"表明查询使用了覆盖索引\",{\"1\":{\"349\":1}}],[\"表对应一个\",{\"1\":{\"334\":2}}],[\"表的增删查改\",{\"1\":{\"867\":1}}],[\"表的所有记录\",{\"1\":{\"513\":1}}],[\"表的\",{\"1\":{\"513\":1}}],[\"表的索引相关信息\",{\"1\":{\"334\":1}}],[\"表的数据\",{\"1\":{\"334\":1}}],[\"表中的所有记录\",{\"1\":{\"513\":1}}],[\"表中的某些列可能会存储null值\",{\"1\":{\"323\":1}}],[\"表中\",{\"1\":{\"503\":1}}],[\"表中也没有定义唯一索引\",{\"1\":{\"369\":1}}],[\"表中只有一行数据\",{\"1\":{\"349\":1}}],[\"表中字段太多且包含大字段的时候\",{\"1\":{\"301\":1}}],[\"表空间\",{\"1\":{\"318\":1}}],[\"表示研究者的第\",{\"1\":{\"1403\":1}}],[\"表示可以分割出一个区间\",{\"1\":{\"1385\":1}}],[\"表示可以拆分为一个或多个在字典中出现的单词\",{\"1\":{\"1276\":1}}],[\"表示为蓝色部分\",{\"1\":{\"1377\":1}}],[\"表示种植了花\",{\"1\":{\"1376\":1}}],[\"表示没种植花\",{\"1\":{\"1376\":1}}],[\"表示没有分配虚拟ip端点被发布为一组port\",{\"1\":{\"87\":1}}],[\"表示花坛\",{\"1\":{\"1376\":1}}],[\"表示一个陆地单元格\",{\"1\":{\"1354\":1}}],[\"表示一个海洋单元格\",{\"1\":{\"1354\":1}}],[\"表示一支给定股票第\",{\"1\":{\"1292\":2}}],[\"表示着到达i\",{\"1\":{\"1303\":2}}],[\"表示区间范围\",{\"1\":{\"1299\":1}}],[\"表示某支股票第\",{\"1\":{\"1292\":1}}],[\"表示我们要维护元素\",{\"1\":{\"1263\":1}}],[\"表示我们要遍历的元素信息\",{\"1\":{\"1263\":1}}],[\"表示在\",{\"1\":{\"1341\":2}}],[\"表示在选修课程\",{\"1\":{\"1242\":1}}],[\"表示在查询索引时\",{\"1\":{\"349\":1}}],[\"表示如果要学习课程\",{\"1\":{\"1241\":1}}],[\"表示如果job因为某种原因无法按调度准时启动\",{\"1\":{\"202\":1}}],[\"表示不允许将编号为\",{\"1\":{\"1237\":1}}],[\"表示不能将图的每个节点分到两个不同集合中\",{\"1\":{\"1236\":1}}],[\"表示图中在\",{\"1\":{\"1230\":1}}],[\"表示顶点\",{\"1\":{\"1229\":1}}],[\"表示第i天表示不持有股票的最大现金\",{\"1\":{\"1292\":1}}],[\"表示第i天表示持有股票的最大现金\",{\"1\":{\"1292\":1}}],[\"表示第\",{\"1\":{\"1209\":1,\"1274\":1,\"1292\":2,\"1378\":1}}],[\"表示这些子序列的数量\",{\"1\":{\"1208\":1}}],[\"表示这个版本是由将来启动的事务生成的\",{\"1\":{\"478\":1}}],[\"表示这个版本是已提交的事务生成的\",{\"1\":{\"478\":1}}],[\"表示以下标i为结尾的字符串s\",{\"1\":{\"1313\":1}}],[\"表示以\",{\"1\":{\"1208\":1}}],[\"表示空值或无值\",{\"1\":{\"986\":1}}],[\"表示服务器自身工作正常\",{\"1\":{\"967\":1}}],[\"表示客户端请求的功能还不支持\",{\"1\":{\"967\":1}}],[\"表示禁止访问资源\",{\"1\":{\"967\":1}}],[\"表示临时重定向\",{\"1\":{\"967\":1}}],[\"表示已收到消息\",{\"1\":{\"958\":1}}],[\"表示向服务端发起连接\",{\"1\":{\"951\":1}}],[\"表示用户的私钥\",{\"1\":{\"697\":1}}],[\"表示该令牌由谁创建\",{\"1\":{\"696\":1}}],[\"表示将日志存入数据库\",{\"1\":{\"503\":1}}],[\"表示将日志存入文件\",{\"1\":{\"503\":1}}],[\"表示将日志记录的修改写进磁盘\",{\"1\":{\"390\":1}}],[\"表示慢查询日志是禁用的\",{\"1\":{\"503\":1}}],[\"表示写满\",{\"1\":{\"390\":1}}],[\"表示日志当前记录的位置\",{\"1\":{\"390\":1}}],[\"表示mysql需要使用临时表来存储结果集\",{\"1\":{\"351\":1}}],[\"表示直接访问索引就能够获取到所需要的数据\",{\"1\":{\"351\":1}}],[\"表示当被驱动表的没有使用索引的时候\",{\"1\":{\"349\":1}}],[\"表示当前读\",{\"1\":{\"482\":1}}],[\"表示当前记录的类型\",{\"1\":{\"324\":1}}],[\"表示当前记录在记录堆中的位置信息\",{\"1\":{\"324\":1}}],[\"表示当前分组中管理的记录数\",{\"1\":{\"324\":1}}],[\"表示估算的经过查询条件删选出的列数的百分比\",{\"1\":{\"349\":1}}],[\"表示查询索引时使用的字节数\",{\"1\":{\"349\":1}}],[\"表示开启了\",{\"1\":{\"349\":1}}],[\"表示包含子查询\",{\"1\":{\"349\":1}}],[\"表示从当前记录的真实数据到下一条记录的真实数据的地址偏移量\",{\"1\":{\"324\":1}}],[\"表示最大记录\",{\"1\":{\"324\":1}}],[\"表示最小记录\",{\"1\":{\"324\":2}}],[\"表示b+树非叶节点记录\",{\"1\":{\"324\":1}}],[\"表示b+树非叶子节点记录\",{\"1\":{\"324\":1}}],[\"表示普通用户记录\",{\"1\":{\"324\":1}}],[\"表示普通记录\",{\"1\":{\"324\":1}}],[\"表示下一条记录的相对位置\",{\"1\":{\"324\":1}}],[\"表示运行aof重写时文件最小体积\",{\"1\":{\"262\":1}}],[\"表示\",{\"1\":{\"260\":2,\"349\":1,\"415\":1,\"951\":1,\"1229\":1,\"1241\":1,\"1273\":1,\"1274\":1,\"1282\":1}}],[\"表示上一个entry的长度小于254字节\",{\"1\":{\"219\":1}}],[\"表示前1个zlentry的长度\",{\"1\":{\"219\":1}}],[\"表示部署暂停\",{\"1\":{\"153\":1}}],[\"禁止使用单字母作为变量\",{\"1\":{\"529\":1}}],[\"禁止\",{\"1\":{\"202\":1}}],[\"格式如下\",{\"1\":{\"498\":1}}],[\"格式定义的时间计划\",{\"1\":{\"200\":1}}],[\"格式为\",{\"1\":{\"124\":1}}],[\"除两个只出现一次的整数外\",{\"1\":{\"1340\":1}}],[\"除某个元素仅出现\",{\"1\":{\"1339\":2}}],[\"除此之外\",{\"1\":{\"769\":1}}],[\"除非使用global关键字\",{\"1\":{\"985\":1}}],[\"除非它们被限定在更小的作用域内\",{\"1\":{\"985\":1}}],[\"除非你有特殊的对象创建需求\",{\"1\":{\"900\":1}}],[\"除非服务器部署额外的逻辑\",{\"1\":{\"698\":1}}],[\"除非索引或优化器提示指示优化器使用不同的索引\",{\"1\":{\"487\":1}}],[\"除去根节点和叶子节点其他都是分支节点\",{\"1\":{\"338\":1}}],[\"除了上面提到的这两种写法\",{\"1\":{\"1393\":1}}],[\"除了某个元素只出现一次以外\",{\"1\":{\"1336\":2}}],[\"除了打印异常\",{\"1\":{\"757\":1}}],[\"除了调整的程序的逻辑没有其它的办法\",{\"1\":{\"407\":1}}],[\"除了获取字符串长度的复杂度高之外\",{\"1\":{\"227\":1}}],[\"除了\",{\"1\":{\"198\":1}}],[\"除当前数量外还要添加多少个实例\",{\"1\":{\"166\":1}}],[\"且该算法只使用常量额外空间\",{\"1\":{\"1336\":1}}],[\"且绘制的直线不与任何其他连线\",{\"1\":{\"1309\":1}}],[\"且最小值为1\",{\"1\":{\"1303\":1}}],[\"且满足\",{\"1\":{\"1289\":1}}],[\"且不重复的三元组\",{\"1\":{\"1257\":1}}],[\"且\",{\"1\":{\"1257\":1,\"1274\":1}}],[\"且本题的图需要自己构造\",{\"1\":{\"1237\":1}}],[\"且相邻节点的颜色都不同\",{\"1\":{\"1235\":1}}],[\"且两个子集内的顶点不相邻\",{\"1\":{\"1234\":1}}],[\"且这条附加的边不属于树中已存在的边\",{\"1\":{\"1230\":1}}],[\"且无需依赖第三方库\",{\"1\":{\"1069\":1}}],[\"且无法查到任意行\",{\"1\":{\"349\":1}}],[\"且仅通过策略接口与该对象进行交流\",{\"1\":{\"776\":1}}],[\"且算法的变化不会影响使用算法的客户\",{\"1\":{\"775\":1}}],[\"且每一张\",{\"1\":{\"334\":1}}],[\"且数据修改少\",{\"1\":{\"311\":1}}],[\"且尤其创建的所有\",{\"1\":{\"198\":1}}],[\"且区分大小写\",{\"1\":{\"100\":1}}],[\"设为\",{\"1\":{\"1217\":1}}],[\"设计一个算法计算出最大利润\",{\"1\":{\"1292\":1}}],[\"设计一个算法来计算你所能获取的最大利润\",{\"1\":{\"1292\":4}}],[\"设计一个健壮且高效的定时任务系统需要综合考虑多个方面的要求和技术细节\",{\"1\":{\"619\":1}}],[\"设计者决定引入gil\",{\"1\":{\"897\":1}}],[\"设计模式的六大原则\",{\"0\":{\"761\":1,\"762\":1}}],[\"设计模式\",{\"0\":{\"1416\":1},\"1\":{\"546\":1,\"764\":1,\"769\":1},\"2\":{\"773\":1,\"778\":1,\"786\":1,\"795\":1,\"802\":1,\"811\":1,\"1184\":1}}],[\"设计类的\",{\"0\":{\"546\":1}}],[\"设计目标是高效地存储数据\",{\"1\":{\"321\":1,\"322\":1}}],[\"设定明确的通知机制\",{\"0\":{\"636\":1}}],[\"设定\",{\"1\":{\"198\":1}}],[\"设置值并获取\",{\"1\":{\"1081\":1}}],[\"设置缓存\",{\"1\":{\"771\":1}}],[\"设置缓存的差异时间要大于数据插入到缓冲b的时间\",{\"1\":{\"252\":1}}],[\"设置进程启动方式\",{\"1\":{\"705\":1}}],[\"设置任务序列化方式\",{\"1\":{\"648\":1}}],[\"设置智能告警规则\",{\"1\":{\"641\":1}}],[\"设置性别\",{\"1\":{\"534\":2}}],[\"设置log\",{\"1\":{\"493\":1}}],[\"设置异常重试策略\",{\"1\":{\"285\":1}}],[\"设置两个redis缓存值\",{\"1\":{\"251\":1}}],[\"设置为内存为最大内存的3\",{\"1\":{\"210\":1}}],[\"设置为一个未使用的目录名\",{\"1\":{\"72\":1}}],[\"设置maxmemory参数\",{\"1\":{\"210\":1}}],[\"设置对象的具体特性\",{\"1\":{\"124\":1}}],[\"设置kube\",{\"1\":{\"108\":1}}],[\"设置了集群\",{\"1\":{\"93\":1}}],[\"设置\",{\"1\":{\"72\":1,\"107\":1,\"124\":1,\"388\":1,\"658\":1}}],[\"达到指定的数量时\",{\"1\":{\"197\":1}}],[\"任意两边之和要大于第三边\",{\"1\":{\"1379\":1}}],[\"任意两个不同的点都不连通\",{\"1\":{\"1225\":1}}],[\"任意顺序\",{\"1\":{\"1340\":1}}],[\"任意一种\",{\"1\":{\"1242\":1}}],[\"任意\",{\"1\":{\"1225\":1,\"1282\":1}}],[\"任何数字^本身都是0\",{\"1\":{\"1337\":1}}],[\"任何数本身都是0\",{\"1\":{\"1335\":1}}],[\"任何房间都可能对骑士的健康点数造成威胁\",{\"1\":{\"1303\":1}}],[\"任何\",{\"1\":{\"1289\":1}}],[\"任何一个生成器都会定义一个名为\",{\"1\":{\"1025\":1}}],[\"任何人都可以获得该令牌的所有权限\",{\"1\":{\"698\":1}}],[\"任何失败或延迟都需要被及时捕捉并记录下来\",{\"1\":{\"630\":1}}],[\"任何项目中不可避免地会存在各种各样的等待时间\",{\"1\":{\"24\":1}}],[\"任务接口\",{\"1\":{\"1036\":1}}],[\"任务e\",{\"1\":{\"920\":1}}],[\"任务d\",{\"1\":{\"920\":1}}],[\"任务c\",{\"1\":{\"919\":1}}],[\"任务2\",{\"1\":{\"912\":3}}],[\"任务1\",{\"1\":{\"912\":3}}],[\"任务b\",{\"1\":{\"908\":3,\"919\":1}}],[\"任务a\",{\"1\":{\"908\":3,\"919\":1}}],[\"任务的状态和执行过程中的异常处理等\",{\"1\":{\"899\":1}}],[\"任务会被添加到事件循环的事件队列中\",{\"1\":{\"899\":1}}],[\"任务被添加到事件队列中\",{\"1\":{\"899\":1}}],[\"任务间需严格隔离\",{\"1\":{\"724\":1}}],[\"任务队列\",{\"1\":{\"710\":1,\"1036\":1}}],[\"任务队列配置\",{\"0\":{\"654\":1}}],[\"任务保持轻量级\",{\"1\":{\"661\":1}}],[\"任务逻辑\",{\"1\":{\"660\":1}}],[\"任务优先级\",{\"1\":{\"659\":1}}],[\"任务幂等性与重试\",{\"0\":{\"658\":1}}],[\"任务结果存储\",{\"0\":{\"657\":1}}],[\"任务名称是否正确\",{\"1\":{\"656\":1}}],[\"任务未执行\",{\"0\":{\"656\":1}}],[\"任务路由\",{\"1\":{\"654\":1}}],[\"任务超时时间\",{\"1\":{\"654\":1}}],[\"任务调度类型\",{\"1\":{\"607\":1}}],[\"任务4次都没成\",{\"1\":{\"197\":1}}],[\"任务和定时任务\",{\"0\":{\"194\":1}}],[\"驱动表的选择要遵循一个规则\",{\"1\":{\"512\":1}}],[\"驱动表的确定非常的关键\",{\"1\":{\"512\":1}}],[\"驱动\",{\"1\":{\"190\":1}}],[\"例子\",{\"0\":{\"181\":1},\"1\":{\"843\":1,\"847\":1,\"1009\":1}}],[\"例如对不同类型的节点进行不同的访问\",{\"1\":{\"1178\":1}}],[\"例如io操作\",{\"1\":{\"899\":1}}],[\"例如int类型的数组访问下一个元素时每次只需要移动一个sizeof\",{\"1\":{\"218\":1}}],[\"例如磁盘\",{\"1\":{\"898\":1}}],[\"例如处理数据\",{\"1\":{\"806\":1}}],[\"例如在python中\",{\"1\":{\"898\":1}}],[\"例如在线订购系统的权限验证\",{\"1\":{\"804\":1}}],[\"例如在flask视图或django视图中\",{\"1\":{\"652\":1}}],[\"例如在使用\",{\"1\":{\"579\":1}}],[\"例如订单处理流程中的异常\",{\"1\":{\"632\":1}}],[\"例如flask\",{\"1\":{\"607\":1}}],[\"例如等待用户点击某个按钮\",{\"1\":{\"583\":1}}],[\"例如如果我们在使用orm\",{\"1\":{\"582\":1}}],[\"例如这个类中保存的基本都是数据相关的\",{\"1\":{\"534\":1}}],[\"例如有这样一条\",{\"1\":{\"513\":1}}],[\"例如知道了innodb的索引实现后\",{\"1\":{\"414\":1}}],[\"例如更改数据库表和更改内容的sql语句都会记录到binlog里\",{\"1\":{\"385\":1}}],[\"例如备份恢复\",{\"1\":{\"332\":1}}],[\"例如常见的\",{\"1\":{\"331\":1}}],[\"例如将订单表\",{\"1\":{\"302\":1}}],[\"例如a\",{\"1\":{\"260\":1}}],[\"例如模板的标签或容器镜像被更新\",{\"1\":{\"165\":1}}],[\"例如容器的镜像版本\",{\"1\":{\"115\":1}}],[\"例如避免将机密数据写入非易失性存储\",{\"1\":{\"76\":1}}],[\"例如通过运行\",{\"1\":{\"155\":1}}],[\"例如通过tdd\",{\"1\":{\"52\":1}}],[\"例如通过单元测试\",{\"1\":{\"51\":1}}],[\"例如通过静态代码分析\",{\"1\":{\"43\":1}}],[\"例如参与回顾会议\",{\"1\":{\"33\":1}}],[\"例如用\",{\"1\":{\"33\":1}}],[\"例如\",{\"1\":{\"31\":1,\"32\":3,\"34\":1,\"40\":1,\"42\":1,\"44\":1,\"51\":1,\"52\":1,\"54\":2,\"57\":1,\"93\":1,\"97\":1,\"112\":1,\"118\":1,\"120\":3,\"135\":1,\"155\":1,\"159\":6,\"349\":1,\"414\":1,\"416\":1,\"542\":1,\"592\":1,\"599\":1,\"611\":1,\"626\":1,\"635\":1,\"645\":1,\"732\":1,\"736\":1,\"742\":1,\"782\":1,\"790\":1,\"791\":1,\"792\":1,\"920\":1,\"1207\":1,\"1241\":1,\"1242\":1,\"1265\":1,\"1274\":1,\"1276\":1,\"1286\":1,\"1308\":1,\"1313\":1,\"1321\":1,\"1358\":1}}],[\"典型的应用场景\",{\"0\":{\"180\":1}}],[\"典型的访问方式是\",{\"1\":{\"95\":1}}],[\"作用域自动销毁\",{\"1\":{\"1077\":1}}],[\"作用区别\",{\"1\":{\"903\":1}}],[\"作用\",{\"0\":{\"239\":1,\"277\":1,\"380\":1,\"383\":1,\"386\":1},\"1\":{\"178\":1}}],[\"作为字典\",{\"1\":{\"1276\":1}}],[\"作为字典的key\",{\"1\":{\"824\":1}}],[\"作为第一个参数\",{\"1\":{\"900\":1}}],[\"作为现有类和目标接口之间的桥梁\",{\"1\":{\"797\":1}}],[\"作为结果后端\",{\"1\":{\"657\":1}}],[\"作为一个key\",{\"1\":{\"319\":1}}],[\"作为\",{\"1\":{\"169\":1}}],[\"作为容器的变量\",{\"1\":{\"77\":1}}],[\"作为挂载到一个或者多个容器卷中的文件\",{\"1\":{\"77\":1}}],[\"作为支撑\",{\"1\":{\"32\":1}}],[\"相邻\",{\"1\":{\"1353\":2}}],[\"相邻的元素不能同时取\",{\"1\":{\"1282\":1}}],[\"相邻的房屋装有相互连通的防盗系统\",{\"1\":{\"1280\":1}}],[\"相交\",{\"1\":{\"1309\":1}}],[\"相应的\",{\"1\":{\"1226\":1}}],[\"相关状态数据会一直保存着\",{\"1\":{\"962\":1}}],[\"相关的内容就释放了\",{\"1\":{\"962\":1}}],[\"相较于使用列表模拟队列\",{\"1\":{\"911\":1}}],[\"相信我写出来这个例子大家会觉得特别简单\",{\"1\":{\"735\":1}}],[\"相反\",{\"1\":{\"578\":1,\"898\":1}}],[\"相比于传统的线性搜索方法\",{\"1\":{\"610\":1}}],[\"相比于rdb的二进制文件\",{\"1\":{\"263\":1}}],[\"相比多个单一索引复合索引所需的开销更小\",{\"1\":{\"450\":1}}],[\"相对顺序\",{\"1\":{\"1266\":1}}],[\"相对简单\",{\"1\":{\"607\":1}}],[\"相对pg新老数据一起存放的基于xid的mvcc机制\",{\"1\":{\"434\":1}}],[\"相对于mysql基于binlog的逻辑复制\",{\"1\":{\"433\":1}}],[\"相对于\",{\"1\":{\"260\":1}}],[\"相对于save\",{\"1\":{\"256\":1}}],[\"相\",{\"1\":{\"416\":1}}],[\"相同两个数异或为0\",{\"1\":{\"1324\":1}}],[\"相同为0\",{\"1\":{\"1324\":1}}],[\"相同子序列的长度为dp\",{\"1\":{\"1313\":1}}],[\"相同\",{\"1\":{\"666\":1,\"1299\":1}}],[\"相同列值算一个\",{\"1\":{\"488\":1}}],[\"相同时\",{\"1\":{\"349\":1}}],[\"相同点\",{\"0\":{\"178\":1}}],[\"相当于队列的出队操作\",{\"1\":{\"908\":1}}],[\"相当于队列的入队操作\",{\"1\":{\"908\":1}}],[\"相当于实现了列表对象的浅拷贝\",{\"1\":{\"894\":1}}],[\"相当于现实生活中的上下文语义\",{\"1\":{\"845\":1,\"1007\":1,\"1048\":1}}],[\"相当于一个超级工厂\",{\"1\":{\"767\":1}}],[\"相当于\",{\"1\":{\"264\":1,\"1273\":1}}],[\"相互指责的现象\",{\"1\":{\"30\":1}}],[\"相互信任是高效合作的基础\",{\"1\":{\"30\":1}}],[\"相互信任\",{\"1\":{\"30\":1}}],[\"仅由小写英文字符组成\",{\"1\":{\"1308\":1}}],[\"仅由小写英文字母组成\",{\"1\":{\"1299\":1,\"1380\":1,\"1385\":1}}],[\"仅由数字和英文字母组成\",{\"1\":{\"1299\":1}}],[\"仅需\",{\"1\":{\"1172\":1}}],[\"仅支持\",{\"1\":{\"1162\":1}}],[\"仅支持基于相等选择器的需求\",{\"1\":{\"177\":1}}],[\"仅通过接口或基类的方法\",{\"1\":{\"762\":1}}],[\"仅替换\",{\"1\":{\"595\":1}}],[\"仅仅记录蛇身\",{\"1\":{\"1220\":1}}],[\"仅仅表示客户端不再发送数据了但是还能接收数据\",{\"1\":{\"954\":1}}],[\"仅仅只需要对其进行相应的权限验证之后\",{\"1\":{\"431\":1}}],[\"仅仅返回一条数据\",{\"1\":{\"350\":1}}],[\"仅在id=10的主键索引记录上加x锁\",{\"1\":{\"405\":1}}],[\"仅锁住索引本身而非范围\",{\"1\":{\"405\":1}}],[\"仅使用aof重放方式恢复数据\",{\"1\":{\"264\":1}}],[\"仅使用rdb快照方式恢复数据\",{\"1\":{\"264\":1}}],[\"仅当\",{\"1\":{\"165\":1}}],[\"虽然你有两块小饼干\",{\"1\":{\"1364\":1}}],[\"虽然简单\",{\"1\":{\"1142\":1}}],[\"虽然简单易懂\",{\"1\":{\"612\":1}}],[\"虽然通过多个请求复用一个\",{\"1\":{\"977\":1}}],[\"虽然解决了请求的队头阻塞\",{\"1\":{\"977\":1}}],[\"虽然列表\",{\"1\":{\"941\":1}}],[\"虽然可以通过转换策略间接实现\",{\"1\":{\"920\":1}}],[\"虽然使用列表可以实现队列操作\",{\"1\":{\"909\":1}}],[\"虽然这段时间内\",{\"1\":{\"839\":1,\"1003\":1}}],[\"虽然系统本身并未崩溃\",{\"1\":{\"632\":1}}],[\"虽然当连接对象由于没有引用而被垃圾收集之后其对应的连接资源仍将被释放还给连接池\",{\"1\":{\"582\":1}}],[\"虽然是\",{\"1\":{\"261\":1}}],[\"虽然1字节的值能表示的数值范围是0到255\",{\"1\":{\"219\":1}}],[\"虽然\",{\"1\":{\"177\":1}}],[\"没抢到一个红包就要减少一个库存\",{\"1\":{\"294\":1}}],[\"没法控制流量\",{\"1\":{\"172\":1}}],[\"没有被包围\",{\"1\":{\"1354\":1}}],[\"没有交易完成\",{\"1\":{\"1292\":2}}],[\"没有及时回复你\",{\"1\":{\"959\":1}}],[\"没有\",{\"1\":{\"892\":1}}],[\"没有返回值\",{\"1\":{\"848\":1,\"1009\":1}}],[\"没有关联的\",{\"1\":{\"688\":1}}],[\"没有注释或者令人困惑的注释\",{\"1\":{\"536\":1}}],[\"没有其他功能\",{\"1\":{\"534\":1}}],[\"没有索引的话\",{\"1\":{\"507\":1,\"521\":1}}],[\"没有任何限制\",{\"1\":{\"447\":1}}],[\"没有用到表内索引进行排序\",{\"1\":{\"349\":1}}],[\"没有使用\",{\"1\":{\"324\":2}}],[\"没有缓存数据和mysql数据不一致的时候\",{\"1\":{\"289\":1}}],[\"没有直接使用\",{\"1\":{\"225\":1}}],[\"没有加上过期时间就会导致数据写满maxmemory\",{\"1\":{\"210\":1}}],[\"没有设置规则的\",{\"1\":{\"98\":1}}],[\"没有选择符的service\",{\"0\":{\"89\":1}}],[\"滚动升级\",{\"1\":{\"180\":1}}],[\"滚动发布短时间就直接结束\",{\"1\":{\"172\":1}}],[\"滚动发布的缺点\",{\"0\":{\"172\":1}}],[\"滚动更新过程中的不可用实例数\",{\"1\":{\"166\":1}}],[\"滚动更新开始时会立即将旧\",{\"1\":{\"159\":1}}],[\"滚动更新的方式更新\",{\"1\":{\"159\":1}}],[\"滚动更新\",{\"0\":{\"159\":1},\"1\":{\"153\":1,\"190\":1,\"556\":1}}],[\"先确定中间做不到\",{\"1\":{\"1379\":1}}],[\"先确定最左边结果如何算\",{\"1\":{\"1379\":1}}],[\"先确定最右边\",{\"1\":{\"1379\":1}}],[\"先写上错误代码\",{\"1\":{\"1307\":1}}],[\"先写失败的测试\",{\"1\":{\"553\":1}}],[\"先把它解决出来\",{\"1\":{\"1282\":1}}],[\"先背包再物品\",{\"1\":{\"1276\":1}}],[\"先物品再背包\",{\"1\":{\"1273\":1,\"1276\":1}}],[\"先选修\",{\"1\":{\"1242\":1}}],[\"先修课程对\",{\"1\":{\"1241\":1}}],[\"先修课程按数组\",{\"1\":{\"1241\":1}}],[\"先学习课程\",{\"1\":{\"1241\":1}}],[\"先被选择\",{\"1\":{\"1209\":1}}],[\"先处理应用上下文\",{\"1\":{\"1100\":1}}],[\"先push应用上下文\",{\"1\":{\"1100\":1}}],[\"先创建请求上下文\",{\"1\":{\"1100\":1,\"1104\":2}}],[\"先说答案\",{\"1\":{\"1050\":1}}],[\"先回一个\",{\"1\":{\"954\":1}}],[\"先来看装饰前的样子\",{\"1\":{\"932\":1}}],[\"先new\",{\"1\":{\"903\":1}}],[\"先fillna\",{\"1\":{\"806\":1}}],[\"先进先出\",{\"1\":{\"579\":1,\"837\":1,\"1001\":1}}],[\"先对数组进行排序\",{\"1\":{\"1257\":1}}],[\"先对\",{\"1\":{\"482\":1}}],[\"先将记录写入\",{\"1\":{\"383\":1}}],[\"先从哈希表中根据表空间号+页号看看是否存在对应的缓冲页\",{\"1\":{\"319\":1}}],[\"先删除缓存值再更新数据库\",{\"1\":{\"287\":1}}],[\"先删除缓存\",{\"0\":{\"283\":1}}],[\"先更新mysql数据\",{\"0\":{\"284\":1}}],[\"先更新数据库\",{\"0\":{\"282\":1}}],[\"先更新b再更新a\",{\"1\":{\"252\":1}}],[\"先在关键节点上查找\",{\"1\":{\"231\":1}}],[\"先启动一个新版本应用\",{\"1\":{\"171\":1}}],[\"先构建包含更改的新镜像\",{\"1\":{\"131\":1}}],[\"直观地说就是\",{\"1\":{\"1240\":1}}],[\"直播推送\",{\"1\":{\"1162\":1}}],[\"直至遇到合适的except块捕获该异常\",{\"1\":{\"754\":1}}],[\"直至晚上7点20左右恢复正常\",{\"1\":{\"623\":1}}],[\"直接法\",{\"1\":{\"1394\":1}}],[\"直接终止循环\",{\"1\":{\"1393\":1}}],[\"直接对于config对象进行添加属性即可\",{\"1\":{\"1061\":1}}],[\"直接将栈顶上下文出栈就可以获得当前请求对应上下文中的信息了\",{\"1\":{\"1052\":1}}],[\"直接序列化的为\",{\"0\":{\"824\":1}}],[\"直接拨打手机或发送短消息是一种确保立即引起注意的有效手段\",{\"1\":{\"638\":1}}],[\"直接通过pip安装即可使用\",{\"1\":{\"607\":1}}],[\"直接写数据库查询逻辑\",{\"1\":{\"542\":1}}],[\"直接进行\",{\"1\":{\"499\":1}}],[\"直接进行全表扫描\",{\"1\":{\"350\":1}}],[\"直接判断并跳过\",{\"1\":{\"455\":1}}],[\"直接调用bgrewriteaof命令\",{\"1\":{\"262\":1}}],[\"直接返回\",{\"1\":{\"257\":1}}],[\"直接拿到len值就可以了\",{\"1\":{\"218\":1}}],[\"直接启动一个pod\",{\"1\":{\"117\":1}}],[\"直到找到元素或找不到该元素为止\",{\"1\":{\"1389\":1}}],[\"直到找到所有符合条件的行\",{\"1\":{\"315\":1,\"316\":1,\"462\":1,\"463\":1}}],[\"直到碰壁之后再换方向\",{\"1\":{\"1345\":1}}],[\"直到n=0为止\",{\"1\":{\"1341\":1}}],[\"直到所有的元素被访问完结束\",{\"1\":{\"1014\":1}}],[\"直到该操作完成\",{\"1\":{\"923\":1}}],[\"直到操作完成\",{\"1\":{\"898\":1}}],[\"直到遇到绝境了\",{\"1\":{\"1345\":1}}],[\"直到遇到下一个yield\",{\"1\":{\"733\":1}}],[\"直到遇到代表字符串结尾的空字符为止\",{\"1\":{\"227\":1}}],[\"直到遍历完所有元素\",{\"1\":{\"731\":1}}],[\"直到得到符合比较条件的查询结果\",{\"1\":{\"477\":1}}],[\"直到已释放所有共享锁\",{\"1\":{\"404\":1}}],[\"直到总数为0\",{\"1\":{\"293\":1}}],[\"直到rdb完成为止\",{\"1\":{\"256\":1}}],[\"直到将100\",{\"1\":{\"171\":1}}],[\"直到全部验证成功后\",{\"1\":{\"169\":1}}],[\"期间发生任何异常\",{\"1\":{\"169\":1}}],[\"蓝绿发布\",{\"1\":{\"169\":1}}],[\"蓝绿部署\",{\"0\":{\"168\":1},\"1\":{\"556\":1}}],[\"参考配置文件中的标准库\",{\"1\":{\"1189\":1}}],[\"参考案例\",{\"1\":{\"849\":1,\"1010\":1}}],[\"参考官网\",{\"1\":{\"167\":1}}],[\"参数动态生成可执行的关键字\",{\"1\":{\"1188\":1}}],[\"参数a\",{\"1\":{\"735\":1}}],[\"参数调整\",{\"1\":{\"669\":1}}],[\"参数设置worker线程\",{\"1\":{\"659\":1}}],[\"参数添加条件判断\",{\"1\":{\"573\":1}}],[\"参数添加条件\",{\"1\":{\"565\":1}}],[\"参数是指定日志的存储方式\",{\"1\":{\"503\":1}}],[\"参数值\",{\"1\":{\"388\":1}}],[\"参数查看\",{\"1\":{\"334\":1}}],[\"参数\",{\"0\":{\"202\":1},\"1\":{\"1187\":1,\"1188\":1,\"1348\":1}}],[\"参数说明\",{\"0\":{\"198\":1},\"1\":{\"198\":1}}],[\"参照初始化master继续做\",{\"1\":{\"108\":1}}],[\"比较中间元素\",{\"1\":{\"1390\":1}}],[\"比前一个整数大\",{\"1\":{\"1198\":1}}],[\"比\",{\"1\":{\"579\":1}}],[\"比all快一些\",{\"1\":{\"350\":1}}],[\"比例缩放\",{\"0\":{\"166\":1}}],[\"比如原地去重\",{\"1\":{\"1263\":1}}],[\"比如上图所有箭头都是朝右的\",{\"1\":{\"1240\":1}}],[\"比如二分图判断\",{\"1\":{\"1240\":1}}],[\"比如社交网络中的朋友圈计算等等\",{\"1\":{\"1225\":1}}],[\"比如说区间\",{\"1\":{\"1393\":2}}],[\"比如说编译器判断同一个变量的不同引用\",{\"1\":{\"1225\":1}}],[\"比如说之前那幅图\",{\"1\":{\"1225\":1}}],[\"比如下面这幅图\",{\"1\":{\"1225\":1}}],[\"比如下面两种情况\",{\"1\":{\"507\":1}}],[\"比如下图\",{\"1\":{\"1218\":1}}],[\"比如j=2\",{\"1\":{\"1207\":1}}],[\"比如斐波那契数列用表达式写不出来\",{\"1\":{\"1024\":1}}],[\"比如冒充淘宝网站\",{\"1\":{\"971\":1}}],[\"比如强制植入垃圾广告\",{\"1\":{\"971\":1}}],[\"比如通信链路上可以获取通信内容\",{\"1\":{\"971\":1}}],[\"比如http\",{\"1\":{\"962\":1}}],[\"比如添加一些属性\",{\"1\":{\"903\":1}}],[\"比如给对象的属性赋初始值\",{\"1\":{\"901\":1}}],[\"比如int\",{\"1\":{\"900\":1,\"902\":1}}],[\"比如实现单例模式\",{\"1\":{\"900\":1}}],[\"比如可以iter\",{\"1\":{\"892\":1}}],[\"比如2分钟内被命中了很多次\",{\"1\":{\"839\":1,\"1003\":1}}],[\"比如一个接口需要返回一个对象\",{\"1\":{\"822\":1}}],[\"比如用于替代条件判断\",{\"1\":{\"758\":1}}],[\"比如封锁ip地址\",{\"1\":{\"631\":1}}],[\"比如每隔几分钟或几小时执行一次\",{\"1\":{\"613\":1}}],[\"比如只写了\",{\"1\":{\"468\":1}}],[\"比如除了innodb适合事务处理场景外\",{\"1\":{\"434\":1}}],[\"比如last\",{\"1\":{\"394\":1}}],[\"比如你创建了多个索引\",{\"1\":{\"361\":1}}],[\"比如my\",{\"1\":{\"334\":1}}],[\"比如表缓存\",{\"1\":{\"332\":1}}],[\"比如dml\",{\"1\":{\"332\":1}}],[\"比如varchar\",{\"1\":{\"323\":1}}],[\"比如订单表\",{\"1\":{\"303\":1}}],[\"比如\",{\"1\":{\"227\":1,\"350\":1,\"385\":1,\"390\":2,\"762\":2,\"770\":2,\"878\":1,\"1241\":1}}],[\"比如截断操作\",{\"1\":{\"227\":1}}],[\"比如拼接操作\",{\"1\":{\"227\":1}}],[\"比如更新了镜像版本\",{\"1\":{\"165\":1}}],[\"比如更新了资源限制\",{\"1\":{\"165\":1}}],[\"比如等待代码审查\",{\"1\":{\"24\":1}}],[\"累计更新\",{\"1\":{\"165\":1}}],[\"看那个数字不是3的倍数\",{\"1\":{\"1339\":1}}],[\"看似一致的面积问题\",{\"0\":{\"1201\":1}}],[\"看一看内部函数是不是能使用外部函数的临时变量\",{\"1\":{\"992\":1}}],[\"看起来像是鸭子\",{\"1\":{\"892\":1}}],[\"看看哪一个可以组成最长的回文子序列\",{\"1\":{\"1299\":1}}],[\"看看能不能使用两种颜色给所有的节点进行染色\",{\"1\":{\"1235\":1}}],[\"看看历史版本有没有记录变化\",{\"1\":{\"165\":1}}],[\"看看我们设置的历史总记录数是否生效了\",{\"1\":{\"165\":1}}],[\"看能否使用\",{\"1\":{\"73\":1}}],[\"原地\",{\"1\":{\"1265\":2,\"1266\":1}}],[\"原地修改\",{\"1\":{\"1263\":1}}],[\"原地修改输入数组\",{\"1\":{\"1258\":1}}],[\"原则\",{\"1\":{\"915\":1}}],[\"原则来决定数据是否显示\",{\"1\":{\"475\":1}}],[\"原型\",{\"1\":{\"894\":1}}],[\"原始定义是\",{\"1\":{\"769\":1}}],[\"原始为\",{\"1\":{\"278\":1}}],[\"原生支持实时通信\",{\"1\":{\"1162\":1}}],[\"原生支持\",{\"1\":{\"1087\":1,\"1169\":1,\"1170\":1}}],[\"原生支持异步请求处理\",{\"1\":{\"1071\":1}}],[\"原生模块\",{\"1\":{\"1051\":1}}],[\"原生不支持动态添加或删除任务\",{\"1\":{\"607\":1}}],[\"原生方式挂载\",{\"0\":{\"64\":1}}],[\"原因是因为\",{\"1\":{\"1029\":1}}],[\"原因是因为布隆过滤器不能删除数据\",{\"1\":{\"245\":1}}],[\"原因\",{\"0\":{\"468\":1},\"1\":{\"499\":1,\"668\":1}}],[\"原子性\",{\"1\":{\"294\":1,\"425\":3}}],[\"原先稳定集群将与新集群同时保持在线一段时间\",{\"1\":{\"169\":1}}],[\"原理\",{\"1\":{\"165\":1,\"1188\":1}}],[\"个房间组成的二维网格\",{\"1\":{\"1303\":1}}],[\"个回文串\",{\"1\":{\"1300\":2}}],[\"个回文字符串\",{\"1\":{\"1300\":3}}],[\"个非空\",{\"1\":{\"1300\":1}}],[\"个元素有序的\",{\"1\":{\"1390\":1}}],[\"个元素中选择一个子集\",{\"1\":{\"1384\":1}}],[\"个元素的值和标签分别是\",{\"1\":{\"1384\":1}}],[\"个元素\",{\"1\":{\"1292\":2}}],[\"个元素包含唯一元素\",{\"1\":{\"1266\":1}}],[\"个数根据最长子序列长度来算出来\",{\"1\":{\"1288\":1}}],[\"个数的和最大\",{\"1\":{\"1282\":1}}],[\"个数的\",{\"1\":{\"159\":2}}],[\"个数的70\",{\"1\":{\"159\":1}}],[\"个不相邻的数\",{\"1\":{\"1282\":1}}],[\"个点数\",{\"1\":{\"1281\":8}}],[\"个顶点的\",{\"1\":{\"1229\":1}}],[\"个节点\",{\"1\":{\"1225\":1,\"1230\":1,\"1236\":1}}],[\"个节点的树\",{\"1\":{\"1230\":1}}],[\"个节点的\",{\"1\":{\"1221\":1}}],[\"个信封的宽度和高度\",{\"1\":{\"1209\":1}}],[\"个进程\",{\"1\":{\"725\":1}}],[\"个人的体重\",{\"1\":{\"1378\":1}}],[\"个人实现\",{\"0\":{\"1189\":1}}],[\"个人信息\",{\"1\":{\"531\":1}}],[\"个人编程风格\",{\"0\":{\"528\":1}}],[\"个人建议是\",{\"1\":{\"287\":1}}],[\"个内循环\",{\"1\":{\"513\":1}}],[\"个特性\",{\"1\":{\"425\":1}}],[\"个关键组成\",{\"1\":{\"270\":1}}],[\"个nginx\",{\"1\":{\"181\":1}}],[\"个\",{\"1\":{\"181\":1,\"220\":1,\"477\":1,\"513\":2,\"725\":1,\"1225\":3,\"1274\":5}}],[\"个副本完成后再更新为nginx\",{\"1\":{\"181\":1}}],[\"个副本\",{\"1\":{\"181\":1}}],[\"个旧\",{\"1\":{\"162\":1}}],[\"修复自省信息\",{\"0\":{\"933\":1}}],[\"修订版本的配置都存储在其\",{\"1\":{\"162\":1}}],[\"修订历史限制\",{\"0\":{\"162\":1}}],[\"修改输入数组\",{\"1\":{\"1265\":1}}],[\"修改就变的可控\",{\"1\":{\"1031\":1}}],[\"修改全局变量\",{\"1\":{\"985\":1}}],[\"修改成功\",{\"1\":{\"862\":1}}],[\"修改模型类\",{\"0\":{\"828\":1}}],[\"修改后\",{\"1\":{\"503\":1}}],[\"修改了变量\",{\"1\":{\"503\":1}}],[\"修改证书资源\",{\"1\":{\"124\":1}}],[\"修改mode\",{\"1\":{\"108\":1}}],[\"修改kubecconfig文件\",{\"1\":{\"124\":1}}],[\"修改kube\",{\"1\":{\"108\":1}}],[\"修改hostname\",{\"1\":{\"107\":1}}],[\"修改镜像\",{\"1\":{\"96\":1}}],[\"修改pod在spec\",{\"1\":{\"72\":1}}],[\"毫秒内持续重试\",{\"1\":{\"160\":1}}],[\"百分比值会通过向上取整转换为绝对数\",{\"1\":{\"159\":1}}],[\"百分比值会转换成绝对数并去除小数部分\",{\"1\":{\"159\":1}}],[\"扩展视野\",{\"0\":{\"922\":1}}],[\"扩展资料\",{\"1\":{\"311\":1}}],[\"扩展等\",{\"1\":{\"301\":1}}],[\"扩缩容\",{\"1\":{\"180\":1}}],[\"扩缩和管理容器化应用程序的开源系统\",{\"1\":{\"111\":1}}],[\"扩容等\",{\"1\":{\"640\":1}}],[\"扩容问题\",{\"1\":{\"304\":1}}],[\"扩容\",{\"1\":{\"159\":2}}],[\"准假\",{\"1\":{\"806\":3}}],[\"准备就绪后\",{\"1\":{\"159\":1,\"165\":1}}],[\"准确收集相关数据并呈现\",{\"1\":{\"21\":1}}],[\"新版\",{\"0\":{\"1074\":1}}],[\"新版本已经使用一个类似于dict来存储应用上下文了\",{\"1\":{\"1050\":1}}],[\"新版本\",{\"1\":{\"1050\":1}}],[\"新版本global\",{\"1\":{\"1045\":1}}],[\"新元素的加入会导致最旧的元素自动弹出\",{\"1\":{\"912\":1}}],[\"新老逻辑解耦\",{\"1\":{\"762\":1}}],[\"新老数据一起存放\",{\"1\":{\"434\":1}}],[\"新旧版本并行运行\",{\"1\":{\"556\":1}}],[\"新aof\",{\"1\":{\"260\":1}}],[\"新增或者删除时需要把所有索引都更新一遍\",{\"1\":{\"234\":1}}],[\"新任务\",{\"1\":{\"202\":1}}],[\"新集群部署\",{\"1\":{\"170\":1}}],[\"新集群成为新的稳定集群\",{\"1\":{\"169\":1}}],[\"新的连接对象会被创建并返回给调用这些方法的程序\",{\"1\":{\"578\":1}}],[\"新的记录可能会插入到记录的中间\",{\"1\":{\"442\":1}}],[\"新的默认身份验证\",{\"1\":{\"430\":1}}],[\"新的\",{\"1\":{\"159\":1}}],[\"新\",{\"1\":{\"159\":1}}],[\"新创建的pod应准备就绪的最小秒数\",{\"1\":{\"153\":1}}],[\"缩小右边界至middle\",{\"1\":{\"1395\":1}}],[\"缩进\",{\"1\":{\"536\":1}}],[\"缩放为\",{\"1\":{\"190\":1}}],[\"缩容到期望\",{\"1\":{\"159\":1}}],[\"缩短交付周期\",{\"1\":{\"38\":1}}],[\"策略接口\",{\"1\":{\"776\":1}}],[\"策略模式通常涉及定义一个接口\",{\"1\":{\"776\":1}}],[\"策略模式是最常用的一种设计模式\",{\"1\":{\"776\":1}}],[\"策略模式结构\",{\"0\":{\"776\":1}}],[\"策略模式\",{\"0\":{\"774\":1},\"1\":{\"775\":1,\"776\":1},\"2\":{\"778\":1}}],[\"策略管理连接\",{\"1\":{\"579\":1}}],[\"策略\",{\"0\":{\"157\":1},\"1\":{\"261\":1,\"332\":1,\"776\":1}}],[\"拒绝函数具有隐式返回值\",{\"1\":{\"533\":1}}],[\"拒绝\",{\"1\":{\"156\":1}}],[\"拒绝参与协作\",{\"1\":{\"33\":1}}],[\"副本也将添加到该节点上\",{\"1\":{\"186\":1}}],[\"副本\",{\"0\":{\"155\":1},\"1\":{\"186\":1}}],[\"优势洗牌\",{\"0\":{\"1210\":1}}],[\"优势总结\",{\"0\":{\"1154\":1}}],[\"优势与最佳实践\",{\"0\":{\"1086\":1}}],[\"优势\",{\"0\":{\"433\":1,\"434\":1}}],[\"优化总结\",{\"0\":{\"514\":1}}],[\"优化的结果只有一个给用户一个好的体验\",{\"1\":{\"507\":1}}],[\"优化思路\",{\"0\":{\"505\":1}}],[\"优化为\",{\"1\":{\"460\":2}}],[\"优化后每次18个io\",{\"1\":{\"507\":1}}],[\"优化后\",{\"1\":{\"456\":1}}],[\"优化器的功能较完整\",{\"1\":{\"433\":1}}],[\"优化器执行选出最优索引等步骤后\",{\"1\":{\"361\":1}}],[\"优化器\",{\"1\":{\"361\":1}}],[\"优化\",{\"0\":{\"510\":1},\"1\":{\"349\":1,\"456\":1,\"499\":2},\"2\":{\"501\":1,\"509\":1}}],[\"优化测试用例等方式提升效率\",{\"1\":{\"56\":1}}],[\"优先让船装重量小的两个人\",{\"1\":{\"1378\":1}}],[\"优先队列广泛应用于各种场景\",{\"1\":{\"918\":1}}],[\"优先队列是一种特殊类型的队列\",{\"1\":{\"918\":1}}],[\"优先级可能基于复杂的逻辑\",{\"1\":{\"920\":1}}],[\"优先级中断处理等\",{\"1\":{\"918\":1}}],[\"优先级队列\",{\"0\":{\"1248\":1},\"1\":{\"914\":1,\"915\":1},\"2\":{\"1249\":1,\"1250\":1}}],[\"优先级越高\",{\"1\":{\"349\":1}}],[\"优先用ipc或数据库同步\",{\"1\":{\"725\":1}}],[\"优先用pickle替代dill\",{\"1\":{\"716\":1}}],[\"优先选择右边的元素作为middle\",{\"1\":{\"1395\":1}}],[\"优先选择结果集最小的那张表作为驱动表\",{\"1\":{\"512\":1}}],[\"优先选择优化高并发执行的\",{\"1\":{\"507\":1}}],[\"优先使用先更新数据库\",{\"1\":{\"287\":1}}],[\"优缺点\",{\"0\":{\"234\":1,\"244\":1,\"807\":1}}],[\"优点\",{\"0\":{\"218\":1,\"315\":1,\"462\":1,\"712\":1,\"808\":1},\"1\":{\"234\":1,\"244\":1,\"258\":1,\"263\":1,\"342\":1,\"393\":1,\"394\":1,\"438\":1,\"605\":1,\"606\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"762\":1,\"765\":1,\"766\":1,\"776\":1}}],[\"优雅的逻辑和严谨的规范\",{\"1\":{\"540\":1}}],[\"优雅的部署和缩放\",{\"1\":{\"191\":1}}],[\"优雅停机\",{\"1\":{\"148\":1}}],[\"给两个整数数组\",{\"1\":{\"1307\":1}}],[\"给出两个整数数组\",{\"1\":{\"1384\":1}}],[\"给出\",{\"1\":{\"1241\":1}}],[\"给你两个字符串\",{\"1\":{\"1314\":1}}],[\"给你数组\",{\"1\":{\"1229\":1}}],[\"给你一个大小为\",{\"1\":{\"1353\":1,\"1354\":1}}],[\"给你一个披萨\",{\"1\":{\"1282\":1}}],[\"给你一个字符串\",{\"1\":{\"1276\":1,\"1297\":2,\"1299\":3,\"1300\":1,\"1380\":1,\"1385\":1}}],[\"给你一个整数\",{\"1\":{\"1276\":1}}],[\"给你一个整数数组\",{\"1\":{\"1207\":1,\"1257\":1,\"1281\":1,\"1286\":1,\"1289\":1,\"1292\":3,\"1339\":1,\"1340\":1,\"1365\":1,\"1366\":1,\"1376\":1,\"1403\":1}}],[\"给你一个由\",{\"1\":{\"1275\":1,\"1352\":1}}],[\"给你一个二进制字符串数组\",{\"1\":{\"1274\":1}}],[\"给你一个二维数组\",{\"1\":{\"1236\":1}}],[\"给你一个二维整数数组\",{\"1\":{\"1209\":1}}],[\"给你一个非负整数数组\",{\"1\":{\"1274\":1}}],[\"给你一个\",{\"1\":{\"1266\":1,\"1274\":1,\"1336\":1,\"1341\":1}}],[\"给你一个数组\",{\"1\":{\"1242\":1,\"1265\":1}}],[\"给你一个有\",{\"1\":{\"1221\":1}}],[\"给你一个按照非递减顺序排列的整数数组\",{\"1\":{\"1395\":1,\"1400\":1}}],[\"给你一个按\",{\"1\":{\"1198\":1}}],[\"给我们带来了很大的方便\",{\"1\":{\"855\":1}}],[\"给我留下了深刻的印象\",{\"1\":{\"19\":1}}],[\"给任务添加日志\",{\"1\":{\"660\":1}}],[\"给数据库带来压力\",{\"1\":{\"287\":1}}],[\"给\",{\"1\":{\"278\":1}}],[\"给某进程\",{\"1\":{\"270\":1}}],[\"给定数组表示研究者总共有\",{\"1\":{\"1403\":1}}],[\"给定数组\",{\"1\":{\"1378\":1}}],[\"给定字符串\",{\"1\":{\"1313\":1}}],[\"给定两个字符串\",{\"1\":{\"1308\":1}}],[\"给定整数\",{\"1\":{\"1237\":1}}],[\"给定一组\",{\"1\":{\"1237\":1}}],[\"给定一个排序数组和一个目标值\",{\"1\":{\"1399\":1}}],[\"给定一个\",{\"1\":{\"1390\":1}}],[\"给定一个长度为\",{\"1\":{\"1377\":1}}],[\"给定一个包含非负整数的数组\",{\"1\":{\"1379\":1}}],[\"给定一个包含非负整数的\",{\"1\":{\"1303\":1}}],[\"给定一个整数数组\",{\"1\":{\"1292\":1}}],[\"给定一个整数数组prices\",{\"1\":{\"1292\":1}}],[\"给定一个数组\",{\"1\":{\"1292\":2}}],[\"给定一个未经排序的整数数组\",{\"1\":{\"1287\":1}}],[\"给定一个未排序的整数数组\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"给定一个代表每个房屋存放金额的非负整数数组\",{\"1\":{\"1280\":2}}],[\"给定一个由\",{\"1\":{\"1203\":1}}],[\"给定的图是连通的\",{\"1\":{\"1230\":1}}],[\"给定往一棵\",{\"1\":{\"1230\":1}}],[\"给定\",{\"1\":{\"190\":1}}],[\"给一个缓冲时间\",{\"1\":{\"148\":1}}],[\"给容器发请求\",{\"1\":{\"147\":1}}],[\"失败阈值\",{\"1\":{\"147\":5}}],[\"失败是安全的\",{\"1\":{\"30\":1}}],[\"探索是否有自动化工具可以在告警触发时自动执行某些操作\",{\"1\":{\"640\":1}}],[\"探索环中有3个基本原则分别为\",{\"1\":{\"20\":1}}],[\"探索环中的四个关键环节\",{\"1\":{\"20\":1}}],[\"探索环\",{\"0\":{\"20\":1}}],[\"探索环和验证环\",{\"0\":{\"19\":1}}],[\"探讨是否存在更有效的告警渠道可供投入使用\",{\"1\":{\"640\":1}}],[\"探测超时\",{\"1\":{\"147\":4}}],[\"探测的超时时间\",{\"1\":{\"147\":1}}],[\"探测器在失败后\",{\"1\":{\"147\":1}}],[\"执行请求处理函数\",{\"1\":{\"1104\":2}}],[\"执行请求后置操作\",{\"1\":{\"1103\":1,\"1104\":1}}],[\"执行请求前置操作\",{\"1\":{\"1103\":1,\"1104\":1}}],[\"执行视图函数\",{\"1\":{\"1103\":1,\"1104\":1}}],[\"执行逻辑\",{\"1\":{\"1088\":1}}],[\"执行次数越多\",{\"1\":{\"1036\":1}}],[\"执行字符串中的python代码\",{\"1\":{\"986\":1}}],[\"执行耗时\",{\"1\":{\"932\":1,\"933\":1}}],[\"执行输出结果\",{\"1\":{\"932\":1}}],[\"执行用时\",{\"1\":{\"832\":1,\"996\":1}}],[\"执行else块内的代码\",{\"1\":{\"748\":1}}],[\"执行性能下降可以体现在以下两个方面\",{\"1\":{\"506\":1}}],[\"执行性能下降的原因进行分析\",{\"1\":{\"506\":1}}],[\"执行时间长\",{\"1\":{\"506\":1}}],[\"执行时间\",{\"1\":{\"504\":1}}],[\"执行时长\",{\"1\":{\"334\":1}}],[\"执行读取到的更新事件\",{\"1\":{\"494\":1}}],[\"执行效率上\",{\"0\":{\"487\":1}}],[\"执行效果上\",{\"0\":{\"486\":1}}],[\"执行sql里有触发器\",{\"1\":{\"431\":1}}],[\"执行shutdown命令关闭服务器时\",{\"1\":{\"256\":1}}],[\"执行计划入手\",{\"0\":{\"518\":1},\"1\":{\"507\":1}}],[\"执行计划\",{\"1\":{\"408\":1}}],[\"执行计划中的\",{\"1\":{\"349\":1}}],[\"执行器最终最根据一系列的执行计划去调用存储引擎的接口去完成\",{\"1\":{\"363\":1}}],[\"执行器是一个非常重要的组件\",{\"1\":{\"363\":1}}],[\"执行器\",{\"0\":{\"363\":1}}],[\"执行顺序\",{\"1\":{\"349\":1,\"903\":1}}],[\"执行一条指令就要\",{\"1\":{\"260\":1}}],[\"执行bgsave命令的时候\",{\"1\":{\"257\":1}}],[\"执行bgsave命令时redis主进程会fork一个子进程来完成rdb的过程\",{\"1\":{\"256\":1}}],[\"执行成功并正常结束时\",{\"1\":{\"197\":1}}],[\"执行扩缩容的操作\",{\"1\":{\"165\":1}}],[\"执行了更新操作\",{\"1\":{\"155\":1}}],[\"执行了手动扩缩操作\",{\"1\":{\"155\":1}}],[\"执行探测的时间间隔\",{\"1\":{\"147\":1}}],[\"执行以下命令挂载\",{\"1\":{\"63\":1}}],[\"秒\",{\"1\":{\"147\":3,\"503\":1,\"654\":1}}],[\"存放结果\",{\"1\":{\"1348\":1}}],[\"存放带有优先级的项\",{\"1\":{\"915\":1}}],[\"存放更多的数据\",{\"1\":{\"338\":1}}],[\"存放\",{\"1\":{\"334\":3}}],[\"存在一个\",{\"1\":{\"1236\":1}}],[\"存在一条有向边\",{\"1\":{\"1221\":1}}],[\"存在由顶点\",{\"1\":{\"1229\":1}}],[\"存在\",{\"1\":{\"1229\":1}}],[\"存在请求未被任何处理器处理的风险\",{\"1\":{\"809\":1}}],[\"存在锁机制复杂影响并发的问题\",{\"1\":{\"433\":1}}],[\"存在老版本的redis不兼容新版本rdb格式文件的问题\",{\"1\":{\"258\":1}}],[\"存在误判\",{\"1\":{\"244\":1}}],[\"存像图片\",{\"1\":{\"227\":1}}],[\"存不进去\",{\"1\":{\"210\":1}}],[\"存活探针\",{\"1\":{\"147\":1}}],[\"存活探测情况下的放弃就意味着重新启动容器\",{\"1\":{\"147\":1}}],[\"存活和启动探针的这个值必须是\",{\"1\":{\"147\":1}}],[\"存货探针\",{\"1\":{\"146\":1}}],[\"存储每个字符最后出现的位置\",{\"1\":{\"1385\":1}}],[\"存储\",{\"1\":{\"1217\":1}}],[\"存储逻辑\",{\"1\":{\"548\":1}}],[\"存储数据的结构\",{\"1\":{\"461\":1}}],[\"存储着子节点的地址信息\",{\"1\":{\"340\":1}}],[\"存储表元数据\",{\"1\":{\"334\":1}}],[\"存储与表相关的元数据\",{\"1\":{\"334\":1}}],[\"存储过程的功能支持要比mysql好\",{\"1\":{\"433\":1}}],[\"存储过程\",{\"1\":{\"332\":1,\"395\":1}}],[\"存储引擎都会对所有的索引列计算一个哈希码\",{\"1\":{\"461\":1}}],[\"存储引擎中\",{\"1\":{\"439\":1}}],[\"存储引擎有两种表空间方式\",{\"1\":{\"334\":1}}],[\"存储引擎专用\",{\"1\":{\"334\":2}}],[\"存储引擎负责mysql中数据的存储与提取\",{\"1\":{\"333\":1}}],[\"存储引擎层\",{\"0\":{\"333\":1}}],[\"存储引擎\",{\"0\":{\"362\":1},\"2\":{\"329\":1}}],[\"存储引擎必须遍历链表中的所有行指针\",{\"1\":{\"315\":1,\"316\":1,\"462\":1,\"463\":1}}],[\"存储文件\",{\"1\":{\"308\":1}}],[\"存储指针比存储entry长度更费内存\",{\"1\":{\"218\":1}}],[\"存储等\",{\"1\":{\"112\":1}}],[\"存储和配置\",{\"0\":{\"61\":1}}],[\"功能一致\",{\"1\":{\"1049\":1}}],[\"功能很简单\",{\"1\":{\"935\":1}}],[\"功能增强\",{\"1\":{\"769\":1}}],[\"功能单一的类\",{\"1\":{\"762\":1}}],[\"功能混乱\",{\"1\":{\"557\":1}}],[\"功能是基础\",{\"1\":{\"540\":1}}],[\"功能方法放在下面的子模块中\",{\"1\":{\"534\":1}}],[\"功能类\",{\"1\":{\"534\":1}}],[\"功能\",{\"1\":{\"146\":3}}],[\"健康检查+优雅停机\",{\"1\":{\"148\":1}}],[\"健康检查机制\",{\"0\":{\"145\":1}}],[\"健康检查失败\",{\"1\":{\"135\":1}}],[\"机器人试图达到网格的右下角\",{\"1\":{\"1303\":2}}],[\"机器人每次只能向下或者向右移动一步\",{\"1\":{\"1303\":2}}],[\"机器的cpu\",{\"1\":{\"813\":1}}],[\"机器哪里知道你在说什么\",{\"1\":{\"360\":1}}],[\"机器启动kubelet自己就把他启动起来\",{\"1\":{\"144\":1}}],[\"机制可更方便地管理上下文的嵌套和恢复\",{\"1\":{\"1069\":1}}],[\"机制而失效\",{\"1\":{\"599\":1}}],[\"机制\",{\"0\":{\"261\":1}}],[\"机制来实现rdb快照持久化\",{\"1\":{\"257\":1}}],[\"机制由\",{\"1\":{\"198\":1}}],[\"机制是另外一种自动清理已结束job\",{\"1\":{\"198\":1}}],[\"机制的本地缓存来获取\",{\"1\":{\"74\":1}}],[\"静态资源\",{\"0\":{\"818\":1}}],[\"静态pod一直守护在他的这个机器上\",{\"1\":{\"144\":1}}],[\"静态pod\",{\"0\":{\"144\":1}}],[\"静态代码分析等手段\",{\"1\":{\"51\":1}}],[\"什么时候使用贪心\",{\"0\":{\"1359\":1}}],[\"什么叫做快慢指针呢\",{\"1\":{\"1263\":1}}],[\"什么叫做并查集\",{\"1\":{\"1225\":1}}],[\"什么叫pod\",{\"0\":{\"139\":1}}],[\"什么情况下会声明上下文\",{\"0\":{\"846\":1,\"1008\":1}}],[\"什么情况下需要分库分表\",{\"1\":{\"299\":1}}],[\"什么要认证\",{\"0\":{\"686\":1}}],[\"什么样的\",{\"1\":{\"503\":1}}],[\"什么命令查看redis的内存使用情况\",{\"1\":{\"210\":1}}],[\"什么是贪心\",{\"0\":{\"1358\":1}}],[\"什么是递增子序列\",{\"1\":{\"1286\":1}}],[\"什么是无向图\",{\"1\":{\"1219\":1}}],[\"什么是无状态呢\",{\"1\":{\"688\":1}}],[\"什么是with\",{\"0\":{\"845\":1,\"1007\":1}}],[\"什么是与期望行为一致的替换\",{\"1\":{\"762\":1}}],[\"什么是替换\",{\"1\":{\"762\":1}}],[\"什么是迭代\",{\"0\":{\"731\":1}}],[\"什么是\",{\"0\":{\"692\":1}}],[\"什么是socket\",{\"0\":{\"674\":1}}],[\"什么是状态机\",{\"0\":{\"561\":1}}],[\"什么是驱动表\",{\"0\":{\"512\":1}}],[\"什么是写失效\",{\"0\":{\"467\":1}}],[\"什么是自适应\",{\"0\":{\"460\":1}}],[\"什么是覆盖索引\",{\"0\":{\"415\":1}}],[\"什么是b\",{\"0\":{\"339\":1}}],[\"什么是行溢出\",{\"0\":{\"326\":1,\"470\":1}}],[\"什么是分库分表\",{\"0\":{\"299\":1}}],[\"什么是控制器\",{\"0\":{\"176\":1}}],[\"什么是持续交付\",{\"0\":{\"18\":1}}],[\"才发送\",{\"1\":{\"954\":1}}],[\"才可以定制selector\",{\"1\":{\"198\":1}}],[\"才能处理下一个请求\",{\"1\":{\"977\":1}}],[\"才能保证执行结果的正确性\",{\"1\":{\"425\":1}}],[\"才能修复的损坏状态\",{\"1\":{\"190\":1}}],[\"才能不断缩短持续交付\",{\"1\":{\"18\":1}}],[\"才会有\",{\"1\":{\"955\":1}}],[\"才会记录到慢查询日志里面呢\",{\"1\":{\"503\":1}}],[\"才会执行该操作\",{\"1\":{\"487\":1}}],[\"才会触发\",{\"1\":{\"165\":1}}],[\"才会将容器的状态标记为\",{\"1\":{\"135\":1}}],[\"才被视为可用\",{\"1\":{\"161\":1}}],[\"才接受流量\",{\"1\":{\"146\":1}}],[\"才删除容器\",{\"1\":{\"135\":1}}],[\"状态转移方式\",{\"1\":{\"1292\":1}}],[\"状态转换的条件判断\",{\"0\":{\"565\":1}}],[\"状态管理\",{\"1\":{\"1143\":1}}],[\"状态管理困难\",{\"1\":{\"1142\":1}}],[\"状态下的线程将允许系统根据策略自行切换到其他线程中运行\",{\"1\":{\"1035\":1}}],[\"状态码\",{\"1\":{\"863\":1,\"967\":1,\"969\":1,\"1144\":2}}],[\"状态变更等重要信息\",{\"1\":{\"619\":1}}],[\"状态列表\",{\"1\":{\"563\":1}}],[\"状态机由以下核心元素组成\",{\"1\":{\"561\":1}}],[\"状态机常用于游戏开发\",{\"1\":{\"560\":1}}],[\"状态机\",{\"1\":{\"560\":1},\"2\":{\"575\":1}}],[\"状态\",{\"1\":{\"135\":1,\"561\":1,\"569\":1,\"570\":1,\"698\":1,\"951\":4,\"953\":7,\"955\":1,\"1035\":2}}],[\"终于在学习图论的时候我来把它搞清楚\",{\"1\":{\"1345\":1}}],[\"终止条件\",{\"1\":{\"1348\":1}}],[\"终止\",{\"1\":{\"135\":1}}],[\"终结和基于名称的虚拟托管\",{\"1\":{\"95\":1}}],[\"之所以这么称呼是为了与innodb的聚集索引区分\",{\"1\":{\"413\":1}}],[\"之间\",{\"1\":{\"1390\":2}}],[\"之间是不是回文串就可以\",{\"1\":{\"1299\":1}}],[\"之间是redo\",{\"1\":{\"390\":1}}],[\"之间可能不存在一条连通彼此的路径\",{\"1\":{\"1236\":1}}],[\"之间存在一条边\",{\"1\":{\"1230\":1}}],[\"之间的所有数都是可以组合为三角形的\",{\"1\":{\"1379\":1}}],[\"之间的无向边\",{\"1\":{\"1236\":1}}],[\"之间的唯一编号\",{\"1\":{\"1236\":1}}],[\"之间的双向边\",{\"1\":{\"1229\":1}}],[\"之间的部分是redo\",{\"1\":{\"390\":1}}],[\"之间进行发现和路由是由kubernetes\",{\"1\":{\"116\":1}}],[\"之后服务端进入\",{\"1\":{\"953\":1}}],[\"之后服务端处于\",{\"1\":{\"951\":1}}],[\"之后进入\",{\"1\":{\"953\":2}}],[\"之后客户端进入\",{\"1\":{\"953\":1}}],[\"之后客户端处于\",{\"1\":{\"951\":1}}],[\"之后再次导入该模块时\",{\"1\":{\"782\":1}}],[\"之后出现的\",{\"1\":{\"349\":1}}],[\"之后\",{\"1\":{\"260\":1,\"1242\":1,\"1281\":4}}],[\"之后基于清单对\",{\"1\":{\"155\":1}}],[\"之外最好的\",{\"1\":{\"349\":1}}],[\"之外\",{\"1\":{\"198\":1}}],[\"之前添加\",{\"1\":{\"1274\":2}}],[\"之前使用的是flask\",{\"1\":{\"1140\":1}}],[\"之前在学习airflow时发现\",{\"1\":{\"702\":1}}],[\"之前等待\",{\"1\":{\"160\":1}}],[\"之前\",{\"1\":{\"158\":1,\"469\":1,\"1241\":3}}],[\"之前执行\",{\"1\":{\"135\":3}}],[\"钩子函数的调用将失败\",{\"1\":{\"135\":1}}],[\"钩子函数\",{\"1\":{\"135\":1}}],[\"再加2是从情况一开始判断\",{\"1\":{\"1376\":1}}],[\"再加入这条边一定就出现环了\",{\"1\":{\"1230\":1}}],[\"再换方向\",{\"1\":{\"1345\":1}}],[\"再把两个结果进行\",{\"1\":{\"1335\":1}}],[\"再把数组中所有的数一遍\",{\"1\":{\"1335\":1}}],[\"再返回变换后二进制对应的数\",{\"1\":{\"1325\":1,\"1326\":1,\"1327\":1}}],[\"再次删除\",{\"1\":{\"1281\":2}}],[\"再次访问\",{\"1\":{\"967\":1}}],[\"再调用union\",{\"1\":{\"1225\":1}}],[\"再处理token\",{\"1\":{\"1100\":1}}],[\"再者python中函数的参数可以有默认值\",{\"1\":{\"896\":1}}],[\"再到确保良好的用户体验\",{\"1\":{\"619\":1}}],[\"再由后台程序正式执行任务\",{\"1\":{\"616\":1}}],[\"再重构代码\",{\"1\":{\"553\":1}}],[\"再分两次\",{\"1\":{\"469\":1}}],[\"再比对\",{\"1\":{\"455\":1}}],[\"再例如\",{\"1\":{\"414\":1}}],[\"再修改的控制方式\",{\"1\":{\"403\":1}}],[\"再从2改为3\",{\"1\":{\"390\":1}}],[\"再遍历被驱动表与驱动表进行查询\",{\"1\":{\"349\":1}}],[\"再将脏页写入实际的各个表空间文件\",{\"1\":{\"469\":1}}],[\"再将\",{\"1\":{\"469\":1}}],[\"再将double\",{\"1\":{\"320\":1}}],[\"再将所有的历史元素批量\",{\"1\":{\"245\":1}}],[\"再删除缓存\",{\"1\":{\"288\":1}}],[\"再删除缓存的方案\",{\"1\":{\"287\":1}}],[\"再去更新mysql\",{\"1\":{\"283\":1}}],[\"再更新数据库\",{\"0\":{\"283\":1}}],[\"再更新缓存\",{\"0\":{\"282\":1}}],[\"再进入下层链表查找\",{\"1\":{\"231\":1}}],[\"再逐步将更多的流量导入到新版本上\",{\"1\":{\"171\":1}}],[\"再基于新构建的镜像重新运行容器\",{\"1\":{\"131\":1}}],[\"再通过标签进行选择\",{\"1\":{\"120\":1}}],[\"类比当贪吃蛇自己咬到自己\",{\"1\":{\"1220\":1}}],[\"类比贪吃蛇游戏\",{\"1\":{\"1220\":1}}],[\"类构造\",{\"0\":{\"1193\":1}}],[\"类实例可保存临时数据\",{\"1\":{\"1143\":1}}],[\"类变量属于全局作用域\",{\"1\":{\"985\":1}}],[\"类中实现了\",{\"1\":{\"847\":1,\"1009\":1}}],[\"类中需要有两个方法keys\",{\"1\":{\"824\":1}}],[\"类负责选择并创建适当的书籍对象\",{\"1\":{\"790\":1}}],[\"类\",{\"1\":{\"782\":1,\"982\":1,\"1149\":1}}],[\"类与函数各司其职\",{\"1\":{\"557\":1}}],[\"类与对象的\",{\"0\":{\"544\":1}}],[\"类方法\",{\"1\":{\"543\":1}}],[\"类的两种角色\",{\"0\":{\"545\":1}}],[\"类的组合也是符合很多设计模式的思路\",{\"1\":{\"534\":1}}],[\"类的多继承是保证类的多态性\",{\"1\":{\"534\":1}}],[\"类的继承和类的组合\",{\"1\":{\"534\":1}}],[\"类的分类\",{\"1\":{\"534\":1}}],[\"类的设计\",{\"0\":{\"534\":1}}],[\"类注释\",{\"1\":{\"531\":1}}],[\"类名数组\",{\"1\":{\"1189\":1}}],[\"类名统一使用大驼峰命名\",{\"1\":{\"529\":1}}],[\"类名\",{\"1\":{\"529\":1}}],[\"类似于堆栈\",{\"1\":{\"915\":1}}],[\"类似于循环队列\",{\"1\":{\"912\":1}}],[\"类似于pandas中的pipeline\",{\"1\":{\"806\":1}}],[\"类似于cron表达式中的\",{\"1\":{\"613\":1}}],[\"类似于\",{\"1\":{\"579\":1}}],[\"类似于嵌套循环\",{\"1\":{\"507\":1,\"520\":1}}],[\"类似于redis中的aof\",{\"0\":{\"383\":1}}],[\"类似于客户想要与之交谈的公司中的实际办理人\",{\"1\":{\"270\":1}}],[\"类似\",{\"1\":{\"218\":1,\"349\":3,\"448\":1,\"666\":1,\"967\":1}}],[\"类似docker\",{\"1\":{\"125\":1}}],[\"类型及其特点\",{\"1\":{\"662\":1}}],[\"类型适用于不同的场景\",{\"1\":{\"662\":1}}],[\"类型字段等等这些字段中的数据可能总共就是那么几个几十个数值重复使用\",{\"1\":{\"507\":1,\"525\":1}}],[\"类型为长整形\",{\"1\":{\"414\":1}}],[\"类型为configmap\",{\"1\":{\"73\":1}}],[\"类型列最多可以存储65532个字节\",{\"1\":{\"326\":1}}],[\"类型作相同处理\",{\"1\":{\"100\":1}}],[\"类型\",{\"0\":{\"668\":1,\"824\":1},\"1\":{\"93\":1,\"664\":1,\"668\":1}}],[\"类型服务\",{\"0\":{\"91\":1}}],[\"类型的卷引用\",{\"1\":{\"69\":1}}],[\"镜像\",{\"1\":{\"125\":1}}],[\"向二进制里添加几个零\",{\"1\":{\"1326\":1}}],[\"向下\",{\"1\":{\"1303\":11}}],[\"向右\",{\"1\":{\"1303\":8}}],[\"向数组中的每个整数前添加\",{\"1\":{\"1274\":1}}],[\"向队列发送结束信号\",{\"1\":{\"916\":1}}],[\"向队列中添加任务\",{\"1\":{\"916\":1}}],[\"向\",{\"1\":{\"278\":1}}],[\"向kubernetes\",{\"1\":{\"124\":1}}],[\"向公众暴露服务\",{\"1\":{\"93\":1}}],[\"附着在运行中的容器上\",{\"1\":{\"124\":1}}],[\"内查找\",{\"1\":{\"1390\":1}}],[\"内\",{\"1\":{\"1236\":2}}],[\"内置\",{\"1\":{\"1156\":2}}],[\"内置异常\",{\"1\":{\"986\":1}}],[\"内置函数\",{\"1\":{\"986\":1}}],[\"内置类型\",{\"1\":{\"986\":1}}],[\"内置常量\",{\"1\":{\"986\":1}}],[\"内置作用域指的是python解释器自动提供的一组预定义的变量和函数\",{\"1\":{\"986\":1}}],[\"内置作用域\",{\"0\":{\"986\":1}}],[\"内置模块\",{\"1\":{\"986\":1}}],[\"内置模块collections\",{\"0\":{\"939\":1}}],[\"内置模块functools\",{\"0\":{\"928\":1}}],[\"内置lru缓存\",{\"0\":{\"929\":1}}],[\"内置多种持久化方案\",{\"1\":{\"607\":1}}],[\"内部通过\",{\"1\":{\"1082\":1}}],[\"内部维护了一个local对象作为私有变量\",{\"1\":{\"856\":1}}],[\"内部错误\",{\"1\":{\"754\":2}}],[\"内部简称\",{\"1\":{\"460\":1}}],[\"内部简称ahi\",{\"1\":{\"312\":1}}],[\"内层表索引的高度\",{\"1\":{\"513\":1}}],[\"内层表行数\",{\"1\":{\"513\":1}}],[\"内存效率\",{\"1\":{\"911\":1}}],[\"内存会有影响\",{\"1\":{\"813\":1}}],[\"内存会受到影响\",{\"1\":{\"301\":1}}],[\"内存这里指的是一台机器能够达到多大的并发量\",{\"1\":{\"813\":1}}],[\"内存限制\",{\"1\":{\"725\":1}}],[\"内存时\",{\"1\":{\"725\":3}}],[\"内存开销\",{\"1\":{\"713\":1}}],[\"内存占用更低\",{\"1\":{\"1087\":1}}],[\"内存占用低\",{\"1\":{\"665\":1}}],[\"内存占用较高\",{\"1\":{\"664\":1}}],[\"内存占用\",{\"1\":{\"625\":1}}],[\"内存\",{\"1\":{\"124\":1,\"631\":1,\"634\":1,\"725\":1}}],[\"内运行的\",{\"1\":{\"114\":1}}],[\"按\",{\"1\":{\"1403\":1}}],[\"按账单\",{\"1\":{\"1366\":1}}],[\"按以下方法修改该数组\",{\"1\":{\"1365\":1}}],[\"按下按钮\",{\"1\":{\"561\":1}}],[\"按顺序自动地执行滚动更新\",{\"1\":{\"191\":1}}],[\"按顺序地增加副本\",{\"1\":{\"191\":1}}],[\"按照动规5部曲的思路进行分析\",{\"1\":{\"1271\":1}}],[\"按照动态规划五部曲\",{\"1\":{\"1207\":1}}],[\"按照一定的时间间隔重复执行\",{\"1\":{\"613\":1}}],[\"按照操作性能可分为乐观锁和悲观锁\",{\"0\":{\"403\":1}}],[\"按照数据操作的粒度分\",{\"0\":{\"402\":1}}],[\"按照数据操作的类型分\",{\"0\":{\"401\":1}}],[\"按照列的顺序逆序存放\",{\"1\":{\"323\":1}}],[\"按照规则把一张表的数据切分到多张表里面去\",{\"1\":{\"303\":1}}],[\"按照id是奇数还是偶数\",{\"1\":{\"302\":1}}],[\"按照预定的时间计划\",{\"1\":{\"200\":1}}],[\"按照顺序进行创建和删除pod\",{\"1\":{\"190\":1}}],[\"按照控制台引导继续往下\",{\"1\":{\"108\":1}}],[\"按文件名\",{\"1\":{\"124\":1}}],[\"那我们需要判断dp\",{\"1\":{\"1299\":1}}],[\"那一层拷贝到dp\",{\"1\":{\"1273\":1}}],[\"那些是需要接到其他子序列的后面\",{\"1\":{\"1198\":1}}],[\"那些是需要自成一个子序列\",{\"1\":{\"1198\":1}}],[\"那些非标识性的信息应该记录在\",{\"1\":{\"120\":1}}],[\"那之前为什么要使用栈呢\",{\"0\":{\"1052\":1}}],[\"那你不是要干等着我做完其他事情后\",{\"1\":{\"959\":1}}],[\"那他们不会搞混吗\",{\"0\":{\"853\":1}}],[\"那当某个方法参数或变量是\",{\"1\":{\"762\":1}}],[\"那这个类的职责就不够单一\",{\"1\":{\"762\":1}}],[\"那说明要获取的键不在字典里\",{\"1\":{\"758\":1}}],[\"那辅助索引将会变的更大\",{\"1\":{\"442\":1}}],[\"那就是探测失败\",{\"1\":{\"147\":4}}],[\"那么撤销路径2\",{\"1\":{\"1345\":1}}],[\"那么应该再去搜索其他方向了\",{\"1\":{\"1345\":1}}],[\"那么应该考虑使用更灵活的设计\",{\"1\":{\"793\":1}}],[\"那么把结果全部都完得到的就是那两个不同的数a^b\",{\"1\":{\"1340\":1}}],[\"那么出现偶数的数字异或结果都会是0\",{\"1\":{\"1337\":1}}],[\"那么剩下部分的异或和是x^y\",{\"1\":{\"1324\":1}}],[\"那么从左上角到右下角将会有多少条不同的路径\",{\"1\":{\"1303\":1}}],[\"那么两个字符串都是回文串\",{\"1\":{\"1300\":1}}],[\"那么两块石头都会被完全粉碎\",{\"1\":{\"1274\":1}}],[\"那么请你返回\",{\"1\":{\"1300\":1}}],[\"那么分别加入s\",{\"1\":{\"1299\":1}}],[\"那么它一定是回文串\",{\"1\":{\"1299\":1}}],[\"那么它则不是回文串\",{\"1\":{\"1298\":1}}],[\"那么它的直接倒叙就是它本身\",{\"1\":{\"1298\":1}}],[\"那么子序列\",{\"1\":{\"1287\":1}}],[\"那么重量为\",{\"1\":{\"1274\":1}}],[\"那么粉碎的可能结果如下\",{\"1\":{\"1274\":1}}],[\"那么dfs搜索的第一条路径是这样的\",{\"1\":{\"1345\":1}}],[\"那么dp\",{\"1\":{\"1273\":1,\"1299\":2}}],[\"那么debug可以帮助我们做什么呢\",{\"1\":{\"729\":1}}],[\"那么物品和背包的遍历顺序有影响吗\",{\"1\":{\"1271\":1}}],[\"那么您的题解将被\",{\"1\":{\"1266\":1}}],[\"那么课程之间就不可能学习完成\",{\"1\":{\"1241\":1}}],[\"那么一定可以进行拓扑排序\",{\"1\":{\"1240\":1}}],[\"那么一个页就无法存储一条完整的记录\",{\"1\":{\"326\":1}}],[\"那么他们不应该属于同一组\",{\"1\":{\"1237\":1}}],[\"那么所有方法的复杂度也就都是\",{\"1\":{\"1226\":1}}],[\"那么所占内存就呈线性增大\",{\"1\":{\"1022\":1}}],[\"那么p和r也连通\",{\"1\":{\"1225\":1}}],[\"那么q和p也连通\",{\"1\":{\"1225\":1}}],[\"那么需要两个dp数组\",{\"1\":{\"1201\":1}}],[\"那么如果是求最大的顺子呢\",{\"1\":{\"1198\":1}}],[\"那么如何得来呢\",{\"1\":{\"1303\":1}}],[\"那么如何在python中实现debug的功能呢\",{\"1\":{\"730\":1}}],[\"那么如何处理所有与规则不匹配的流量将交由\",{\"1\":{\"98\":1}}],[\"那么我们需要先对重量进行排序\",{\"1\":{\"1378\":1}}],[\"那么我们只要从周边找到陆地然后\",{\"1\":{\"1354\":1}}],[\"那么我们来举一个例子\",{\"1\":{\"1345\":1}}],[\"那么我们是不是可以先进行排序\",{\"1\":{\"1338\":1}}],[\"那么我们就可以转化为求图中是否存在环\",{\"1\":{\"1241\":1}}],[\"那么我们稍微修改一下\",{\"1\":{\"1235\":1}}],[\"那么我们可以从前到后遍历每一个边\",{\"1\":{\"1230\":1}}],[\"那么我们可以为了维持我们之前的习惯\",{\"1\":{\"1221\":1}}],[\"那么我们遍历图需要两个数组第一个visited\",{\"1\":{\"1221\":1}}],[\"那么我们遍历图需要哪些条件呢\",{\"1\":{\"1221\":1}}],[\"那么我们如何使用endpoint呢\",{\"1\":{\"1094\":1}}],[\"那么我也简单举几个例子来说明如何使用\",{\"1\":{\"1124\":1}}],[\"那么既然我们需要更加灵活的使用这个框架\",{\"1\":{\"1108\":1}}],[\"那么flask中的call方法是什么时候执行的呢\",{\"1\":{\"1057\":1}}],[\"那么什么是上下文呢\",{\"1\":{\"1048\":1}}],[\"那么核的利用率可以达到100\",{\"1\":{\"1029\":1}}],[\"那么内部函数就被认为是闭包\",{\"1\":{\"990\":1}}],[\"那么内层包的扫表次数就越少\",{\"1\":{\"514\":1}}],[\"那么只能等响应完这个请求后\",{\"1\":{\"977\":1}}],[\"那么有了窗口\",{\"1\":{\"959\":1}}],[\"那么服务端在收到请求后就会建立多个冗余的无效链接\",{\"1\":{\"952\":1}}],[\"那么常见的实现功能代码如下\",{\"1\":{\"935\":1}}],[\"那么将typed设置为true\",{\"1\":{\"930\":1}}],[\"那么将造成磁盘io的负荷加重\",{\"1\":{\"260\":1}}],[\"那么直接使用该类的实例即可\",{\"1\":{\"920\":1}}],[\"那么现在到达正题了就是如何实现debug功能\",{\"1\":{\"735\":1}}],[\"那么显然将会出现连接被用尽的问题\",{\"1\":{\"581\":1}}],[\"那么连接池会允许\",{\"1\":{\"578\":1}}],[\"那么建议优先记录到文件\",{\"1\":{\"503\":1}}],[\"那么开启了慢查询日志后\",{\"1\":{\"503\":1}}],[\"那么就试一试贪心\",{\"1\":{\"1359\":1}}],[\"那么就往袋子里重新放入1个黑球那么最终袋子里一定会只剩1个球\",{\"1\":{\"1328\":1}}],[\"那么就往袋子里重新放入1个白球如果拿出的是1个白球和1个黑球\",{\"1\":{\"1328\":1}}],[\"那么就把\",{\"1\":{\"1217\":1}}],[\"那么就可以使用装饰模式对传输的字符串数据进行压缩或加密\",{\"1\":{\"770\":1}}],[\"那么就不应当发生直接的相互调用\",{\"1\":{\"762\":1}}],[\"那么就会出现如下场景\",{\"1\":{\"482\":1}}],[\"那么就基于undo\",{\"1\":{\"425\":1}}],[\"那么之后获取某时刻的数据时就还是原来的照片上的数据\",{\"1\":{\"371\":1,\"477\":1}}],[\"那么在局部作用域中对这个变量的修改不会影响到全局作用域中的变量\",{\"1\":{\"985\":1}}],[\"那么在将来它被访问的可能性也很小\",{\"1\":{\"839\":1,\"929\":1,\"1003\":1}}],[\"那么在将来一段时间内被使用的可能性也很小\",{\"1\":{\"838\":1,\"1002\":1}}],[\"那么在应用\",{\"1\":{\"469\":1}}],[\"那么在应用redo\",{\"1\":{\"320\":1}}],[\"那么在执行这个操作之后\",{\"1\":{\"227\":1}}],[\"那么在执行这个操作之前\",{\"1\":{\"227\":1}}],[\"那么\",{\"1\":{\"260\":1,\"287\":1,\"513\":1,\"1225\":1,\"1236\":2}}],[\"那么会自动执行一次bgsave\",{\"1\":{\"256\":1}}],[\"那么由于redis没有缓存数据\",{\"1\":{\"249\":1}}],[\"那么这就不是一个二分图了\",{\"1\":{\"1235\":1}}],[\"那么这个算法的复杂度是多少呢\",{\"1\":{\"1225\":1}}],[\"那么这样就产生了嵌套作用域\",{\"1\":{\"984\":1}}],[\"那么这种格式就不能使\",{\"1\":{\"227\":1}}],[\"那么这件事是必然失败的\",{\"1\":{\"30\":1}}],[\"那么程序会分配\",{\"1\":{\"227\":2}}],[\"那么程序也会分配\",{\"1\":{\"227\":1}}],[\"那么程序分\",{\"1\":{\"227\":1}}],[\"那么可以将少量的用户流量导入到新版本上\",{\"1\":{\"171\":1}}],[\"那么通过应用清单而完成的更新会覆盖之前手动扩缩所作的变更\",{\"1\":{\"155\":1}}],[\"那么必须指定\",{\"1\":{\"98\":1}}],[\"那么很容易出现相互猜忌\",{\"1\":{\"30\":1}}],[\"九\",{\"0\":{\"120\":1,\"757\":1}}],[\"注册模板上下文处理程序函数\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"注册socket\",{\"1\":{\"679\":1}}],[\"注册到flask\",{\"1\":{\"662\":1}}],[\"注释的黄金法则\",{\"1\":{\"549\":1}}],[\"注释中解释参数的作用\",{\"1\":{\"533\":1}}],[\"注释不要太长\",{\"1\":{\"531\":1}}],[\"注释\",{\"0\":{\"531\":1,\"549\":1},\"1\":{\"531\":1,\"557\":1}}],[\"注意是左闭右闭\",{\"1\":{\"1299\":1}}],[\"注意利润不能是\",{\"1\":{\"1292\":2}}],[\"注意图中并不是所有节点都相连\",{\"1\":{\"1241\":1}}],[\"注意这五个元素可为任意顺序\",{\"1\":{\"1265\":1}}],[\"注意这里我使用flask\",{\"1\":{\"677\":1}}],[\"注意这只是假设\",{\"1\":{\"482\":1}}],[\"注意事项\",{\"0\":{\"599\":1,\"669\":1,\"682\":1}}],[\"注意从\",{\"1\":{\"498\":1}}],[\"注意在可重复读隔离级别下\",{\"1\":{\"482\":1}}],[\"注意不要过多使用索引\",{\"1\":{\"451\":1}}],[\"注意点\",{\"0\":{\"252\":1}}],[\"注意转换\",{\"1\":{\"210\":1}}],[\"注意\",{\"0\":{\"488\":1},\"1\":{\"200\":1,\"299\":1,\"405\":1,\"416\":1,\"503\":1,\"513\":1,\"1203\":1,\"1208\":1,\"1209\":1,\"1257\":2,\"1276\":2,\"1288\":1,\"1292\":4,\"1303\":1,\"1335\":1,\"1366\":1,\"1385\":1}}],[\"注解\",{\"1\":{\"119\":1,\"120\":1}}],[\"注入配置数据的方法\",{\"1\":{\"69\":1}}],[\"八方围观的情况\",{\"1\":{\"1029\":1}}],[\"八\",{\"0\":{\"119\":1,\"574\":1,\"663\":1,\"756\":1}}],[\"商城\",{\"1\":{\"118\":1}}],[\"​\",{\"1\":{\"118\":3,\"1048\":2,\"1051\":1}}],[\"此题\",{\"1\":{\"1203\":1}}],[\"此代码示例展示了如何使用asyncio\",{\"1\":{\"924\":1}}],[\"此示例中\",{\"1\":{\"916\":1}}],[\"此外\",{\"1\":{\"615\":1,\"625\":1,\"628\":1,\"634\":1,\"800\":1,\"894\":1,\"1352\":1}}],[\"此外linux对文件操作采取了\",{\"1\":{\"260\":1}}],[\"此连接池类型只保持一个数据库连接\",{\"1\":{\"579\":1}}],[\"此后所有的操作都将被写入新的aof文件\",{\"1\":{\"261\":1}}],[\"此选项为aof功能的开关\",{\"1\":{\"260\":1}}],[\"此时终止循环\",{\"1\":{\"1393\":1}}],[\"此时终止循环时\",{\"1\":{\"1393\":2}}],[\"此时区间不为空\",{\"1\":{\"1393\":1}}],[\"此时左边界大于右边界\",{\"1\":{\"1393\":1}}],[\"此时待查找区间为空\",{\"1\":{\"1393\":1}}],[\"此时再回头\",{\"1\":{\"1345\":1}}],[\"此时我们找到了节点6\",{\"1\":{\"1345\":1}}],[\"此时外函数两个临时变量\",{\"1\":{\"992\":1}}],[\"此时数据就可以从缓存区清除\",{\"1\":{\"959\":1}}],[\"此时会发送一个\",{\"1\":{\"953\":1}}],[\"此时连接就已建立完成\",{\"1\":{\"951\":1}}],[\"此时1会被自动移除\",{\"1\":{\"912\":1}}],[\"此时表\",{\"1\":{\"482\":2}}],[\"此时最好row\",{\"1\":{\"395\":1}}],[\"此时执行计划中的\",{\"1\":{\"349\":1}}],[\"此时被称为溢出页\",{\"1\":{\"326\":1}}],[\"此时缓存无数据\",{\"1\":{\"285\":1}}],[\"此时如果来了一个请求查询\",{\"1\":{\"285\":1}}],[\"此时来了一个请求b线程\",{\"1\":{\"283\":1}}],[\"此时这个key正好失效了\",{\"1\":{\"249\":1}}],[\"此时可以通过pod的\",{\"1\":{\"198\":1}}],[\"此时不会删除\",{\"1\":{\"165\":1}}],[\"此字段的默认值为\",{\"1\":{\"159\":1}}],[\"此值可以是绝对数\",{\"1\":{\"159\":1}}],[\"此钩子函数在容器被\",{\"1\":{\"135\":1}}],[\"此钩子函数在容器创建后将立刻执行\",{\"1\":{\"135\":1}}],[\"此名称空间自动在安装集群是自动创建\",{\"1\":{\"118\":1}}],[\"此服务将公开的端口\",{\"1\":{\"87\":1}}],[\"xunit\",{\"1\":{\"1194\":1}}],[\"x1\",{\"1\":{\"1049\":7}}],[\"xx是什么\",{\"0\":{\"893\":1}}],[\"xx\",{\"0\":{\"893\":1},\"1\":{\"1124\":1}}],[\"xxx\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"xxxxxx的pod的信息\",{\"1\":{\"125\":1}}],[\"x=6\",{\"1\":{\"839\":1,\"1003\":1}}],[\"x=0\",{\"1\":{\"783\":1}}],[\"x\",{\"1\":{\"404\":2,\"651\":2,\"708\":3,\"709\":4,\"722\":2,\"735\":3,\"757\":2,\"783\":2,\"839\":4,\"930\":2,\"985\":4,\"1003\":4,\"1015\":2,\"1023\":9,\"1073\":1,\"1217\":11,\"1219\":2,\"1226\":5,\"1227\":7,\"1274\":8,\"1303\":4,\"1352\":11,\"1353\":12,\"1354\":1,\"1377\":1,\"1379\":5}}],[\"x版本\",{\"1\":{\"264\":1}}],[\"xms\",{\"1\":{\"136\":1}}],[\"xmx\",{\"1\":{\"136\":1}}],[\"xmlrpc\",{\"1\":{\"706\":1}}],[\"xml\",{\"1\":{\"118\":1}}],[\"x86\",{\"1\":{\"108\":1}}],[\"七\",{\"0\":{\"118\":1,\"148\":1,\"245\":1,\"322\":1,\"571\":1,\"723\":1,\"755\":1,\"962\":1,\"1089\":1}}],[\"针对的是用户信息\",{\"1\":{\"1101\":1}}],[\"针对的是http请求\",{\"1\":{\"1101\":1}}],[\"针对的这组\",{\"1\":{\"86\":1}}],[\"针对安全告警\",{\"1\":{\"631\":1}}],[\"针对应用程序的关键性能指标\",{\"1\":{\"625\":1}}],[\"针对同一份数据\",{\"1\":{\"401\":1}}],[\"针对数据量巨大的单张表\",{\"1\":{\"303\":1}}],[\"针对使用deployment等部署的应用\",{\"1\":{\"117\":1}}],[\"自成体系了\",{\"1\":{\"1255\":1}}],[\"自成一派\",{\"1\":{\"1198\":1}}],[\"自反性\",{\"1\":{\"1225\":1}}],[\"自身忘记\",{\"1\":{\"971\":1}}],[\"自省信息丢失\",{\"0\":{\"932\":1}}],[\"自那以后就再也没有被命中\",{\"1\":{\"839\":1,\"1003\":1}}],[\"自定义错误响应\",{\"1\":{\"1155\":1}}],[\"自定义扩展点概述\",{\"0\":{\"1108\":1}}],[\"自定义上下文变量\",{\"1\":{\"1088\":1}}],[\"自定义比较函数优化优先级处理\",{\"0\":{\"920\":1}}],[\"自定义\",{\"0\":{\"880\":1},\"1\":{\"901\":1}}],[\"自定义响应\",{\"1\":{\"863\":1}}],[\"自定义flask的序列化\",{\"0\":{\"826\":1}}],[\"自定义异常\",{\"0\":{\"750\":1}}],[\"自定义连接操作\",{\"1\":{\"679\":1}}],[\"自定义条件\",{\"1\":{\"565\":1}}],[\"自定义函数时\",{\"1\":{\"431\":1}}],[\"自行百度\",{\"1\":{\"533\":1}}],[\"自行配置\",{\"1\":{\"334\":1}}],[\"自己能认识的语言\",{\"1\":{\"360\":1}}],[\"自适应\",{\"0\":{\"459\":1},\"1\":{\"460\":4}}],[\"自适应即我们不需要自己处理\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"自适应索引\",{\"0\":{\"313\":1},\"1\":{\"420\":1}}],[\"自适应hash索引只适合搜索等值的查询\",{\"1\":{\"314\":1,\"420\":1}}],[\"自适应hash索引存在于innodb架构中的缓存中\",{\"1\":{\"314\":1,\"420\":1}}],[\"自适应hash索引\",{\"1\":{\"312\":1},\"2\":{\"465\":1}}],[\"自愈\",{\"1\":{\"117\":1}}],[\"自动生成交互式文档\",{\"1\":{\"1151\":1}}],[\"自动校验后的数据\",{\"1\":{\"1150\":1}}],[\"自动校验请求参数\",{\"1\":{\"1146\":1}}],[\"自动文档生成\",{\"0\":{\"1151\":1}}],[\"自动文档\",{\"1\":{\"1146\":1,\"1154\":1}}],[\"自动进入\",{\"1\":{\"953\":1}}],[\"自动管理内存\",{\"1\":{\"911\":1}}],[\"自动资源管理\",{\"0\":{\"746\":1}}],[\"自动负载均衡\",{\"1\":{\"708\":1}}],[\"自动运行测试\",{\"1\":{\"553\":1}}],[\"自动执行\",{\"1\":{\"256\":1}}],[\"自动触发时机\",{\"1\":{\"262\":1}}],[\"自动触发\",{\"1\":{\"256\":1,\"262\":1,\"1110\":1}}],[\"自动的滚动更新\",{\"1\":{\"191\":1}}],[\"自动缩放deployment\",{\"1\":{\"124\":1}}],[\"自动调度\",{\"1\":{\"114\":1}}],[\"自动化监控与告警\",{\"1\":{\"641\":1}}],[\"自动化处理能力\",{\"1\":{\"640\":1}}],[\"自动化测试结果\",{\"1\":{\"630\":1}}],[\"自动化控制等场景\",{\"1\":{\"560\":1}}],[\"自动化部署和监控让系统永葆青春\",{\"1\":{\"557\":1}}],[\"自动化部署流水线不仅是技术工具\",{\"1\":{\"37\":1}}],[\"自动化构建与测试\",{\"0\":{\"52\":1},\"1\":{\"49\":1}}],[\"自动化陷阱\",{\"0\":{\"42\":1,\"54\":1}}],[\"自动化的引入不仅能极大提高工作效率\",{\"1\":{\"25\":1}}],[\"里面是对路径进行回溯\",{\"1\":{\"1221\":1}}],[\"里面有一个local对象\",{\"1\":{\"853\":1}}],[\"里面的记录不需要一条一条地取出来和\",{\"1\":{\"513\":1}}],[\"里氏替换原则\",{\"1\":{\"762\":1}}],[\"里最小的值\",{\"1\":{\"477\":1}}],[\"里我们可以看到最大可用内存\",{\"1\":{\"210\":1}}],[\"里\",{\"1\":{\"117\":1}}],[\"处处修改\",{\"1\":{\"542\":1}}],[\"处于暂停状态时\",{\"1\":{\"163\":1}}],[\"处于\",{\"1\":{\"117\":1}}],[\"处理节点\",{\"1\":{\"1348\":1}}],[\"处理返回值\",{\"1\":{\"1194\":1}}],[\"处理返回值参数\",{\"1\":{\"862\":1}}],[\"处理逻辑\",{\"1\":{\"1150\":1}}],[\"处理url\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"处理函数运行\",{\"0\":{\"1103\":1}}],[\"处理异步场景\",{\"1\":{\"1088\":1}}],[\"处理器中创建\",{\"1\":{\"1078\":1}}],[\"处理响应数据\",{\"1\":{\"924\":1}}],[\"处理后队列\",{\"1\":{\"908\":2,\"912\":2}}],[\"处理任务\",{\"1\":{\"908\":2,\"912\":2}}],[\"处理response的其他后续操作\",{\"1\":{\"862\":1}}],[\"处理请求参数\",{\"1\":{\"862\":1}}],[\"处理者\",{\"1\":{\"805\":1}}],[\"处理一月数据\",{\"1\":{\"776\":1}}],[\"处理一天数据\",{\"1\":{\"776\":1}}],[\"处理一周数据\",{\"1\":{\"776\":1}}],[\"处理文件读取错误\",{\"1\":{\"742\":1}}],[\"处理文件上传等操作\",{\"1\":{\"645\":1}}],[\"处理http请求\",{\"1\":{\"721\":1}}],[\"处理业务逻辑\",{\"1\":{\"545\":1}}],[\"处理\",{\"1\":{\"532\":1,\"600\":1}}],[\"处理能力达到上限\",{\"1\":{\"299\":1}}],[\"处理程序执行非阻塞操作\",{\"1\":{\"270\":1}}],[\"处理程序执行\",{\"1\":{\"270\":1}}],[\"处理的错误具体处理\",{\"1\":{\"532\":1}}],[\"处理的\",{\"1\":{\"116\":1}}],[\"处理或者与\",{\"1\":{\"100\":1}}],[\"各自负责创建特定类型的书籍对象\",{\"1\":{\"791\":1}}],[\"各自的时间轮进行定义\",{\"1\":{\"611\":1}}],[\"各自为战\",{\"1\":{\"50\":1}}],[\"各请求串行执行\",{\"1\":{\"597\":1}}],[\"各个容量的背包所能存放的最大价值\",{\"1\":{\"1271\":1}}],[\"各个线程之间对数据的访问\",{\"1\":{\"1031\":1}}],[\"各个功能的模块要明确\",{\"1\":{\"535\":1}}],[\"各个存储引擎特性对比\",{\"1\":{\"311\":1}}],[\"各有各的特点\",{\"1\":{\"333\":1}}],[\"各种操作加锁的特点\",{\"1\":{\"405\":1}}],[\"各种blob类型\",{\"1\":{\"323\":1}}],[\"各种text类型\",{\"1\":{\"323\":1}}],[\"各种安装脚本通常用于启动应用程序\",{\"1\":{\"117\":1}}],[\"六\",{\"0\":{\"117\":1,\"145\":1,\"244\":1,\"304\":1,\"321\":1,\"391\":1,\"443\":1,\"534\":1,\"568\":1,\"600\":1,\"639\":1,\"662\":1,\"719\":1,\"752\":1,\"818\":1,\"957\":1,\"978\":1,\"1086\":1}}],[\"标记数组记录每个值为\",{\"1\":{\"1354\":1}}],[\"标记节点\",{\"1\":{\"1348\":1}}],[\"标记为已遍历\",{\"1\":{\"1348\":1}}],[\"标记\",{\"1\":{\"1225\":1}}],[\"标记该记录是否是本层b+树的非叶子节点中的最小记录\",{\"1\":{\"324\":1}}],[\"标记该记录是否被删除\",{\"1\":{\"324\":1}}],[\"标题是\",{\"1\":{\"1048\":1}}],[\"标志位被置为\",{\"1\":{\"953\":1}}],[\"标志位置为\",{\"1\":{\"951\":2}}],[\"标准的背包问题求得是装满背包的最大价值\",{\"1\":{\"1276\":1}}],[\"标准的完全背包问题的递推公式为dp\",{\"1\":{\"1275\":1}}],[\"标准的列表不直接支持队列的头部移除操作\",{\"1\":{\"908\":1}}],[\"标准库的\",{\"1\":{\"1069\":1,\"1087\":1}}],[\"标准库中的许多\",{\"1\":{\"590\":1}}],[\"标准库导入\",{\"1\":{\"530\":1}}],[\"标准化和透明化\",{\"1\":{\"46\":1}}],[\"标准化\",{\"1\":{\"39\":1}}],[\"标签选择算符的必需字段\",{\"1\":{\"156\":1}}],[\"标签选择器\",{\"1\":{\"153\":1}}],[\"标签的使用非常普遍\",{\"1\":{\"120\":1}}],[\"标签可以用来组织和选择一组kubernetes对象\",{\"1\":{\"120\":1}}],[\"标签和选择器\",{\"0\":{\"120\":1}}],[\"标签\",{\"1\":{\"116\":2,\"120\":1}}],[\"卷\",{\"1\":{\"115\":1}}],[\"发过来找开发人员分析\",{\"1\":{\"506\":1}}],[\"发vacuum\",{\"1\":{\"434\":1}}],[\"发红包\",{\"1\":{\"295\":1}}],[\"发送请求结果\",{\"1\":{\"1112\":1}}],[\"发送方主机在等到确认应答返回之前\",{\"1\":{\"959\":1}}],[\"发送停止信号\",{\"1\":{\"916\":1}}],[\"发送网络请求\",{\"1\":{\"898\":1}}],[\"发送sigkill\",{\"1\":{\"717\":1}}],[\"发送sigterm信号\",{\"1\":{\"717\":1}}],[\"发送消息\",{\"1\":{\"681\":2}}],[\"发送和接收数据\",{\"1\":{\"674\":1}}],[\"发送邮件\",{\"1\":{\"645\":1}}],[\"发送邮件逻辑\",{\"1\":{\"548\":1}}],[\"发送三个\",{\"0\":{\"597\":1}}],[\"发送多个\",{\"1\":{\"592\":1}}],[\"发送dump\",{\"1\":{\"278\":1}}],[\"发送http请求\",{\"1\":{\"147\":1}}],[\"发现了新版本有问题\",{\"1\":{\"171\":1}}],[\"发生在类实例被创建完以后\",{\"1\":{\"903\":1}}],[\"发生了除以零的错误\",{\"1\":{\"748\":1}}],[\"发生了hash冲突\",{\"1\":{\"242\":1}}],[\"发生错误\",{\"1\":{\"743\":1}}],[\"发生问题带来后果更严重\",{\"1\":{\"507\":1}}],[\"发生阻塞或死锁\",{\"1\":{\"408\":1}}],[\"发生锁冲突的概率最低\",{\"1\":{\"402\":1}}],[\"发生锁冲突的概率最高\",{\"1\":{\"402\":1}}],[\"发生缓存数据和mysql数据不一致\",{\"1\":{\"283\":1}}],[\"发生hash冲突\",{\"1\":{\"244\":1}}],[\"发生改变时\",{\"1\":{\"165\":1}}],[\"发生故障\",{\"1\":{\"115\":1}}],[\"发布服务\",{\"0\":{\"93\":1}}],[\"绑定参数\",{\"1\":{\"1150\":1}}],[\"绑定到\",{\"1\":{\"1084\":1}}],[\"绑定到当前线程\",{\"1\":{\"1078\":1}}],[\"绑定到当前执行上下文\",{\"1\":{\"1071\":1,\"1076\":1}}],[\"绑定\",{\"1\":{\"115\":1,\"1076\":1,\"1078\":1}}],[\"上题是有偶数个\",{\"1\":{\"1339\":1}}],[\"上方或者是左方\",{\"1\":{\"1303\":2}}],[\"上次冷冻期\",{\"1\":{\"1292\":1}}],[\"上次持有的加当前的值的最大值\",{\"1\":{\"1292\":1}}],[\"上一道题为无向图\",{\"1\":{\"1237\":1}}],[\"上一次冷冻期减去当前值的取最大值\",{\"1\":{\"1292\":1}}],[\"上一次\",{\"1\":{\"260\":1}}],[\"上图中绿色的方格代表\",{\"1\":{\"1217\":1}}],[\"上锁\",{\"1\":{\"1033\":1}}],[\"上下文操作里面到底做了什么东西呢\",{\"1\":{\"1100\":1}}],[\"上下文操作\",{\"0\":{\"1099\":1},\"1\":{\"1098\":1}}],[\"上下文嵌套\",{\"1\":{\"1087\":1}}],[\"上下文随\",{\"1\":{\"1077\":1}}],[\"上下文的生命周期与管理\",{\"0\":{\"1075\":1}}],[\"上下文的核心变化\",{\"0\":{\"1070\":1}}],[\"上下文对象的实现\",{\"0\":{\"1071\":1}}],[\"上下文不是我们这次要讲的重点\",{\"1\":{\"1048\":1}}],[\"上下文变量\",{\"1\":{\"1048\":1}}],[\"上下文语句\",{\"0\":{\"845\":1,\"1006\":1,\"1007\":1},\"2\":{\"1012\":1}}],[\"上下文\",{\"1\":{\"776\":2,\"845\":1,\"1007\":1}}],[\"上下文管理器通过定义\",{\"1\":{\"746\":1}}],[\"上溢\",{\"1\":{\"578\":1}}],[\"上面说道dfs是可一个方向搜\",{\"1\":{\"1345\":1}}],[\"上面\",{\"1\":{\"299\":1,\"302\":1}}],[\"上述情况就会导致不一致的情形出现\",{\"1\":{\"283\":1}}],[\"上线动作\",{\"1\":{\"165\":1}}],[\"上线\",{\"1\":{\"165\":1}}],[\"上创建\",{\"1\":{\"115\":1}}],[\"上\",{\"1\":{\"114\":1,\"610\":1,\"1208\":1,\"1273\":2,\"1354\":1}}],[\"上可用资源的情况\",{\"1\":{\"114\":1}}],[\"上运行相同的\",{\"1\":{\"115\":1}}],[\"上运行\",{\"1\":{\"114\":1}}],[\"上的网络应用程序公开为网络服务的方法\",{\"1\":{\"86\":1}}],[\"节省内存\",{\"1\":{\"734\":1}}],[\"节省团队对于结果的等待时间\",{\"1\":{\"46\":1}}],[\"节假日发红包抢红包\",{\"1\":{\"293\":1}}],[\"节约内存\",{\"1\":{\"217\":1}}],[\"节点b\",{\"1\":{\"1230\":2}}],[\"节点a\",{\"1\":{\"1230\":2}}],[\"节点值\",{\"1\":{\"1230\":1}}],[\"节点p和p是连通的\",{\"1\":{\"1225\":1}}],[\"节点的路径定位\",{\"1\":{\"460\":2}}],[\"节点至\",{\"1\":{\"460\":2}}],[\"节点创建\",{\"1\":{\"117\":1}}],[\"节点会选择合适的\",{\"1\":{\"117\":1}}],[\"节点上\",{\"1\":{\"117\":1}}],[\"节点上重新创建一个新的实例\",{\"1\":{\"117\":1}}],[\"节点关机或被删除\",{\"1\":{\"117\":1}}],[\"节点将应用程序实例调度到集群中的具体的节点上\",{\"1\":{\"117\":1}}],[\"节点之间通信的进程\",{\"1\":{\"114\":1}}],[\"节点和\",{\"1\":{\"114\":1}}],[\"节点\",{\"1\":{\"114\":7,\"115\":1,\"339\":1,\"1348\":1}}],[\"总利润\",{\"1\":{\"1292\":1}}],[\"总利润为\",{\"1\":{\"1292\":2}}],[\"总共获得\",{\"1\":{\"1281\":2}}],[\"总共有\",{\"1\":{\"1225\":1,\"1241\":2,\"1242\":2,\"1303\":1}}],[\"总共维持10s\",{\"1\":{\"198\":1}}],[\"总之\",{\"1\":{\"897\":1}}],[\"总内存的80\",{\"1\":{\"725\":1}}],[\"总耗时约\",{\"1\":{\"713\":1}}],[\"总耗时\",{\"1\":{\"597\":2}}],[\"总价需减去10\",{\"1\":{\"549\":1}}],[\"总是会被执行\",{\"1\":{\"749\":1}}],[\"总是跟这个事务在启动时看到的数据是一致的\",{\"1\":{\"474\":1,\"482\":1}}],[\"总是按先a后b的顺序处理\",{\"1\":{\"407\":1}}],[\"总是在\",{\"1\":{\"114\":1}}],[\"总结python的多线程不是真正的多线程\",{\"1\":{\"1029\":1}}],[\"总结经验教训\",{\"1\":{\"628\":1,\"641\":1}}],[\"总结\",{\"0\":{\"287\":1,\"374\":1,\"456\":1,\"518\":1,\"574\":1,\"600\":1,\"670\":1,\"723\":1,\"1065\":1,\"1089\":1,\"1125\":1,\"1173\":1},\"1\":{\"303\":1,\"326\":1,\"482\":1,\"1188\":1}}],[\"总结来说\",{\"1\":{\"285\":1}}],[\"总结流程\",{\"1\":{\"283\":1}}],[\"总数最多为所需\",{\"1\":{\"159\":1}}],[\"总数的\",{\"1\":{\"159\":2}}],[\"总数在任何时候都至少为所需的\",{\"1\":{\"159\":1}}],[\"总的来说\",{\"1\":{\"26\":1,\"898\":1}}],[\"系统会自动报警\",{\"1\":{\"1280\":2}}],[\"系统会用下面的代码来测试你的题解\",{\"1\":{\"1266\":1}}],[\"系统内固定模块中定义的变量\",{\"0\":{\"986\":1}}],[\"系统级别并发\",{\"0\":{\"813\":1}}],[\"系统需要使用现有的类\",{\"1\":{\"798\":1}}],[\"系统告警这里主要针对于生产环境所产生的告警系统\",{\"1\":{\"629\":1}}],[\"系统告警\",{\"0\":{\"631\":1},\"1\":{\"629\":1}}],[\"系统可能处于的不同模式\",{\"1\":{\"561\":1}}],[\"系统错误\",{\"1\":{\"550\":1}}],[\"系统变量\",{\"1\":{\"503\":1}}],[\"系统表\",{\"1\":{\"434\":1}}],[\"系统表空间数据文件\",{\"1\":{\"334\":1}}],[\"系统在访问\",{\"1\":{\"358\":2}}],[\"系统文件层\",{\"0\":{\"334\":1}}],[\"系统管理和控制工具\",{\"1\":{\"332\":1}}],[\"系统保留\",{\"1\":{\"162\":1}}],[\"系统中的\",{\"1\":{\"113\":1}}],[\"系统来修改\",{\"1\":{\"113\":1}}],[\"系统稳定\",{\"1\":{\"32\":1}}],[\"目标是找到target在数组中的结束位置\",{\"1\":{\"1395\":1}}],[\"目标是找到target在数组中的起始位置\",{\"1\":{\"1395\":1}}],[\"目标位置在\",{\"1\":{\"1390\":2}}],[\"目标和\",{\"1\":{\"1274\":1}}],[\"目标状态\",{\"1\":{\"113\":1}}],[\"目录结构\",{\"1\":{\"662\":1}}],[\"目的是为了解决读\",{\"1\":{\"374\":1}}],[\"目的\",{\"0\":{\"281\":1}}],[\"目前flask中一个有13个自定义扩展点\",{\"1\":{\"1125\":1}}],[\"目前mvcc只可以在rc和rr两种级别下工作\",{\"1\":{\"368\":1}}],[\"目前几乎支持所有主流的服务端编程技术\",{\"1\":{\"331\":1}}],[\"目前aof是redis持久化的主流方式\",{\"1\":{\"259\":1}}],[\"目前已经支持测试api\",{\"1\":{\"0\":1}}],[\"容量为j的背包\",{\"1\":{\"1273\":2}}],[\"容错策略\",{\"1\":{\"112\":1}}],[\"容器能够容纳水\",{\"1\":{\"1377\":1}}],[\"容器化\",{\"1\":{\"555\":1}}],[\"容器发生异常可以自动创建新的容器\",{\"1\":{\"178\":1}}],[\"容器启动后要等待多少秒后存活和就绪探测器才被初始化\",{\"1\":{\"147\":1}}],[\"容器的生命周期\",{\"0\":{\"142\":1}}],[\"容器的环境变量\",{\"1\":{\"71\":1}}],[\"容器中字段解释\",{\"0\":{\"133\":1}}],[\"容器运行时\",{\"0\":{\"132\":1}}],[\"容器运行环境是负责运行容器的软件\",{\"1\":{\"132\":1}}],[\"容器运行环境\",{\"1\":{\"114\":1}}],[\"容器旨在设计成无状态且不可变的\",{\"1\":{\"131\":1}}],[\"容器镜像是一个随时可以运行的软件包\",{\"1\":{\"131\":1}}],[\"容器镜像\",{\"0\":{\"131\":1}}],[\"容器将应用程序从底层的主机设施中解耦\",{\"1\":{\"130\":1}}],[\"容器名=镜像名\",{\"1\":{\"165\":1}}],[\"容器名称\",{\"1\":{\"133\":1}}],[\"容器名\",{\"1\":{\"125\":1}}],[\"容器\",{\"0\":{\"130\":1},\"1\":{\"114\":1,\"115\":4,\"140\":1}}],[\"容器组\",{\"1\":{\"114\":5,\"115\":5}}],[\"容器变量\",{\"1\":{\"77\":1}}],[\"应答报文后\",{\"1\":{\"953\":2}}],[\"应答报文\",{\"1\":{\"953\":2,\"954\":1}}],[\"应输出优先级最低的任务d\",{\"1\":{\"920\":1}}],[\"应输出优先级最高的任务c\",{\"1\":{\"919\":1}}],[\"应及时调整前端界面设计或优化后端算法\",{\"1\":{\"632\":1}}],[\"应当将最早被缓存的数据淘汰掉\",{\"1\":{\"837\":1,\"1001\":1}}],[\"应当即时介入调查\",{\"1\":{\"632\":1}}],[\"应当及时向相关方通报结果\",{\"1\":{\"617\":1}}],[\"应当显式地调用连接的释放方法\",{\"1\":{\"582\":1}}],[\"应用运行在\",{\"1\":{\"1164\":1}}],[\"应用\",{\"1\":{\"1161\":1}}],[\"应用上下文pop时执行\",{\"1\":{\"1110\":1}}],[\"应用上下文push时执行\",{\"1\":{\"1110\":1}}],[\"应用上下文执行完毕后自动执行\",{\"1\":{\"1110\":1}}],[\"应用上下文\",{\"0\":{\"1076\":1},\"1\":{\"1101\":1}}],[\"应用上下文栈\",{\"1\":{\"1073\":1}}],[\"应用场景\",{\"0\":{\"793\":1,\"1178\":1}}],[\"应用中实现实时双向通信变得简单\",{\"1\":{\"673\":1}}],[\"应用以支持\",{\"1\":{\"673\":1}}],[\"应用层协议有很多\",{\"1\":{\"962\":1}}],[\"应用层健康检查\",{\"1\":{\"631\":1}}],[\"应用层组织缓存\",{\"1\":{\"431\":1}}],[\"应用程序如同插入插座的插头\",{\"1\":{\"676\":1}}],[\"应用程序本身的响应时间和错误率也是重要的监控对象\",{\"1\":{\"631\":1}}],[\"应用程序指定导入\",{\"1\":{\"530\":1}}],[\"应用程序在\",{\"1\":{\"334\":1}}],[\"应用程序只需要在一个阻塞对象上等待\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"应用程序和系统库\",{\"1\":{\"131\":1}}],[\"应用程序的部署或者批处理程序的部署通常都是多维度的\",{\"1\":{\"120\":1}}],[\"应用程序相关的策略定义\",{\"1\":{\"112\":1}}],[\"应该为\",{\"1\":{\"1307\":1}}],[\"应该是value\",{\"1\":{\"1271\":1}}],[\"应该是\",{\"1\":{\"1271\":1}}],[\"应该是一项日常工作\",{\"1\":{\"30\":1}}],[\"应该保持\",{\"1\":{\"1266\":1}}],[\"应该保留多少个\",{\"1\":{\"202\":1}}],[\"应该将该类进行\",{\"1\":{\"762\":1}}],[\"应该立即通知相关人员或团队\",{\"1\":{\"636\":1}}],[\"应该启动回滚机制以恢复到之前稳定的状态\",{\"1\":{\"630\":1}}],[\"应该提前准备好备用联系人名单以确保有人能够在第一时间接收到告警并采取行动\",{\"1\":{\"627\":1}}],[\"应该根据项目的具体需求进行权衡\",{\"1\":{\"607\":1}}],[\"应该根据每个模块的完整包路径按字典序排序\",{\"1\":{\"530\":1}}],[\"应该对布隆过滤器进行重建\",{\"1\":{\"245\":1}}],[\"常识题\",{\"0\":{\"1364\":1,\"1365\":1}}],[\"常识类贪心问题\",{\"0\":{\"1363\":1}}],[\"常规实现\",{\"0\":{\"935\":1}}],[\"常规的应用里\",{\"1\":{\"112\":1}}],[\"常用技巧\",{\"0\":{\"1328\":1}}],[\"常用于处理多线程或多进程间的协作\",{\"1\":{\"916\":1}}],[\"常用于使用主键或唯一索引的所有字段作为连表条件\",{\"1\":{\"349\":1}}],[\"常用于使用主键或唯一索引的所有字段作为查询条件\",{\"1\":{\"349\":1}}],[\"常用的有\",{\"1\":{\"647\":1}}],[\"常用连接方式的有以下几种\",{\"1\":{\"511\":1}}],[\"常见的io操作包括读取文件\",{\"1\":{\"898\":1}}],[\"常见的监控指标包括cpu使用率\",{\"1\":{\"625\":1}}],[\"常见的阻力包括\",{\"1\":{\"33\":1}}],[\"常见问题与解决方案\",{\"0\":{\"715\":1}}],[\"常见问题与注意事项\",{\"0\":{\"655\":1}}],[\"常见问题\",{\"0\":{\"571\":1}}],[\"常见于排序和分组查询\",{\"1\":{\"351\":1}}],[\"常见于\",{\"1\":{\"349\":1}}],[\"常数复杂度获取字符串长度\",{\"1\":{\"227\":1}}],[\"代理类\",{\"1\":{\"771\":1}}],[\"代理服务器再把它转给你的浏览器\",{\"1\":{\"769\":1}}],[\"代理\",{\"1\":{\"769\":3}}],[\"代理控制着对于原对象的访问\",{\"1\":{\"769\":1}}],[\"代理模式能为对象提供相同的接口\",{\"1\":{\"800\":1}}],[\"代理模式则是给一个对象提供一个代理对象\",{\"1\":{\"771\":1}}],[\"代理模式是为了实现对象的控制\",{\"1\":{\"771\":1}}],[\"代理模式强调要让别人帮你去做一些本身与你业务没有太多关系的职责\",{\"1\":{\"771\":1}}],[\"代理模式的适用场景\",{\"1\":{\"769\":1}}],[\"代理模式\",{\"0\":{\"769\":1}}],[\"代替多线程\",{\"1\":{\"897\":1}}],[\"代替\",{\"1\":{\"590\":1}}],[\"代表\",{\"1\":{\"1403\":1}}],[\"代表水\",{\"1\":{\"1353\":1}}],[\"代表土地\",{\"1\":{\"1353\":1}}],[\"代表了交易股票的手续费用\",{\"1\":{\"1292\":1}}],[\"代表了你集群的实际情况\",{\"1\":{\"112\":1}}],[\"代表着这里面一定有a或b其中一个\",{\"1\":{\"1340\":1}}],[\"代表着\",{\"1\":{\"1202\":1}}],[\"代表着i位置最长的顺子\",{\"1\":{\"1198\":1}}],[\"代表每个分组里\",{\"1\":{\"324\":1}}],[\"代表当前aof文件空间\",{\"1\":{\"262\":1}}],[\"代码\",{\"0\":{\"1272\":1}}],[\"代码随想录中path的处理是在for循环中的\",{\"1\":{\"1221\":1}}],[\"代码组织清晰\",{\"1\":{\"1154\":1}}],[\"代码复用\",{\"1\":{\"1143\":1}}],[\"代码复杂度\",{\"1\":{\"710\":1}}],[\"代码结构混乱\",{\"1\":{\"1142\":1}}],[\"代码重复\",{\"1\":{\"1142\":1}}],[\"代码很简洁\",{\"1\":{\"935\":1}}],[\"代码如下所示\",{\"1\":{\"894\":1}}],[\"代码可能会变得越来越复杂和难以维护\",{\"1\":{\"804\":1}}],[\"代码是给人读的\",{\"1\":{\"557\":1}}],[\"代码泥潭\",{\"1\":{\"557\":1}}],[\"代码的\",{\"0\":{\"548\":1,\"549\":1,\"550\":1,\"555\":1}}],[\"代码的定义\",{\"0\":{\"226\":1}}],[\"代码会逐渐变成\",{\"1\":{\"542\":1}}],[\"代码即建筑\",{\"0\":{\"540\":1,\"557\":1}}],[\"代码风格的本质是通过清晰的结构\",{\"1\":{\"540\":1}}],[\"代码风格\",{\"0\":{\"1414\":1},\"2\":{\"537\":1,\"538\":1,\"558\":1,\"559\":1}}],[\"代码和它需要的所有运行时\",{\"1\":{\"131\":1}}],[\"代码发布\",{\"1\":{\"58\":1}}],[\"代码质量的放大镜\",{\"1\":{\"58\":1}}],[\"代码到生产\",{\"1\":{\"43\":1}}],[\"查到索引值然后根据索引对应的主键值再次查询id键值\",{\"1\":{\"419\":1}}],[\"查到索引就可以查到数据\",{\"1\":{\"418\":1}}],[\"查到所有的kube\",{\"1\":{\"108\":1}}],[\"查找\",{\"1\":{\"461\":1}}],[\"查找所有索引树\",{\"1\":{\"350\":1}}],[\"查找某个索引的部分索引\",{\"1\":{\"350\":1}}],[\"查找非唯一性索引\",{\"1\":{\"350\":1}}],[\"查找唯一性索引\",{\"1\":{\"350\":1}}],[\"查找主键索引\",{\"1\":{\"350\":1}}],[\"查询路由表转发到另一个接口\",{\"1\":{\"1093\":1}}],[\"查询任务状态\",{\"1\":{\"653\":1}}],[\"查询效率会非常慢\",{\"1\":{\"513\":1}}],[\"查询效率非常高\",{\"1\":{\"349\":1}}],[\"查询扫描的行数\",{\"1\":{\"504\":1}}],[\"查询语句写的烂\",{\"1\":{\"506\":1}}],[\"查询语句添加\",{\"1\":{\"482\":1}}],[\"查询语句就可以直接去查询缓存中取数据\",{\"1\":{\"332\":1}}],[\"查询\",{\"1\":{\"461\":1}}],[\"查询会更加快\",{\"1\":{\"441\":1}}],[\"查询条件包含\",{\"1\":{\"416\":1}}],[\"查询解析器\",{\"0\":{\"360\":1}}],[\"查询系统表\",{\"1\":{\"350\":1}}],[\"查询中实际使用到的索引\",{\"1\":{\"349\":1}}],[\"查询中如果包含子查询或其他部分\",{\"1\":{\"349\":1}}],[\"查询使用到了全文索引\",{\"1\":{\"349\":1}}],[\"查询结果的行数\",{\"1\":{\"504\":1}}],[\"查询结果可能找到多个符合条件的行\",{\"1\":{\"349\":1}}],[\"查询结束将查到的数据写到缓存中\",{\"1\":{\"283\":1}}],[\"查询所匹配记录所在的分区\",{\"1\":{\"349\":1}}],[\"查询所需的i\",{\"1\":{\"341\":1}}],[\"查询的\",{\"1\":{\"482\":1}}],[\"查询的结果\",{\"1\":{\"349\":1}}],[\"查询的序列标识\",{\"1\":{\"349\":1}}],[\"查询时长\",{\"1\":{\"504\":1}}],[\"查询时长及具体的\",{\"1\":{\"504\":1}}],[\"查询时间急剧的增加\",{\"1\":{\"498\":1}}],[\"查询时间基本没有变化\",{\"1\":{\"498\":1}}],[\"查询时从\",{\"1\":{\"477\":1}}],[\"查询时的条件列不是联合索引中的第一个列\",{\"1\":{\"416\":1}}],[\"查询时\",{\"1\":{\"349\":1}}],[\"查询io次数一定是稳定的\",{\"1\":{\"345\":1}}],[\"查询优化器会调用存储引擎的接口\",{\"1\":{\"362\":1}}],[\"查询优化器内部具体怎么实现的我们不需要是关心\",{\"1\":{\"361\":1}}],[\"查询优化器\",{\"0\":{\"361\":1},\"1\":{\"332\":1}}],[\"查询优化器和缓存六个部分\",{\"1\":{\"332\":1}}],[\"查询mysql使用的行格式\",{\"1\":{\"321\":1}}],[\"查询数据库的时候进行加锁\",{\"1\":{\"289\":1}}],[\"查询数据库\",{\"1\":{\"285\":1}}],[\"查询redis发现缓存不存在\",{\"1\":{\"283\":1}}],[\"查询先查缓存a再查询缓存b\",{\"1\":{\"252\":1}}],[\"查看是否正确使用了索引\",{\"1\":{\"507\":1}}],[\"查看日志文件\",{\"1\":{\"334\":1}}],[\"查看redis最大占用内存\",{\"1\":{\"210\":1}}],[\"查看更新历史\",{\"1\":{\"165\":1}}],[\"查看历史并回滚\",{\"1\":{\"165\":1}}],[\"查看历史记录\",{\"1\":{\"125\":1}}],[\"查看状态\",{\"1\":{\"165\":1}}],[\"查看pod中的容器的打印日志\",{\"1\":{\"125\":1}}],[\"查看pod详细信息\",{\"1\":{\"125\":1}}],[\"查看名称为nginx的deployment的信息\",{\"1\":{\"125\":1}}],[\"查看名称为nginx\",{\"1\":{\"125\":1}}],[\"查看所有名称空间的\",{\"1\":{\"125\":1}}],[\"查看\",{\"1\":{\"79\":1,\"125\":1,\"385\":1}}],[\"查看和编辑\",{\"1\":{\"76\":1}}],[\"查看环境变量\",{\"1\":{\"73\":1}}],[\"查看configmap\",{\"1\":{\"73\":1}}],[\"全部使用\",{\"1\":{\"1392\":1}}],[\"全部标记成\",{\"1\":{\"1354\":1}}],[\"全部适用于图\",{\"1\":{\"1217\":1}}],[\"全部完成后重新修改coredns镜像\",{\"1\":{\"108\":1}}],[\"全职员工\",{\"1\":{\"1180\":4}}],[\"全称双端队列\",{\"1\":{\"911\":1}}],[\"全局作用域与类\",{\"1\":{\"985\":1}}],[\"全局作用域与局部作用域\",{\"1\":{\"985\":1}}],[\"全局作用域中的变量和函数可以在程序的任何地方被访问和修改\",{\"1\":{\"985\":1}}],[\"全局作用域指的是在整个程序范围内都可以访问的变量和函数的集合\",{\"1\":{\"985\":1}}],[\"全局作用域\",{\"0\":{\"985\":1}}],[\"全局变量使得程序更难理解和使用\",{\"1\":{\"536\":1}}],[\"全局变量和私有变量\",{\"1\":{\"536\":1}}],[\"全局主键避重问题\",{\"1\":{\"304\":1}}],[\"全局成功\",{\"1\":{\"32\":1}}],[\"全量文件重放\",{\"1\":{\"264\":1}}],[\"全量遍历内存中数据\",{\"1\":{\"261\":1}}],[\"下标从\",{\"1\":{\"1341\":2}}],[\"下层的\",{\"1\":{\"977\":1}}],[\"下图图四中\",{\"1\":{\"1345\":1}}],[\"下图就是发送方缓存的数据\",{\"1\":{\"959\":1}}],[\"下图是myisam索引的原理图\",{\"1\":{\"413\":1}}],[\"下载\",{\"0\":{\"871\":1}}],[\"下载api\",{\"1\":{\"108\":1}}],[\"下才会出现\",{\"1\":{\"482\":1}}],[\"下一章将具体讨论这些与索引有关的优化策略\",{\"1\":{\"414\":1}}],[\"下一个请求获取连接时会从队列头部取出连接\",{\"1\":{\"579\":1}}],[\"下一个要生成的事务\",{\"1\":{\"477\":1}}],[\"下一个要生成的事务id值\",{\"1\":{\"371\":1}}],[\"下一个会被跳过\",{\"1\":{\"202\":1}}],[\"下面我借用代码随想录中的图片进行解释\",{\"1\":{\"1345\":1}}],[\"下面是代码随想录中的解答\",{\"1\":{\"1307\":1}}],[\"下面是一个使用asyncio\",{\"1\":{\"925\":1}}],[\"下面是一个使用queue模块实现的简单生产者消费者模型示例\",{\"1\":{\"916\":1}}],[\"下面是一个简单的迭代器类示例\",{\"1\":{\"732\":1}}],[\"下面讲解counter类的用法\",{\"1\":{\"940\":1}}],[\"下面来看下源码\",{\"1\":{\"856\":1}}],[\"下面的示例揭示了生成器的本质\",{\"1\":{\"1025\":1}}],[\"下面的例子展示了如何用函数装饰器实现单例模式\",{\"1\":{\"783\":1}}],[\"下面的配置显示了如何将名为\",{\"1\":{\"69\":1}}],[\"下面以\",{\"1\":{\"405\":1}}],[\"下面介绍type字段不同值表示的含义\",{\"1\":{\"350\":1}}],[\"下\",{\"1\":{\"260\":1,\"1303\":2,\"1354\":1}}],[\"下线老集群\",{\"1\":{\"170\":1}}],[\"下线老的稳定集群\",{\"1\":{\"169\":1}}],[\"要求两个\",{\"1\":{\"1353\":1}}],[\"要学习课程\",{\"1\":{\"1242\":2}}],[\"要在一对多中建立双向关系\",{\"1\":{\"886\":1}}],[\"要为各个类建立它们需要的专用接口\",{\"1\":{\"762\":1}}],[\"要使用https\",{\"1\":{\"698\":1}}],[\"要比记录到文件耗费更多的系统资源\",{\"1\":{\"503\":1}}],[\"要更新的是记录之间的\",{\"1\":{\"482\":1}}],[\"要讨论\",{\"1\":{\"482\":1}}],[\"要根据\",{\"1\":{\"451\":1}}],[\"要根据项目的实际情况\",{\"1\":{\"299\":1}}],[\"要保证在任何时刻都应该按照相同的顺序来锁定资源\",{\"1\":{\"407\":1}}],[\"要保留以允许回滚的旧replicasets的数量\",{\"1\":{\"153\":1}}],[\"要达到缓存数据和mysql数据最终一致\",{\"1\":{\"281\":1}}],[\"要么包含增加骑士健康点数的魔法球\",{\"1\":{\"1303\":1}}],[\"要么引起结束迭代的异常\",{\"1\":{\"1025\":1}}],[\"要么都不执行\",{\"1\":{\"425\":1}}],[\"要么其他业务不可用\",{\"1\":{\"249\":1}}],[\"要么连接被占满\",{\"1\":{\"249\":1}}],[\"要对sds\",{\"1\":{\"227\":1}}],[\"要并发下一个的话\",{\"1\":{\"202\":1}}],[\"要把kubelet立即启动\",{\"1\":{\"108\":1}}],[\"要有一颗敬畏版本的心\",{\"1\":{\"58\":1}}],[\"woaijmy\",{\"1\":{\"1059\":1,\"1094\":1}}],[\"wordbreak\",{\"1\":{\"1276\":1}}],[\"worddict\",{\"1\":{\"1276\":6}}],[\"word\",{\"1\":{\"941\":3,\"1380\":12}}],[\"world\",{\"1\":{\"134\":1,\"135\":1,\"941\":2,\"943\":4,\"944\":1,\"945\":1,\"946\":1,\"1166\":1,\"1167\":1}}],[\"work\",{\"1\":{\"799\":2,\"843\":1}}],[\"workingdir\",{\"1\":{\"133\":1}}],[\"worker进程正常\",{\"1\":{\"656\":1}}],[\"worker\",{\"0\":{\"649\":1,\"668\":1},\"1\":{\"114\":1,\"115\":1,\"117\":3,\"649\":1,\"659\":1,\"662\":10,\"664\":3,\"665\":2,\"666\":2,\"667\":2,\"668\":1,\"706\":1,\"713\":1,\"717\":1,\"722\":1,\"855\":2}}],[\"wsgi\",{\"0\":{\"1159\":1,\"1160\":1,\"1166\":1,\"1169\":1},\"1\":{\"1057\":3,\"1078\":1,\"1084\":1,\"1098\":1,\"1100\":1,\"1104\":1,\"1161\":1,\"1162\":1,\"1163\":1,\"1164\":6,\"1169\":3,\"1171\":2,\"1172\":1,\"1173\":1},\"2\":{\"1175\":1}}],[\"wsgienvironment\",{\"1\":{\"1057\":1,\"1098\":1,\"1100\":3,\"1104\":1}}],[\"www\",{\"1\":{\"924\":1}}],[\"wage\",{\"1\":{\"1180\":4}}],[\"way\",{\"1\":{\"1040\":1}}],[\"wait等待时间\",{\"0\":{\"955\":1}}],[\"wait\",{\"1\":{\"953\":4,\"955\":1,\"1035\":1,\"1040\":3}}],[\"warpper\",{\"1\":{\"932\":3,\"933\":2}}],[\"was\",{\"1\":{\"806\":1,\"856\":1}}],[\"wants\",{\"1\":{\"806\":1}}],[\"watermellon\",{\"1\":{\"776\":1}}],[\"watchlist\",{\"1\":{\"542\":1}}],[\"which\",{\"1\":{\"1057\":1}}],[\"while的判断条件\",{\"1\":{\"1395\":1}}],[\"while\",{\"1\":{\"717\":1,\"733\":1,\"916\":1,\"924\":1,\"925\":1,\"1024\":1,\"1103\":1,\"1226\":1,\"1257\":5,\"1258\":1,\"1259\":1,\"1297\":1,\"1341\":1,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":2,\"1380\":1,\"1390\":1,\"1391\":2,\"1393\":2,\"1395\":4,\"1399\":1,\"1400\":2,\"1403\":1}}],[\"who\",{\"1\":{\"806\":1}}],[\"when\",{\"1\":{\"1040\":1,\"1050\":1,\"1094\":1,\"1188\":2}}],[\"wheel\",{\"1\":{\"792\":3}}],[\"where后面的条件越多越好\",{\"1\":{\"507\":1,\"523\":1}}],[\"where\",{\"1\":{\"314\":1,\"332\":1,\"349\":4,\"351\":1,\"374\":1,\"404\":2,\"405\":3,\"415\":1,\"416\":1,\"420\":1,\"451\":1,\"455\":1,\"456\":3,\"460\":1,\"482\":2,\"499\":2,\"504\":1,\"1189\":1}}],[\"w\",{\"1\":{\"555\":1,\"721\":1,\"849\":1,\"941\":1,\"945\":1,\"1010\":1}}],[\"weight==value\",{\"1\":{\"1274\":2}}],[\"weight+1\",{\"1\":{\"1273\":1}}],[\"weight\",{\"1\":{\"1271\":5,\"1272\":6,\"1273\":10}}],[\"weird\",{\"1\":{\"799\":1}}],[\"weakref\",{\"1\":{\"1059\":2}}],[\"we\",{\"1\":{\"849\":1,\"1010\":1,\"1102\":1}}],[\"werkzeug\",{\"0\":{\"1073\":1},\"1\":{\"827\":1,\"855\":1,\"856\":1,\"1051\":1,\"1064\":4,\"1069\":2,\"1071\":1,\"1073\":1,\"1098\":3,\"1100\":3,\"1102\":1,\"1104\":3}}],[\"week\",{\"1\":{\"776\":3}}],[\"welcome\",{\"1\":{\"542\":1}}],[\"web里的话\",{\"1\":{\"1093\":1}}],[\"web使用http协议作应用层协议\",{\"1\":{\"962\":1}}],[\"web服务器\",{\"0\":{\"721\":1}}],[\"websocket\",{\"1\":{\"673\":1,\"678\":1,\"1161\":1,\"1162\":2,\"1170\":2,\"1172\":1}}],[\"webhook\",{\"1\":{\"662\":2}}],[\"web\",{\"1\":{\"165\":1,\"681\":1,\"692\":1,\"1161\":2,\"1164\":1,\"1173\":2}}],[\"wrong\",{\"1\":{\"844\":1,\"1050\":2,\"1102\":1}}],[\"wrapped\",{\"1\":{\"1057\":1}}],[\"wrappers\",{\"1\":{\"1064\":1}}],[\"wrapper=self\",{\"1\":{\"1050\":2,\"1103\":2,\"1111\":1,\"1112\":1}}],[\"wrapper\",{\"1\":{\"757\":2,\"832\":2,\"833\":2,\"839\":2,\"996\":2,\"997\":2,\"1003\":2}}],[\"wraps可以防止被装饰的函数丢失自己的自省信息\",{\"1\":{\"933\":1}}],[\"wraps函数\",{\"0\":{\"931\":1}}],[\"wraps\",{\"1\":{\"833\":2,\"933\":3,\"997\":2}}],[\"writer\",{\"1\":{\"1194\":2}}],[\"write页的写入后\",{\"1\":{\"320\":1}}],[\"write实现了innodb引擎数据页的可靠性\",{\"1\":{\"320\":1}}],[\"write\",{\"1\":{\"257\":1,\"261\":1,\"320\":4,\"382\":1,\"390\":4,\"468\":1,\"469\":9,\"705\":1,\"849\":1,\"1010\":1,\"1194\":1}}],[\"write机制\",{\"1\":{\"256\":1}}],[\"wrr\",{\"1\":{\"108\":1}}],[\"wle\",{\"1\":{\"197\":1}}],[\"witght\",{\"1\":{\"1275\":1}}],[\"with上下文\",{\"0\":{\"842\":1},\"1\":{\"1048\":1},\"2\":{\"851\":1}}],[\"with上下文管理\",{\"0\":{\"745\":1}}],[\"without\",{\"1\":{\"758\":2}}],[\"with语句结合上下文管理器提供了自动资源管理和代码块执行控制的强大能力\",{\"1\":{\"745\":1}}],[\"with\",{\"0\":{\"1006\":1},\"1\":{\"125\":2,\"708\":1,\"709\":1,\"712\":1,\"717\":1,\"720\":1,\"742\":1,\"746\":1,\"757\":2,\"758\":4,\"784\":1,\"799\":2,\"843\":1,\"845\":1,\"846\":1,\"847\":2,\"848\":1,\"849\":2,\"862\":3,\"924\":2,\"925\":2,\"1007\":1,\"1008\":1,\"1009\":3,\"1010\":2,\"1040\":1,\"1077\":2,\"1094\":1,\"1103\":1,\"1147\":2,\"1194\":5},\"2\":{\"1012\":1}}],[\"wi\",{\"1\":{\"1209\":2}}],[\"will\",{\"1\":{\"856\":1}}],[\"windows需额外处理fork和模块导入问题\",{\"1\":{\"725\":1}}],[\"windows注意事项\",{\"1\":{\"718\":1}}],[\"windows\",{\"1\":{\"706\":1}}],[\"windows只能spawn\",{\"1\":{\"705\":1}}],[\"wirite\",{\"1\":{\"320\":1,\"469\":1}}],[\"wide\",{\"1\":{\"125\":1}}],[\"wget\",{\"1\":{\"96\":1}}],[\"=0\",{\"1\":{\"1376\":1}}],[\"=t\",{\"1\":{\"1313\":2}}],[\"=2\",{\"1\":{\"1309\":2}}],[\"=4\",{\"1\":{\"1309\":2}}],[\"=min\",{\"1\":{\"1303\":1}}],[\"=max\",{\"1\":{\"1271\":1}}],[\"=>\",{\"1\":{\"681\":7,\"1209\":2}}],[\"==t\",{\"1\":{\"1313\":2}}],[\"==nums2\",{\"1\":{\"1307\":1}}],[\"==1\",{\"1\":{\"1300\":1,\"1376\":1}}],[\"==s\",{\"1\":{\"1299\":1}}],[\"==max\",{\"1\":{\"1288\":1}}],[\"===\",{\"1\":{\"681\":3}}],[\"==\",{\"1\":{\"533\":1,\"552\":2,\"680\":1,\"706\":1,\"718\":1,\"735\":1,\"758\":1,\"776\":2,\"790\":2,\"799\":1,\"806\":3,\"849\":1,\"856\":1,\"861\":1,\"862\":7,\"863\":1,\"887\":1,\"892\":1,\"929\":2,\"992\":1,\"1010\":1,\"1033\":1,\"1049\":1,\"1050\":1,\"1057\":1,\"1059\":1,\"1064\":3,\"1094\":2,\"1102\":1,\"1103\":1,\"1112\":1,\"1124\":3,\"1147\":1,\"1167\":1,\"1188\":1,\"1189\":1,\"1198\":4,\"1202\":8,\"1203\":2,\"1208\":3,\"1209\":2,\"1221\":4,\"1227\":2,\"1229\":3,\"1230\":3,\"1236\":2,\"1237\":2,\"1241\":1,\"1242\":1,\"1257\":7,\"1259\":1,\"1266\":2,\"1274\":5,\"1276\":1,\"1280\":3,\"1282\":2,\"1288\":1,\"1289\":4,\"1292\":2,\"1298\":3,\"1299\":7,\"1303\":5,\"1307\":4,\"1308\":2,\"1309\":2,\"1313\":2,\"1314\":1,\"1329\":1,\"1332\":2,\"1339\":1,\"1340\":1,\"1352\":4,\"1353\":4,\"1354\":8,\"1365\":1,\"1366\":2,\"1376\":15,\"1379\":1,\"1380\":2,\"1385\":1,\"1390\":2,\"1393\":3,\"1395\":4,\"1399\":1,\"1400\":2,\"1403\":1}}],[\"=1\",{\"1\":{\"503\":1}}],[\"=\",{\"1\":{\"108\":7,\"148\":2,\"227\":1,\"326\":1,\"349\":1,\"371\":1,\"415\":2,\"416\":2,\"455\":1,\"460\":2,\"487\":1,\"504\":5,\"507\":2,\"513\":5,\"520\":2,\"529\":10,\"532\":1,\"533\":4,\"534\":11,\"542\":1,\"545\":3,\"548\":1,\"549\":2,\"550\":2,\"552\":2,\"563\":4,\"565\":6,\"566\":4,\"567\":3,\"569\":3,\"570\":3,\"572\":1,\"579\":3,\"591\":1,\"597\":2,\"648\":1,\"652\":2,\"653\":2,\"654\":1,\"657\":1,\"660\":1,\"661\":1,\"662\":14,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"679\":7,\"680\":2,\"681\":11,\"706\":4,\"708\":1,\"709\":1,\"712\":2,\"713\":4,\"716\":4,\"717\":5,\"720\":2,\"722\":1,\"725\":2,\"731\":1,\"732\":6,\"733\":2,\"735\":5,\"742\":1,\"743\":1,\"746\":3,\"748\":1,\"749\":1,\"751\":1,\"755\":2,\"758\":4,\"776\":27,\"782\":1,\"783\":6,\"784\":4,\"799\":3,\"806\":3,\"822\":2,\"824\":8,\"825\":4,\"827\":1,\"828\":5,\"831\":2,\"832\":3,\"833\":2,\"834\":4,\"839\":8,\"843\":5,\"844\":7,\"849\":14,\"854\":5,\"855\":9,\"856\":14,\"861\":10,\"862\":25,\"863\":3,\"865\":3,\"866\":1,\"867\":3,\"872\":7,\"873\":7,\"879\":9,\"880\":4,\"881\":14,\"886\":8,\"887\":10,\"888\":6,\"894\":1,\"900\":4,\"902\":3,\"908\":2,\"912\":3,\"916\":5,\"919\":3,\"920\":3,\"921\":3,\"924\":5,\"925\":4,\"929\":2,\"932\":3,\"933\":3,\"936\":1,\"941\":4,\"942\":1,\"943\":4,\"944\":1,\"945\":2,\"946\":1,\"947\":2,\"983\":1,\"984\":3,\"985\":3,\"992\":3,\"996\":3,\"997\":2,\"998\":4,\"1003\":8,\"1010\":14,\"1015\":4,\"1017\":2,\"1023\":3,\"1024\":3,\"1030\":1,\"1033\":5,\"1045\":14,\"1049\":20,\"1050\":20,\"1057\":4,\"1059\":81,\"1061\":2,\"1063\":19,\"1064\":18,\"1073\":2,\"1074\":3,\"1077\":1,\"1079\":1,\"1081\":2,\"1084\":2,\"1085\":1,\"1088\":3,\"1094\":41,\"1098\":10,\"1100\":26,\"1101\":2,\"1102\":7,\"1103\":15,\"1104\":7,\"1110\":10,\"1111\":6,\"1112\":5,\"1124\":4,\"1147\":4,\"1150\":2,\"1152\":1,\"1166\":2,\"1180\":15,\"1187\":21,\"1188\":25,\"1189\":7,\"1193\":2,\"1194\":21,\"1198\":25,\"1202\":10,\"1203\":5,\"1207\":11,\"1208\":6,\"1209\":8,\"1220\":5,\"1221\":9,\"1226\":2,\"1227\":17,\"1229\":24,\"1230\":15,\"1235\":4,\"1236\":11,\"1237\":18,\"1241\":17,\"1242\":21,\"1257\":23,\"1258\":6,\"1259\":8,\"1265\":11,\"1266\":11,\"1272\":4,\"1273\":5,\"1274\":42,\"1275\":15,\"1276\":17,\"1280\":32,\"1281\":8,\"1282\":11,\"1286\":7,\"1287\":5,\"1288\":7,\"1289\":11,\"1292\":113,\"1297\":11,\"1298\":4,\"1299\":26,\"1300\":12,\"1303\":47,\"1307\":24,\"1308\":21,\"1309\":13,\"1313\":13,\"1314\":11,\"1321\":1,\"1324\":3,\"1325\":1,\"1326\":1,\"1329\":1,\"1330\":5,\"1331\":2,\"1332\":2,\"1333\":1,\"1335\":2,\"1336\":3,\"1337\":1,\"1338\":2,\"1339\":8,\"1340\":7,\"1341\":5,\"1348\":5,\"1352\":15,\"1353\":12,\"1354\":11,\"1364\":5,\"1365\":9,\"1366\":7,\"1376\":12,\"1377\":7,\"1378\":11,\"1379\":10,\"1380\":9,\"1384\":17,\"1385\":9,\"1390\":8,\"1391\":4,\"1393\":6,\"1394\":6,\"1395\":26,\"1399\":10,\"1400\":14,\"1403\":8}}],[\"|或\",{\"0\":{\"1323\":1}}],[\"|none\",{\"1\":{\"1187\":1}}],[\"|=\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"|操作\",{\"1\":{\"947\":1}}],[\"|grep\",{\"1\":{\"108\":1}}],[\"|\",{\"1\":{\"108\":2,\"374\":3,\"395\":1,\"469\":6,\"503\":54,\"513\":6,\"947\":1,\"1050\":5,\"1059\":26,\"1061\":1,\"1063\":3,\"1064\":3,\"1094\":7,\"1098\":1,\"1100\":5,\"1102\":1,\"1103\":2,\"1104\":1,\"1339\":1}}],[\"$secret\",{\"1\":{\"697\":1}}],[\"$home\",{\"1\":{\"108\":3}}],[\"$imagename\",{\"1\":{\"108\":1}}],[\"$\",{\"1\":{\"107\":1,\"108\":3,\"134\":1,\"531\":3,\"681\":4,\"1094\":1,\"1332\":1}}],[\"关注点在树枝\",{\"1\":{\"1220\":1,\"1348\":1}}],[\"关注点在节点\",{\"1\":{\"1220\":1,\"1348\":1}}],[\"关系\",{\"1\":{\"899\":1}}],[\"关联关系\",{\"1\":{\"762\":1}}],[\"关联查询太多join\",{\"1\":{\"506\":1}}],[\"关于二分查找算法的左闭右闭区间\",{\"1\":{\"1392\":1}}],[\"关于二分查找思路是非常简单的\",{\"1\":{\"1391\":1}}],[\"关于回溯算法之前的算法模版类似于\",{\"1\":{\"1348\":1}}],[\"关于这个题我们首先使用动态规划的思路处理\",{\"1\":{\"1299\":1}}],[\"关于这个生成器函数中间有使用到send方法\",{\"1\":{\"735\":1}}],[\"关于使用快慢指针还有一点比较重要\",{\"1\":{\"1263\":1}}],[\"关于time\",{\"0\":{\"955\":1}}],[\"关于jwt的特点上一篇博客已经有所介绍\",{\"1\":{\"870\":1}}],[\"关于异常处理是我们在开发中经常会遇到的\",{\"1\":{\"740\":1}}],[\"关于验证环四个工作原则的思考\",{\"0\":{\"22\":1}}],[\"关键字名称\",{\"1\":{\"1187\":1,\"1188\":2}}],[\"关键字相关的实现方式\",{\"1\":{\"1186\":1}}],[\"关键字驱动的思路\",{\"0\":{\"1186\":1}}],[\"关键字的类\",{\"1\":{\"770\":1}}],[\"关键改动如下\",{\"1\":{\"1071\":1}}],[\"关键注意点\",{\"1\":{\"630\":1,\"631\":1,\"632\":1}}],[\"关键原则\",{\"0\":{\"556\":1}}],[\"关键逻辑注释\",{\"1\":{\"531\":1}}],[\"关闭事件循环\",{\"1\":{\"1040\":1}}],[\"关闭文件或数据库连接等清理工作尤为重要\",{\"1\":{\"749\":1}}],[\"关闭连接时\",{\"1\":{\"954\":1}}],[\"关闭连接\",{\"1\":{\"579\":1}}],[\"关闭swap\",{\"1\":{\"108\":1}}],[\"关闭selinux\",{\"1\":{\"108\":1}}],[\"关闭机器的防火墙\",{\"1\":{\"106\":1}}],[\"规定一页至少存储两条记录\",{\"1\":{\"327\":1}}],[\"规则\",{\"1\":{\"101\":1}}],[\"规约中或者镜像中\",{\"1\":{\"76\":1}}],[\"基类\",{\"0\":{\"862\":1,\"863\":1},\"1\":{\"888\":1},\"2\":{\"869\":1}}],[\"基类展示\",{\"0\":{\"859\":1}}],[\"基本概念\",{\"0\":{\"1321\":1}}],[\"基本代码都不用改的直接用\",{\"1\":{\"1309\":1}}],[\"基本上就是统一的思路\",{\"1\":{\"1263\":1}}],[\"基本工资\",{\"1\":{\"1180\":1}}],[\"基本实现了以下这些功能\",{\"1\":{\"1060\":1}}],[\"基本使用\",{\"0\":{\"864\":1}}],[\"基本用法示例\",{\"0\":{\"650\":1}}],[\"基本操作\",{\"0\":{\"279\":1,\"1100\":1}}],[\"基本思路\",{\"0\":{\"274\":1}}],[\"基于事件循环和协程\",{\"1\":{\"1161\":1}}],[\"基于线程或进程处理请求\",{\"1\":{\"1161\":1}}],[\"基于标准库的实现减少了依赖开销\",{\"1\":{\"1089\":1}}],[\"基于这种预创建技术\",{\"1\":{\"1036\":1}}],[\"基于类\",{\"1\":{\"1030\":1}}],[\"基于类的装饰器\",{\"0\":{\"834\":1,\"998\":1}}],[\"基于方法\",{\"1\":{\"1030\":1}}],[\"基于此提出的设计模式\",{\"1\":{\"767\":1}}],[\"基于文件描述符的管道\",{\"1\":{\"706\":1}}],[\"基于cron表达式的定义\",{\"1\":{\"613\":1}}],[\"基于copy\",{\"1\":{\"261\":1}}],[\"基于普通字段建立的索引\",{\"1\":{\"447\":1}}],[\"基于该表相关cache立即全部失效\",{\"1\":{\"431\":1}}],[\"基于索引来加锁实现\",{\"1\":{\"308\":1}}],[\"基于\",{\"0\":{\"1073\":1,\"1074\":1},\"1\":{\"270\":1,\"664\":1,\"665\":1,\"666\":1,\"1146\":1}}],[\"基于原aof文件\",{\"1\":{\"261\":1}}],[\"基于所请求的\",{\"1\":{\"190\":1}}],[\"基于团队隔离\",{\"1\":{\"118\":1}}],[\"基于产品线的名称空间\",{\"1\":{\"118\":1}}],[\"基于环境隔离\",{\"1\":{\"118\":1}}],[\"基于以\",{\"1\":{\"100\":1}}],[\"基础类型\",{\"1\":{\"1303\":1}}],[\"基础处理者\",{\"1\":{\"805\":1}}],[\"基础的异常处理装饰器可以捕获并处理被装饰函数可能抛出的异常\",{\"1\":{\"757\":1}}],[\"基础捕获\",{\"0\":{\"741\":1}}],[\"基础示例\",{\"0\":{\"563\":1}}],[\"基础知识\",{\"0\":{\"1419\":1},\"2\":{\"336\":1}}],[\"基础步骤\",{\"0\":{\"170\":1}}],[\"基础命令\",{\"0\":{\"123\":1},\"1\":{\"124\":1}}],[\"基础概念\",{\"0\":{\"111\":1,\"1225\":1,\"1345\":1}}],[\"基础安装配置\",{\"0\":{\"107\":1}}],[\"基础设施性能\",{\"1\":{\"631\":1}}],[\"基础设施即代码\",{\"1\":{\"57\":1}}],[\"基础设施的自动化\",{\"0\":{\"44\":1}}],[\"精确控制上下文状态\",{\"1\":{\"1089\":1}}],[\"精确匹配\",{\"1\":{\"100\":1}}],[\"精炼\",{\"1\":{\"20\":1}}],[\"匹配次数\",{\"1\":{\"513\":2}}],[\"匹配过程如下图\",{\"1\":{\"513\":1}}],[\"匹配一组\",{\"1\":{\"116\":1}}],[\"匹配\",{\"1\":{\"100\":1}}],[\"匹配区分大小写\",{\"1\":{\"100\":1}}],[\"匹配方法取决于\",{\"1\":{\"100\":1}}],[\"匹配的对\",{\"1\":{\"97\":1}}],[\"指数是\",{\"1\":{\"1403\":1}}],[\"指数是指他\",{\"1\":{\"1403\":1}}],[\"指数的定义\",{\"1\":{\"1403\":1}}],[\"指数\",{\"0\":{\"1403\":1},\"1\":{\"1403\":1}}],[\"指纹用于校验数据的完整性\",{\"1\":{\"972\":1}}],[\"指纹\",{\"1\":{\"972\":1}}],[\"指的是论文数量\",{\"1\":{\"1403\":1}}],[\"指的是背包容量为j\",{\"1\":{\"1271\":1}}],[\"指的是只要浏览器判断缓存没有过期\",{\"1\":{\"969\":1}}],[\"指的是在进行io操作时\",{\"1\":{\"898\":1}}],[\"指的是与外部设备\",{\"1\":{\"898\":1}}],[\"指的是一个事务一旦提交\",{\"1\":{\"425\":1}}],[\"指的是一个事务的执行不能被其他事务干扰\",{\"1\":{\"425\":1}}],[\"指向之前生成的\",{\"1\":{\"476\":1}}],[\"指向undo\",{\"1\":{\"369\":1}}],[\"指向行溢出页\",{\"1\":{\"327\":1}}],[\"指向同一命名空间中的另一个\",{\"1\":{\"99\":1}}],[\"指示应该如何填充终止消息\",{\"1\":{\"133\":1}}],[\"指定每次拿最大的\",{\"1\":{\"1358\":1}}],[\"指定是取最大的\",{\"1\":{\"1273\":1}}],[\"指定flask的\",{\"0\":{\"827\":1}}],[\"指定时间点运行\",{\"1\":{\"613\":1}}],[\"指定aof操作中文件同步策略\",{\"1\":{\"260\":1}}],[\"指定aof文件名称\",{\"1\":{\"260\":1}}],[\"指定了\",{\"1\":{\"202\":1}}],[\"指定了保留几个版本\",{\"1\":{\"165\":1}}],[\"指定的时长\",{\"1\":{\"198\":1}}],[\"指定的\",{\"1\":{\"186\":1}}],[\"指定的这个秒以后才执行探测\",{\"1\":{\"147\":4}}],[\"指定用于开发\",{\"1\":{\"116\":1}}],[\"指定k8s安装版本\",{\"1\":{\"108\":1}}],[\"指标\",{\"1\":{\"43\":1}}],[\"资源定义\",{\"0\":{\"1149\":1}}],[\"资源组织\",{\"1\":{\"1146\":1}}],[\"资源导向\",{\"1\":{\"1144\":1}}],[\"资源控制\",{\"1\":{\"712\":1}}],[\"资源利用率高\",{\"1\":{\"665\":1}}],[\"资源限制\",{\"0\":{\"136\":1},\"1\":{\"669\":1}}],[\"资源紧缺等\",{\"1\":{\"135\":1}}],[\"资源名称\",{\"1\":{\"125\":1}}],[\"资源类型\",{\"1\":{\"125\":2}}],[\"资源和名称或按资源和标签删除资源\",{\"1\":{\"124\":1}}],[\"资源文档\",{\"1\":{\"124\":1}}],[\"资源\",{\"1\":{\"99\":1,\"1146\":1}}],[\"资源后端\",{\"0\":{\"99\":1}}],[\"资源中指定\",{\"1\":{\"98\":1}}],[\"资源上定义的规则控制\",{\"1\":{\"95\":1}}],[\"控制权可以交给其他协程继续执行\",{\"1\":{\"923\":1}}],[\"控制这个初始化的过程\",{\"1\":{\"903\":1}}],[\"控制对象的创建\",{\"1\":{\"900\":1}}],[\"控制对一个对象的访问\",{\"1\":{\"769\":1}}],[\"控制并发访问\",{\"1\":{\"704\":1}}],[\"控制\",{\"1\":{\"482\":1}}],[\"控制块中存储着对应缓存页的所属的\",{\"1\":{\"318\":1}}],[\"控制器将删除\",{\"1\":{\"198\":1}}],[\"控制器将在探测到这样的条件时立即回滚\",{\"1\":{\"160\":1}}],[\"控制器将在默认\",{\"1\":{\"160\":1}}],[\"控制器清理\",{\"1\":{\"198\":1}}],[\"控制器确保所有\",{\"1\":{\"186\":1}}],[\"控制器\",{\"1\":{\"113\":1,\"176\":1,\"198\":1}}],[\"控制器决定\",{\"1\":{\"98\":1}}],[\"控制器的配置选项\",{\"1\":{\"98\":1}}],[\"控制平面会从某个范围内分配一个端口号\",{\"1\":{\"93\":1}}],[\"文本\",{\"1\":{\"966\":3}}],[\"文本信息\",{\"1\":{\"962\":1}}],[\"文档和tag的集合\",{\"1\":{\"1187\":1}}],[\"文档支持\",{\"1\":{\"1156\":1}}],[\"文档的工作量\",{\"1\":{\"1154\":1}}],[\"文档注释\",{\"1\":{\"1151\":1}}],[\"文档路径\",{\"1\":{\"1147\":1}}],[\"文档\",{\"1\":{\"1146\":1,\"1170\":1,\"1188\":1}}],[\"文档详尽\",{\"1\":{\"607\":1}}],[\"文档字符串\",{\"1\":{\"549\":1}}],[\"文档中所述的服务和端口名称的组合\",{\"1\":{\"97\":1}}],[\"文件未找到\",{\"1\":{\"742\":1,\"758\":2}}],[\"文件传输\",{\"1\":{\"675\":1}}],[\"文件读写\",{\"1\":{\"588\":1}}],[\"文件名称难以区分功能作用\",{\"1\":{\"534\":1}}],[\"文件作用是模块的初始化作用\",{\"1\":{\"534\":1}}],[\"文件头信息\",{\"1\":{\"531\":1}}],[\"文件头设置\",{\"1\":{\"531\":1}}],[\"文件中划出\",{\"1\":{\"469\":1}}],[\"文件中的一行记录\",{\"1\":{\"200\":1}}],[\"文件内容是以顺序循环的方式写入文件\",{\"1\":{\"390\":1}}],[\"文件排序\",{\"1\":{\"351\":1}}],[\"文件也是在\",{\"1\":{\"334\":1}}],[\"文件是\",{\"1\":{\"334\":1}}],[\"文件来存放数据\",{\"1\":{\"334\":1}}],[\"文件等\",{\"1\":{\"334\":1}}],[\"文件\",{\"1\":{\"334\":16,\"648\":1}}],[\"文件事件分派器\",{\"1\":{\"268\":1}}],[\"文件的内容和增量的\",{\"1\":{\"264\":1}}],[\"文件的大小\",{\"1\":{\"260\":1}}],[\"文件体积较大\",{\"1\":{\"263\":1}}],[\"文件同步等特性才会生效\",{\"1\":{\"260\":1}}],[\"文化变革的挑战与实践路径\",{\"0\":{\"33\":1}}],[\"路径4撤销\",{\"1\":{\"1345\":1}}],[\"路径2撤销了\",{\"1\":{\"1345\":1}}],[\"路径和\",{\"1\":{\"1303\":1}}],[\"路径压缩\",{\"0\":{\"1226\":1},\"1\":{\"1225\":1,\"1227\":1}}],[\"路径标识资源\",{\"1\":{\"1144\":1}}],[\"路径元素指的是由\",{\"1\":{\"100\":1}}],[\"路径前缀匹配\",{\"1\":{\"100\":1}}],[\"路径\",{\"1\":{\"100\":1,\"1151\":1,\"1348\":1}}],[\"路径类型\",{\"0\":{\"100\":1}}],[\"路径列表\",{\"1\":{\"97\":1}}],[\"路由概念也是类似的\",{\"1\":{\"1093\":1}}],[\"路由指的是根据上一接口的数据包中的ip地址\",{\"1\":{\"1093\":1}}],[\"路由分配\",{\"0\":{\"1092\":1}}],[\"路由添加\",{\"1\":{\"1057\":1}}],[\"路由模块\",{\"1\":{\"542\":1}}],[\"路由通信\",{\"1\":{\"116\":1}}],[\"路由\",{\"0\":{\"1093\":1},\"1\":{\"95\":1}}],[\"安装flask\",{\"0\":{\"678\":1}}],[\"安装依赖\",{\"0\":{\"647\":1}}],[\"安装与配置\",{\"0\":{\"646\":1}}],[\"安装与快速入门\",{\"0\":{\"562\":1,\"1147\":1}}],[\"安装复杂度\",{\"1\":{\"607\":1}}],[\"安装\",{\"1\":{\"562\":1}}],[\"安装成功后\",{\"1\":{\"118\":1}}],[\"安装k8s核心包\",{\"1\":{\"108\":1}}],[\"安装docker容器环境\",{\"1\":{\"108\":1}}],[\"安装ipvsadm相关软件\",{\"1\":{\"108\":1}}],[\"安装ingress\",{\"0\":{\"96\":1}}],[\"安装脚本\",{\"0\":{\"108\":1}}],[\"安装配置\",{\"0\":{\"105\":1,\"106\":1}}],[\"安全事件\",{\"1\":{\"631\":1}}],[\"安全\",{\"1\":{\"430\":1,\"686\":1}}],[\"安全管理\",{\"1\":{\"332\":1}}],[\"安全与合规的融入\",{\"0\":{\"45\":1}}],[\"安全地将价值交付给用户\",{\"1\":{\"32\":1}}],[\"`dp\",{\"1\":{\"1303\":2}}],[\"``run\",{\"1\":{\"1188\":1}}],[\"`visitor\",{\"1\":{\"1183\":2,\"1194\":1}}],[\"`wsgi\",{\"1\":{\"1057\":1}}],[\"`websocket\",{\"1\":{\"681\":3}}],[\"`none`\",{\"1\":{\"856\":2}}],[\"`requestcontext`\",{\"1\":{\"844\":1}}],[\"`\",{\"1\":{\"681\":3,\"1303\":1}}],[\"`$\",{\"1\":{\"681\":1}}],[\"`schedule`\",{\"1\":{\"200\":1}}],[\"`port`\",{\"1\":{\"93\":1}}],[\"`targetport`\",{\"1\":{\"93\":1}}],[\"被引用了\",{\"1\":{\"1403\":1}}],[\"被\",{\"1\":{\"1354\":1}}],[\"被连通\",{\"1\":{\"1225\":1}}],[\"被细分为入度\",{\"1\":{\"1218\":1}}],[\"被访问者提供接口改变被访问者状态和信息\",{\"1\":{\"1194\":1}}],[\"被访问者\",{\"0\":{\"1183\":1}}],[\"被动关闭连接\",{\"1\":{\"956\":1}}],[\"被后面相同四元组的连接错误的接收\",{\"1\":{\"956\":1}}],[\"被写到binlog\",{\"1\":{\"494\":1}}],[\"被称作重做日志\",{\"1\":{\"382\":1}}],[\"被称为多版本并发控制\",{\"1\":{\"368\":1}}],[\"被设置为\",{\"1\":{\"201\":1}}],[\"被设置为一个较大的值\",{\"1\":{\"201\":1}}],[\"被设置为与\",{\"1\":{\"93\":1}}],[\"被杀死\",{\"1\":{\"159\":1}}],[\"被视为成功的最小连续成功数\",{\"1\":{\"147\":1}}],[\"被更新时\",{\"1\":{\"74\":1}}],[\"字符而不改变剩余字符相对位置形成的新字符串\",{\"1\":{\"1313\":1}}],[\"字符串编辑距离\",{\"0\":{\"1312\":1}}],[\"字符串中\",{\"1\":{\"1300\":1}}],[\"字符串中的字符必须符合某种编码\",{\"1\":{\"227\":1}}],[\"字符串中的所有内容\",{\"1\":{\"227\":1}}],[\"字符串s在\",{\"1\":{\"1299\":1}}],[\"字符串s就是背包\",{\"1\":{\"1276\":1}}],[\"字符串长度为j的话\",{\"1\":{\"1276\":1}}],[\"字符串数组\",{\"1\":{\"1203\":1}}],[\"字符串都提供了count方法\",{\"1\":{\"941\":1}}],[\"字符串所用的函数只会识别出其中的\",{\"1\":{\"227\":1}}],[\"字符串来保存\",{\"1\":{\"227\":1}}],[\"字符串只能保存文本数据\",{\"1\":{\"227\":1}}],[\"字符串里面不能包含空字符\",{\"1\":{\"227\":1}}],[\"字符串不记录自身的长度\",{\"1\":{\"227\":1}}],[\"字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出\",{\"1\":{\"227\":1}}],[\"字符串不同\",{\"1\":{\"227\":1}}],[\"字符串的一个子序列是原始字符串删除一些\",{\"1\":{\"1313\":1}}],[\"字符串的这种缺陷\",{\"1\":{\"227\":1}}],[\"字符串的长度\",{\"1\":{\"227\":1}}],[\"字符串的区别\",{\"0\":{\"227\":1}}],[\"字符串并不记录自身的长度信息\",{\"1\":{\"227\":1}}],[\"字符串\",{\"1\":{\"225\":1,\"941\":1,\"1014\":1},\"2\":{\"1316\":1}}],[\"字母和数字都属于字母数字字符\",{\"1\":{\"1297\":1}}],[\"字典问题\",{\"0\":{\"1383\":1}}],[\"字典等\",{\"1\":{\"986\":1}}],[\"字典的关系\",{\"1\":{\"856\":1}}],[\"字典\",{\"1\":{\"854\":1,\"941\":1}}],[\"字节的未\",{\"1\":{\"227\":1}}],[\"字节\",{\"1\":{\"227\":2,\"959\":2}}],[\"字节数组\",{\"1\":{\"226\":1}}],[\"字段填入为serven\",{\"1\":{\"951\":1}}],[\"字段填入\",{\"1\":{\"951\":1}}],[\"字段中\",{\"1\":{\"951\":2}}],[\"字段越少\",{\"1\":{\"514\":1}}],[\"字段名2\",{\"1\":{\"450\":3}}],[\"字段名1\",{\"1\":{\"450\":3}}],[\"字段名\",{\"1\":{\"447\":3,\"448\":3,\"449\":2}}],[\"字段类型是\",{\"1\":{\"416\":1}}],[\"字段值小的场景里面\",{\"1\":{\"217\":1}}],[\"字段可激活该特性\",{\"1\":{\"198\":1}}],[\"字段添加任意的信息\",{\"1\":{\"119\":1}}],[\"字段\",{\"1\":{\"118\":1,\"143\":1,\"487\":2}}],[\"字段相同的值\",{\"1\":{\"93\":1}}],[\"字段的内容\",{\"1\":{\"93\":1}}],[\"字环的运行周期\",{\"1\":{\"18\":1}}],[\"或竖直方向上相邻的陆地连接形成\",{\"1\":{\"1352\":1}}],[\"或以下\",{\"1\":{\"1303\":1}}],[\"或出售股票\",{\"1\":{\"1292\":1}}],[\"或不删除\",{\"1\":{\"1207\":1,\"1286\":1}}],[\"或实时推送\",{\"1\":{\"1172\":1}}],[\"或长连接等实时协议\",{\"1\":{\"1162\":1}}],[\"或自定义默认值\",{\"1\":{\"1081\":1}}],[\"或自定义序列化器\",{\"1\":{\"656\":1}}],[\"或请求处理时自动创建\",{\"1\":{\"1076\":1}}],[\"或最大堆\",{\"1\":{\"921\":1}}],[\"或最终未被捕获导致程序终止\",{\"1\":{\"754\":1}}],[\"或将其传递给链上的下个处理者\",{\"1\":{\"804\":1}}],[\"或抽象基类\",{\"1\":{\"776\":1}}],[\"或抽象类\",{\"1\":{\"762\":1}}],[\"或任何可迭代对象\",{\"1\":{\"731\":1}}],[\"或使用二进制协议\",{\"1\":{\"716\":1}}],[\"或createfilemapping\",{\"1\":{\"706\":1}}],[\"或mmap\",{\"1\":{\"706\":1}}],[\"或队列\",{\"1\":{\"706\":1}}],[\"或信号量\",{\"1\":{\"704\":1}}],[\"或在配置文件中\",{\"1\":{\"664\":1,\"665\":1,\"666\":1,\"667\":1}}],[\"或知识库中提到的猴子补丁原理\",{\"1\":{\"600\":1}}],[\"或说没有被归还给连接池\",{\"1\":{\"582\":1}}],[\"或称为\",{\"1\":{\"662\":1}}],[\"或称\",{\"1\":{\"456\":1}}],[\"或称icp优化\",{\"1\":{\"420\":1}}],[\"或多个\",{\"1\":{\"334\":1}}],[\"或一部分\",{\"1\":{\"186\":1}}],[\"或所需\",{\"1\":{\"159\":1}}],[\"或\",{\"1\":{\"97\":1,\"100\":1,\"120\":1,\"198\":1,\"553\":1,\"555\":1,\"573\":1,\"599\":1,\"657\":1,\"668\":1,\"670\":1,\"678\":1,\"705\":1,\"756\":1,\"1155\":1,\"1202\":1,\"1203\":1,\"1265\":1,\"1274\":1,\"1303\":2,\"1352\":1,\"1353\":1,\"1354\":1,\"1376\":1}}],[\"或者得不到正确结果\",{\"1\":{\"1394\":1}}],[\"或者已经被访问过了\",{\"1\":{\"1354\":1}}],[\"或者2个黑球\",{\"1\":{\"1328\":1}}],[\"或者超时时间到期之后才会继续运行\",{\"1\":{\"1035\":1}}],[\"或者任何一方的网络出现中断\",{\"1\":{\"978\":1}}],[\"或者系统中存在大量通过继承产生的子类\",{\"1\":{\"770\":1}}],[\"或者说url重新定向到另一个端并且可以在这个过程中对这个包进行处理\",{\"1\":{\"1093\":1}}],[\"或者说接口或基类的方法是一种契约\",{\"1\":{\"762\":1}}],[\"或者说等值查询\",{\"1\":{\"461\":1}}],[\"或者其他处理方式\",{\"1\":{\"758\":1}}],[\"或者使用支持并行计算的库\",{\"1\":{\"897\":1}}],[\"或者使用多个except块分别处理不同异常\",{\"1\":{\"743\":1}}],[\"或者使用ttl进行清理\",{\"1\":{\"198\":1}}],[\"或者下一步的\",{\"1\":{\"735\":1}}],[\"或者更改\",{\"1\":{\"698\":1}}],[\"或者无效的告警渠道应该被移除\",{\"1\":{\"640\":1}}],[\"或者等待一个长时间运行的任务返回结果\",{\"1\":{\"583\":1}}],[\"或者当我们显式地调用销毁连接池的代码时被销毁\",{\"1\":{\"578\":1}}],[\"或者子查询\",{\"1\":{\"349\":1}}],[\"或者是能不能到达某个目标这个有可能是使用贪心\",{\"1\":{\"1359\":1}}],[\"或者是删除未完成\",{\"1\":{\"284\":1}}],[\"或者是通过\",{\"1\":{\"97\":1}}],[\"或者不设置该值\",{\"1\":{\"201\":1}}],[\"或者由管理员预先提供\",{\"1\":{\"190\":1}}],[\"或者直接修改定义也行\",{\"1\":{\"165\":1}}],[\"或者\",{\"1\":{\"93\":1,\"269\":1,\"416\":1}}],[\"或bdd\",{\"1\":{\"52\":1}}],[\"时机会延后\",{\"1\":{\"1189\":1}}],[\"时薪\",{\"1\":{\"1180\":1}}],[\"时函数会暂停并保存当前所有的运行信息\",{\"1\":{\"1021\":1}}],[\"时会出现一系列的问题\",{\"1\":{\"878\":1}}],[\"时带有外键的软删除时怎么处理的\",{\"1\":{\"878\":1}}],[\"时区配置\",{\"1\":{\"662\":1}}],[\"时用到的一致性读视图\",{\"1\":{\"371\":1,\"477\":1}}],[\"时用ziplist\",{\"1\":{\"220\":1}}],[\"时长\",{\"1\":{\"334\":1}}],[\"时回丢失大量数据\",{\"1\":{\"264\":1}}],[\"时间内完成吗\",{\"1\":{\"1331\":1,\"1335\":1}}],[\"时间复杂度为o\",{\"1\":{\"909\":1}}],[\"时间复杂度也是o\",{\"1\":{\"234\":1}}],[\"时间序列等\",{\"1\":{\"797\":1}}],[\"时间轮其实就是一种环型的数据结构\",{\"1\":{\"610\":1}}],[\"时间轮\",{\"1\":{\"610\":1}}],[\"时间轮可以在常数时间内完成新任务的插入以及旧任务的触发\",{\"1\":{\"610\":1}}],[\"时间轮是一种高效的任务调度机制\",{\"1\":{\"610\":1}}],[\"时间轮算法\",{\"0\":{\"610\":1}}],[\"时间戳\",{\"1\":{\"504\":1}}],[\"时间\",{\"1\":{\"283\":1}}],[\"时间上\",{\"1\":{\"264\":2}}],[\"时间负载度\",{\"1\":{\"233\":1}}],[\"时间换空间\",{\"1\":{\"218\":2}}],[\"时使用\",{\"1\":{\"190\":1}}],[\"时使用的默认值\",{\"1\":{\"93\":1}}],[\"时\",{\"1\":{\"115\":1,\"159\":2,\"177\":1,\"190\":1,\"198\":1,\"203\":1,\"249\":1,\"416\":1,\"477\":1,\"733\":1,\"954\":1,\"1208\":2,\"1271\":1}}],[\"时时改善\",{\"1\":{\"30\":2}}],[\"暴露清晰的接口\",{\"1\":{\"546\":1}}],[\"暴露\",{\"1\":{\"125\":1}}],[\"暴露服务\",{\"1\":{\"93\":2}}],[\"暴露了团队对自动化测试和代码质量的不自信\",{\"1\":{\"55\":1}}],[\"集合\",{\"1\":{\"1236\":2,\"1274\":1}}],[\"集成能力\",{\"1\":{\"607\":1}}],[\"集成测试或端到端测试未能通过\",{\"1\":{\"630\":1}}],[\"集成测试验证模块间协作\",{\"1\":{\"56\":1}}],[\"集成测试\",{\"1\":{\"40\":1,\"552\":1}}],[\"集群管理等\",{\"1\":{\"332\":1}}],[\"集群管理的命令\",{\"1\":{\"124\":1}}],[\"集群内访问service的端口\",{\"1\":{\"125\":1}}],[\"集群上的最基本的单元\",{\"1\":{\"115\":1}}],[\"集群中需要部署\",{\"1\":{\"169\":1}}],[\"集群中的每个节点都会运行容器\",{\"1\":{\"130\":1}}],[\"集群中的计算机\",{\"1\":{\"114\":1}}],[\"集群中发布\",{\"1\":{\"117\":1}}],[\"集群中对应用程序可用的资源\",{\"1\":{\"112\":1}}],[\"集群中运行了哪些容器化应用程序\",{\"1\":{\"112\":1}}],[\"集群外部的\",{\"1\":{\"93\":1}}],[\"来表示\",{\"1\":{\"1303\":1}}],[\"来看源码\",{\"1\":{\"1050\":1}}],[\"来访问\",{\"1\":{\"967\":1}}],[\"来模拟\",{\"1\":{\"908\":1}}],[\"来进行软删除\",{\"1\":{\"879\":1}}],[\"来直接操作字典中保存的对象\",{\"1\":{\"856\":1}}],[\"来操作资源的连接和关闭\",{\"1\":{\"846\":1,\"1008\":1}}],[\"来传递任务\",{\"1\":{\"647\":1}}],[\"来组织待执行的任务列表\",{\"1\":{\"609\":1}}],[\"来协调任务分发\",{\"1\":{\"605\":1}}],[\"来管理的\",{\"1\":{\"578\":1}}],[\"来实现管理\",{\"1\":{\"475\":1}}],[\"来保存数据的历史版本\",{\"1\":{\"475\":1}}],[\"来连接\",{\"1\":{\"334\":1}}],[\"来支持高并发\",{\"1\":{\"308\":1}}],[\"来决定是否分库分表\",{\"1\":{\"299\":1}}],[\"来配合\",{\"1\":{\"268\":1,\"269\":1}}],[\"来说要慢\",{\"1\":{\"264\":1}}],[\"来重写或压缩\",{\"1\":{\"261\":1}}],[\"来开启aof功能\",{\"1\":{\"260\":1}}],[\"来换取高效的内存空间利用率\",{\"1\":{\"217\":1}}],[\"来负责\",{\"1\":{\"190\":1}}],[\"来提供\",{\"1\":{\"190\":1}}],[\"来取代replicationcontroller\",{\"1\":{\"177\":1}}],[\"来控制滚动更新\",{\"1\":{\"159\":1}}],[\"来创建\",{\"1\":{\"92\":1}}],[\"来尽可能地减少或消除这些不必要的等待时间\",{\"1\":{\"24\":1}}],[\"有相同标签的\",{\"1\":{\"1384\":1}}],[\"有些问题中可能会有一些答案比如\",{\"1\":{\"1359\":1}}],[\"有些房间由恶魔守卫\",{\"1\":{\"1303\":1}}],[\"有没有发现回溯的地方不一致\",{\"1\":{\"1348\":1}}],[\"有四种方式可以凑成总金额\",{\"1\":{\"1275\":1}}],[\"有一堆钞票\",{\"1\":{\"1358\":1}}],[\"有一堆石头\",{\"1\":{\"1274\":1}}],[\"有一个具有\",{\"1\":{\"1229\":1}}],[\"有一个失败\",{\"1\":{\"142\":1}}],[\"有n件物品和一个最多能背重量为w的背包\",{\"1\":{\"1275\":1}}],[\"有n件物品和一个最多能背重量为w\",{\"1\":{\"1270\":1}}],[\"有环图无环图的判断\",{\"1\":{\"1240\":1}}],[\"有两个选择\",{\"1\":{\"1273\":1}}],[\"有两个最长递增子序列\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"有两条路径\",{\"1\":{\"1221\":1}}],[\"有向无环图\",{\"1\":{\"1221\":2,\"1240\":1}}],[\"有向加权图怎么表示\",{\"1\":{\"1219\":1}}],[\"有向加权图\",{\"1\":{\"1219\":1}}],[\"有向图\",{\"0\":{\"1237\":1},\"1\":{\"1219\":1}}],[\"有三个\",{\"1\":{\"1354\":1}}],[\"有三个合法值\",{\"1\":{\"260\":1}}],[\"有三条边指向它\",{\"1\":{\"1218\":1}}],[\"有助于形成更长的递增子序列\",{\"1\":{\"1207\":1}}],[\"有助于提升组件的复用性\",{\"1\":{\"767\":1}}],[\"有原生的from\",{\"1\":{\"1051\":1}}],[\"有超时控制的运行\",{\"1\":{\"1040\":1}}],[\"有返回值\",{\"1\":{\"848\":1,\"1009\":1}}],[\"有什么用\",{\"0\":{\"825\":1}}],[\"有什么区别\",{\"0\":{\"764\":1}}],[\"有的只是一些变形题目\",{\"1\":{\"1274\":1}}],[\"有的只是一些变形问题\",{\"1\":{\"1270\":1}}],[\"有的场景下对\",{\"1\":{\"770\":1}}],[\"有的定时任务是不是需要人工干预\",{\"0\":{\"616\":1}}],[\"有依赖关系的类之间\",{\"1\":{\"762\":1}}],[\"有时\",{\"1\":{\"743\":1}}],[\"有时不需要或不想要负载均衡\",{\"1\":{\"92\":1}}],[\"有效的组合是\",{\"1\":{\"1379\":1}}],[\"有效的监控系统对于及时发现问题\",{\"1\":{\"26\":1}}],[\"有效三角形的个数\",{\"0\":{\"1379\":1}}],[\"有效路径\",{\"1\":{\"1229\":2}}],[\"有效使用\",{\"1\":{\"698\":1}}],[\"有利于防止令牌猜测攻击和重放攻击\",{\"1\":{\"696\":1}}],[\"有序\",{\"1\":{\"675\":1}}],[\"有序的\",{\"1\":{\"191\":2}}],[\"有以下几个关键点需要特别关注\",{\"1\":{\"624\":1}}],[\"有限状态机\",{\"1\":{\"561\":1}}],[\"有就必须是两个\",{\"1\":{\"338\":1}}],[\"有哈希冲突的情况下\",{\"1\":{\"315\":1,\"462\":1}}],[\"有\",{\"1\":{\"311\":2,\"1274\":1,\"1314\":2,\"1377\":1,\"1403\":4}}],[\"有可能走了一圈又回到该节点\",{\"1\":{\"1220\":1}}],[\"有可能导致请求因缓存缺失而访问数据库\",{\"1\":{\"287\":1}}],[\"有可能一直脏下去\",{\"1\":{\"283\":1}}],[\"有状态副本集\",{\"1\":{\"189\":1}}],[\"有任何修改\",{\"1\":{\"120\":1}}],[\"无重复元素\",{\"1\":{\"1399\":1}}],[\"无重复的字节流传输\",{\"1\":{\"675\":1}}],[\"无环\",{\"1\":{\"1230\":1}}],[\"无向\",{\"1\":{\"1230\":1}}],[\"无向加权图\",{\"1\":{\"1219\":1}}],[\"无向图就是双向图\",{\"1\":{\"1219\":1}}],[\"无向图\",{\"1\":{\"1219\":1,\"1236\":1}}],[\"无\",{\"1\":{\"1156\":1}}],[\"无状态通信\",{\"1\":{\"1144\":1}}],[\"无论请求成功与否\",{\"1\":{\"1119\":1,\"1132\":1}}],[\"无论成功与否\",{\"1\":{\"1110\":2,\"1120\":1,\"1133\":1}}],[\"无论是头部还是尾部\",{\"1\":{\"911\":1}}],[\"无论是否发生异常\",{\"1\":{\"746\":1}}],[\"无论是前端\",{\"1\":{\"540\":1}}],[\"无论是\",{\"1\":{\"261\":1}}],[\"无论是代码提交时的代码质量流水线\",{\"1\":{\"58\":1}}],[\"无论是编译\",{\"1\":{\"52\":1}}],[\"无须对原工厂进行任何修改\",{\"1\":{\"766\":1}}],[\"无须知道产品的具体创建过程\",{\"1\":{\"766\":1}}],[\"无异常处理耗时\",{\"1\":{\"758\":2}}],[\"无gil限制\",{\"1\":{\"704\":1}}],[\"无并发能力\",{\"1\":{\"667\":1}}],[\"无限循环\",{\"0\":{\"612\":1}}],[\"无限多的新连接\",{\"1\":{\"578\":1}}],[\"无索引加锁\",{\"1\":{\"405\":1}}],[\"无法\",{\"1\":{\"1354\":1}}],[\"无法用\",{\"1\":{\"1300\":1}}],[\"无法用于排序和范围\",{\"1\":{\"316\":1,\"463\":1}}],[\"无法将\",{\"1\":{\"1198\":1}}],[\"无法处理\",{\"1\":{\"1162\":1}}],[\"无法篡改通信内容\",{\"1\":{\"971\":1}}],[\"无法自动复用前面的空间\",{\"1\":{\"909\":1}}],[\"无法存储在b树节点中\",{\"1\":{\"326\":1}}],[\"无法进行二分查找\",{\"1\":{\"231\":1}}],[\"无需等待前一个请求完成\",{\"1\":{\"1161\":1}}],[\"无需为异步场景单独适配\",{\"1\":{\"1089\":1}}],[\"无需额外适配\",{\"1\":{\"1071\":1,\"1087\":1}}],[\"无需任何导入语句\",{\"1\":{\"986\":1}}],[\"无需像列表那样移动大量元素\",{\"1\":{\"911\":1}}],[\"无需了解跟服务器交互的细节\",{\"1\":{\"769\":1}}],[\"无需依赖外部服务\",{\"1\":{\"607\":1}}],[\"无需修改代码即可兼容协程模型\",{\"1\":{\"600\":1}}],[\"无需修改代码\",{\"1\":{\"591\":1}}],[\"无需回表\",{\"1\":{\"415\":1}}],[\"无需阻塞等待所有连接\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"无需创建任何类型代理\",{\"1\":{\"93\":1}}],[\"无头服务\",{\"0\":{\"92\":1}}],[\"必须对应一次release\",{\"1\":{\"1034\":1}}],[\"必须等待该操作完成才能继续执行后续的操作\",{\"1\":{\"898\":1}}],[\"必须修改工厂类以支持新的产品类型\",{\"1\":{\"790\":1}}],[\"必须建立多样化且可靠的通知渠道\",{\"1\":{\"627\":1}}],[\"必须在缓冲区中保留已发送的数据\",{\"1\":{\"959\":1}}],[\"必须在任何其他导入之前调用\",{\"1\":{\"680\":1,\"682\":1}}],[\"必须在\",{\"1\":{\"594\":1,\"1353\":1}}],[\"必须先删除主键\",{\"1\":{\"439\":1}}],[\"必须满足这\",{\"1\":{\"425\":1}}],[\"必须同时锁定两个资源时\",{\"1\":{\"407\":1}}],[\"必须匹配\",{\"1\":{\"156\":1}}],[\"必须唯一\",{\"1\":{\"120\":1}}],[\"必须由您来提供\",{\"1\":{\"113\":1}}],[\"必须\",{\"1\":{\"108\":2,\"1241\":1,\"1242\":1}}],[\"必须提供所有端口名称\",{\"1\":{\"90\":1}}],[\"必要条件安装nfs\",{\"0\":{\"63\":1}}],[\"允许我们访问类的属性和方法\",{\"1\":{\"901\":1}}],[\"允许你将请求沿着处理者链进行发送\",{\"1\":{\"804\":1}}],[\"允许你在\",{\"1\":{\"90\":1}}],[\"允许处理更复杂的数据类型\",{\"1\":{\"797\":1}}],[\"允许应用程序通过网络协议\",{\"1\":{\"674\":1}}],[\"允许重试次数\",{\"1\":{\"654\":1}}],[\"允许开发者轻松地创建和管理各种类型的定时任务\",{\"1\":{\"606\":1}}],[\"允许额外的连接数\",{\"1\":{\"579\":1}}],[\"允许\",{\"1\":{\"202\":1}}],[\"允许失败\",{\"1\":{\"20\":1}}],[\"你拥有的饼干数量和尺寸都足以让所有孩子满足\",{\"1\":{\"1364\":1}}],[\"你有两个孩子和三块小饼干\",{\"1\":{\"1364\":1}}],[\"你有三个孩子和两块小饼干\",{\"1\":{\"1364\":1}}],[\"你有办法在o\",{\"1\":{\"1331\":1,\"1335\":1}}],[\"你要怎么拿\",{\"1\":{\"1358\":1}}],[\"你无法在第二天买入股票\",{\"1\":{\"1292\":1}}],[\"你最多可以买\",{\"1\":{\"1292\":2}}],[\"你最多可以完成\",{\"1\":{\"1292\":2}}],[\"你能获得的\",{\"1\":{\"1292\":1}}],[\"你能将算法的时间复杂度降低到\",{\"1\":{\"1207\":1}}],[\"你也可以先购买\",{\"1\":{\"1292\":1}}],[\"你在任何时候\",{\"1\":{\"1292\":1}}],[\"你在使用\",{\"1\":{\"878\":1}}],[\"你只能让胃口值是1的孩子满足\",{\"1\":{\"1364\":1}}],[\"你只能选择\",{\"1\":{\"1292\":2}}],[\"你只需要将所有的\",{\"1\":{\"1300\":1}}],[\"你只要返回\",{\"1\":{\"1242\":1}}],[\"你的目标是尽可能满足越多数量的孩子\",{\"1\":{\"1364\":1}}],[\"你的朋友们就会选择大小为\",{\"1\":{\"1282\":1}}],[\"你的代码可以继续使用标准库的\",{\"1\":{\"591\":1}}],[\"你获得的披萨总大小为\",{\"1\":{\"1282\":1}}],[\"你挑选\",{\"1\":{\"1282\":1}}],[\"你是一个专业的小偷\",{\"1\":{\"1280\":2}}],[\"你必须设计并实现时间复杂度为\",{\"1\":{\"1395\":1,\"1400\":1}}],[\"你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题\",{\"1\":{\"1340\":1}}],[\"你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题\",{\"1\":{\"1339\":1}}],[\"你必须设计并实现线性时间复杂度的算法来解决此问题\",{\"1\":{\"1336\":1}}],[\"你必须给每个顾客正确找零\",{\"1\":{\"1366\":1}}],[\"你必须在再次购买前出售掉之前的股票\",{\"1\":{\"1292\":3}}],[\"你必须删除\",{\"1\":{\"1281\":2}}],[\"你必须仅使用\",{\"1\":{\"1265\":1}}],[\"你必须\",{\"1\":{\"1258\":1}}],[\"你返回所有和为\",{\"1\":{\"1257\":1}}],[\"你应该先完成课程\",{\"1\":{\"1242\":1}}],[\"你还应先完成课程\",{\"1\":{\"1241\":1}}],[\"你这个学期必须选修\",{\"1\":{\"1241\":1}}],[\"你会怎样改变代码\",{\"1\":{\"1313\":1}}],[\"你会发现根节点被漏掉了\",{\"1\":{\"1220\":1,\"1348\":1}}],[\"你会得到一个经典错误\",{\"1\":{\"843\":1}}],[\"你需要依次检查它们是否为\",{\"1\":{\"1313\":1}}],[\"你需要做以下事情确保你的题解可以被通过\",{\"1\":{\"1266\":1}}],[\"你需要\",{\"1\":{\"1265\":1}}],[\"你需要完成课程\",{\"1\":{\"1241\":1}}],[\"你需要先完成课程\",{\"1\":{\"1241\":2,\"1242\":2}}],[\"你需要将\",{\"1\":{\"1208\":1}}],[\"你需要更新\",{\"1\":{\"1208\":1}}],[\"你需要公开多个端口\",{\"1\":{\"90\":1}}],[\"你好\",{\"1\":{\"1064\":1}}],[\"你可能会看到过某些请求的响应码是\",{\"1\":{\"970\":1}}],[\"你可以拿走十张\",{\"1\":{\"1358\":1}}],[\"你可以假设\",{\"1\":{\"1353\":1,\"1390\":1}}],[\"你可以假设该网格的四条边均被水包围\",{\"1\":{\"1352\":1}}],[\"你可以按\",{\"1\":{\"1340\":1}}],[\"你可以删除字符\",{\"1\":{\"1297\":1}}],[\"你可以无限次地完成交易\",{\"1\":{\"1292\":1}}],[\"你可以尽可能地完成更多的交易\",{\"1\":{\"1292\":1}}],[\"你可以决定是否购买和\",{\"1\":{\"1292\":1}}],[\"你可以对它进行一些操作\",{\"1\":{\"1281\":1}}],[\"你可以先偷窃\",{\"1\":{\"1280\":1}}],[\"你可以重复使用字典中的单词\",{\"1\":{\"1276\":1}}],[\"你可以看到\",{\"1\":{\"953\":1}}],[\"你可以定义其他参数来接收初始化数据\",{\"1\":{\"901\":1}}],[\"你可以将所有处理者共用的样本代码放置在其中\",{\"1\":{\"805\":1}}],[\"你可以轻松上手\",{\"1\":{\"574\":1}}],[\"你可以指定\",{\"1\":{\"159\":1}}],[\"你可以使用\",{\"1\":{\"93\":1}}],[\"你可以通过更新\",{\"1\":{\"74\":1}}],[\"你可以自定义\",{\"1\":{\"69\":1}}],[\"你可以在卷中通过它的名称来引用\",{\"1\":{\"69\":1}}],[\"你才能说下一句话\",{\"1\":{\"959\":1}}],[\"你们平时数据库是真删除还是软删除\",{\"1\":{\"877\":1}}],[\"你就没有办法从事编程工作\",{\"1\":{\"729\":1}}],[\"你不能倾斜容器\",{\"1\":{\"1377\":1}}],[\"你不能同时参与多笔交易\",{\"1\":{\"1292\":3}}],[\"你不能在买入前卖出股票\",{\"1\":{\"1292\":2}}],[\"你不能先偷窃\",{\"1\":{\"1280\":1}}],[\"你不需要考虑数组中超出新长度后面的元素\",{\"1\":{\"1265\":3}}],[\"你不需要自定义\",{\"1\":{\"900\":1}}],[\"你不必担心还要管理它们创建的\",{\"1\":{\"177\":1}}],[\"你不应更改已经运行的容器的代码\",{\"1\":{\"131\":1}}],[\"你仅在\",{\"1\":{\"89\":1}}],[\"你正在将工作负载迁移到\",{\"1\":{\"89\":1}}],[\"名字不同\",{\"1\":{\"115\":1}}],[\"名字空间\",{\"1\":{\"89\":1}}],[\"名称解释\",{\"0\":{\"269\":1}}],[\"名称空间的\",{\"1\":{\"125\":1}}],[\"名称空间未来如何隔离\",{\"1\":{\"118\":1}}],[\"名称空间\",{\"0\":{\"118\":1}}],[\"名称\",{\"1\":{\"87\":1,\"324\":1}}],[\"希望上述内容能为您提供有价值的指导\",{\"1\":{\"619\":1}}],[\"希望服务指向另一个\",{\"1\":{\"89\":1}}],[\"希望在生产环境中使用外部的数据库集群\",{\"1\":{\"89\":1}}],[\"只包含正整数\",{\"1\":{\"1274\":1}}],[\"只用面额\",{\"1\":{\"1275\":1}}],[\"只用dp\",{\"1\":{\"1273\":1}}],[\"只用在字段个数少\",{\"1\":{\"217\":1}}],[\"只出现一次的数字\",{\"0\":{\"1336\":1,\"1339\":1,\"1340\":1}}],[\"只出现一次\",{\"1\":{\"1266\":1}}],[\"只看c2的话\",{\"1\":{\"941\":1}}],[\"只需要增加\",{\"1\":{\"933\":1}}],[\"只需要定义\",{\"1\":{\"900\":1}}],[\"只需要追加新逻辑\",{\"1\":{\"762\":1}}],[\"只需要在一棵索引树上就能获取sql所需的所有列数据\",{\"1\":{\"415\":1}}],[\"只可以一路向下走\",{\"1\":{\"735\":1}}],[\"只不过能力更强了而已\",{\"1\":{\"771\":1}}],[\"只不过其将会被重新存储如一个用于管理连接的连接池\",{\"1\":{\"578\":1}}],[\"只不过扫描的是索引\",{\"1\":{\"349\":1}}],[\"只使用最有效的过滤条件\",{\"1\":{\"507\":1}}],[\"只获取自己需要的列\",{\"0\":{\"522\":1},\"1\":{\"507\":1}}],[\"只返回一行\",{\"1\":{\"482\":1}}],[\"只能持有\",{\"1\":{\"1292\":1}}],[\"只能用于迭代操作\",{\"1\":{\"1021\":1}}],[\"只能匹配到名字第一个字是\",{\"1\":{\"455\":1}}],[\"只能由\",{\"1\":{\"113\":1}}],[\"只在乎根节点\",{\"1\":{\"1226\":1}}],[\"只在这一行加锁\",{\"1\":{\"482\":1}}],[\"只在\",{\"1\":{\"372\":1}}],[\"只检索给定范围的行\",{\"1\":{\"350\":1}}],[\"只要能想到这里就很好解决了\",{\"1\":{\"1377\":1}}],[\"只要看看\",{\"1\":{\"1217\":1}}],[\"只要我们可以实现多个请求过来实现数据隔离就可以了\",{\"1\":{\"1051\":1}}],[\"只要我们不通过代码把连接关闭\",{\"1\":{\"962\":1}}],[\"只要第一个请求发出去了\",{\"1\":{\"975\":1}}],[\"只要制定出两者之间的接口\",{\"1\":{\"762\":1}}],[\"只要该事务不结束\",{\"1\":{\"389\":1}}],[\"只要\",{\"1\":{\"260\":1}}],[\"只要满足任一条件\",{\"1\":{\"256\":1}}],[\"只要其中任一条满足\",{\"1\":{\"256\":1}}],[\"只要启动了就不用了\",{\"1\":{\"146\":1}}],[\"只是初始化不一样\",{\"1\":{\"1303\":1}}],[\"只是初始化了参数解析器和日志打印工具\",{\"1\":{\"1193\":1}}],[\"只是为了方便我们用户进行自定义操作\",{\"1\":{\"1111\":1}}],[\"只是碰巧让机器执行\",{\"1\":{\"557\":1}}],[\"只是按顺序把\",{\"1\":{\"455\":1}}],[\"只是主索引要求key是唯一的\",{\"1\":{\"413\":1}}],[\"只是表中数据集合不同\",{\"1\":{\"302\":1}}],[\"只是统计结果不太准确\",{\"1\":{\"239\":1}}],[\"只是名字不一样\",{\"1\":{\"177\":1}}],[\"只提供了副本数量的控制功能\",{\"1\":{\"164\":1}}],[\"只有下标\",{\"1\":{\"1341\":1}}],[\"只有该线程接到\",{\"1\":{\"1035\":1}}],[\"只有当变量在模块\",{\"1\":{\"982\":1}}],[\"只有当第一列定义为not\",{\"1\":{\"487\":1}}],[\"只有连个参数\",{\"1\":{\"930\":1}}],[\"只有满足条件时才允许转换\",{\"1\":{\"565\":1}}],[\"只有\",{\"1\":{\"518\":1}}],[\"只有explain能告诉你当前sql的执行状态\",{\"1\":{\"507\":1}}],[\"只有保证了事务的一致性\",{\"1\":{\"425\":1}}],[\"只有通过索引条件检索数据\",{\"1\":{\"405\":1}}],[\"只有一个\",{\"1\":{\"358\":2}}],[\"只有大于此aof文件大于此尺寸是才会触发rewrite\",{\"1\":{\"260\":1}}],[\"只有在\",{\"1\":{\"260\":1}}],[\"只有超出这个时间\",{\"1\":{\"161\":1}}],[\"只有这样\",{\"1\":{\"18\":1}}],[\"只适用于clusterip\",{\"1\":{\"87\":1}}],[\"则while语句出界条件是left\",{\"1\":{\"1393\":1}}],[\"则while语句的出界条件是left\",{\"1\":{\"1393\":1}}],[\"则在\",{\"1\":{\"1390\":2}}],[\"则骑士的初始健康点数至少为\",{\"1\":{\"1303\":1}}],[\"则表示骑士将增加健康点数\",{\"1\":{\"1303\":1}}],[\"则表示骑士将损失健康点数\",{\"1\":{\"1303\":1}}],[\"则表示未建立索引或索引失效\",{\"1\":{\"349\":1}}],[\"则该字符串称为回文字符串\",{\"1\":{\"1259\":1,\"1299\":1}}],[\"则让其中的\",{\"1\":{\"1225\":1}}],[\"则它将扩展当前的lis\",{\"1\":{\"1207\":1}}],[\"则返回其索引\",{\"1\":{\"1395\":2}}],[\"则返回空字符串\",{\"1\":{\"1380\":1}}],[\"则返回面积为\",{\"1\":{\"1353\":1}}],[\"则返回的数字的二进制在该位置值也为1\",{\"1\":{\"1323\":1}}],[\"则返回数组\",{\"1\":{\"1230\":1}}],[\"则返回\",{\"1\":{\"1198\":1,\"1229\":1,\"1276\":1}}],[\"则返回所有元素\",{\"1\":{\"946\":1}}],[\"则必须使用到应用层协议\",{\"1\":{\"962\":1}}],[\"则严格检查被装饰函数的参数类型\",{\"1\":{\"930\":1}}],[\"则实现了这个方法\",{\"1\":{\"791\":1}}],[\"则实际筛选出的列数为\",{\"1\":{\"349\":1}}],[\"则需要修改\",{\"1\":{\"790\":1}}],[\"则需要进行1000次数据库连接\",{\"1\":{\"507\":1,\"520\":1}}],[\"则可以认为该短语是一个\",{\"1\":{\"1297\":1}}],[\"则可以不使用\",{\"1\":{\"770\":1}}],[\"则可能更适合采用\",{\"1\":{\"607\":1}}],[\"则直接返回中心位置\",{\"1\":{\"1390\":1}}],[\"则直接跳过所有except子句\",{\"1\":{\"748\":1}}],[\"则直接使用浏览器的本地缓存\",{\"1\":{\"969\":1}}],[\"则直接使用\",{\"1\":{\"319\":1}}],[\"则利用数据挖掘技术识别出相互关联的指标\",{\"1\":{\"635\":1}}],[\"则应该最早淘汰掉\",{\"1\":{\"837\":1,\"1001\":1}}],[\"则应触发告警\",{\"1\":{\"630\":1}}],[\"则应当在合适的地方调用session\",{\"1\":{\"582\":1}}],[\"则立即发出紧急级告警通知相关人员进行干预\",{\"1\":{\"626\":1}}],[\"则通过扫描聚集索引来处理\",{\"1\":{\"487\":1}}],[\"则分为两种情况\",{\"1\":{\"478\":1}}],[\"则不使用索引\",{\"1\":{\"416\":1}}],[\"则不再试图重新启动\",{\"1\":{\"202\":1}}],[\"则mysql自动为innodb表生成一个隐含字段作为主键\",{\"1\":{\"414\":1}}],[\"则mysql系统会自动选择一个可以唯一标识数据记录的列作为主键\",{\"1\":{\"414\":1}}],[\"则取出其data域的值\",{\"1\":{\"413\":1}}],[\"则此条记录可读\",{\"1\":{\"478\":1}}],[\"则此条记录不可读\",{\"1\":{\"478\":1}}],[\"则此索引的结构如下图所示\",{\"1\":{\"413\":1}}],[\"则此值不能为\",{\"1\":{\"159\":2}}],[\"则图8是一个myisam表的主索引\",{\"1\":{\"413\":1}}],[\"则其他事务不能再对数据a加任任何类型的封锁\",{\"1\":{\"404\":1}}],[\"则提示错误信息\",{\"1\":{\"403\":1}}],[\"则会分配给后面来的事务\",{\"1\":{\"389\":1}}],[\"则会丢失区间\",{\"1\":{\"258\":1}}],[\"则会在群集中的其他可用节点\",{\"1\":{\"115\":1}}],[\"则没有按时启动的任务不会被尝试重新启动\",{\"1\":{\"202\":1}}],[\"则job状态不会发生变化\",{\"1\":{\"198\":1}}],[\"则job的状态将根据所有容器的执行状态来变化\",{\"1\":{\"198\":1}}],[\"则pod都不能启动\",{\"1\":{\"142\":1}}],[\"则他们应该被部署在同一个pod\",{\"1\":{\"115\":1}}],[\"则请求与路径\",{\"1\":{\"100\":1}}],[\"则\",{\"1\":{\"97\":1,\"117\":1,\"202\":1,\"1241\":1}}],[\"则假定服务具有外部进程管理其端点\",{\"1\":{\"87\":1}}],[\"则是在这种情况下处理请求的那个默认后端\",{\"1\":{\"98\":1}}],[\"则是指对于那些重复性高且容易出错的任务应尽量实现自动化\",{\"1\":{\"25\":1}}],[\"则是对这些方案进行优化和完善\",{\"1\":{\"20\":1}}],[\"默认基于\",{\"1\":{\"1169\":1}}],[\"默认支持\",{\"1\":{\"1164\":1}}],[\"默认锁失效时间为1秒\",{\"1\":{\"1033\":1}}],[\"默认没有返回值就是返回none\",{\"1\":{\"848\":1,\"1009\":1}}],[\"默认即为\",{\"1\":{\"664\":1}}],[\"默认存储在broker中\",{\"1\":{\"657\":1}}],[\"默认使用\",{\"1\":{\"1169\":1}}],[\"默认使用json序列化\",{\"1\":{\"656\":1}}],[\"默认使用的queuepool\",{\"1\":{\"578\":1}}],[\"默认json\",{\"1\":{\"648\":1}}],[\"默认开启\",{\"1\":{\"334\":1}}],[\"默认的连接池类型\",{\"1\":{\"579\":1}}],[\"默认的内存是多少\",{\"1\":{\"210\":1}}],[\"默认的tcp\",{\"1\":{\"87\":1}}],[\"默认值将被采纳\",{\"1\":{\"201\":1}}],[\"默认值为\",{\"1\":{\"159\":1,\"161\":1}}],[\"默认值为1\",{\"1\":{\"153\":1}}],[\"默认值是\",{\"1\":{\"143\":1,\"147\":3,\"503\":1}}],[\"默认是不加密\",{\"1\":{\"698\":1}}],[\"默认是10秒\",{\"1\":{\"334\":1}}],[\"默认是\",{\"1\":{\"147\":2}}],[\"默认名称空间\",{\"1\":{\"118\":1}}],[\"默认有初始化了三个名称空间\",{\"1\":{\"118\":1}}],[\"默认后端\",{\"0\":{\"98\":1}}],[\"默认\",{\"0\":{\"664\":1},\"1\":{\"93\":1,\"260\":1,\"513\":1,\"1081\":1}}],[\"默认情况下启用双写缓冲区\",{\"1\":{\"469\":1}}],[\"默认情况下采用行级锁\",{\"1\":{\"400\":1}}],[\"默认情况下\",{\"1\":{\"93\":2,\"162\":1,\"361\":2,\"385\":1,\"503\":2}}],[\"默认为utc\",{\"1\":{\"662\":1}}],[\"默认为queuepool\",{\"1\":{\"578\":1}}],[\"默认为64mb\",{\"1\":{\"262\":1}}],[\"默认为600s\",{\"1\":{\"153\":1}}],[\"默认为everysec\",{\"1\":{\"260\":1}}],[\"默认为\",{\"1\":{\"260\":2,\"321\":1}}],[\"默认为1\",{\"1\":{\"198\":2}}],[\"默认为10\",{\"1\":{\"153\":1}}],[\"默认为1分钟\",{\"1\":{\"74\":2}}],[\"默认为false\",{\"1\":{\"133\":1,\"198\":1,\"930\":1}}],[\"默认为true\",{\"1\":{\"87\":1}}],[\"支付的顺序\",{\"1\":{\"1366\":1}}],[\"支付交易失败等业务操作失误可能会对企业造成经济损失\",{\"1\":{\"632\":1}}],[\"支持异步\",{\"1\":{\"1169\":1,\"1171\":1}}],[\"支持同时处理多个请求\",{\"1\":{\"1161\":1}}],[\"支持复杂模型\",{\"1\":{\"1156\":1}}],[\"支持插件和自定义验证逻辑\",{\"1\":{\"1154\":1}}],[\"支持管道\",{\"1\":{\"975\":1}}],[\"支持轻松地引入新的处理逻辑\",{\"1\":{\"808\":1}}],[\"支持submit\",{\"1\":{\"709\":1}}],[\"支持map\",{\"1\":{\"708\":1}}],[\"支持多种协议\",{\"1\":{\"1162\":1}}],[\"支持多线程\",{\"1\":{\"607\":1}}],[\"支持多状态并发\",{\"1\":{\"570\":1}}],[\"支持在运行时动态添加和移除任务\",{\"1\":{\"607\":1}}],[\"支持基于日期\",{\"1\":{\"607\":1}}],[\"支持基于时间间隔\",{\"1\":{\"607\":1}}],[\"支持持久化存储\",{\"1\":{\"606\":1}}],[\"支持大规模的任务调度\",{\"1\":{\"605\":1}}],[\"支持嵌套状态\",{\"1\":{\"569\":1}}],[\"支持的索引类型很多\",{\"1\":{\"433\":1}}],[\"支持新的基于集合的选择器需求\",{\"1\":{\"177\":1}}],[\"支持\",{\"1\":{\"87\":1,\"665\":1,\"1069\":1,\"1071\":1,\"1164\":1,\"1170\":1}}],[\"支柱\",{\"1\":{\"32\":1}}],[\"该字符串可以通过删除\",{\"1\":{\"1380\":1}}],[\"该字段被称为页外列\",{\"1\":{\"326\":1}}],[\"该字段的默认值为\",{\"1\":{\"198\":1}}],[\"该字段限定了\",{\"1\":{\"198\":1}}],[\"该子集中\",{\"1\":{\"1274\":1}}],[\"该图是无向图\",{\"1\":{\"1236\":1}}],[\"该无向图同时具有以下属性\",{\"1\":{\"1236\":1}}],[\"该模式的核心概念是\",{\"1\":{\"1177\":1}}],[\"该模式的binlog日志量增长非常快\",{\"1\":{\"395\":1}}],[\"该报文也不包含应用层数据\",{\"1\":{\"951\":1}}],[\"该报文不包含应用层数据\",{\"1\":{\"951\":1}}],[\"该算法的核心原则是\",{\"1\":{\"837\":1,\"839\":1,\"1001\":1,\"1003\":1}}],[\"该类还可以实现默认的处理行为\",{\"1\":{\"805\":1}}],[\"该类中定义了一个保存对于下个处理者引用的成员变量\",{\"1\":{\"805\":1}}],[\"该接口通常仅包含单个方法用于请求处理\",{\"1\":{\"805\":1}}],[\"该声明的值在令牌颁发者创建的每一个令牌中都是唯一的\",{\"1\":{\"696\":1}}],[\"该声明是一个整数\",{\"1\":{\"696\":2}}],[\"该声明是一个字符串\",{\"1\":{\"696\":1}}],[\"该头部包含了sessionid\",{\"1\":{\"689\":1}}],[\"该任务就会被取出并执行\",{\"1\":{\"609\":1}}],[\"该上限由两个值组成\",{\"1\":{\"580\":1}}],[\"该语句在搜索索引树的时候\",{\"1\":{\"455\":1}}],[\"该部分日志是持久的\",{\"1\":{\"425\":1}}],[\"该部分日志是易失性的\",{\"1\":{\"425\":1}}],[\"该行版本就不能删除\",{\"1\":{\"389\":1}}],[\"该判断算法是通过版本上的trx\",{\"1\":{\"374\":1}}],[\"该版本可以被访问\",{\"1\":{\"371\":1}}],[\"该版本可以被当前事务访问\",{\"1\":{\"371\":2}}],[\"该版本不可以被访问\",{\"1\":{\"371\":1}}],[\"该版本不可以被当前事务访问\",{\"1\":{\"371\":1}}],[\"该列显示mysql在查询过程中的一些详细信息\",{\"1\":{\"351\":1}}],[\"该层负责将数据库的数据和日志存储在文件系统之上\",{\"1\":{\"334\":1}}],[\"该过程中主进程的读写不受影响\",{\"1\":{\"257\":1}}],[\"该对象根据\",{\"1\":{\"200\":1}}],[\"该对象将放在此名称空间下\",{\"1\":{\"118\":1}}],[\"该项与batch\",{\"1\":{\"198\":1}}],[\"该\",{\"1\":{\"198\":1}}],[\"该值可以是绝对数字\",{\"1\":{\"159\":1}}],[\"该函数的执行是同步的\",{\"1\":{\"135\":1}}],[\"该钩子函数没有输入参数\",{\"1\":{\"135\":2}}],[\"该容器是否应该为容器中的stdin分配缓冲区\",{\"1\":{\"133\":1}}],[\"该端口的ip协议\",{\"1\":{\"87\":1}}],[\"该服务在其上公开的每个节点上的端口nodeport或loadbalancer\",{\"1\":{\"87\":1}}],[\"服务端不再是被动地响应\",{\"1\":{\"976\":1}}],[\"服务端不清楚客户端是否收到了自己回复的\",{\"1\":{\"952\":1}}],[\"服务端通常需要等待完成数据的发送和处理\",{\"1\":{\"954\":1}}],[\"服务端收到客户端的\",{\"1\":{\"954\":1}}],[\"服务端收到了\",{\"1\":{\"953\":1}}],[\"服务端收到该报文后\",{\"1\":{\"953\":1}}],[\"服务端收到ack确认之后服务端也处于established\",{\"1\":{\"951\":1}}],[\"服务端程序一样\",{\"1\":{\"334\":1}}],[\"服务端程序处理传入多路请求\",{\"1\":{\"270\":1}}],[\"服务的开发者也只需要开发业务逻辑\",{\"1\":{\"769\":1}}],[\"服务的时候\",{\"1\":{\"769\":1}}],[\"服务无法正常使用\",{\"1\":{\"623\":1}}],[\"服务层是mysql\",{\"1\":{\"332\":1}}],[\"服务层\",{\"0\":{\"332\":1}}],[\"服务器\",{\"1\":{\"1171\":1}}],[\"服务器对比\",{\"0\":{\"1171\":1}}],[\"服务器上\",{\"1\":{\"1164\":1}}],[\"服务器上的共享目录到本机路径\",{\"1\":{\"63\":1}}],[\"服务器如\",{\"1\":{\"1164\":2}}],[\"服务器不保存客户端状态\",{\"1\":{\"1144\":1}}],[\"服务器主动推送资源\",{\"1\":{\"976\":1}}],[\"服务器进程中就能保持住这个连接并且在内存中记住一些信息状态\",{\"1\":{\"962\":1}}],[\"服务器模型\",{\"1\":{\"706\":1}}],[\"服务器端采用filter过滤器校验\",{\"1\":{\"691\":1}}],[\"服务器端接受客户端请求后\",{\"1\":{\"689\":1}}],[\"服务器接收请求\",{\"1\":{\"689\":1}}],[\"服务器调优及各个参数的设置\",{\"1\":{\"506\":1}}],[\"服务器中的查询执行引擎通过接口与存储引擎进行通信\",{\"1\":{\"333\":1}}],[\"服务器会在内存中维护一个全局变量\",{\"1\":{\"325\":1}}],[\"服务器为了描述一条记录而添加了一些额外信息\",{\"1\":{\"323\":1}}],[\"服务采用\",{\"1\":{\"268\":1}}],[\"服务\",{\"1\":{\"124\":1,\"799\":1}}],[\"服务上\",{\"1\":{\"93\":1}}],[\"服务和\",{\"1\":{\"93\":1}}],[\"服务公开的端口列表\",{\"1\":{\"87\":1}}],[\"odd\",{\"1\":{\"1341\":2}}],[\"obstaclegrid\",{\"1\":{\"1303\":12}}],[\"obj并放入到url\",{\"1\":{\"1063\":1}}],[\"obj中的值的\",{\"1\":{\"855\":1}}],[\"obj是不会影响主线程里my\",{\"1\":{\"855\":1}}],[\"obj是一个线程隔离的对象\",{\"1\":{\"855\":1}}],[\"obj是主线程和新线程共享的对象\",{\"1\":{\"855\":1}}],[\"obj实例化改为使用local线程隔离对象\",{\"1\":{\"855\":1}}],[\"obj\",{\"1\":{\"855\":8,\"856\":2,\"862\":7,\"880\":2,\"881\":2,\"887\":6,\"892\":1,\"894\":2,\"1017\":6,\"1049\":2,\"1061\":6,\"1063\":3,\"1094\":5,\"1209\":3,\"1365\":2,\"1380\":7,\"1384\":2}}],[\"objects\",{\"1\":{\"799\":1}}],[\"object\",{\"1\":{\"662\":2,\"776\":1,\"783\":1,\"784\":2,\"790\":1,\"824\":2,\"825\":1,\"834\":1,\"844\":2,\"847\":1,\"848\":2,\"854\":3,\"856\":6,\"902\":2,\"998\":1,\"1009\":3,\"1023\":1,\"1045\":3,\"1049\":7,\"1050\":2,\"1057\":1,\"1059\":1,\"1061\":2,\"1094\":1,\"1103\":1}}],[\"object>将pod卷安装到容器的文件系统中\",{\"1\":{\"133\":1}}],[\"object>是容器要使用的卷的列表\",{\"1\":{\"133\":1}}],[\"object>要暴漏的端口\",{\"1\":{\"133\":1}}],[\"object>环境变量\",{\"1\":{\"133\":1}}],[\"object>\",{\"1\":{\"87\":1,\"133\":1}}],[\"owner\",{\"1\":{\"1188\":5}}],[\"owner=self\",{\"1\":{\"1187\":1}}],[\"owned\",{\"1\":{\"324\":2}}],[\"o密集型任务性能的示例\",{\"1\":{\"925\":1}}],[\"o密集型任务性能\",{\"0\":{\"925\":1}}],[\"o密集型任务时\",{\"1\":{\"924\":1}}],[\"o密集型程序的效率\",{\"1\":{\"923\":1}}],[\"old\",{\"1\":{\"839\":3,\"856\":1,\"1003\":3,\"1063\":3,\"1094\":3,\"1194\":4}}],[\"olog\",{\"1\":{\"233\":1}}],[\"oo\",{\"1\":{\"756\":1}}],[\"o性能以及网络连接质量等\",{\"1\":{\"625\":1}}],[\"outdegree\",{\"1\":{\"1218\":1}}],[\"outer是外部函数\",{\"1\":{\"992\":1}}],[\"outer\",{\"1\":{\"754\":2,\"992\":3}}],[\"out\",{\"1\":{\"580\":1,\"837\":1,\"1001\":1}}],[\"output=\",{\"1\":{\"503\":3}}],[\"output\",{\"1\":{\"503\":3,\"1194\":7}}],[\"of\",{\"1\":{\"580\":1,\"806\":1,\"844\":2,\"1040\":1,\"1049\":1,\"1050\":4,\"1063\":1,\"1094\":1,\"1102\":3}}],[\"off\",{\"1\":{\"460\":1,\"503\":2}}],[\"offset\",{\"1\":{\"460\":2,\"498\":1}}],[\"ok\",{\"1\":{\"503\":2,\"513\":1,\"1144\":1,\"1166\":1}}],[\"o线程\",{\"1\":{\"494\":1}}],[\"o次数越少\",{\"1\":{\"341\":1}}],[\"o次数\",{\"1\":{\"341\":1}}],[\"o读取\",{\"1\":{\"341\":1}}],[\"operations\",{\"1\":{\"1152\":1}}],[\"operation\",{\"1\":{\"1079\":1}}],[\"openapi\",{\"1\":{\"1170\":1}}],[\"open\",{\"1\":{\"742\":1,\"744\":1,\"746\":1,\"758\":2,\"790\":1,\"846\":1,\"849\":3,\"986\":1,\"1008\":1,\"1010\":3,\"1100\":1}}],[\"openssl改进\",{\"1\":{\"430\":1}}],[\"options=\",{\"1\":{\"1193\":1}}],[\"options=none\",{\"1\":{\"1193\":1}}],[\"options\",{\"1\":{\"1063\":19,\"1064\":6,\"1094\":19,\"1103\":3,\"1193\":4,\"1194\":8}}],[\"optional\",{\"1\":{\"806\":2}}],[\"optimized\",{\"1\":{\"758\":1}}],[\"optimizer\",{\"1\":{\"332\":1}}],[\"opt\",{\"1\":{\"334\":1}}],[\"opaque\",{\"1\":{\"80\":1}}],[\"overwriting\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"over\",{\"1\":{\"283\":1}}],[\"overflow=10\",{\"1\":{\"579\":1}}],[\"overflow设置为\",{\"1\":{\"578\":1}}],[\"overflow之和\",{\"1\":{\"578\":1}}],[\"overflow\",{\"1\":{\"227\":1,\"580\":2}}],[\"onpath是为了记录图中的数据\",{\"1\":{\"1221\":1}}],[\"onpath\",{\"1\":{\"1220\":4,\"1348\":3}}],[\"one\",{\"1\":{\"1050\":1,\"1340\":5}}],[\"onmounted\",{\"1\":{\"681\":1}}],[\"only=\",{\"1\":{\"887\":1}}],[\"only=true\",{\"1\":{\"881\":3,\"887\":1}}],[\"only\",{\"0\":{\"259\":1},\"1\":{\"1111\":1}}],[\"on\",{\"1\":{\"256\":1,\"257\":1,\"260\":1,\"261\":1,\"447\":1,\"448\":1,\"450\":1,\"469\":1,\"503\":3,\"513\":1,\"555\":3,\"563\":1,\"566\":4,\"570\":3,\"662\":2,\"679\":8,\"681\":3,\"705\":1,\"844\":1,\"856\":1,\"1220\":4,\"1241\":5,\"1242\":5}}],[\"onfailure\",{\"1\":{\"143\":1,\"203\":1}}],[\"orig\",{\"1\":{\"1188\":3}}],[\"origins=\",{\"1\":{\"662\":1,\"679\":1}}],[\"orange\",{\"1\":{\"902\":6}}],[\"orm\",{\"1\":{\"861\":4,\"862\":20,\"867\":1,\"879\":1,\"888\":2,\"1155\":1}}],[\"orow\",{\"1\":{\"513\":2}}],[\"orderlinetimeoutexception\",{\"1\":{\"751\":1}}],[\"orderlinerunningexception\",{\"1\":{\"751\":1}}],[\"orderlinestopexception\",{\"1\":{\"751\":1}}],[\"orderlinesconfig\",{\"1\":{\"679\":1}}],[\"orderlines\",{\"1\":{\"662\":1,\"681\":1,\"755\":2,\"1189\":4}}],[\"order表\",{\"1\":{\"513\":1}}],[\"order表的行\",{\"1\":{\"513\":1}}],[\"order表为被驱动表\",{\"1\":{\"513\":1}}],[\"order\",{\"1\":{\"349\":1,\"507\":1,\"513\":5,\"521\":1,\"565\":7,\"776\":23,\"862\":1,\"1124\":8}}],[\"orderedready\",{\"1\":{\"190\":1}}],[\"or\",{\"1\":{\"349\":2,\"416\":1,\"504\":4,\"769\":1,\"822\":1,\"831\":1,\"843\":1,\"844\":1,\"849\":3,\"856\":1,\"862\":1,\"1010\":3,\"1063\":1,\"1064\":1,\"1094\":1,\"1100\":1,\"1193\":1,\"1194\":3,\"1241\":1,\"1242\":1,\"1274\":2,\"1282\":1,\"1298\":1,\"1309\":1,\"1352\":3,\"1353\":3,\"1354\":4,\"1376\":3}}],[\"org\",{\"1\":{\"108\":1,\"597\":1,\"925\":1}}],[\"oserror\",{\"1\":{\"849\":1,\"1010\":1}}],[\"os\",{\"1\":{\"130\":1,\"388\":7,\"530\":2,\"595\":2,\"662\":5,\"758\":2,\"935\":5,\"936\":3,\"986\":1,\"1040\":1,\"1059\":6,\"1064\":2}}],[\"o\",{\"1\":{\"125\":2,\"218\":2,\"227\":2,\"268\":4,\"269\":3,\"270\":4,\"513\":1,\"588\":1,\"590\":2,\"592\":2,\"600\":2,\"664\":1,\"665\":1,\"668\":1,\"682\":1,\"756\":1,\"827\":12,\"925\":1,\"941\":1,\"943\":4,\"944\":2,\"945\":2,\"946\":1,\"1207\":1,\"1226\":3,\"1258\":3,\"1265\":1,\"1395\":1,\"1399\":1,\"1400\":1}}],[\"other\",{\"1\":{\"124\":1,\"920\":2}}],[\"<class\",{\"1\":{\"1189\":1}}],[\"<changes>\",{\"1\":{\"256\":1}}],[\"<robot\",{\"1\":{\"1183\":2,\"1194\":1}}],[\"<rule\",{\"1\":{\"1063\":1,\"1094\":2}}],[\"<lambda>\",{\"1\":{\"1094\":1}}],[\"<locals>\",{\"1\":{\"1094\":1}}],[\"<filename>\",{\"1\":{\"1094\":1}}],[\"<function\",{\"1\":{\"1063\":1,\"1094\":2}}],[\"<flask\",{\"1\":{\"1050\":1}}],[\"<path\",{\"1\":{\"1059\":2}}],[\"<genexpr>\",{\"1\":{\"1023\":1}}],[\"<generator\",{\"1\":{\"1023\":1}}],[\"<order\",{\"1\":{\"776\":1}}],[\"<object>\",{\"1\":{\"153\":3}}],[\"<object>启动探针\",{\"1\":{\"133\":1}}],[\"<object>安全策略\",{\"1\":{\"133\":1}}],[\"<object>资源限制\",{\"1\":{\"133\":1}}],[\"<object>就绪探针\",{\"1\":{\"133\":1}}],[\"<object>生存探针\",{\"1\":{\"133\":1}}],[\"<object>生命周期\",{\"1\":{\"133\":1}}],[\"<z>\",{\"1\":{\"580\":1}}],[\"<y>\",{\"1\":{\"580\":1}}],[\"<x>\",{\"1\":{\"580\":1}}],[\"<int\",{\"1\":{\"1147\":1}}],[\"<integer>\",{\"1\":{\"87\":2,\"153\":4}}],[\"<id>\",{\"1\":{\"542\":1}}],[\"<=\",{\"1\":{\"478\":2,\"487\":1,\"806\":3,\"844\":1,\"1050\":1,\"1202\":2,\"1203\":2,\"1207\":4,\"1208\":4,\"1209\":4,\"1221\":3,\"1229\":8,\"1230\":4,\"1236\":5,\"1237\":6,\"1241\":5,\"1242\":5,\"1258\":1,\"1274\":1,\"1276\":2,\"1280\":4,\"1281\":4,\"1282\":4,\"1286\":1,\"1287\":2,\"1288\":1,\"1289\":1,\"1292\":4,\"1297\":3,\"1299\":4,\"1300\":1,\"1303\":2,\"1307\":4,\"1308\":2,\"1309\":4,\"1313\":4,\"1336\":4,\"1339\":4,\"1340\":4,\"1341\":2,\"1352\":2,\"1353\":2,\"1354\":2,\"1364\":1,\"1376\":4,\"1377\":1,\"1378\":1,\"1379\":5,\"1380\":6,\"1385\":2,\"1390\":1,\"1391\":1,\"1393\":2,\"1395\":7,\"1399\":7,\"1400\":6,\"1403\":4}}],[\"<key\",{\"1\":{\"461\":1}}],[\"<索引的名字>\",{\"1\":{\"447\":1,\"448\":1,\"450\":1}}],[\"<name>\",{\"1\":{\"118\":1}}],[\"<<\",{\"0\":{\"1326\":1},\"1\":{\"108\":2,\"1326\":1,\"1329\":1,\"1339\":2}}],[\"<<eof\",{\"1\":{\"108\":3}}],[\"<map\",{\"1\":{\"87\":1}}],[\"<\",{\"1\":{\"87\":2,\"133\":7,\"350\":1,\"371\":2,\"416\":1,\"431\":1,\"478\":1,\"487\":2,\"507\":2,\"520\":2,\"753\":1,\"920\":1,\"1024\":1,\"1208\":1,\"1221\":1,\"1227\":1,\"1230\":1,\"1236\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1257\":5,\"1259\":2,\"1266\":1,\"1271\":1,\"1272\":1,\"1287\":3,\"1289\":12,\"1300\":1,\"1352\":2,\"1353\":2,\"1354\":2,\"1364\":1,\"1365\":1,\"1376\":3,\"1377\":1,\"1379\":1,\"1380\":2,\"1384\":1,\"1390\":2,\"1391\":1,\"1393\":4,\"1395\":7,\"1400\":3,\"1403\":1}}],[\"<seconds>\",{\"1\":{\"256\":1}}],[\"<secret\",{\"1\":{\"79\":1}}],[\"<string>容器的工作目录\",{\"1\":{\"133\":1}}],[\"<string>容器终止到的文件的路径将要写入的消息被安装到容器的文件系统中\",{\"1\":{\"133\":1}}],[\"<string>镜像下载方式\",{\"1\":{\"133\":1}}],[\"<string>镜像名称\",{\"1\":{\"133\":1}}],[\"<string>服务所针对的pods上要访问的端口编号或名称\",{\"1\":{\"87\":1}}],[\"<string>该端口的应用协议\",{\"1\":{\"87\":1}}],[\"<string>\",{\"1\":{\"87\":4,\"133\":2}}],[\"<boolean>这个容器是否应该为自己分配一个tty\",{\"1\":{\"133\":1}}],[\"<boolean>\",{\"1\":{\"87\":1,\"133\":2,\"153\":1}}],[\"组成的的二维网格\",{\"1\":{\"1352\":1}}],[\"组成的矩阵\",{\"1\":{\"1203\":1}}],[\"组成的二维矩阵内\",{\"1\":{\"1202\":1}}],[\"组成\",{\"1\":{\"318\":1,\"1376\":1}}],[\"组合总和\",{\"1\":{\"1275\":1}}],[\"组合和排列的递推公式都是dp\",{\"1\":{\"1275\":1}}],[\"组合和排列问题区别为\",{\"1\":{\"1275\":1}}],[\"组合是不管顺序的\",{\"1\":{\"1275\":1}}],[\"组合问题先物品再背包\",{\"1\":{\"1275\":1}}],[\"组合为\",{\"1\":{\"1209\":1}}],[\"组合关系\",{\"1\":{\"762\":1}}],[\"组合索引\",{\"1\":{\"450\":1}}],[\"组合\",{\"1\":{\"86\":1,\"1274\":4,\"1276\":1}}],[\"组织文化的三大支柱\",{\"0\":{\"32\":1}}],[\"组织应建立允许失败的文化\",{\"1\":{\"30\":1}}],[\"帮助运维人员更快地定位问题根源\",{\"1\":{\"635\":1}}],[\"帮助你通过网络暴露\",{\"1\":{\"86\":1}}],[\"帮助设定明确的目标\",{\"1\":{\"20\":1}}],[\"由若干\",{\"1\":{\"1376\":1}}],[\"由小写英文字母组成\",{\"1\":{\"1297\":1}}],[\"由节点\",{\"1\":{\"1236\":1}}],[\"由三部分构成\",{\"0\":{\"693\":1}}],[\"由uid+time+sign\",{\"1\":{\"690\":1}}],[\"由innodb提供支持\",{\"1\":{\"430\":1}}],[\"由低到高依次为read\",{\"1\":{\"425\":1}}],[\"由上向下\",{\"1\":{\"349\":1}}],[\"由一个初值都为零的bit数组和多个哈希函数构成\",{\"1\":{\"238\":1}}],[\"由于研究者有3篇论文每篇\",{\"1\":{\"1403\":1}}],[\"由于不是每位顾客都得到了正确的找零\",{\"1\":{\"1366\":1}}],[\"由于所有客户都得到了正确的找零\",{\"1\":{\"1366\":1}}],[\"由于他们的尺寸都是1\",{\"1\":{\"1364\":1}}],[\"由于a和b不相同\",{\"1\":{\"1340\":1}}],[\"由于a还没有对mysql更新完\",{\"1\":{\"283\":1}}],[\"由于空字符串正着反着读都一样\",{\"1\":{\"1297\":1}}],[\"由于删除它并获得\",{\"1\":{\"1281\":1}}],[\"由于\",{\"1\":{\"1275\":1}}],[\"由于需要包括amount\",{\"1\":{\"1275\":1}}],[\"由于零钱是可以重复使用的\",{\"1\":{\"1275\":1}}],[\"由于dp\",{\"1\":{\"1271\":1}}],[\"由于有向图的边有方向\",{\"1\":{\"1218\":1}}],[\"由于获取到j要遍历0\",{\"1\":{\"1207\":1}}],[\"由于flask的信号实现比较简单\",{\"1\":{\"1111\":1}}],[\"由于cpu时间片分配给每个独立调度的线程\",{\"1\":{\"1029\":1}}],[\"由于是明文传输\",{\"1\":{\"971\":1}}],[\"由于没有第三次握手\",{\"1\":{\"952\":1}}],[\"由于python列表是基于数组实现的\",{\"1\":{\"909\":1}}],[\"由于python中的函数是一等公民\",{\"1\":{\"776\":2}}],[\"由于gil的存在\",{\"1\":{\"897\":1}}],[\"由于my\",{\"1\":{\"855\":1}}],[\"由于服务器不保存\",{\"1\":{\"698\":1}}],[\"由于http的无状态性\",{\"1\":{\"689\":1}}],[\"由于网上使用的方式都是前端使用html的方法来实现\",{\"1\":{\"673\":1}}],[\"由于这个连接池的存在\",{\"1\":{\"578\":1}}],[\"由于在这个过程中\",{\"1\":{\"469\":1}}],[\"由于快照时间粒度较大\",{\"1\":{\"264\":1}}],[\"由于文件是文本文件\",{\"1\":{\"263\":1}}],[\"由于redis重启过程需要优先加载aof日志进行指令重放以恢复数据\",{\"1\":{\"259\":1}}],[\"由于链表\",{\"1\":{\"231\":1}}],[\"由于创建\",{\"1\":{\"76\":1}}],[\"由kubelet在pod拉去镜像时使用\",{\"1\":{\"77\":1}}],[\"及之前版本\",{\"1\":{\"1073\":1}}],[\"及其数据\",{\"1\":{\"76\":1}}],[\"及时发现生产系统问题以及业务指标的异常波动\",{\"1\":{\"21\":1}}],[\"及时调整策略以适应新的需求或挑战\",{\"1\":{\"21\":1}}],[\"+grid\",{\"1\":{\"1303\":5}}],[\"+prices\",{\"1\":{\"1292\":8}}],[\"+nums\",{\"1\":{\"1280\":5}}],[\"+2\",{\"1\":{\"1274\":1}}],[\"+value\",{\"1\":{\"1271\":2,\"1273\":2,\"1275\":1}}],[\"+1\",{\"1\":{\"1202\":1,\"1274\":4,\"1286\":1,\"1289\":1,\"1307\":2,\"1308\":2,\"1309\":1,\"1313\":2,\"1335\":1}}],[\"+=1\",{\"1\":{\"1300\":1}}],[\"+=dp\",{\"1\":{\"1274\":1,\"1275\":1,\"1276\":1}}],[\"+=\",{\"1\":{\"706\":1,\"717\":1,\"732\":1,\"756\":1,\"776\":1,\"844\":1,\"919\":1,\"1015\":1,\"1033\":1,\"1050\":1,\"1198\":5,\"1207\":1,\"1208\":2,\"1209\":1,\"1227\":1,\"1257\":4,\"1258\":1,\"1259\":1,\"1265\":1,\"1266\":1,\"1274\":1,\"1275\":3,\"1281\":1,\"1288\":2,\"1297\":2,\"1299\":1,\"1329\":1,\"1339\":1,\"1341\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1364\":1,\"1366\":2,\"1376\":10,\"1377\":1,\"1378\":2,\"1379\":3,\"1380\":2,\"1384\":2,\"1403\":1}}],[\"+固定参数\",{\"1\":{\"690\":1}}],[\"+x\",{\"1\":{\"108\":1}}],[\"+\",{\"1\":{\"74\":1,\"227\":4,\"260\":1,\"361\":1,\"368\":1,\"416\":1,\"469\":9,\"475\":1,\"503\":72,\"513\":9,\"555\":1,\"651\":1,\"722\":1,\"733\":1,\"735\":1,\"834\":1,\"839\":3,\"872\":1,\"929\":1,\"930\":1,\"932\":2,\"933\":2,\"947\":1,\"951\":2,\"998\":1,\"1003\":3,\"1024\":1,\"1094\":1,\"1180\":1,\"1187\":1,\"1194\":1,\"1198\":18,\"1202\":1,\"1207\":2,\"1208\":6,\"1257\":21,\"1259\":2,\"1272\":4,\"1273\":3,\"1274\":32,\"1275\":4,\"1276\":9,\"1280\":6,\"1281\":5,\"1282\":4,\"1286\":1,\"1287\":3,\"1288\":3,\"1292\":13,\"1298\":4,\"1299\":12,\"1300\":3,\"1303\":16,\"1307\":12,\"1313\":8,\"1314\":9,\"1331\":1,\"1352\":2,\"1353\":2,\"1354\":2,\"1376\":6,\"1378\":1,\"1379\":7,\"1385\":2,\"1390\":3,\"1391\":1,\"1393\":10,\"1394\":2,\"1395\":16,\"1399\":2,\"1400\":4,\"1403\":3}}],[\"同字典一样\",{\"1\":{\"944\":1}}],[\"同步处理\",{\"1\":{\"1163\":1}}],[\"同步接口\",{\"1\":{\"1161\":1}}],[\"同步锁介绍\",{\"0\":{\"1033\":1}}],[\"同步锁\",{\"1\":{\"1032\":1}}],[\"同步双方初始序列号\",{\"1\":{\"952\":1}}],[\"同步操作是指在发起一个操作后\",{\"1\":{\"898\":1}}],[\"同步\",{\"0\":{\"1161\":1},\"1\":{\"898\":2}}],[\"同步调用\",{\"1\":{\"652\":1}}],[\"同步周期\",{\"1\":{\"74\":1}}],[\"同一字母最多出现在一个片段中\",{\"1\":{\"1385\":1}}],[\"同一天\",{\"1\":{\"1292\":1}}],[\"同一时刻只允许一个线程执行python字节码\",{\"1\":{\"897\":1}}],[\"同一个根\",{\"1\":{\"1230\":1}}],[\"同一个行为具有多个不同表现形式或形态的能力\",{\"1\":{\"762\":1}}],[\"同一个对象的标签的\",{\"1\":{\"120\":1}}],[\"同一事务中后面的所有\",{\"1\":{\"478\":1}}],[\"同样使用二分查找法\",{\"1\":{\"1395\":1}}],[\"同样代表着背包大小为0的最小价值为0\",{\"1\":{\"1276\":1}}],[\"同样是符合题意的答案\",{\"1\":{\"1259\":1,\"1299\":1}}],[\"同样我们可以自己利用werkzeug实现一个简单的web服务\",{\"1\":{\"1064\":1}}],[\"同样可以实现动态的访问相应的对象\",{\"1\":{\"1053\":1}}],[\"同样\",{\"1\":{\"1029\":1}}],[\"同样需要注意第三方库的兼容性\",{\"1\":{\"666\":1}}],[\"同样也是获取最大公共子序列题目\",{\"1\":{\"1309\":1}}],[\"同样也是最方便实现队列的数据结构\",{\"1\":{\"908\":1}}],[\"同样也是返回match对象或none\",{\"1\":{\"895\":1}}],[\"同样也是一颗b+tree\",{\"1\":{\"413\":1}}],[\"同样也会加聚簇索引上的记录x锁\",{\"1\":{\"408\":1}}],[\"同样用户b要等用户a释放表a才能继续\",{\"1\":{\"407\":1}}],[\"同时还满足\",{\"1\":{\"1257\":1}}],[\"同时还要更新索引数据\",{\"1\":{\"507\":1,\"525\":1}}],[\"同时将\",{\"1\":{\"1208\":1}}],[\"同时可以基于协程实现线程隔离\",{\"1\":{\"1049\":1}}],[\"同时只可以由一个线程进行运行\",{\"1\":{\"1029\":1}}],[\"同时把\",{\"1\":{\"951\":1}}],[\"同时保证了线程安全\",{\"1\":{\"916\":1}}],[\"同时保证新旧\",{\"1\":{\"159\":1}}],[\"同时支持excel\",{\"1\":{\"797\":1}}],[\"同时我在工作中也会这么使用\",{\"1\":{\"776\":1}}],[\"同时airflow的多进程也会带来一些可能的问题\",{\"1\":{\"714\":1}}],[\"同时有一个指针一格一格的走\",{\"1\":{\"610\":1}}],[\"同时允许修改现有任务的属性\",{\"1\":{\"607\":1}}],[\"同时锁住数据\",{\"1\":{\"405\":1,\"482\":1}}],[\"同时针对不同的隔离级别\",{\"1\":{\"368\":1,\"475\":1}}],[\"同时更新数据时\",{\"1\":{\"301\":1}}],[\"同时这些新的变更操作也会被redis收集起来\",{\"1\":{\"261\":1}}],[\"同时存在两个版本都能接受流量\",{\"0\":{\"172\":1}}],[\"同时确保更新期间的任何时候运行中的\",{\"1\":{\"159\":1}}],[\"同时确保产品质量\",{\"1\":{\"19\":1}}],[\"同时执行\",{\"1\":{\"135\":1}}],[\"同时\",{\"1\":{\"120\":1,\"617\":1,\"626\":1,\"1280\":1,\"1292\":2}}],[\"同时也能更快地将修复应用到生产环境中\",{\"1\":{\"641\":1}}],[\"同时也支持定时任务\",{\"1\":{\"607\":1}}],[\"同时也是数据文件\",{\"1\":{\"414\":1}}],[\"同时也有助于建立一个可靠且可重复的交付流程\",{\"1\":{\"25\":1}}],[\"同时也强调了确保产品和服务质量的重要性\",{\"1\":{\"22\":1}}],[\"启用与禁用\",{\"1\":{\"756\":1}}],[\"启动所有任务\",{\"1\":{\"925\":1}}],[\"启动一个线程去修改这个对象\",{\"1\":{\"855\":1}}],[\"启动一个pod\",{\"1\":{\"117\":1}}],[\"启动4个worker进程\",{\"1\":{\"721\":1}}],[\"启动时可能耗尽内存\",{\"1\":{\"713\":1}}],[\"启动开销\",{\"1\":{\"710\":1}}],[\"启动新解释器\",{\"1\":{\"705\":1}}],[\"启动前打补丁\",{\"1\":{\"669\":1}}],[\"启动beat\",{\"1\":{\"662\":1}}],[\"启动worker\",{\"1\":{\"662\":1,\"722\":1}}],[\"启动命令\",{\"1\":{\"662\":1,\"664\":1}}],[\"启动celery\",{\"0\":{\"649\":1}}],[\"启动\",{\"1\":{\"561\":1}}],[\"启动需要花费很长的时间\",{\"1\":{\"264\":1}}],[\"启动的是job不是deploy\",{\"1\":{\"200\":1}}],[\"启动的这个新版本应用\",{\"1\":{\"171\":1}}],[\"启动滚动更新后\",{\"1\":{\"159\":1}}],[\"启动探针\",{\"1\":{\"146\":1,\"147\":1}}],[\"启动默认给分配的大小\",{\"1\":{\"136\":1}}],[\"启动后可选引用的\",{\"1\":{\"74\":1}}],[\"启示\",{\"1\":{\"42\":1,\"54\":1}}],[\"会觉得这个框架越来越好用\",{\"1\":{\"1108\":1}}],[\"会绑定给这个内部函数\",{\"1\":{\"992\":1}}],[\"会创建一个局部作用域\",{\"1\":{\"983\":1}}],[\"会发出一次http请求\",{\"1\":{\"962\":1}}],[\"会造成已经软删除的数据还会继续出现\",{\"1\":{\"878\":1}}],[\"会取出并移除栈顶元素print\",{\"1\":{\"856\":1}}],[\"会提供失败的表达式和所在位置的信息\",{\"1\":{\"756\":1}}],[\"会阻塞\",{\"1\":{\"652\":1}}],[\"会阻塞当前服务器\",{\"1\":{\"256\":1}}],[\"会阻止整个协程的事件循环\",{\"1\":{\"590\":1}}],[\"会抛出stopiteration异常\",{\"1\":{\"731\":1}}],[\"会抛出\",{\"1\":{\"572\":1}}],[\"会话id\",{\"1\":{\"549\":1}}],[\"会把需要进行\",{\"1\":{\"513\":1}}],[\"会如何处理\",{\"1\":{\"513\":1}}],[\"会使得问题变得复杂\",{\"1\":{\"1392\":1}}],[\"会使用\",{\"1\":{\"513\":1}}],[\"会使索引失效\",{\"1\":{\"421\":1}}],[\"会直接影响多表关联的顺序\",{\"1\":{\"512\":1}}],[\"会直接读取该行数\",{\"1\":{\"487\":1}}],[\"会产生全表扫描\",{\"1\":{\"499\":1}}],[\"会产生大量的日志\",{\"1\":{\"393\":1}}],[\"会遍历整个表\",{\"1\":{\"487\":1}}],[\"会忽略列值为空的数据\",{\"1\":{\"486\":1}}],[\"会生成\",{\"1\":{\"513\":1}}],[\"会生成一致性视图\",{\"1\":{\"477\":1}}],[\"会生成对应的undo\",{\"1\":{\"425\":1}}],[\"会隐式定义一个主键来作为聚簇索引\",{\"1\":{\"439\":1}}],[\"会选择一个唯一的非空索引代替\",{\"1\":{\"439\":1}}],[\"会带来多余的io和数据库对象加锁开销\",{\"1\":{\"434\":1}}],[\"会对redo\",{\"1\":{\"425\":1}}],[\"会慢一点\",{\"1\":{\"419\":1}}],[\"会走\",{\"1\":{\"416\":1}}],[\"会出现\",{\"1\":{\"463\":1}}],[\"会出现死锁\",{\"1\":{\"402\":2}}],[\"会出现hash冲突\",{\"1\":{\"316\":1}}],[\"会从ib\",{\"1\":{\"390\":1}}],[\"会丢失1秒钟的数据\",{\"1\":{\"388\":1}}],[\"会将该事务对应的undo\",{\"1\":{\"389\":1}}],[\"会将这个事务的id写到trx\",{\"1\":{\"369\":1}}],[\"会将页中的max\",{\"1\":{\"325\":1}}],[\"会去调用存储引擎接口\",{\"1\":{\"361\":1}}],[\"会计算\",{\"1\":{\"361\":1}}],[\"会依据成本最小原则来选择使用对应的索引\",{\"1\":{\"361\":1}}],[\"会依次启动所有的初始化容器\",{\"1\":{\"142\":1}}],[\"会帮我去使用他自己认为的最好的方式去优化这条\",{\"1\":{\"361\":1}}],[\"会显示join连接查询时\",{\"1\":{\"351\":1}}],[\"会根据能用索引的条件先搜索一遍再匹配无法使用索引的条件\",{\"1\":{\"351\":1}}],[\"会根据每个\",{\"1\":{\"114\":1}}],[\"会先将数据存在\",{\"1\":{\"469\":1}}],[\"会先将数据存在doublewrite\",{\"1\":{\"320\":1}}],[\"会先将驱动表读出来放到\",{\"1\":{\"349\":1}}],[\"会导致无休止的递归拷贝\",{\"1\":{\"894\":1}}],[\"会导致其他进程等待时间变长\",{\"1\":{\"507\":1,\"524\":1}}],[\"会导致笛卡尔积的循环计算\",{\"1\":{\"416\":1}}],[\"会导致索引失效\",{\"1\":{\"416\":3}}],[\"会导致全表锁定\",{\"1\":{\"405\":1}}],[\"会导致每个节点存储的key值减少\",{\"1\":{\"342\":1}}],[\"会导致写操作并发率低\",{\"1\":{\"308\":1}}],[\"会触发发生bgsave命令\",{\"1\":{\"256\":1}}],[\"会影响其他的元素\",{\"1\":{\"242\":1}}],[\"会有漏网之鱼\",{\"1\":{\"211\":1}}],[\"会立即开始杀死3个\",{\"1\":{\"181\":1}}],[\"会立即对新的\",{\"1\":{\"159\":1}}],[\"会拥有并管理它们的\",{\"1\":{\"177\":1}}],[\"会自动创建新的pod来替代\",{\"1\":{\"177\":1}}],[\"会消耗\",{\"1\":{\"162\":1}}],[\"会在应用上下文执行完毕后自动执行\",{\"1\":{\"1120\":1,\"1133\":1}}],[\"会在请求执行完毕后自动执行\",{\"1\":{\"1119\":1,\"1132\":1}}],[\"会在上下文中进行处理\",{\"1\":{\"848\":1,\"1009\":1}}],[\"会在取出索引的同时\",{\"1\":{\"456\":1}}],[\"会在\",{\"1\":{\"159\":1}}],[\"会在集群上创建包含容器的\",{\"1\":{\"115\":1}}],[\"会被杀死\",{\"1\":{\"158\":1}}],[\"会被打上未就绪的标签\",{\"1\":{\"147\":1}}],[\"会被包含在\",{\"1\":{\"117\":1}}],[\"会被自动更新\",{\"0\":{\"74\":1}}],[\"会持续监控这些实例\",{\"1\":{\"117\":1}}],[\"会拖慢反馈速度\",{\"1\":{\"56\":1}}],[\"貌似现在可以以数字开头了\",{\"1\":{\"73\":1}}],[\"实施严格的版本控制系统\",{\"1\":{\"641\":1}}],[\"实施智能告警\",{\"0\":{\"635\":1}}],[\"实时数据更新\",{\"1\":{\"1162\":1}}],[\"实时应用\",{\"1\":{\"1161\":1}}],[\"实时处理以及特定问题求解的需求\",{\"1\":{\"921\":1}}],[\"实时调度\",{\"1\":{\"921\":1}}],[\"实时调度与top\",{\"0\":{\"921\":1}}],[\"实时聊天服务器等\",{\"1\":{\"592\":1}}],[\"实时灾备\",{\"1\":{\"492\":1}}],[\"实时刷\",{\"1\":{\"388\":1}}],[\"实时写\",{\"1\":{\"388\":2}}],[\"实例化flask\",{\"1\":{\"1059\":1}}],[\"实例化对象的过程\",{\"0\":{\"1057\":1}}],[\"实例变量则属于局部作用域\",{\"1\":{\"985\":1}}],[\"实例很大的情况下\",{\"1\":{\"264\":1}}],[\"实例\",{\"0\":{\"203\":1}}],[\"实现小挂大\",{\"1\":{\"1227\":1}}],[\"实现为一个森林\",{\"1\":{\"1225\":1}}],[\"实现这个效果的前提就是\",{\"1\":{\"1052\":1}}],[\"实现可靠传输的方式之一\",{\"1\":{\"958\":1}}],[\"实现快速入队与出队\",{\"0\":{\"912\":1}}],[\"实现快速回滚\",{\"1\":{\"169\":1}}],[\"实现结果\",{\"0\":{\"882\":1}}],[\"实现方式\",{\"0\":{\"781\":1,\"789\":1,\"806\":1}}],[\"实现debug功能\",{\"0\":{\"735\":1}}],[\"实现分布式任务调度\",{\"1\":{\"714\":1}}],[\"实现跨进程对象共享\",{\"1\":{\"706\":1}}],[\"实现并发\",{\"1\":{\"665\":1}}],[\"实现异步io\",{\"1\":{\"659\":1}}],[\"实现高并发场景下的高效\",{\"1\":{\"600\":1}}],[\"实现高并发\",{\"1\":{\"592\":1}}],[\"实现轻量级的并发\",{\"1\":{\"590\":1,\"682\":1}}],[\"实现功能\",{\"1\":{\"553\":1}}],[\"实现类\",{\"1\":{\"534\":1}}],[\"实现\",{\"0\":{\"1085\":1},\"1\":{\"478\":1,\"706\":1,\"1071\":1}}],[\"实现了文档自动生成这个很重要的功能\",{\"1\":{\"1140\":1}}],[\"实现了以下改进\",{\"1\":{\"1089\":1}}],[\"实现了过滤掉软删除的数据\",{\"1\":{\"882\":1}}],[\"实现了线程隔离的栈结构\",{\"1\":{\"856\":1}}],[\"实现了这两个方法\",{\"1\":{\"792\":1}}],[\"实现了上下文所用算法的各种不同变体\",{\"1\":{\"776\":1}}],[\"实现了\",{\"1\":{\"469\":2}}],[\"实现了空间预分配和惰性空间释放两种优化策略\",{\"1\":{\"227\":1}}],[\"实现回滚\",{\"1\":{\"425\":1}}],[\"实现原子性的关键\",{\"1\":{\"425\":1}}],[\"实现事务的原子性\",{\"1\":{\"380\":1}}],[\"实现多版本的管理\",{\"1\":{\"368\":1,\"475\":1}}],[\"实现标准化和可重复化\",{\"1\":{\"52\":1}}],[\"实际就是将前置处理函数放到after\",{\"1\":{\"1062\":1}}],[\"实际上我们表示一个图一般使用邻接表或者邻接矩阵来实现\",{\"1\":{\"1217\":1}}],[\"实际上就是在操作local中的一个stack\",{\"1\":{\"856\":1}}],[\"实际上\",{\"1\":{\"769\":1}}],[\"实际上这个功能就是比较简单\",{\"1\":{\"735\":1}}],[\"实际上是先写入\",{\"1\":{\"388\":1}}],[\"实际使用的是\",{\"1\":{\"591\":1}}],[\"实际版本与潜在应用版本的差异\",{\"1\":{\"124\":1}}],[\"实际状态\",{\"1\":{\"113\":1}}],[\"实际的配置信息是放在data中的\",{\"1\":{\"73\":1}}],[\"使\",{\"1\":{\"1266\":1}}],[\"使每个元素\",{\"1\":{\"1266\":1}}],[\"使优先队列更加适应复杂的应用场景\",{\"1\":{\"920\":1}}],[\"使程序能够更有效地利用系统资源\",{\"1\":{\"898\":1}}],[\"使两者不必直接相互依赖\",{\"1\":{\"808\":1}}],[\"使你能够将程序的各个部分独立开来以便开发\",{\"1\":{\"800\":1}}],[\"使它们可以相互替换\",{\"1\":{\"775\":1}}],[\"使其调用\",{\"1\":{\"590\":1}}],[\"使其支持\",{\"1\":{\"588\":1}}],[\"使其更适合实现存储索引结构\",{\"1\":{\"343\":1}}],[\"使得路径上的数字总和为最小\",{\"1\":{\"1303\":1}}],[\"使得这\",{\"1\":{\"1282\":1}}],[\"使得两个子集的元素和相等\",{\"1\":{\"1274\":1}}],[\"使得结果图是一个有着n个节点的树\",{\"1\":{\"1230\":1}}],[\"使得\",{\"1\":{\"1225\":1,\"1289\":1}}],[\"使得算法可以独立于对象结构而变化\",{\"1\":{\"1177\":1}}],[\"使得开发者可以快速地进行各种操作\",{\"1\":{\"986\":1}}],[\"使得它们与\",{\"1\":{\"1377\":1}}],[\"使得它们可以相互协作\",{\"1\":{\"797\":1}}],[\"使得它们可以在运行时根据需要选择和替换\",{\"1\":{\"776\":1}}],[\"使得它的应用场景更加广泛\",{\"1\":{\"434\":1}}],[\"使得在with语句块中操作资源时\",{\"1\":{\"746\":1}}],[\"使得多线程在\",{\"1\":{\"590\":1,\"682\":1}}],[\"使得单一数据库\",{\"1\":{\"299\":1}}],[\"使得误判率增加\",{\"1\":{\"245\":1}}],[\"使得程序能够从该目录中查找文件\",{\"1\":{\"72\":1}}],[\"使之能跳到上一个节点或下一个节点\",{\"1\":{\"218\":1}}],[\"使用开区间还是闭区间\",{\"1\":{\"1403\":2}}],[\"使用二分查找法\",{\"1\":{\"1395\":1}}],[\"使用二分查找找到nums\",{\"1\":{\"1207\":1}}],[\"使用这两种取值公式都能取到中间元素的下标位置\",{\"1\":{\"1393\":1}}],[\"使用这套代码模版后相关代码只有10行内就可以完成一个增删改查的功能\",{\"1\":{\"860\":1}}],[\"使用第二个\",{\"1\":{\"1379\":1}}],[\"使用第一个\",{\"1\":{\"1379\":1}}],[\"使用小饼干来满足小胃口的孩子\",{\"0\":{\"1364\":1}}],[\"使用或|运算计算每位1对于结果的影响值\",{\"1\":{\"1339\":1}}],[\"使用邻接矩阵我们矩阵中存储权值即可\",{\"1\":{\"1219\":1}}],[\"使用邻接表\",{\"1\":{\"1219\":1}}],[\"使用getattr反射方式获取的callable对象\",{\"1\":{\"1188\":1}}],[\"使用数据库\",{\"1\":{\"1155\":1}}],[\"使用标准方法\",{\"1\":{\"1144\":1}}],[\"使用标签\",{\"1\":{\"120\":2}}],[\"使用20行代码实现使用传统视图100多行实现的增删改查的功能\",{\"1\":{\"1140\":1}}],[\"使用也是比较简单了\",{\"1\":{\"1124\":1}}],[\"使用锁可以让线程的切换变的有序\",{\"1\":{\"1031\":1}}],[\"使用长连接的方式改善了\",{\"1\":{\"975\":1}}],[\"使用del即可删除键值对\",{\"1\":{\"944\":1}}],[\"使用subtract\",{\"1\":{\"943\":1}}],[\"使用set\",{\"1\":{\"503\":1}}],[\"使用secret\",{\"1\":{\"80\":1}}],[\"使用另一个counter对象更新\",{\"1\":{\"943\":2}}],[\"使用另一个iterable对象更新\",{\"1\":{\"943\":2}}],[\"使用update\",{\"1\":{\"943\":1}}],[\"使用字符串的方法不是可以实现相同的功能么\",{\"1\":{\"941\":1}}],[\"使用asyncio\",{\"1\":{\"924\":1}}],[\"使用asyncio库进行异步操作\",{\"1\":{\"736\":1}}],[\"使用nlargest函数直接求解top\",{\"1\":{\"921\":1}}],[\"使用none作为停止信号\",{\"1\":{\"916\":1}}],[\"使用heapq求解top\",{\"1\":{\"921\":1}}],[\"使用heapq模块实现优先队列\",{\"0\":{\"919\":1}}],[\"使用task实例作为优先队列的元素\",{\"1\":{\"920\":1}}],[\"使用负优先级进行最小堆排序\",{\"1\":{\"919\":1}}],[\"使用list\",{\"1\":{\"908\":1}}],[\"使用主线程打印这个对象\",{\"1\":{\"855\":1}}],[\"使用主键\",{\"1\":{\"499\":1}}],[\"使用线程隔离和不适用线程隔离的区别\",{\"0\":{\"855\":1}}],[\"使用其他方法声明一个上下文管理器\",{\"0\":{\"849\":1,\"1010\":1}}],[\"使用队列就可以轻易的实现\",{\"1\":{\"837\":1,\"1001\":1}}],[\"使用装饰器实现缓存\",{\"0\":{\"835\":1,\"999\":1}}],[\"使用装饰器\",{\"0\":{\"783\":1}}],[\"使用模块\",{\"0\":{\"782\":1}}],[\"使用单例模式要做的两件事\",{\"1\":{\"763\":1}}],[\"使用单进程就能够实现同时处理多个客户端的连接\",{\"1\":{\"269\":1}}],[\"使用方按照这个契约来使用\",{\"1\":{\"762\":1}}],[\"使用方式\",{\"0\":{\"77\":1}}],[\"使用自定义上下文管理器\",{\"1\":{\"746\":1}}],[\"使用raise\",{\"1\":{\"744\":1}}],[\"使用yield语句暂停和恢复函数的执行\",{\"1\":{\"733\":1}}],[\"使用yaml测试探针机制\",{\"1\":{\"147\":1}}],[\"使用yaml文件\",{\"1\":{\"70\":1}}],[\"使用迭代器\",{\"1\":{\"732\":1}}],[\"使用生成器\",{\"1\":{\"733\":1}}],[\"使用生成器来实现debug功能\",{\"1\":{\"730\":1}}],[\"使用生成器实现debug\",{\"0\":{\"728\":1}}],[\"使用multiprocessing\",{\"1\":{\"716\":1}}],[\"使用mysql行级锁的两个前提\",{\"1\":{\"404\":1}}],[\"使用多进程并行执行多个任务实例\",{\"1\":{\"714\":1}}],[\"使用时应该再次对用户进行认证\",{\"1\":{\"698\":1}}],[\"使用定时任务\",{\"1\":{\"661\":1}}],[\"使用如grafana这样的可视化工具可以帮助创建直观易懂的仪表盘\",{\"1\":{\"634\":1}}],[\"使用默认的\",{\"1\":{\"579\":1}}],[\"使用连接进行操作\",{\"1\":{\"579\":1}}],[\"使用工具\",{\"1\":{\"552\":1}}],[\"使用具名数组\",{\"1\":{\"533\":1}}],[\"使用最有效的过滤条件\",{\"0\":{\"523\":1}}],[\"使用驱动表去关联其他表\",{\"1\":{\"512\":1}}],[\"使用命令\",{\"1\":{\"503\":1}}],[\"使用命令行方式\",{\"1\":{\"70\":1}}],[\"使用了\",{\"1\":{\"499\":1,\"1021\":1}}],[\"使用了连接缓存\",{\"1\":{\"351\":1}}],[\"使用聚簇索引的时候一次性可以将数据取出\",{\"1\":{\"441\":1}}],[\"使用的是非聚簇索引\",{\"1\":{\"440\":1}}],[\"使用案例\",{\"1\":{\"438\":1}}],[\"使用缓存的好处\",{\"1\":{\"431\":1}}],[\"使用json表函数\",{\"1\":{\"430\":1}}],[\"使用到了覆盖索引\",{\"1\":{\"415\":1}}],[\"使用普通索引\",{\"1\":{\"349\":1}}],[\"使用唯一索引\",{\"1\":{\"349\":1}}],[\"使用不了这一特性\",{\"1\":{\"264\":1}}],[\"使用新aof文件替换老文件\",{\"1\":{\"261\":1}}],[\"使用操作系统的多进程\",{\"1\":{\"257\":1}}],[\"使用空间\",{\"1\":{\"227\":1}}],[\"使用建议\",{\"0\":{\"213\":1,\"245\":1}}],[\"使用else语句\",{\"0\":{\"748\":1}}],[\"使用explain\",{\"1\":{\"408\":1}}],[\"使用extensions\",{\"1\":{\"198\":2}}],[\"使用envfrom一次性将所有的配置问价内容写到环境变量\",{\"1\":{\"73\":1}}],[\"使用batch\",{\"1\":{\"198\":1}}],[\"使用两种api组时定义的参数有所差异\",{\"1\":{\"198\":1}}],[\"使用场景\",{\"0\":{\"187\":1,\"191\":1,\"241\":1,\"443\":1},\"1\":{\"342\":1}}],[\"使用环境变量来设置参数\",{\"1\":{\"134\":1}}],[\"使用率的变化是否影响了告警渠道的选择\",{\"1\":{\"640\":1}}],[\"使用率\",{\"1\":{\"124\":1}}],[\"使用同样的配置\",{\"1\":{\"115\":1}}],[\"使用kubeadm引导集群\",{\"1\":{\"108\":1}}],[\"使用云提供商的负载均衡器向外部暴露服务\",{\"1\":{\"93\":1}}],[\"使用配置文件操作secret\",{\"0\":{\"80\":1}}],[\"使用\",{\"0\":{\"784\":1,\"872\":1,\"1169\":1,\"1170\":1},\"1\":{\"76\":1,\"116\":1,\"404\":1,\"442\":1,\"487\":1,\"499\":1,\"513\":1,\"533\":3,\"548\":1,\"550\":1,\"555\":1,\"574\":1,\"579\":1,\"592\":1,\"660\":1,\"661\":1,\"770\":1,\"879\":1,\"898\":1,\"1040\":2,\"1076\":1,\"1088\":1,\"1155\":1,\"1258\":1}}],[\"使用configmap步骤\",{\"0\":{\"72\":1}}],[\"使用挂载的方式\",{\"1\":{\"70\":1}}],[\"使用文件的方式\",{\"1\":{\"70\":1}}],[\"多线程\",{\"0\":{\"914\":1},\"2\":{\"1038\":1}}],[\"多态实例化\",{\"1\":{\"900\":1}}],[\"多对多关系配置\",{\"1\":{\"886\":1}}],[\"多条查询\",{\"1\":{\"862\":1}}],[\"多大的并发对于系统会有影响\",{\"0\":{\"813\":1}}],[\"多异常处理\",{\"0\":{\"743\":1}}],[\"多核\",{\"1\":{\"664\":1}}],[\"多进程实战\",{\"0\":{\"715\":1}}],[\"多进程日志需集中存储\",{\"1\":{\"714\":1}}],[\"多进程架构解析\",{\"0\":{\"714\":1}}],[\"多进程耗时\",{\"1\":{\"712\":1}}],[\"多进程计算时间对比\",{\"1\":{\"712\":1}}],[\"多进程的适用场景与避坑指南\",{\"0\":{\"723\":1}}],[\"多进程的典型应用场景与优化\",{\"0\":{\"719\":1}}],[\"多进程的优缺点\",{\"0\":{\"711\":1}}],[\"多进程的实现方式与性能对比\",{\"0\":{\"707\":1}}],[\"多进程的实现机制\",{\"0\":{\"705\":1}}],[\"多进程的底层实现与原理\",{\"0\":{\"703\":1}}],[\"多进程充分利用多核\",{\"1\":{\"668\":1}}],[\"多进程\",{\"1\":{\"664\":1},\"2\":{\"726\":1,\"727\":1}}],[\"多进程以及事件驱动模型下的任务并行执行\",{\"1\":{\"607\":1}}],[\"多样化的通知渠道\",{\"0\":{\"627\":1}}],[\"多使用类的组合\",{\"1\":{\"534\":1}}],[\"多表关联查询时\",{\"1\":{\"512\":1}}],[\"多版本链\",{\"0\":{\"476\":1},\"1\":{\"475\":1}}],[\"多版本并发控制\",{\"1\":{\"368\":1,\"475\":1}}],[\"多了或少了几行记录\",{\"1\":{\"425\":1}}],[\"多了复用统一监听事件\",{\"1\":{\"270\":1}}],[\"多出的数据就会存储在另外的溢出页中\",{\"1\":{\"326\":1}}],[\"多路\",{\"1\":{\"269\":1}}],[\"多路复用机制指内核一旦发现进程指定的一个或者多个io条件准备读取\",{\"1\":{\"269\":1}}],[\"多路复用机制\",{\"1\":{\"268\":1}}],[\"多路复用就是为了解决这个问题而出现\",{\"1\":{\"268\":1}}],[\"多级缓存模式\",{\"1\":{\"251\":1}}],[\"多\",{\"1\":{\"181\":1}}],[\"多次买卖一支股票\",{\"1\":{\"1292\":1}}],[\"多次交易\",{\"1\":{\"1292\":1}}],[\"多次更新操作\",{\"1\":{\"165\":1}}],[\"多次使用\",{\"1\":{\"46\":1}}],[\"多个视图可能共享逻辑\",{\"1\":{\"1142\":1}}],[\"多个\",{\"1\":{\"976\":1}}],[\"多个这样的事务执行后\",{\"1\":{\"408\":1}}],[\"多个读操作可以同时进行而不会互相影响\",{\"1\":{\"401\":1}}],[\"多个客户端连接\",{\"1\":{\"269\":1}}],[\"多个套接字\",{\"1\":{\"268\":1}}],[\"多个连接共用一个阻塞对象\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"多个微服务分层\",{\"1\":{\"120\":1}}],[\"多个程序版本\",{\"1\":{\"120\":1}}],[\"多个高可用分区\",{\"1\":{\"120\":1}}],[\"多个pod可以使用同一个configmap\",{\"1\":{\"72\":1}}],[\"多端口的service\",{\"0\":{\"90\":1}}],[\"编写一个函数\",{\"1\":{\"1258\":1}}],[\"编写代码就像建造一座房子\",{\"1\":{\"540\":1}}],[\"编写代码在pod中运行\",{\"1\":{\"71\":1}}],[\"编号为\",{\"1\":{\"1237\":1}}],[\"编辑距离\",{\"2\":{\"1316\":1}}],[\"编辑配置\",{\"1\":{\"503\":1}}],[\"编辑服务器上的资源\",{\"1\":{\"124\":1}}],[\"编辑secret\",{\"1\":{\"79\":1}}],[\"编译代码\",{\"1\":{\"40\":1}}],[\"gc\",{\"1\":{\"1102\":1}}],[\"got\",{\"0\":{\"1118\":1,\"1131\":1},\"1\":{\"1059\":1,\"1064\":2,\"1103\":1,\"1110\":2,\"1111\":1,\"1112\":1,\"1118\":1,\"1131\":1,\"1188\":2}}],[\"gof\",{\"1\":{\"769\":1}}],[\"go\",{\"1\":{\"569\":3}}],[\"guest\",{\"1\":{\"722\":1}}],[\"gunicorn\",{\"1\":{\"555\":1,\"721\":2,\"1164\":1,\"1171\":1}}],[\"guc\",{\"1\":{\"548\":1}}],[\"guignginx\",{\"1\":{\"81\":1}}],[\"globals\",{\"1\":{\"776\":2,\"844\":1,\"856\":1,\"986\":1,\"1050\":2,\"1059\":2}}],[\"globals=globals\",{\"1\":{\"758\":2}}],[\"global\",{\"1\":{\"503\":5,\"897\":1,\"985\":1,\"1033\":2}}],[\"given\",{\"1\":{\"1094\":1}}],[\"gil的存在也带来了一些限制和挑战\",{\"1\":{\"897\":1}}],[\"gil的引入可以追溯到python的早期设计\",{\"1\":{\"897\":1}}],[\"gil是python解释器中的一种机制\",{\"1\":{\"897\":1}}],[\"gil\",{\"1\":{\"590\":1,\"664\":1,\"682\":1,\"897\":1}}],[\"gis地理支持\",{\"1\":{\"430\":1}}],[\"githubusercontent\",{\"1\":{\"96\":1}}],[\"github\",{\"1\":{\"52\":1,\"553\":1,\"555\":1}}],[\"gitlab\",{\"1\":{\"42\":1,\"52\":1,\"662\":1},\"2\":{\"6\":1,\"7\":1}}],[\"gb\",{\"1\":{\"260\":1,\"725\":2}}],[\"grid\",{\"1\":{\"1303\":11,\"1352\":14,\"1353\":16,\"1354\":24}}],[\"greenlet\",{\"1\":{\"588\":1,\"590\":1,\"682\":1,\"844\":1,\"1049\":1,\"1051\":1}}],[\"green\",{\"1\":{\"563\":4,\"566\":3,\"567\":3,\"665\":1,\"666\":1}}],[\"graphdata\",{\"1\":{\"681\":1}}],[\"graph=true\",{\"1\":{\"567\":1}}],[\"graphmachine\",{\"1\":{\"567\":2}}],[\"graphviz\",{\"1\":{\"567\":1}}],[\"graph\",{\"1\":{\"567\":2,\"681\":3,\"1217\":2,\"1220\":3,\"1221\":26,\"1229\":11,\"1235\":6,\"1236\":22,\"1237\":11,\"1241\":11,\"1242\":10,\"1348\":3}}],[\"grafana等工具构建全面的监控体系\",{\"1\":{\"641\":1}}],[\"grafana还可以集成prometheus等监控系统\",{\"1\":{\"634\":1}}],[\"grafana\",{\"1\":{\"555\":1}}],[\"grant\",{\"1\":{\"494\":1}}],[\"grace\",{\"1\":{\"135\":1}}],[\"group2\",{\"1\":{\"1237\":1}}],[\"group1\",{\"1\":{\"1237\":1}}],[\"group\",{\"1\":{\"124\":1,\"349\":1,\"1040\":2}}],[\"g\",{\"1\":{\"108\":1,\"822\":1,\"831\":1,\"844\":1,\"849\":1,\"856\":2,\"1010\":1,\"1045\":4,\"1050\":3,\"1112\":1,\"1124\":4,\"1364\":8}}],[\"gpg\",{\"1\":{\"108\":2}}],[\"gpgkey=http\",{\"1\":{\"108\":1}}],[\"gpgcheck=0\",{\"1\":{\"108\":2}}],[\"gather\",{\"1\":{\"924\":1,\"925\":1,\"1040\":1,\"1049\":1}}],[\"gateway通常是服务器作为网关或代理时返回的错误码\",{\"1\":{\"967\":1}}],[\"gateway\",{\"1\":{\"93\":1,\"1161\":2}}],[\"gaplock\",{\"1\":{\"482\":1}}],[\"gaplock锁\",{\"1\":{\"405\":1}}],[\"gap\",{\"1\":{\"405\":1}}],[\"game\",{\"1\":{\"70\":3}}],[\"gevent\",{\"0\":{\"666\":1},\"1\":{\"588\":2,\"590\":3,\"591\":3,\"594\":3,\"595\":2,\"597\":2,\"599\":2,\"600\":3,\"666\":4,\"668\":1,\"669\":1,\"670\":1,\"678\":1,\"679\":1,\"680\":1,\"682\":2}}],[\"gender\",{\"1\":{\"533\":1,\"824\":8,\"825\":5}}],[\"gender=1\",{\"1\":{\"332\":1}}],[\"generate\",{\"1\":{\"862\":5,\"863\":2,\"872\":2,\"873\":6}}],[\"generated\",{\"1\":{\"736\":1}}],[\"generator1\",{\"1\":{\"1023\":2}}],[\"generator0\",{\"1\":{\"1023\":3}}],[\"generator\",{\"1\":{\"735\":2,\"736\":2,\"1021\":1,\"1022\":1,\"1024\":1}}],[\"general\",{\"1\":{\"334\":2}}],[\"generic\",{\"1\":{\"79\":1,\"1183\":1,\"1187\":1}}],[\"getting\",{\"1\":{\"1187\":4}}],[\"getcurrent\",{\"1\":{\"1049\":1,\"1051\":1}}],[\"getsizeof\",{\"1\":{\"1023\":2}}],[\"getattr\",{\"1\":{\"824\":2,\"825\":1,\"828\":1,\"849\":1,\"854\":1,\"856\":2,\"861\":2,\"862\":1,\"1010\":1,\"1049\":5,\"1050\":1,\"1061\":1,\"1063\":3,\"1094\":3,\"1102\":1,\"1103\":1,\"1188\":1,\"1189\":1}}],[\"getitem\",{\"1\":{\"824\":3,\"825\":1,\"827\":1,\"828\":3,\"849\":1,\"861\":1,\"892\":1,\"1010\":1}}],[\"getmembers\",{\"1\":{\"776\":1,\"1189\":1}}],[\"getprocessinfo\",{\"1\":{\"681\":1}}],[\"getprocessversionbyname\",{\"1\":{\"681\":1}}],[\"getprocessversionoption\",{\"1\":{\"681\":1}}],[\"getprocessnamespaceoption\",{\"1\":{\"681\":1}}],[\"getlogger\",{\"1\":{\"550\":1,\"660\":1}}],[\"get\",{\"1\":{\"73\":1,\"79\":1,\"96\":1,\"108\":2,\"117\":1,\"118\":1,\"124\":1,\"125\":10,\"162\":1,\"210\":1,\"529\":1,\"531\":1,\"542\":1,\"545\":1,\"548\":1,\"550\":1,\"552\":2,\"567\":2,\"597\":1,\"598\":2,\"652\":1,\"662\":3,\"713\":1,\"822\":2,\"831\":2,\"839\":1,\"849\":2,\"854\":1,\"856\":3,\"861\":2,\"862\":8,\"873\":2,\"879\":1,\"880\":2,\"881\":1,\"887\":4,\"915\":1,\"916\":1,\"924\":3,\"925\":2,\"1003\":1,\"1010\":2,\"1049\":10,\"1050\":4,\"1051\":2,\"1059\":1,\"1063\":3,\"1064\":4,\"1081\":2,\"1082\":2,\"1088\":1,\"1094\":6,\"1098\":2,\"1100\":3,\"1101\":2,\"1102\":2,\"1103\":1,\"1104\":2,\"1112\":1,\"1143\":1,\"1144\":1,\"1147\":2,\"1149\":2,\"1187\":6,\"1188\":5,\"1189\":4,\"1194\":4,\"1366\":5}}],[\"创建邻接表\",{\"1\":{\"1241\":1}}],[\"创建实例\",{\"1\":{\"1180\":1}}],[\"创建实例并测试\",{\"1\":{\"563\":1}}],[\"创建应用上下文\",{\"1\":{\"1100\":1}}],[\"创建应用程序实例后\",{\"1\":{\"117\":1}}],[\"创建请求上下文\",{\"1\":{\"1084\":1}}],[\"创建resquest处理函数\",{\"1\":{\"1065\":1}}],[\"创建rule\",{\"1\":{\"1063\":1}}],[\"创建事件循环\",{\"1\":{\"1040\":1}}],[\"创建共享的线程安全队列\",{\"1\":{\"916\":1}}],[\"创建singleton的两个实例\",{\"1\":{\"900\":1}}],[\"创建secret\",{\"1\":{\"79\":1}}],[\"创建序列化类\",{\"0\":{\"866\":1}}],[\"创建模型类\",{\"0\":{\"865\":1}}],[\"创建成功\",{\"1\":{\"862\":1}}],[\"创建子进程\",{\"1\":{\"705\":1}}],[\"创建falsk\",{\"0\":{\"679\":1}}],[\"创建数据库引擎\",{\"1\":{\"579\":1}}],[\"创建一个空的counter对象\",{\"1\":{\"941\":1,\"942\":1}}],[\"创建一个最大长度为3的deque\",{\"1\":{\"912\":1}}],[\"创建一个\",{\"1\":{\"648\":1}}],[\"创建一个sql线程\",{\"1\":{\"494\":1}}],[\"创建一个i\",{\"1\":{\"494\":1}}],[\"创建一个configmap对象或者使用现有的configmap对象\",{\"1\":{\"72\":1}}],[\"创建表结构时所指定的外键\",{\"1\":{\"425\":1}}],[\"创建\",{\"0\":{\"941\":1},\"1\":{\"200\":1,\"941\":1,\"1076\":1,\"1078\":1}}],[\"创建的所有\",{\"1\":{\"198\":1}}],[\"创建的所有的\",{\"1\":{\"198\":1}}],[\"创建的\",{\"1\":{\"197\":2}}],[\"创建新的rs\",{\"1\":{\"165\":1}}],[\"创建k8s集群中的一些对象\",{\"1\":{\"125\":2}}],[\"创建和部署\",{\"1\":{\"125\":1}}],[\"创建和运行容器等\",{\"1\":{\"114\":1}}],[\"创建yaml文件\",{\"1\":{\"80\":1}}],[\"创建configmap\",{\"1\":{\"73\":1}}],[\"创建configmap对象\",{\"1\":{\"73\":1}}],[\"创建configmap的方式\",{\"0\":{\"70\":1}}],[\"创建pod对象\",{\"1\":{\"73\":1}}],[\"创建pod对象使用configmap\",{\"1\":{\"73\":1}}],[\"创建pod绑定pvc\",{\"1\":{\"67\":1}}],[\"创建pvc\",{\"1\":{\"67\":1}}],[\"创建pv池\",{\"1\":{\"67\":1}}],[\"中继续搜索\",{\"1\":{\"1390\":2}}],[\"中因此返回\",{\"1\":{\"1390\":1}}],[\"中并且下标为\",{\"1\":{\"1390\":1}}],[\"中不存在相邻的两朵花\",{\"1\":{\"1376\":1}}],[\"中值为\",{\"1\":{\"1341\":2}}],[\"中得到\",{\"1\":{\"1314\":2}}],[\"中每个字符单独构成一个字符串\",{\"1\":{\"1300\":1}}],[\"中每一组都\",{\"1\":{\"1237\":1}}],[\"中所有字符构造\",{\"1\":{\"1300\":3}}],[\"中所定义的时间\",{\"1\":{\"200\":1}}],[\"中找出并返回总和为\",{\"1\":{\"1275\":1}}],[\"中出现的顺序排列\",{\"1\":{\"1266\":1}}],[\"中出现的子查询将被标记为\",{\"1\":{\"349\":1}}],[\"中唯一元素的个数\",{\"1\":{\"1266\":1}}],[\"中无重复元素\",{\"1\":{\"1230\":1}}],[\"中间有涉及到mid的取值问题\",{\"1\":{\"1395\":1}}],[\"中间数向下取整\",{\"1\":{\"1393\":1}}],[\"中间\",{\"1\":{\"1230\":1}}],[\"中间必须经过操作系统缓冲区\",{\"1\":{\"388\":1}}],[\"中被标记为\",{\"1\":{\"1220\":2}}],[\"中比它大的第一个元素\",{\"1\":{\"1207\":1}}],[\"中比较重要的字段有\",{\"1\":{\"477\":1}}],[\"中应插入的位置\",{\"1\":{\"1207\":1}}],[\"中等并发\",{\"1\":{\"1172\":1}}],[\"中等负载进程\",{\"1\":{\"725\":1}}],[\"中常用的事件循环实现是\",{\"1\":{\"899\":1}}],[\"中常见的几种\",{\"1\":{\"662\":1}}],[\"中for\",{\"0\":{\"893\":1}}],[\"中参数\",{\"1\":{\"847\":1,\"1009\":1}}],[\"中有一些功能类\",{\"1\":{\"799\":1}}],[\"中有一种日志叫做\",{\"1\":{\"494\":1}}],[\"中断连接时\",{\"1\":{\"679\":1}}],[\"中定义一个异步任务\",{\"1\":{\"651\":1}}],[\"中最长的字符串\",{\"1\":{\"1380\":1}}],[\"中最长的回文子串\",{\"1\":{\"1299\":1}}],[\"中最大的岛屿面积\",{\"1\":{\"1353\":1}}],[\"中最后出现的那个\",{\"1\":{\"1230\":1}}],[\"中最新的一条记录开始跟\",{\"1\":{\"477\":1}}],[\"中最小可管理单元\",{\"1\":{\"117\":1}}],[\"中哪些事务正在执行\",{\"1\":{\"477\":1}}],[\"中索引的常用数据结构有两种\",{\"1\":{\"461\":1}}],[\"中处理请求的线程在获取到请求以后获取\",{\"1\":{\"359\":1}}],[\"中只有\",{\"1\":{\"154\":1}}],[\"中包含一个\",{\"1\":{\"143\":1}}],[\"中复制\",{\"1\":{\"116\":1}}],[\"中的某些字符得到\",{\"1\":{\"1380\":1}}],[\"中的其他数字都出现两次\",{\"1\":{\"1340\":1}}],[\"中的整数\",{\"1\":{\"1309\":1}}],[\"中的前五个元素为\",{\"1\":{\"1265\":1}}],[\"中的前两个元素均为\",{\"1\":{\"1265\":1}}],[\"中的每个\",{\"1\":{\"1236\":1}}],[\"中的每个路径都需要有对应的路径类型\",{\"1\":{\"100\":1}}],[\"中的所有课程对\",{\"1\":{\"1241\":1}}],[\"中的所有元素是不重复的\",{\"1\":{\"1390\":1}}],[\"中的所有元素\",{\"1\":{\"1221\":1}}],[\"中的所有容器\",{\"1\":{\"143\":1}}],[\"中的一个对\",{\"1\":{\"1101\":1}}],[\"中的管道\",{\"1\":{\"977\":1}}],[\"中的迭代器就是一个惰性序列\",{\"1\":{\"893\":1}}],[\"中的数据有一个特点\",{\"1\":{\"513\":1}}],[\"中的页写入各个表的独立表空间文件中\",{\"1\":{\"469\":1}}],[\"中的值\",{\"1\":{\"198\":1}}],[\"中的资源\",{\"1\":{\"162\":1}}],[\"中的容器会在共同调度下\",{\"1\":{\"130\":1}}],[\"中的对象进行逻辑操作的一种分组原语\",{\"1\":{\"116\":1}}],[\"中的\",{\"1\":{\"115\":1,\"190\":1,\"1390\":1}}],[\"中运行一部分后端\",{\"1\":{\"89\":1}}],[\"中运行的容器化应用使用\",{\"1\":{\"69\":1}}],[\"中或其它集群中的服务\",{\"1\":{\"89\":1}}],[\"中\",{\"1\":{\"69\":1,\"74\":1,\"86\":1,\"112\":1,\"115\":1,\"120\":1,\"162\":2,\"227\":1,\"349\":1,\"482\":2,\"513\":1,\"578\":1,\"599\":1,\"662\":1,\"710\":5,\"784\":1,\"899\":1,\"958\":1,\"1021\":1,\"1314\":1,\"1339\":1,\"1384\":1}}],[\"中特定条目所要使用的路径\",{\"1\":{\"69\":1}}],[\"步骤\",{\"0\":{\"67\":1}}],[\"持有的等于上一次持有的\",{\"1\":{\"1292\":1}}],[\"持有\",{\"1\":{\"1292\":5}}],[\"持有股票的最大利润\",{\"1\":{\"1292\":2}}],[\"持有就是买入\",{\"1\":{\"1292\":1}}],[\"持久性\",{\"1\":{\"425\":3}}],[\"持久化支持\",{\"1\":{\"607\":1}}],[\"持久化到\",{\"1\":{\"388\":1}}],[\"持久化方式\",{\"2\":{\"266\":1}}],[\"持久化完成后会使用临时快照文件替换掉原来的rdb文件\",{\"1\":{\"257\":1}}],[\"持久化机制\",{\"0\":{\"255\":1}}],[\"持久的存储\",{\"1\":{\"191\":1}}],[\"持久卷申明\",{\"1\":{\"66\":1}}],[\"持久卷\",{\"1\":{\"66\":1}}],[\"持续优化流程和技术栈\",{\"1\":{\"641\":1}}],[\"持续集成这个部门干的不就是这件事吗\",{\"1\":{\"58\":1}}],[\"持续集成不仅是技术实践\",{\"1\":{\"58\":1}}],[\"持续集成是团队协作的\",{\"0\":{\"58\":1}}],[\"持续集成需与基础设施的自动化结合\",{\"1\":{\"57\":1}}],[\"持续集成的测试需在效率与覆盖之间取得平衡\",{\"1\":{\"56\":1}}],[\"持续集成的成败取决于流程与文化的结合\",{\"1\":{\"54\":1}}],[\"持续集成的挑战与实践启示\",{\"0\":{\"53\":1}}],[\"持续集成的自动化流程是关键\",{\"1\":{\"52\":1}}],[\"持续集成的核心原则是开发人员每天多次将代码集成到主干\",{\"1\":{\"50\":1}}],[\"持续集成的核心\",{\"0\":{\"50\":1}}],[\"持续集成迫使团队关注代码的可测试性\",{\"1\":{\"51\":1}}],[\"持续集成\",{\"0\":{\"49\":1},\"1\":{\"49\":1,\"553\":1,\"630\":1,\"641\":1}}],[\"持续交互中最重要的一点就是节省等待\",{\"1\":{\"46\":1}}],[\"持续交付依赖于实时\",{\"1\":{\"32\":1}}],[\"持续交付的\",{\"0\":{\"38\":1}}],[\"持续交付的真正价值\",{\"1\":{\"34\":1}}],[\"持续交付的落地\",{\"1\":{\"32\":1}}],[\"持续交付的失败\",{\"1\":{\"31\":1}}],[\"持续交付双环模型\",{\"1\":{\"30\":1}}],[\"持续交付绝不仅仅是一个技术方案或流程工具\",{\"1\":{\"30\":1}}],[\"持续交付不仅仅是工程师的事\",{\"0\":{\"30\":1}}],[\"持续交付是一面镜子\",{\"1\":{\"34\":1}}],[\"持续交付是组织进化的\",{\"0\":{\"34\":1}}],[\"持续交付是大家的事\",{\"0\":{\"29\":1},\"1\":{\"33\":1,\"34\":1,\"37\":1,\"46\":1}}],[\"持续交付是建立在\",{\"1\":{\"18\":1}}],[\"持续交付\",{\"1\":{\"18\":1}}],[\"持续交付2\",{\"1\":{\"18\":1,\"19\":1,\"23\":1,\"26\":1,\"30\":1,\"37\":1,\"46\":1}}],[\"持续交付中的探索验证环\",{\"0\":{\"17\":1}}],[\"持续改善文化的特点是\",{\"1\":{\"30\":1}}],[\"持续改善\",{\"1\":{\"30\":3}}],[\"持续分解问题\",{\"1\":{\"18\":1}}],[\"v\",{\"1\":{\"1198\":2,\"1221\":7,\"1236\":7}}],[\"verify\",{\"1\":{\"872\":1,\"873\":1}}],[\"version=none\",{\"1\":{\"1193\":1}}],[\"version=\",{\"1\":{\"1147\":1}}],[\"version=1\",{\"1\":{\"73\":1}}],[\"versions\",{\"1\":{\"124\":1}}],[\"version\",{\"1\":{\"73\":1,\"108\":1,\"124\":2,\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1,\"1193\":1,\"1194\":1}}],[\"vue\",{\"1\":{\"681\":1}}],[\"v2\",{\"1\":{\"555\":1}}],[\"volatile\",{\"1\":{\"212\":4}}],[\"vol\",{\"1\":{\"147\":2}}],[\"volumns\",{\"1\":{\"72\":1}}],[\"volumns下添加一个卷\",{\"1\":{\"72\":1}}],[\"volumedevices\",{\"1\":{\"133\":1}}],[\"volume\",{\"1\":{\"66\":2}}],[\"volumes\",{\"1\":{\"64\":1,\"67\":1,\"115\":2,\"147\":1}}],[\"volumemounts\",{\"1\":{\"64\":1,\"67\":1,\"72\":3,\"133\":1,\"135\":1,\"147\":1}}],[\"vqv7n\",{\"1\":{\"108\":1}}],[\"vs\",{\"0\":{\"607\":1,\"704\":1,\"1161\":1},\"1\":{\"108\":4,\"712\":1,\"898\":1}}],[\"visited是为了避免走回头路\",{\"1\":{\"1221\":1}}],[\"visited\",{\"1\":{\"1220\":5,\"1229\":3,\"1235\":6,\"1236\":5,\"1237\":5,\"1241\":4,\"1242\":4,\"1348\":3,\"1352\":6,\"1353\":5,\"1354\":14}}],[\"visit\",{\"1\":{\"1180\":8,\"1182\":7,\"1183\":6,\"1194\":10}}],[\"visitor>`\",{\"1\":{\"1183\":2,\"1194\":1}}],[\"visitor\",{\"1\":{\"1177\":1,\"1180\":11,\"1183\":6,\"1194\":2}}],[\"via\",{\"1\":{\"799\":1}}],[\"vim\",{\"1\":{\"503\":1}}],[\"vi等\",{\"1\":{\"385\":1}}],[\"view登录界面\",{\"0\":{\"873\":1}}],[\"views\",{\"0\":{\"1141\":1,\"1143\":1},\"1\":{\"681\":1,\"1142\":1,\"1143\":1}}],[\"view判断记录的某个版本是否可见的方式总结\",{\"1\":{\"371\":1}}],[\"view中比较重要的字段有4个\",{\"1\":{\"371\":1}}],[\"view简单理解就是对数据在每个时刻的状态拍成照片记录下来\",{\"1\":{\"371\":1}}],[\"view是\",{\"1\":{\"371\":1}}],[\"view的生成策略不同\",{\"1\":{\"368\":1}}],[\"view原则来决定数据是否显示\",{\"1\":{\"368\":1}}],[\"view来实现管理\",{\"1\":{\"368\":1}}],[\"view\",{\"0\":{\"478\":1,\"862\":1},\"1\":{\"368\":1,\"371\":1,\"475\":4,\"477\":6,\"478\":3,\"843\":1,\"849\":1,\"862\":1,\"888\":2,\"1010\":1,\"1059\":4,\"1060\":1,\"1063\":14,\"1079\":1,\"1094\":25,\"1103\":6}}],[\"vi\",{\"1\":{\"96\":1,\"1229\":4}}],[\"v0\",{\"1\":{\"96\":2}}],[\"val\",{\"1\":{\"746\":1,\"1198\":2,\"1229\":3,\"1235\":5,\"1236\":5,\"1237\":5,\"1241\":2,\"1242\":2,\"1265\":6,\"1384\":2}}],[\"validpalindrome\",{\"1\":{\"1298\":1}}],[\"validpath\",{\"1\":{\"1229\":2}}],[\"validate\",{\"1\":{\"873\":1,\"1187\":1,\"1193\":1,\"1194\":1}}],[\"validators\",{\"1\":{\"873\":1}}],[\"valid\",{\"1\":{\"573\":1}}],[\"value==division\",{\"1\":{\"847\":1,\"848\":2,\"1009\":3}}],[\"value==\",{\"1\":{\"847\":1,\"1009\":1}}],[\"value=1\",{\"1\":{\"482\":6}}],[\"values\",{\"1\":{\"839\":2,\"1003\":2,\"1094\":5,\"1384\":7}}],[\"valueerror\",{\"1\":{\"744\":1,\"749\":1,\"753\":2,\"754\":2,\"758\":1,\"862\":1,\"986\":1,\"1094\":1,\"1188\":2,\"1189\":1}}],[\"value>\",{\"1\":{\"461\":1}}],[\"value\",{\"1\":{\"134\":1,\"461\":1,\"469\":1,\"482\":2,\"503\":8,\"513\":1,\"681\":7,\"689\":1,\"706\":5,\"717\":3,\"732\":2,\"758\":1,\"839\":3,\"844\":3,\"847\":4,\"849\":2,\"854\":3,\"856\":3,\"861\":2,\"862\":6,\"873\":1,\"879\":2,\"983\":3,\"984\":2,\"985\":2,\"1003\":3,\"1009\":4,\"1010\":2,\"1049\":6,\"1050\":7,\"1059\":2,\"1088\":2,\"1103\":3,\"1124\":6,\"1137\":1,\"1272\":7,\"1273\":4,\"1300\":2}}],[\"value2\",{\"1\":{\"119\":1,\"120\":1,\"984\":2}}],[\"value1\",{\"1\":{\"119\":1,\"120\":1,\"1081\":2}}],[\"valuefrom\",{\"1\":{\"73\":7}}],[\"variable\",{\"1\":{\"469\":1,\"503\":8,\"513\":1}}],[\"variables\",{\"1\":{\"334\":6,\"469\":1,\"503\":8,\"513\":1,\"1048\":1}}],[\"varbinary\",{\"1\":{\"323\":1}}],[\"var\",{\"1\":{\"73\":1,\"503\":3,\"1074\":4,\"1081\":6,\"1082\":2,\"1085\":2,\"1088\":5}}],[\"v1的spec\",{\"1\":{\"198\":1}}],[\"v1时\",{\"1\":{\"198\":1}}],[\"v1beta1的spec\",{\"1\":{\"198\":1}}],[\"v1beta1时\",{\"1\":{\"198\":2}}],[\"v1beta1\",{\"1\":{\"198\":1,\"203\":1}}],[\"v1和extensions\",{\"1\":{\"198\":1}}],[\"v1\",{\"1\":{\"64\":1,\"67\":5,\"73\":3,\"80\":1,\"81\":2,\"88\":1,\"90\":1,\"93\":2,\"101\":1,\"108\":8,\"135\":1,\"136\":1,\"147\":1,\"165\":8,\"197\":1}}],[\"k+1\",{\"1\":{\"1292\":2}}],[\"kw\",{\"1\":{\"1059\":4,\"1183\":1,\"1187\":14}}],[\"kwargs\",{\"1\":{\"533\":3,\"757\":2,\"784\":3,\"833\":2,\"834\":2,\"839\":4,\"849\":4,\"863\":4,\"880\":1,\"900\":1,\"932\":2,\"933\":2,\"997\":2,\"998\":2,\"1003\":4,\"1010\":4,\"1057\":1,\"1112\":1}}],[\"k\",{\"0\":{\"1365\":1},\"1\":{\"921\":3,\"1187\":5,\"1257\":4,\"1266\":6,\"1289\":4,\"1292\":14,\"1300\":12,\"1313\":1,\"1365\":9}}],[\"k问题\",{\"1\":{\"921\":2}}],[\"k问题解决\",{\"0\":{\"921\":1}}],[\"kargs\",{\"1\":{\"783\":2}}],[\"kpi\",{\"1\":{\"625\":1}}],[\"kill\",{\"1\":{\"717\":1}}],[\"kibana\",{\"1\":{\"555\":1}}],[\"kind\",{\"1\":{\"64\":1,\"67\":5,\"73\":3,\"80\":1,\"81\":1,\"88\":1,\"90\":1,\"93\":2,\"101\":1,\"135\":1,\"136\":1,\"147\":1,\"197\":1,\"203\":1}}],[\"ken\",{\"1\":{\"349\":1}}],[\"keyboardinterrupt\",{\"1\":{\"1194\":1}}],[\"keyword``\",{\"1\":{\"1188\":1}}],[\"keywords\",{\"1\":{\"1187\":4}}],[\"keywordcreator\",{\"1\":{\"1187\":2}}],[\"keywordcreator使用library和name创建所用的关键字\",{\"1\":{\"1187\":1}}],[\"keyword\",{\"1\":{\"1182\":10,\"1183\":2,\"1187\":9,\"1188\":10,\"1194\":2}}],[\"keyerror\",{\"1\":{\"854\":3,\"986\":1,\"1049\":3,\"1050\":2}}],[\"key是线程的唯一id号\",{\"1\":{\"853\":1}}],[\"key=lambda\",{\"1\":{\"1209\":1,\"1365\":1,\"1380\":3,\"1384\":1}}],[\"key=true\",{\"1\":{\"828\":1,\"861\":1,\"879\":1}}],[\"key=configure\",{\"1\":{\"70\":1}}],[\"keys\",{\"1\":{\"349\":1,\"824\":2,\"825\":1,\"827\":1,\"828\":1,\"849\":1,\"902\":1,\"1010\":1}}],[\"key值互不相同\",{\"1\":{\"340\":1}}],[\"key为记录的键值\",{\"1\":{\"340\":1}}],[\"key2\",{\"1\":{\"119\":1,\"120\":1,\"853\":1}}],[\"key1\",{\"1\":{\"119\":1,\"120\":1,\"853\":1}}],[\"key\",{\"1\":{\"73\":3,\"108\":2,\"120\":1,\"249\":1,\"340\":1,\"349\":6,\"405\":8,\"413\":2,\"449\":2,\"461\":2,\"482\":6,\"828\":2,\"839\":7,\"849\":6,\"861\":9,\"862\":9,\"872\":2,\"879\":4,\"1003\":7,\"1010\":6,\"1049\":3,\"1059\":3,\"1061\":4,\"1094\":1,\"1198\":1,\"1300\":1}}],[\"kustomize\",{\"1\":{\"124\":1}}],[\"kuboard\",{\"1\":{\"120\":1}}],[\"kubenetes\",{\"1\":{\"120\":1}}],[\"kubeconfig=\",{\"1\":{\"108\":1}}],[\"kubectl\",{\"1\":{\"70\":3,\"73\":4,\"79\":5,\"80\":1,\"81\":1,\"96\":1,\"108\":7,\"117\":3,\"118\":2,\"120\":1,\"125\":38,\"155\":2,\"162\":1,\"165\":11,\"198\":1,\"202\":1,\"555\":1}}],[\"kubeadm\",{\"1\":{\"108\":4}}],[\"kubelet\",{\"1\":{\"74\":3,\"108\":4,\"114\":1}}],[\"kubernetes中的\",{\"1\":{\"196\":1}}],[\"kubernetes中内建了很多controller\",{\"1\":{\"176\":1}}],[\"kubernetes中为容器提供了两个\",{\"1\":{\"135\":1}}],[\"kubernetes系统创建的对象放在此名称空间下\",{\"1\":{\"118\":1}}],[\"kubernetes通过对应的\",{\"1\":{\"113\":1}}],[\"kubernetes将其数据以kubernetes对象的形式通过\",{\"1\":{\"112\":1}}],[\"kubernetes对象指的是kubernetes系统的持久化实体\",{\"1\":{\"112\":1}}],[\"kubernetes不会修改\",{\"1\":{\"87\":1}}],[\"kubernetes\",{\"0\":{\"1411\":1},\"1\":{\"73\":8,\"76\":1,\"86\":2,\"87\":1,\"88\":1,\"89\":2,\"90\":2,\"93\":5,\"96\":1,\"99\":1,\"101\":1,\"108\":9,\"111\":1,\"113\":3,\"114\":3,\"116\":2,\"117\":3,\"118\":2,\"119\":2,\"120\":2,\"124\":1,\"130\":1,\"135\":3,\"144\":1,\"147\":1,\"169\":1,\"203\":1,\"555\":1}}],[\"kube\",{\"1\":{\"73\":1,\"108\":14,\"114\":1,\"118\":2,\"125\":2}}],[\"k8s服务\",{\"1\":{\"124\":1}}],[\"k8s里面操作的资源实体就是k8s的对象\",{\"1\":{\"112\":1}}],[\"k8s对象\",{\"0\":{\"112\":1}}],[\"k8s的所有基本环境全部完成\",{\"1\":{\"108\":1}}],[\"k8s的存储\",{\"0\":{\"62\":1}}],[\"k8s\",{\"1\":{\"96\":1,\"101\":1,\"107\":1,\"108\":12,\"111\":1,\"115\":2,\"117\":3,\"125\":2},\"2\":{\"82\":1,\"103\":1,\"109\":1,\"110\":1,\"121\":1,\"126\":1,\"137\":1,\"149\":1,\"173\":1,\"182\":1,\"192\":1,\"204\":1}}],[\"hypercorn\",{\"1\":{\"1164\":1,\"1171\":1}}],[\"hs256\",{\"1\":{\"872\":2}}],[\"hsrwp\",{\"1\":{\"108\":1}}],[\"hindex1\",{\"1\":{\"1403\":3}}],[\"hindex\",{\"1\":{\"1403\":1}}],[\"hijhklij\",{\"1\":{\"1385\":2}}],[\"hi\",{\"1\":{\"1209\":2}}],[\"high\",{\"1\":{\"654\":1,\"1403\":1}}],[\"hierarchicalmachine\",{\"1\":{\"569\":2}}],[\"hierarchical\",{\"1\":{\"569\":1}}],[\"history\",{\"1\":{\"125\":2,\"165\":2}}],[\"hdc\",{\"1\":{\"408\":6}}],[\"h\",{\"0\":{\"1403\":1},\"1\":{\"210\":1,\"262\":1,\"941\":2,\"945\":1,\"1258\":6,\"1403\":11}}],[\"hpa\",{\"0\":{\"167\":1}}],[\"happen\",{\"1\":{\"1188\":2}}],[\"had\",{\"1\":{\"849\":1,\"1010\":1}}],[\"has\",{\"1\":{\"799\":1,\"1059\":2,\"1182\":2,\"1194\":2,\"1331\":3}}],[\"hasattr\",{\"1\":{\"776\":1,\"784\":1,\"827\":3,\"844\":1,\"849\":1,\"861\":2,\"862\":4,\"879\":1,\"1010\":1,\"1050\":1}}],[\"hash表\",{\"1\":{\"314\":1,\"420\":1}}],[\"hash索引底层的数据结构是散列表\",{\"1\":{\"314\":1,\"420\":1}}],[\"hash的是实现方式之一\",{\"0\":{\"220\":1}}],[\"hash\",{\"0\":{\"459\":1,\"460\":1,\"461\":1},\"1\":{\"108\":1,\"312\":1,\"460\":16,\"461\":3,\"462\":1,\"463\":2,\"1384\":3},\"2\":{\"1387\":1}}],[\"handling\",{\"1\":{\"1103\":1}}],[\"handler\",{\"1\":{\"805\":2,\"806\":18,\"1059\":2,\"1060\":1,\"1103\":2,\"1194\":2}}],[\"handlers\",{\"1\":{\"270\":1,\"662\":1,\"776\":1,\"805\":1,\"1059\":1}}],[\"handle\",{\"1\":{\"776\":6,\"806\":10,\"862\":15,\"1094\":1,\"1098\":2,\"1100\":1,\"1103\":1,\"1104\":1,\"1111\":1,\"1112\":1,\"1187\":1}}],[\"hangzhou\",{\"1\":{\"96\":1,\"108\":4}}],[\"height\",{\"1\":{\"533\":2,\"1377\":11}}],[\"head\",{\"1\":{\"1063\":1,\"1094\":2}}],[\"headers\",{\"1\":{\"1166\":2,\"1167\":1}}],[\"header\",{\"0\":{\"694\":1},\"1\":{\"693\":1}}],[\"headless\",{\"1\":{\"92\":1}}],[\"heapify\",{\"1\":{\"920\":1}}],[\"heapq本身不直接支持传入自定义比较函数\",{\"1\":{\"920\":1}}],[\"heapq\",{\"1\":{\"919\":3,\"920\":4,\"921\":2}}],[\"heappop\",{\"1\":{\"919\":2,\"920\":1}}],[\"heappush\",{\"1\":{\"919\":2,\"920\":2}}],[\"heap\",{\"1\":{\"324\":3,\"609\":1}}],[\"help=true\",{\"1\":{\"1194\":1}}],[\"helper\",{\"1\":{\"1094\":1,\"1280\":3}}],[\"help\",{\"1\":{\"125\":1,\"986\":1}}],[\"hello\",{\"1\":{\"63\":1,\"134\":1,\"135\":1,\"165\":2,\"203\":3,\"542\":1,\"941\":2,\"943\":4,\"944\":1,\"945\":1,\"946\":1,\"1166\":1,\"1167\":1}}],[\"httpexception\",{\"1\":{\"1100\":1,\"1103\":1}}],[\"http3\",{\"0\":{\"974\":1,\"977\":1}}],[\"http2\",{\"0\":{\"974\":1}}],[\"http1\",{\"0\":{\"974\":1}}],[\"http和https区别\",{\"0\":{\"971\":1,\"973\":1}}],[\"http缓存技术\",{\"0\":{\"968\":1}}],[\"http常见的状态码\",{\"0\":{\"967\":1}}],[\"http是什么\",{\"0\":{\"966\":1}}],[\"http网络协议\",{\"0\":{\"965\":1}}],[\"http会立即将tcp连接断开\",{\"1\":{\"962\":1}}],[\"http会通过tcp建立起一个到服务器的连接通道\",{\"1\":{\"962\":1}}],[\"http协议是建立在tcp协议基础之上的\",{\"1\":{\"962\":1}}],[\"http协议\",{\"0\":{\"962\":1}}],[\"http请求的成功与否直接影响用户体验\",{\"1\":{\"631\":1}}],[\"httpbin\",{\"1\":{\"597\":1}}],[\"httpget\",{\"1\":{\"147\":2}}],[\"http\",{\"0\":{\"597\":1,\"688\":1,\"975\":1,\"976\":1},\"1\":{\"90\":1,\"95\":2,\"97\":1,\"101\":2,\"108\":2,\"147\":2,\"592\":1,\"665\":1,\"686\":1,\"698\":1,\"827\":3,\"966\":2,\"967\":1,\"971\":2,\"975\":1,\"977\":8,\"1112\":1,\"1143\":1,\"1144\":2,\"1149\":1,\"1161\":1,\"1162\":4,\"1167\":3,\"1172\":2},\"2\":{\"979\":1,\"980\":1}}],[\"https\",{\"1\":{\"87\":1,\"90\":1,\"95\":1,\"96\":1,\"97\":1,\"108\":2,\"597\":1,\"924\":1,\"925\":3,\"971\":1}}],[\"https=443\",{\"1\":{\"73\":1}}],[\"html\",{\"1\":{\"64\":3,\"67\":3,\"147\":9,\"827\":2,\"1124\":4}}],[\"hours\",{\"1\":{\"1180\":4}}],[\"hourly\",{\"1\":{\"1180\":4}}],[\"holds\",{\"1\":{\"1040\":1}}],[\"how\",{\"1\":{\"776\":1,\"844\":1}}],[\"how=very\",{\"1\":{\"70\":1}}],[\"hobbies\",{\"1\":{\"533\":2}}],[\"hobby\",{\"1\":{\"504\":3}}],[\"horizontalpodautoscaler\",{\"1\":{\"176\":1}}],[\"hook\",{\"1\":{\"135\":1}}],[\"host=static\",{\"1\":{\"1059\":3}}],[\"host=flaskconfig\",{\"1\":{\"680\":1}}],[\"host=10\",{\"1\":{\"73\":3}}],[\"hostpath\",{\"1\":{\"147\":2}}],[\"hosts\",{\"1\":{\"107\":1}}],[\"hostname\",{\"1\":{\"107\":3}}],[\"hostnamectl\",{\"1\":{\"107\":1}}],[\"hostname=configmap\",{\"1\":{\"73\":1}}],[\"host\",{\"1\":{\"97\":4,\"147\":1,\"504\":1,\"680\":1,\"1059\":11,\"1064\":10}}],[\"home=\",{\"1\":{\"73\":1}}],[\"homepage\",{\"1\":{\"1\":1}}],[\"home\",{\"1\":{\"1\":2}}],[\"写错了很容易造成死循环\",{\"1\":{\"1394\":1}}],[\"写成区间形式就是\",{\"1\":{\"1393\":2}}],[\"写一个函数搜索\",{\"1\":{\"1390\":1}}],[\"写又会遇到很多问题\",{\"1\":{\"1389\":1}}],[\"写时复制\",{\"1\":{\"705\":1}}],[\"写失效\",{\"0\":{\"466\":1},\"2\":{\"472\":1}}],[\"写工作负载\",{\"1\":{\"430\":1}}],[\"写锁\",{\"1\":{\"401\":1}}],[\"写满时则回溯到第一个文件\",{\"1\":{\"390\":1}}],[\"写到一定大小会切换到下一个\",{\"1\":{\"390\":1}}],[\"写入到\",{\"1\":{\"388\":1}}],[\"写入\",{\"1\":{\"388\":1}}],[\"写入一个测试文件\",{\"1\":{\"63\":1}}],[\"写操作有加锁解决方案\",{\"1\":{\"374\":1}}],[\"写\",{\"1\":{\"374\":3}}],[\"写回了redis\",{\"1\":{\"283\":1}}],[\"写了自动化就是devops了吗\",{\"1\":{\"30\":1}}],[\"m+1\",{\"1\":{\"1308\":3,\"1309\":1}}],[\"must\",{\"1\":{\"1063\":1,\"1094\":2,\"1189\":1}}],[\"multi\",{\"1\":{\"862\":5}}],[\"multiple\",{\"1\":{\"844\":1,\"1040\":1,\"1050\":1}}],[\"multiprocessing\",{\"0\":{\"708\":1},\"1\":{\"705\":1,\"706\":1,\"708\":1,\"712\":1,\"713\":2,\"716\":1,\"717\":2,\"720\":1,\"897\":1}}],[\"msg\",{\"1\":{\"1045\":6}}],[\"msg=token\",{\"1\":{\"873\":1}}],[\"mp\",{\"1\":{\"705\":2}}],[\"mv\",{\"1\":{\"368\":1,\"475\":1}}],[\"mvcc的过程\",{\"1\":{\"374\":1}}],[\"mvcc的核心就是\",{\"1\":{\"368\":1}}],[\"mvcc\",{\"0\":{\"366\":1,\"367\":1,\"475\":1},\"1\":{\"308\":1,\"368\":1,\"371\":1,\"373\":1,\"380\":4,\"475\":2,\"477\":1,\"478\":1,\"482\":2},\"2\":{\"365\":1,\"480\":1}}],[\"m阶的b\",{\"1\":{\"338\":1}}],[\"m\",{\"1\":{\"323\":2,\"326\":1,\"338\":1,\"371\":1,\"477\":2,\"499\":1,\"513\":4,\"1202\":7,\"1274\":7,\"1303\":27,\"1307\":10,\"1308\":3,\"1309\":3,\"1313\":4,\"1314\":3,\"1352\":7,\"1353\":10,\"1354\":3}}],[\"mbr\",{\"0\":{\"395\":1}}],[\"mb\",{\"1\":{\"227\":7,\"260\":1,\"725\":2}}],[\"mbignum=bpi\",{\"1\":{\"197\":1}}],[\"meatball\",{\"1\":{\"806\":1}}],[\"meth\",{\"1\":{\"1057\":1}}],[\"method是它父类的\",{\"1\":{\"1188\":2}}],[\"method也是父类的\",{\"1\":{\"1188\":1}}],[\"method=\",{\"1\":{\"1094\":2}}],[\"methods\",{\"1\":{\"1063\":16,\"1094\":17}}],[\"methods=methods\",{\"1\":{\"1063\":1,\"1094\":2}}],[\"methods=\",{\"1\":{\"822\":1,\"831\":1,\"849\":1,\"873\":1,\"1010\":1,\"1063\":1,\"1094\":1}}],[\"method\",{\"1\":{\"705\":1,\"862\":1,\"1094\":3,\"1103\":1,\"1187\":4,\"1188\":15,\"1189\":2}}],[\"meta\",{\"1\":{\"334\":1,\"866\":1,\"881\":4,\"887\":3}}],[\"metadata\",{\"1\":{\"64\":2,\"67\":6,\"73\":3,\"80\":1,\"81\":1,\"88\":1,\"90\":1,\"93\":2,\"101\":1,\"118\":1,\"119\":2,\"120\":1,\"135\":1,\"136\":1,\"147\":1,\"156\":1,\"197\":1,\"203\":1}}],[\"memoization\",{\"1\":{\"929\":4}}],[\"memory显式管理\",{\"1\":{\"718\":1}}],[\"memory直接操作内存\",{\"1\":{\"716\":1}}],[\"memory=512mi\",{\"1\":{\"165\":1}}],[\"memory\",{\"1\":{\"136\":2,\"210\":1,\"716\":2,\"725\":6}}],[\"memcpy\",{\"1\":{\"469\":1}}],[\"merge当查询条件使用了多个索引时\",{\"1\":{\"349\":1}}],[\"merge\",{\"1\":{\"349\":2}}],[\"message=message\",{\"1\":{\"863\":1}}],[\"message=\",{\"1\":{\"862\":3,\"863\":1,\"1045\":6}}],[\"message\",{\"0\":{\"1123\":1,\"1136\":1},\"1\":{\"134\":2,\"679\":4,\"681\":10,\"751\":2,\"863\":1,\"882\":1,\"1110\":2,\"1123\":1,\"1136\":1,\"1147\":1,\"1194\":2}}],[\"missingnumber\",{\"1\":{\"1331\":1,\"1335\":1}}],[\"mixin\",{\"1\":{\"1143\":1}}],[\"mixed\",{\"0\":{\"395\":2}}],[\"mid的取值问题\",{\"0\":{\"1393\":1},\"1\":{\"1391\":1}}],[\"mid+1\",{\"1\":{\"1390\":1}}],[\"mid\",{\"1\":{\"1390\":16,\"1391\":5,\"1393\":6,\"1394\":6}}],[\"mid=\",{\"1\":{\"1390\":1}}],[\"middle分别指的是什么\",{\"1\":{\"1403\":2}}],[\"middle+1\",{\"1\":{\"1395\":1}}],[\"middle\",{\"1\":{\"1379\":9,\"1395\":23,\"1399\":6,\"1400\":8,\"1403\":9}}],[\"middleware\",{\"1\":{\"1057\":1}}],[\"midnight或者0\",{\"1\":{\"613\":1}}],[\"minpathsum\",{\"1\":{\"1303\":1}}],[\"min=0\",{\"1\":{\"1150\":1}}],[\"minutes=10\",{\"1\":{\"662\":1}}],[\"min\",{\"1\":{\"260\":1,\"262\":3,\"324\":2,\"371\":3,\"477\":1,\"478\":2,\"609\":1,\"725\":1,\"986\":1,\"1202\":2,\"1276\":1,\"1303\":4,\"1377\":2}}],[\"minreadyseconds\",{\"0\":{\"161\":1},\"1\":{\"153\":1,\"161\":1}}],[\"minimal\",{\"1\":{\"101\":1}}],[\"mirror\",{\"1\":{\"108\":1}}],[\"mirrors\",{\"1\":{\"108\":5}}],[\"most\",{\"0\":{\"946\":1},\"1\":{\"755\":1,\"946\":2}}],[\"monitor\",{\"1\":{\"1194\":2}}],[\"mongoengine\",{\"1\":{\"1155\":1}}],[\"mongodb\",{\"1\":{\"607\":1}}],[\"month\",{\"1\":{\"776\":3}}],[\"monkeyhandler\",{\"1\":{\"806\":1}}],[\"monkey\",{\"0\":{\"586\":1,\"588\":1,\"589\":1,\"593\":1},\"1\":{\"588\":1,\"590\":1,\"591\":2,\"594\":2,\"595\":2,\"597\":1,\"600\":1,\"669\":2,\"680\":2,\"682\":2,\"806\":1,\"1380\":3}}],[\"moving\",{\"1\":{\"569\":9,\"570\":5}}],[\"modify\",{\"1\":{\"1258\":1}}],[\"modifiers\",{\"1\":{\"1194\":2}}],[\"mod\",{\"1\":{\"1164\":1,\"1171\":1,\"1183\":2,\"1194\":1}}],[\"module\",{\"1\":{\"1100\":1,\"1189\":15}}],[\"modules\",{\"1\":{\"108\":7,\"1189\":6}}],[\"mode=\",{\"1\":{\"679\":1}}],[\"modelmodifier\",{\"1\":{\"1194\":1}}],[\"modelobject\",{\"1\":{\"1183\":1}}],[\"model=self\",{\"1\":{\"563\":1,\"565\":1,\"566\":1}}],[\"model\",{\"1\":{\"545\":1,\"662\":1,\"849\":1,\"861\":3,\"862\":1,\"865\":1,\"866\":1,\"879\":2,\"881\":4,\"886\":2,\"887\":4,\"888\":1,\"1010\":1,\"1147\":4,\"1150\":4,\"1183\":2,\"1194\":2}}],[\"models\",{\"1\":{\"542\":2,\"545\":2,\"662\":1,\"843\":2,\"873\":1,\"887\":1,\"888\":1}}],[\"mode语句\",{\"1\":{\"405\":1}}],[\"mode\",{\"1\":{\"373\":1,\"404\":1,\"1194\":1}}],[\"modprobe\",{\"1\":{\"108\":6}}],[\"mount1\",{\"1\":{\"135\":1}}],[\"mountpath\",{\"1\":{\"64\":1,\"67\":1,\"72\":1,\"135\":1,\"147\":2}}],[\"mount\",{\"1\":{\"63\":1}}],[\"mwyyzdflmmu2n2rm\",{\"1\":{\"80\":1}}],[\"myclass\",{\"1\":{\"1015\":2}}],[\"mynumbers\",{\"1\":{\"1015\":2}}],[\"myresource\",{\"1\":{\"847\":4,\"848\":1,\"1009\":5}}],[\"myproject\",{\"1\":{\"648\":1}}],[\"myd\",{\"1\":{\"334\":2}}],[\"myiter\",{\"1\":{\"1015\":6}}],[\"myi\",{\"1\":{\"334\":2}}],[\"myi索引文件\",{\"1\":{\"308\":1}}],[\"myisam存储了数据的准确行数\",{\"1\":{\"487\":1}}],[\"myisam引擎\",{\"1\":{\"487\":1}}],[\"myisam适合静态数据的查询场景\",{\"1\":{\"434\":1}}],[\"myisam可以没有\",{\"1\":{\"414\":1}}],[\"myisam索引文件和数据文件是分离的\",{\"1\":{\"414\":1}}],[\"myisam的索引方式也叫做\",{\"1\":{\"413\":1}}],[\"myisam中索引检索的算法为首先按照b+tree搜索算法搜索索引\",{\"1\":{\"413\":1}}],[\"myisamb+tree索引结构\",{\"0\":{\"413\":1}}],[\"myisam和memory存储引擎采用的表级锁\",{\"1\":{\"400\":1}}],[\"myisam\",{\"0\":{\"309\":1},\"1\":{\"311\":1,\"334\":5,\"440\":2},\"2\":{\"329\":1}}],[\"myisam表对应三个文件\",{\"1\":{\"308\":1}}],[\"myisam使用表锁\",{\"1\":{\"308\":1}}],[\"myisam使用非聚集索引\",{\"1\":{\"308\":1}}],[\"myisam支持表级锁\",{\"1\":{\"308\":1}}],[\"myisam不支持事务和外键\",{\"1\":{\"308\":1}}],[\"mysingleton\",{\"1\":{\"782\":2}}],[\"mysql>\",{\"1\":{\"469\":1,\"503\":11,\"513\":2}}],[\"mysql分区表的实现要优于pg的基于继承表的分区实现\",{\"1\":{\"434\":1}}],[\"mysql采用索引组织表\",{\"1\":{\"433\":1,\"434\":1}}],[\"mysql缓存也是不起作用的\",{\"1\":{\"431\":1}}],[\"mysql缓存在分库分表环境下是不起作用的\",{\"1\":{\"431\":1}}],[\"mysql缓存的限制\",{\"1\":{\"431\":1}}],[\"mysql基本没有手段灵活的管理缓存失效和生效\",{\"1\":{\"431\":1}}],[\"mysql5\",{\"1\":{\"431\":1,\"455\":1}}],[\"mysql8\",{\"0\":{\"430\":1}}],[\"mysql和pg的异同\",{\"0\":{\"428\":1}}],[\"mysql事务\",{\"0\":{\"424\":1},\"2\":{\"427\":1}}],[\"mysql只能使用b+tree索引做覆盖索引\",{\"1\":{\"415\":1}}],[\"mysql官方对索引的定义为\",{\"1\":{\"412\":1}}],[\"mysql索引\",{\"0\":{\"411\":1},\"2\":{\"423\":1}}],[\"mysql锁机制\",{\"0\":{\"398\":1}}],[\"mysql日志\",{\"2\":{\"397\":1}}],[\"mysql日志类型\",{\"0\":{\"377\":1}}],[\"mysql的优化器较简单\",{\"1\":{\"434\":1}}],[\"mysql的存储引擎插件化机制\",{\"1\":{\"433\":1,\"434\":1}}],[\"mysql的binlog有几种日志格式\",{\"0\":{\"391\":1}}],[\"mysql的体系\",{\"0\":{\"330\":1}}],[\"mysql会在取出索引的同时\",{\"1\":{\"420\":1}}],[\"mysql会根据执行的sql语句选择写入模式\",{\"1\":{\"395\":1}}],[\"mysql会先记录更新前的数据到undo\",{\"1\":{\"379\":1}}],[\"mysql会为每个记录默认的添加一些列\",{\"1\":{\"325\":1}}],[\"mysql读取undo\",{\"1\":{\"373\":1}}],[\"mysql驱动\",{\"0\":{\"357\":1}}],[\"mysql选择的查询算法\",{\"1\":{\"351\":1}}],[\"mysql调优\",{\"2\":{\"347\":1,\"353\":1,\"376\":1,\"397\":1,\"410\":1}}],[\"mysqld\",{\"1\":{\"334\":1,\"503\":1}}],[\"mysql存储引擎是插件式的\",{\"1\":{\"333\":1}}],[\"mysql中事务的特性\",{\"0\":{\"425\":1}}],[\"mysql中的undo\",{\"1\":{\"389\":1}}],[\"mysql中sql是如何解析的\",{\"1\":{\"360\":1}}],[\"mysql中无法利用索引完成的排序操作称为\",{\"1\":{\"351\":1}}],[\"mysql中是以页为基本单位\",{\"1\":{\"326\":1}}],[\"mysql中有一个哈希表数据结构\",{\"1\":{\"319\":1}}],[\"mysql支持一些变长的数据类型\",{\"1\":{\"323\":1}}],[\"mysql在主从同步时也会有延迟的风险\",{\"1\":{\"301\":1}}],[\"mysql是被a更新的新值\",{\"1\":{\"283\":1}}],[\"mysql等长期的容器和一些批处理容器\",{\"1\":{\"198\":1}}],[\"mysql等阻塞式的\",{\"1\":{\"198\":1}}],[\"mysql\",{\"0\":{\"332\":1,\"361\":1,\"429\":1,\"432\":1,\"434\":1,\"1413\":1},\"1\":{\"118\":1,\"278\":4,\"334\":1,\"349\":5,\"358\":6,\"359\":1,\"360\":1,\"361\":6,\"383\":1,\"388\":1,\"416\":1,\"425\":1,\"455\":1,\"456\":1,\"461\":1,\"477\":1,\"482\":1,\"494\":1,\"503\":6,\"511\":1,\"513\":4,\"579\":1},\"2\":{\"305\":1,\"328\":1,\"335\":1,\"336\":1,\"346\":1,\"352\":1,\"364\":1,\"375\":1,\"396\":1,\"409\":1,\"422\":1,\"426\":1,\"435\":1,\"436\":1,\"444\":1,\"452\":1,\"457\":1,\"458\":1,\"464\":1,\"471\":1,\"479\":1,\"483\":1,\"489\":1,\"495\":1,\"500\":1,\"508\":1,\"515\":1,\"526\":1}}],[\"mysecret\",{\"1\":{\"80\":1}}],[\"myapp\",{\"1\":{\"88\":1,\"90\":1,\"93\":2,\"721\":1}}],[\"my\",{\"1\":{\"73\":7,\"81\":2,\"88\":1,\"90\":1,\"93\":2,\"125\":8,\"334\":1,\"503\":2,\"529\":1,\"542\":1,\"555\":3,\"579\":1,\"660\":1,\"732\":6,\"855\":8,\"894\":1,\"985\":2,\"1081\":6,\"1088\":5}}],[\"make\",{\"1\":{\"1059\":2,\"1100\":1,\"1103\":2}}],[\"marshal\",{\"1\":{\"1147\":1}}],[\"marshmallow\",{\"0\":{\"876\":1},\"1\":{\"878\":1,\"880\":1,\"887\":2},\"2\":{\"884\":1}}],[\"mar\",{\"1\":{\"1112\":1}}],[\"martin\",{\"1\":{\"557\":2}}],[\"map和view\",{\"1\":{\"1094\":1}}],[\"map中的有endpoint\",{\"1\":{\"1094\":1}}],[\"map中\",{\"1\":{\"1063\":1}}],[\"mapping\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"mapper\",{\"1\":{\"118\":1}}],[\"map\",{\"1\":{\"708\":1,\"712\":1,\"720\":1,\"1059\":14,\"1060\":1,\"1063\":3,\"1094\":6}}],[\"maindevice\",{\"1\":{\"881\":1}}],[\"maindeviceschema\",{\"1\":{\"881\":2}}],[\"main\",{\"1\":{\"680\":1,\"706\":1,\"718\":2,\"736\":2,\"776\":2,\"799\":1,\"849\":1,\"855\":2,\"881\":2,\"924\":2,\"925\":2,\"986\":1,\"992\":1,\"1010\":1,\"1033\":1,\"1049\":2,\"1057\":1,\"1059\":1,\"1064\":1,\"1094\":1,\"1112\":1,\"1124\":3,\"1147\":1,\"1194\":2}}],[\"machineerror\",{\"1\":{\"572\":2}}],[\"machines\",{\"1\":{\"569\":1}}],[\"machine\",{\"1\":{\"560\":1,\"563\":3,\"565\":3,\"566\":2,\"567\":2,\"574\":1}}],[\"mask\",{\"1\":{\"324\":4}}],[\"master需要首先确保数据完整性\",{\"1\":{\"264\":1}}],[\"master使用aof\",{\"1\":{\"264\":1}}],[\"master\",{\"1\":{\"73\":1,\"114\":3,\"117\":3,\"200\":1,\"278\":2}}],[\"maxarea\",{\"1\":{\"1377\":1}}],[\"maxareaofisland\",{\"1\":{\"1353\":1}}],[\"maxuncrossedlines\",{\"1\":{\"1309\":1}}],[\"maxunavailable\",{\"1\":{\"159\":3,\"166\":1}}],[\"maxprofit\",{\"1\":{\"1292\":6}}],[\"maxenvelopes\",{\"1\":{\"1209\":1}}],[\"maximalsquare\",{\"1\":{\"1202\":1}}],[\"max=150\",{\"1\":{\"1150\":1}}],[\"maxlen=3\",{\"1\":{\"912\":2}}],[\"maxsizeslices\",{\"1\":{\"1282\":1}}],[\"maxsize\",{\"1\":{\"839\":1,\"1003\":1}}],[\"maxsize=128\",{\"1\":{\"839\":1,\"930\":1,\"1003\":1}}],[\"maxsurge\",{\"1\":{\"159\":3,\"166\":1}}],[\"max\",{\"1\":{\"371\":3,\"477\":1,\"478\":2,\"578\":2,\"579\":1,\"658\":1,\"725\":1,\"776\":1,\"986\":1,\"1194\":12,\"1198\":2,\"1202\":2,\"1207\":3,\"1208\":4,\"1272\":1,\"1273\":4,\"1274\":3,\"1275\":1,\"1280\":8,\"1281\":7,\"1282\":2,\"1286\":3,\"1287\":2,\"1288\":2,\"1289\":1,\"1292\":27,\"1299\":10,\"1303\":8,\"1307\":4,\"1308\":4,\"1309\":2,\"1313\":3,\"1353\":1,\"1377\":1,\"1385\":1}}],[\"maxmemory是bytes字节类型\",{\"1\":{\"210\":1}}],[\"maxmemory\",{\"1\":{\"210\":2}}],[\"man\",{\"1\":{\"1297\":1}}],[\"many=true\",{\"1\":{\"862\":1,\"881\":3,\"887\":1}}],[\"manger\",{\"1\":{\"806\":2}}],[\"manualselector含义正好相反\",{\"1\":{\"198\":1}}],[\"manualselector设置为true\",{\"1\":{\"198\":1}}],[\"manualselector\",{\"1\":{\"198\":2}}],[\"managedfile\",{\"1\":{\"746\":2}}],[\"management\",{\"1\":{\"124\":1,\"332\":1}}],[\"managers\",{\"1\":{\"849\":1,\"1010\":1}}],[\"manager\",{\"1\":{\"108\":2,\"679\":5,\"706\":1,\"1040\":2}}],[\"manifests\",{\"1\":{\"108\":1,\"144\":1}}],[\"matrix\",{\"1\":{\"1202\":13,\"1203\":10,\"1217\":6}}],[\"math\",{\"1\":{\"986\":1}}],[\"match\",{\"1\":{\"1100\":1,\"1189\":1}}],[\"matches\",{\"1\":{\"1094\":1}}],[\"matching=subdomain\",{\"1\":{\"1059\":1}}],[\"matching=host\",{\"1\":{\"1059\":4}}],[\"matching\",{\"1\":{\"1059\":11}}],[\"match方法是从字符串的起始位置进行正则表达式匹配\",{\"1\":{\"895\":1}}],[\"matchlabels\",{\"1\":{\"64\":1,\"67\":1}}],[\"matter\",{\"1\":{\"1\":1}}],[\"mkdir\",{\"1\":{\"63\":2,\"67\":3,\"108\":2,\"935\":4,\"936\":4}}],[\"eccbbbbdec\",{\"1\":{\"1385\":1}}],[\"echo\",{\"1\":{\"63\":2,\"107\":1,\"108\":7,\"134\":1,\"135\":3,\"203\":1}}],[\"eg\",{\"1\":{\"1111\":1}}],[\"eval\",{\"1\":{\"986\":1}}],[\"evenoddbit\",{\"1\":{\"1341\":1}}],[\"even\",{\"1\":{\"1341\":2}}],[\"event事件\",{\"0\":{\"1035\":1}}],[\"eventloop\",{\"1\":{\"899\":1}}],[\"eventlet\",{\"0\":{\"665\":1},\"1\":{\"659\":1,\"665\":3,\"666\":2,\"668\":1,\"669\":2,\"670\":1,\"678\":2}}],[\"event\",{\"1\":{\"898\":1,\"899\":1,\"1032\":1,\"1035\":1,\"1040\":1}}],[\"events\",{\"1\":{\"561\":1}}],[\"every\",{\"1\":{\"661\":1}}],[\"everysec\",{\"1\":{\"260\":3}}],[\"established\",{\"1\":{\"951\":2}}],[\"either\",{\"1\":{\"843\":1}}],[\"each\",{\"1\":{\"1050\":1}}],[\"eat\",{\"1\":{\"806\":3}}],[\"eager=false\",{\"1\":{\"654\":1}}],[\"eht\",{\"1\":{\"799\":1}}],[\"ehcached等\",{\"1\":{\"431\":1}}],[\"eetpada\",{\"1\":{\"799\":1}}],[\"embedded\",{\"1\":{\"1187\":2}}],[\"employee\",{\"1\":{\"1180\":18}}],[\"empty\",{\"1\":{\"856\":2,\"925\":1,\"1194\":3}}],[\"emit\",{\"1\":{\"681\":1}}],[\"email\",{\"1\":{\"548\":2,\"828\":2,\"843\":1,\"872\":2,\"873\":1}}],[\"email=<你的邮箱地址>\",{\"1\":{\"81\":1}}],[\"edges\",{\"1\":{\"1229\":13,\"1230\":11}}],[\"edge\",{\"1\":{\"681\":2,\"1229\":4,\"1237\":2,\"1241\":2}}],[\"edit\",{\"1\":{\"79\":1,\"108\":1,\"124\":1,\"165\":1}}],[\"elle\",{\"1\":{\"1300\":1}}],[\"elble\",{\"1\":{\"1300\":1}}],[\"elements\",{\"0\":{\"945\":1},\"1\":{\"945\":2}}],[\"elevator\",{\"1\":{\"569\":6}}],[\"elmessage\",{\"1\":{\"681\":1}}],[\"elasticsearch\",{\"1\":{\"555\":1}}],[\"elk\",{\"1\":{\"555\":1}}],[\"elif\",{\"1\":{\"533\":1,\"790\":1,\"856\":1,\"880\":1,\"1049\":1,\"1064\":1,\"1188\":2,\"1198\":2,\"1208\":1,\"1227\":1,\"1257\":1,\"1288\":1,\"1289\":1,\"1366\":3,\"1376\":3,\"1390\":1,\"1399\":1}}],[\"else语义不明确\",{\"1\":{\"748\":1}}],[\"else子句与try\",{\"1\":{\"748\":1}}],[\"else\",{\"0\":{\"747\":1},\"1\":{\"533\":4,\"653\":1,\"681\":1,\"735\":1,\"748\":1,\"758\":2,\"776\":2,\"806\":7,\"849\":1,\"856\":1,\"862\":3,\"863\":1,\"902\":1,\"1010\":1,\"1049\":2,\"1050\":1,\"1063\":1,\"1064\":2,\"1094\":4,\"1100\":1,\"1187\":3,\"1188\":2,\"1194\":2,\"1198\":2,\"1207\":1,\"1209\":1,\"1227\":1,\"1230\":1,\"1235\":1,\"1236\":1,\"1237\":1,\"1257\":1,\"1259\":2,\"1272\":1,\"1289\":1,\"1299\":3,\"1303\":2,\"1308\":2,\"1309\":1,\"1313\":1,\"1314\":1,\"1329\":1,\"1339\":1,\"1366\":3,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":1,\"1384\":1,\"1390\":1,\"1393\":1,\"1395\":8,\"1399\":1,\"1400\":4,\"1403\":1}}],[\"else过多层嵌套\",{\"1\":{\"533\":1}}],[\"el7\",{\"1\":{\"108\":1}}],[\"epytext风格\",{\"1\":{\"531\":1}}],[\"epoll\",{\"1\":{\"268\":1,\"269\":1}}],[\"eq\",{\"1\":{\"349\":3,\"350\":1}}],[\"er分片\",{\"1\":{\"304\":1}}],[\"errorhandler\",{\"1\":{\"1155\":1}}],[\"error===division\",{\"1\":{\"848\":1,\"1009\":1}}],[\"error===\",{\"1\":{\"848\":1,\"1009\":1}}],[\"error或更高级别的方法记录异常\",{\"1\":{\"755\":1}}],[\"error\",{\"1\":{\"334\":2,\"550\":2,\"744\":2,\"757\":2,\"827\":1,\"849\":1,\"862\":5,\"872\":1,\"1010\":1,\"1059\":3,\"1060\":1,\"1094\":3,\"1098\":8,\"1100\":8,\"1103\":4,\"1104\":8,\"1188\":2,\"1194\":14}}],[\"err\",{\"1\":{\"73\":1,\"1187\":4,\"1194\":2}}],[\"eof\",{\"1\":{\"108\":7}}],[\"existing\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"exists\",{\"1\":{\"758\":1,\"1189\":1}}],[\"exit=exit\",{\"1\":{\"1194\":1}}],[\"exit=true\",{\"1\":{\"1194\":2}}],[\"exit\",{\"0\":{\"848\":1},\"1\":{\"746\":2,\"844\":2,\"847\":4,\"848\":1,\"1009\":6,\"1050\":3,\"1194\":2}}],[\"exclude\",{\"1\":{\"887\":1,\"1194\":1}}],[\"exc=\",{\"1\":{\"844\":1,\"1050\":1}}],[\"excel\",{\"1\":{\"797\":1}}],[\"except可以进行不同的操作\",{\"1\":{\"1194\":1}}],[\"except所捕获\",{\"1\":{\"848\":1,\"1009\":1}}],[\"except结构配合使用\",{\"1\":{\"748\":1}}],[\"except块\",{\"0\":{\"741\":1}}],[\"exception是一个信号\",{\"1\":{\"1118\":1,\"1131\":1}}],[\"exceptions\",{\"1\":{\"757\":2,\"827\":1,\"849\":2,\"872\":2,\"1010\":2}}],[\"exception\",{\"0\":{\"1118\":1,\"1131\":1},\"1\":{\"658\":1,\"751\":3,\"757\":1,\"758\":8,\"827\":1,\"833\":1,\"848\":1,\"849\":1,\"861\":1,\"862\":1,\"879\":1,\"986\":1,\"997\":1,\"1009\":1,\"1010\":1,\"1098\":3,\"1100\":3,\"1103\":6,\"1104\":2,\"1110\":2,\"1111\":2,\"1112\":2}}],[\"except\",{\"1\":{\"532\":2,\"550\":2,\"572\":1,\"658\":1,\"661\":1,\"742\":1,\"743\":1,\"744\":1,\"748\":1,\"749\":1,\"751\":1,\"753\":1,\"754\":1,\"755\":1,\"757\":1,\"758\":2,\"833\":1,\"848\":1,\"849\":2,\"854\":3,\"856\":1,\"861\":1,\"872\":2,\"879\":1,\"997\":1,\"1009\":1,\"1010\":2,\"1017\":1,\"1049\":6,\"1050\":2,\"1094\":1,\"1098\":2,\"1100\":3,\"1103\":2,\"1104\":2,\"1111\":1,\"1112\":1,\"1187\":2,\"1194\":4}}],[\"exc\",{\"1\":{\"532\":1,\"746\":3,\"755\":1,\"757\":1,\"844\":12,\"847\":12,\"848\":4,\"1009\":16,\"1050\":20,\"1098\":1,\"1100\":1,\"1102\":6,\"1104\":1}}],[\"extension\",{\"1\":{\"1194\":1}}],[\"extensions=settings\",{\"1\":{\"1194\":1}}],[\"extensions\",{\"1\":{\"567\":1,\"569\":1,\"570\":1,\"1059\":1}}],[\"external=\",{\"1\":{\"1094\":2}}],[\"external\",{\"1\":{\"1094\":9}}],[\"externalname将此服务别名化为指定的externalname\",{\"1\":{\"87\":1}}],[\"externalname\",{\"1\":{\"87\":1,\"93\":2}}],[\"extra类型\",{\"1\":{\"351\":1}}],[\"extra主要指标\",{\"0\":{\"351\":1}}],[\"extra\",{\"1\":{\"349\":1,\"351\":1,\"1187\":5}}],[\"execution\",{\"1\":{\"1194\":3}}],[\"executor\",{\"1\":{\"709\":2}}],[\"execute\",{\"1\":{\"579\":1,\"847\":3,\"1009\":3,\"1194\":4}}],[\"exec\",{\"1\":{\"124\":1,\"125\":4,\"135\":2,\"147\":3,\"986\":1}}],[\"expect\",{\"1\":{\"1146\":1,\"1147\":1,\"1150\":1,\"1156\":1}}],[\"expectednums\",{\"1\":{\"1266\":3}}],[\"expected\",{\"1\":{\"1094\":1}}],[\"expiry=expiration\",{\"1\":{\"873\":1}}],[\"expiry\",{\"1\":{\"872\":1}}],[\"expiredsignatureerror\",{\"1\":{\"872\":2}}],[\"expires=date\",{\"1\":{\"689\":1}}],[\"expiration=7200\",{\"1\":{\"873\":2}}],[\"expiration\",{\"1\":{\"696\":1}}],[\"exp\",{\"1\":{\"696\":1,\"872\":1}}],[\"explain字段的解释\",{\"0\":{\"349\":1}}],[\"explain执行计划\",{\"0\":{\"348\":1}}],[\"explain\",{\"0\":{\"518\":1},\"1\":{\"124\":1,\"198\":1,\"202\":1,\"348\":1,\"351\":1,\"377\":1,\"415\":1,\"485\":3,\"499\":2,\"507\":1,\"518\":1},\"2\":{\"347\":1,\"353\":1,\"376\":1}}],[\"expose\",{\"1\":{\"124\":1,\"125\":3}}],[\"export\",{\"1\":{\"108\":1}}],[\"exportfs\",{\"1\":{\"63\":1}}],[\"exports\",{\"1\":{\"63\":1}}],[\"examined\",{\"1\":{\"504\":2}}],[\"example\",{\"1\":{\"93\":1,\"101\":1,\"136\":1,\"742\":1,\"746\":1,\"925\":3,\"1063\":1,\"1094\":1}}],[\"exact\",{\"1\":{\"100\":2}}],[\"enumerate\",{\"1\":{\"1385\":1}}],[\"enums\",{\"1\":{\"873\":1}}],[\"ensure\",{\"1\":{\"1050\":2,\"1103\":6,\"1111\":1,\"1112\":1}}],[\"enqueue\",{\"1\":{\"908\":1}}],[\"enough\",{\"1\":{\"844\":1,\"1050\":1}}],[\"encode\",{\"1\":{\"872\":1}}],[\"encoder\",{\"1\":{\"827\":1}}],[\"encoding和entry\",{\"1\":{\"219\":1}}],[\"endpoint是flask中提出来的一个概念\",{\"1\":{\"1094\":1}}],[\"endpoint的集合\",{\"1\":{\"1063\":1}}],[\"endpoint\",{\"0\":{\"1092\":1,\"1094\":1},\"1\":{\"1063\":16,\"1094\":30,\"1103\":2,\"1124\":2}}],[\"endpoint=\",{\"1\":{\"1059\":2}}],[\"ended\",{\"1\":{\"911\":1,\"1194\":1}}],[\"end\",{\"1\":{\"832\":2,\"996\":2,\"1102\":1,\"1182\":3,\"1194\":1,\"1385\":5,\"1395\":3,\"1400\":2}}],[\"end=\",{\"1\":{\"799\":2,\"806\":2}}],[\"endswith\",{\"1\":{\"776\":1}}],[\"engine\",{\"1\":{\"578\":3,\"579\":4,\"861\":4,\"879\":3}}],[\"engines\",{\"0\":{\"333\":1}}],[\"entered\",{\"1\":{\"566\":2}}],[\"enter\",{\"1\":{\"563\":1,\"566\":2,\"570\":3,\"680\":1,\"746\":2,\"844\":1,\"847\":4,\"1009\":4,\"1050\":2}}],[\"entry\",{\"1\":{\"218\":1,\"1183\":2,\"1194\":1}}],[\"entry的长度和\",{\"1\":{\"218\":1}}],[\"entrypoint\",{\"1\":{\"135\":2}}],[\"enncoding\",{\"1\":{\"219\":1}}],[\"enforcing\",{\"1\":{\"108\":1}}],[\"envelopes\",{\"1\":{\"1209\":13}}],[\"environment\",{\"1\":{\"1059\":2}}],[\"environ\",{\"1\":{\"1057\":2,\"1064\":4,\"1078\":1,\"1084\":2,\"1098\":7,\"1100\":11,\"1102\":1,\"1104\":6,\"1166\":1}}],[\"envfrom\",{\"1\":{\"73\":2,\"133\":1}}],[\"env\",{\"1\":{\"73\":4,\"133\":1,\"134\":1,\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1,\"1193\":3}}],[\"enabled\",{\"1\":{\"1188\":2,\"1194\":2}}],[\"enabled=1\",{\"1\":{\"108\":1}}],[\"enable\",{\"1\":{\"63\":2,\"108\":2,\"662\":2}}],[\"e\",{\"1\":{\"63\":1,\"532\":2,\"550\":2,\"572\":2,\"658\":1,\"743\":2,\"751\":3,\"753\":2,\"754\":2,\"755\":3,\"757\":3,\"776\":1,\"833\":2,\"848\":2,\"849\":2,\"861\":2,\"879\":2,\"941\":1,\"945\":1,\"997\":2,\"1009\":2,\"1010\":2,\"1098\":4,\"1100\":5,\"1103\":2,\"1104\":3,\"1111\":2,\"1112\":2,\"1258\":2}}],[\"etcd\",{\"1\":{\"108\":1,\"112\":1,\"162\":1}}],[\"etc\",{\"1\":{\"63\":1,\"107\":1,\"108\":18,\"144\":1,\"503\":1}}],[\">0\",{\"1\":{\"1257\":1}}],[\">num\",{\"1\":{\"1207\":1}}],[\">nums\",{\"1\":{\"1207\":1}}],[\">true\",{\"1\":{\"848\":1,\"1009\":1}}],[\">false\",{\"1\":{\"848\":1,\"1009\":1}}],[\">count\",{\"1\":{\"806\":1}}],[\">sum\",{\"1\":{\"806\":1}}],[\">3这个数据变化的过程\",{\"1\":{\"390\":1}}],[\">2\",{\"1\":{\"390\":1}}],[\">=\",{\"1\":{\"262\":1,\"371\":1,\"499\":2,\"732\":1,\"756\":1,\"776\":3,\"839\":1,\"1003\":1,\"1259\":1,\"1271\":1,\"1275\":1,\"1276\":1,\"1282\":1,\"1313\":1,\"1352\":2,\"1353\":2,\"1354\":2,\"1364\":1,\"1366\":1,\"1395\":1,\"1403\":1}}],[\">>=\",{\"1\":{\"1341\":1}}],[\">>右移\",{\"0\":{\"1327\":1}}],[\">>>\",{\"1\":{\"1023\":1}}],[\">>\",{\"1\":{\"107\":1,\"108\":7,\"1339\":1}}],[\">\",{\"1\":{\"63\":2,\"108\":1,\"262\":1,\"349\":11,\"350\":1,\"371\":1,\"390\":2,\"416\":1,\"478\":1,\"531\":1,\"533\":7,\"733\":1,\"776\":7,\"799\":4,\"806\":7,\"827\":1,\"847\":1,\"848\":2,\"880\":1,\"929\":1,\"1009\":3,\"1030\":1,\"1050\":15,\"1057\":1,\"1061\":1,\"1062\":1,\"1063\":6,\"1064\":1,\"1094\":5,\"1098\":1,\"1100\":4,\"1102\":1,\"1103\":5,\"1104\":1,\"1111\":1,\"1112\":1,\"1187\":2,\"1188\":2,\"1189\":2,\"1198\":14,\"1202\":1,\"1207\":3,\"1208\":3,\"1209\":1,\"1221\":7,\"1227\":1,\"1229\":2,\"1230\":1,\"1236\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1257\":3,\"1258\":1,\"1259\":2,\"1265\":1,\"1266\":1,\"1274\":8,\"1275\":2,\"1276\":2,\"1280\":2,\"1281\":1,\"1282\":1,\"1286\":2,\"1287\":2,\"1288\":3,\"1289\":4,\"1292\":6,\"1297\":1,\"1298\":1,\"1299\":6,\"1300\":1,\"1303\":19,\"1307\":3,\"1308\":2,\"1309\":1,\"1313\":1,\"1314\":1,\"1331\":1,\"1335\":1,\"1337\":1,\"1338\":1,\"1339\":3,\"1340\":1,\"1341\":1,\"1352\":1,\"1353\":1,\"1354\":2,\"1364\":1,\"1365\":2,\"1366\":2,\"1376\":4,\"1377\":1,\"1378\":2,\"1379\":8,\"1380\":1,\"1384\":2,\"1385\":1,\"1390\":2,\"1393\":1,\"1395\":4,\"1399\":2,\"1400\":2,\"1403\":3}}],[\"n之间的所有数都一遍\",{\"1\":{\"1335\":1}}],[\"n+1\",{\"1\":{\"1308\":3,\"1309\":1}}],[\"n的列表\",{\"1\":{\"946\":1}}],[\"n数据\",{\"1\":{\"940\":1}}],[\"nlargest\",{\"1\":{\"921\":1}}],[\"nlogk\",{\"1\":{\"921\":1}}],[\"nickname\",{\"1\":{\"828\":2,\"843\":1}}],[\"nclient\",{\"1\":{\"806\":1}}],[\"ndarray\",{\"1\":{\"716\":1}}],[\"nbytes\",{\"1\":{\"716\":1}}],[\"np\",{\"1\":{\"713\":2,\"716\":2,\"720\":3}}],[\"nut\",{\"1\":{\"806\":2}}],[\"numwanted\",{\"1\":{\"1384\":7}}],[\"numrescueboats\",{\"1\":{\"1378\":1}}],[\"numenclaves\",{\"1\":{\"1354\":1}}],[\"numislands\",{\"1\":{\"1352\":1}}],[\"num2\",{\"1\":{\"1340\":4}}],[\"num1\",{\"1\":{\"1340\":5}}],[\"numdistinct\",{\"1\":{\"1314\":1}}],[\"num+1\",{\"1\":{\"1281\":2}}],[\"numcourses\",{\"1\":{\"1241\":13,\"1242\":16}}],[\"nums2\",{\"1\":{\"1307\":15,\"1309\":13}}],[\"nums1\",{\"1\":{\"1307\":15,\"1309\":13}}],[\"numsquares\",{\"1\":{\"1276\":1}}],[\"nums\",{\"1\":{\"1198\":23,\"1207\":18,\"1208\":19,\"1257\":36,\"1265\":16,\"1266\":26,\"1274\":19,\"1275\":10,\"1276\":1,\"1280\":28,\"1281\":14,\"1282\":5,\"1286\":8,\"1287\":12,\"1288\":5,\"1289\":19,\"1331\":3,\"1335\":3,\"1336\":6,\"1337\":2,\"1338\":8,\"1339\":15,\"1340\":10,\"1365\":18,\"1376\":4,\"1379\":22,\"1390\":18,\"1393\":2,\"1395\":21,\"1399\":10,\"1400\":15}}],[\"numpy\",{\"1\":{\"713\":1,\"720\":2}}],[\"num\",{\"1\":{\"532\":1,\"533\":13,\"733\":3,\"749\":2,\"758\":6,\"1033\":7,\"1198\":30,\"1207\":3,\"1281\":9,\"1329\":2,\"1331\":8,\"1333\":2,\"1335\":2,\"1337\":2,\"1338\":2,\"1339\":2,\"1340\":7}}],[\"numbers\",{\"1\":{\"921\":2}}],[\"number=10000\",{\"1\":{\"758\":2}}],[\"number\",{\"1\":{\"97\":1,\"101\":1,\"529\":2,\"929\":5}}],[\"nullable=false\",{\"1\":{\"828\":1}}],[\"nullpool\",{\"1\":{\"579\":1,\"879\":1}}],[\"null时\",{\"1\":{\"487\":1}}],[\"null类似于\",{\"1\":{\"349\":1}}],[\"null\",{\"1\":{\"323\":1,\"349\":4,\"416\":2,\"1100\":1,\"1103\":1}}],[\"null值列表\",{\"1\":{\"323\":1}}],[\"null值列表和记录头信息\",{\"1\":{\"323\":1}}],[\"nf\",{\"1\":{\"108\":3}}],[\"nfsmount\",{\"1\":{\"63\":1}}],[\"nfs主节点\",{\"1\":{\"63\":1,\"67\":1}}],[\"nfs\",{\"1\":{\"63\":11,\"64\":2,\"67\":13}}],[\"n\",{\"0\":{\"946\":1},\"1\":{\"96\":1,\"108\":13,\"125\":1,\"227\":1,\"233\":2,\"234\":1,\"324\":2,\"499\":1,\"513\":5,\"712\":2,\"753\":3,\"799\":3,\"909\":1,\"1024\":2,\"1194\":2,\"1202\":7,\"1207\":2,\"1221\":5,\"1225\":1,\"1229\":18,\"1230\":6,\"1236\":10,\"1237\":15,\"1258\":4,\"1274\":8,\"1276\":10,\"1280\":3,\"1282\":5,\"1286\":5,\"1287\":5,\"1288\":7,\"1289\":6,\"1299\":16,\"1303\":27,\"1307\":10,\"1308\":3,\"1309\":3,\"1313\":3,\"1314\":3,\"1331\":1,\"1335\":1,\"1341\":10,\"1352\":7,\"1353\":10,\"1354\":3,\"1376\":9,\"1377\":2,\"1384\":2,\"1390\":2,\"1395\":1,\"1399\":1,\"1400\":1,\"1403\":6}}],[\"neighbors\",{\"1\":{\"1220\":1,\"1348\":1}}],[\"neighbor\",{\"1\":{\"1220\":2,\"1348\":2}}],[\"need\",{\"1\":{\"1198\":15}}],[\"needs\",{\"1\":{\"555\":1}}],[\"newcol\",{\"1\":{\"1354\":7}}],[\"newrow\",{\"1\":{\"1354\":7}}],[\"new2\",{\"1\":{\"1298\":3}}],[\"new1\",{\"1\":{\"1298\":3}}],[\"new类级别\",{\"1\":{\"903\":1}}],[\"new\",{\"0\":{\"784\":1,\"900\":1,\"902\":1,\"903\":1},\"1\":{\"784\":9,\"855\":8,\"856\":1,\"900\":9,\"902\":2,\"903\":1,\"1151\":1}}],[\"negative\",{\"1\":{\"756\":1}}],[\"nested\",{\"0\":{\"876\":1,\"880\":1},\"1\":{\"349\":2,\"513\":5,\"878\":2,\"880\":2,\"887\":1}}],[\"next\",{\"1\":{\"218\":1,\"324\":2,\"405\":2,\"482\":5,\"731\":3,\"732\":6,\"806\":6,\"892\":1,\"1014\":1,\"1015\":7,\"1016\":1,\"1021\":1,\"1025\":3,\"1352\":14,\"1353\":14}}],[\"net等\",{\"1\":{\"331\":1}}],[\"network\",{\"1\":{\"108\":1}}],[\"networking\",{\"1\":{\"87\":1,\"101\":1}}],[\"net\",{\"1\":{\"108\":7,\"925\":1}}],[\"netfilter\",{\"1\":{\"108\":2}}],[\"never\",{\"1\":{\"73\":2,\"133\":1,\"143\":1,\"197\":1,\"1188\":2}}],[\"name可以通过反射getattr获取可执行对象\",{\"1\":{\"1189\":1}}],[\"name把组件类放到modules中\",{\"1\":{\"1189\":1}}],[\"names\",{\"1\":{\"1103\":3,\"1187\":5,\"1189\":4}}],[\"namespace`\",{\"1\":{\"681\":1}}],[\"namespaces\",{\"0\":{\"118\":1},\"1\":{\"118\":2,\"125\":1}}],[\"namespace\",{\"0\":{\"679\":1,\"1152\":1},\"1\":{\"89\":1,\"118\":1,\"136\":1,\"147\":1,\"679\":12,\"680\":1,\"681\":10,\"1111\":3,\"1152\":2,\"1155\":1,\"1194\":1}}],[\"name6600\",{\"1\":{\"504\":1}}],[\"name4000\",{\"1\":{\"504\":1}}],[\"name=none\",{\"1\":{\"1193\":1}}],[\"name=self\",{\"1\":{\"1187\":1}}],[\"name=import\",{\"1\":{\"1059\":2}}],[\"name=\",{\"1\":{\"405\":1,\"662\":1,\"855\":2}}],[\"name=kubernetes\",{\"1\":{\"108\":1}}],[\"namedtuple\",{\"1\":{\"533\":4,\"776\":2}}],[\"named\",{\"1\":{\"125\":2,\"1188\":22}}],[\"name>\",{\"1\":{\"79\":1}}],[\"name设置为所要使用configmap对象的引用\",{\"1\":{\"72\":1}}],[\"name\",{\"1\":{\"64\":4,\"67\":8,\"73\":12,\"80\":1,\"81\":3,\"87\":1,\"88\":2,\"90\":4,\"93\":4,\"97\":2,\"101\":2,\"125\":5,\"133\":1,\"134\":1,\"135\":3,\"136\":2,\"147\":6,\"197\":2,\"203\":2,\"332\":1,\"404\":2,\"415\":2,\"455\":4,\"469\":1,\"503\":8,\"513\":1,\"529\":3,\"531\":5,\"533\":4,\"534\":9,\"542\":1,\"545\":3,\"550\":1,\"552\":1,\"555\":4,\"569\":1,\"570\":3,\"660\":1,\"662\":2,\"680\":1,\"706\":1,\"718\":1,\"735\":2,\"758\":2,\"776\":7,\"790\":3,\"799\":1,\"824\":8,\"825\":2,\"827\":1,\"849\":1,\"854\":10,\"865\":1,\"872\":1,\"881\":3,\"882\":6,\"886\":2,\"887\":2,\"902\":3,\"920\":4,\"932\":3,\"933\":2,\"992\":1,\"1010\":1,\"1033\":1,\"1049\":10,\"1050\":16,\"1057\":3,\"1059\":13,\"1060\":1,\"1064\":6,\"1077\":2,\"1094\":7,\"1101\":2,\"1103\":9,\"1112\":3,\"1124\":7,\"1147\":5,\"1150\":1,\"1187\":15,\"1188\":19,\"1189\":17,\"1193\":1,\"1194\":1}}],[\"nginx容器有没有\",{\"1\":{\"147\":1}}],[\"nginx\",{\"1\":{\"64\":8,\"67\":9,\"73\":7,\"81\":2,\"96\":3,\"101\":2,\"125\":13,\"136\":1,\"147\":10,\"165\":10,\"169\":1,\"181\":4}}],[\"noqa\",{\"1\":{\"1059\":2,\"1098\":1,\"1100\":1,\"1104\":1}}],[\"normalizeddict\",{\"1\":{\"1187\":1}}],[\"normal\",{\"1\":{\"776\":1}}],[\"norms\",{\"1\":{\"720\":1}}],[\"norm\",{\"1\":{\"720\":1}}],[\"notimplemented\",{\"1\":{\"1188\":1}}],[\"notfundexception\",{\"1\":{\"849\":3,\"1010\":3}}],[\"not\",{\"1\":{\"416\":2,\"503\":6,\"662\":1,\"751\":1,\"756\":1,\"776\":2,\"783\":1,\"784\":1,\"844\":2,\"849\":1,\"862\":2,\"872\":2,\"880\":1,\"925\":1,\"967\":1,\"1010\":1,\"1040\":2,\"1049\":1,\"1050\":4,\"1063\":3,\"1064\":3,\"1094\":12,\"1098\":1,\"1100\":3,\"1102\":3,\"1103\":4,\"1104\":1,\"1144\":1,\"1182\":3,\"1187\":1,\"1188\":4,\"1194\":2,\"1229\":1,\"1230\":1,\"1236\":4,\"1237\":3,\"1241\":1,\"1258\":1,\"1297\":4,\"1303\":2,\"1309\":2,\"1352\":2,\"1353\":2,\"1354\":1,\"1366\":2,\"1395\":1,\"1400\":1}}],[\"no这个属性表示当前记录在本页中的位置\",{\"1\":{\"324\":1}}],[\"noeviction\",{\"1\":{\"212\":1}}],[\"nodes\",{\"1\":{\"125\":1}}],[\"node对象\",{\"0\":{\"114\":1}}],[\"node\",{\"1\":{\"108\":1,\"114\":7,\"115\":3,\"1229\":4,\"1235\":7,\"1236\":5,\"1237\":5,\"1241\":7,\"1242\":8}}],[\"nodeport构建在clusterip上\",{\"1\":{\"87\":1}}],[\"nodeport和loadbalancer类型\",{\"1\":{\"87\":1}}],[\"nodeport\",{\"1\":{\"87\":2,\"93\":6,\"125\":1}}],[\"nonexistent\",{\"1\":{\"744\":1}}],[\"none\",{\"1\":{\"92\":1,\"529\":2,\"534\":1,\"735\":1,\"758\":1,\"776\":4,\"784\":2,\"799\":1,\"806\":3,\"833\":1,\"844\":2,\"849\":4,\"854\":1,\"856\":7,\"862\":2,\"880\":1,\"900\":2,\"916\":2,\"924\":1,\"932\":1,\"986\":1,\"997\":1,\"1010\":4,\"1030\":1,\"1049\":8,\"1050\":20,\"1059\":40,\"1061\":1,\"1062\":1,\"1063\":17,\"1064\":9,\"1081\":1,\"1094\":38,\"1098\":4,\"1100\":21,\"1102\":6,\"1103\":7,\"1104\":4,\"1111\":1,\"1112\":1,\"1187\":3,\"1188\":9,\"1194\":1,\"1220\":4,\"1236\":2,\"1237\":2,\"1241\":2,\"1242\":2,\"1258\":1,\"1348\":1,\"1352\":5,\"1353\":1,\"1354\":1}}],[\"now\",{\"1\":{\"63\":2,\"394\":1,\"849\":1,\"872\":1,\"1010\":1,\"1063\":1,\"1094\":1}}],[\"no\",{\"1\":{\"63\":1,\"260\":7,\"324\":3,\"758\":2,\"843\":1,\"1045\":6,\"1103\":1,\"1188\":1}}],[\"主体运行逻辑\",{\"1\":{\"1194\":1}}],[\"主流框架与服务器的接口支持\",{\"0\":{\"1168\":1}}],[\"主动发起关闭连接的一方\",{\"1\":{\"955\":1}}],[\"主动抛出异常\",{\"0\":{\"752\":1,\"753\":1}}],[\"主线程\",{\"1\":{\"855\":1}}],[\"主程序入口\",{\"1\":{\"542\":1}}],[\"主库创建一个binlog\",{\"1\":{\"494\":1}}],[\"主库db的更新事件\",{\"1\":{\"494\":1}}],[\"主库开启binlog日志\",{\"1\":{\"493\":1}}],[\"主索引和辅助索引\",{\"1\":{\"413\":1}}],[\"主键索引\",{\"0\":{\"449\":1}}],[\"主键自动设为聚簇索引\",{\"1\":{\"439\":1}}],[\"主键加锁\",{\"1\":{\"405\":1}}],[\"主键id的选择\",{\"1\":{\"304\":1}}],[\"主从server\",{\"1\":{\"493\":1}}],[\"主从部署必要条件\",{\"0\":{\"493\":1}}],[\"主从复制的原理其实就是把主服务器上的\",{\"1\":{\"494\":1}}],[\"主从复制的原理\",{\"0\":{\"494\":1}}],[\"主从复制的用途\",{\"0\":{\"492\":1}}],[\"主从复制\",{\"0\":{\"491\":1},\"1\":{\"386\":1},\"2\":{\"496\":1}}],[\"主从同步\",{\"1\":{\"256\":1}}],[\"主要\",{\"1\":{\"1225\":1}}],[\"主要是解决图论中\",{\"1\":{\"1225\":1}}],[\"主要是为了减少内层表数据的匹配次数\",{\"1\":{\"513\":1}}],[\"主要是为集群预留的\",{\"1\":{\"118\":1}}],[\"主要步骤\",{\"0\":{\"1179\":1}}],[\"主要由现代异步框架推动\",{\"1\":{\"1164\":1}}],[\"主要优势\",{\"0\":{\"1087\":1}}],[\"主要针对多线程\",{\"1\":{\"1069\":1}}],[\"主要针对抽象和程序整体框架的构建\",{\"1\":{\"762\":1}}],[\"主要解决如何包装数据\",{\"1\":{\"962\":1}}],[\"主要解决数据如何在网络中传输\",{\"1\":{\"962\":1}}],[\"主要原因可能为\",{\"1\":{\"714\":1}}],[\"主要用途\",{\"1\":{\"607\":1}}],[\"主要用于数据库恢复和主从复制\",{\"1\":{\"334\":1}}],[\"主要体现在分区个数达到上千上万后的处理性能差异较大\",{\"1\":{\"434\":1}}],[\"主要实现算法有\",{\"1\":{\"405\":1}}],[\"主要包含日志文件\",{\"1\":{\"334\":1}}],[\"主要包含系统管理和控制工具\",{\"1\":{\"332\":1}}],[\"主机\",{\"1\":{\"299\":1,\"302\":1}}],[\"主机和路径都必须匹配传入请求的内容\",{\"1\":{\"97\":1}}],[\"主机ip\",{\"1\":{\"67\":3}}],[\"主节点ip\",{\"1\":{\"63\":1,\"64\":1}}],[\"主节点\",{\"1\":{\"63\":1}}],[\"主干恐惧症\",{\"0\":{\"55\":1},\"1\":{\"55\":1}}],[\"yzyzyzyzyzyzyzy\",{\"1\":{\"1300\":1}}],[\"yangyong\",{\"1\":{\"879\":1,\"880\":1}}],[\"yaml提取可更新的关键所有字段计算的hash\",{\"1\":{\"165\":1}}],[\"yaml文件\",{\"1\":{\"144\":1}}],[\"yaml文件创建\",{\"1\":{\"88\":1}}],[\"yaml\",{\"1\":{\"73\":2,\"80\":1,\"96\":2,\"108\":1,\"125\":3,\"155\":1,\"555\":1}}],[\"y=9\",{\"1\":{\"839\":1,\"1003\":1}}],[\"yield\",{\"1\":{\"733\":1,\"735\":2,\"736\":1,\"849\":2,\"861\":1,\"879\":1,\"1010\":2,\"1021\":3}}],[\"yet\",{\"1\":{\"1040\":1}}],[\"yellow\",{\"1\":{\"563\":4,\"566\":6,\"567\":3}}],[\"yes\",{\"1\":{\"260\":4}}],[\"yum\",{\"1\":{\"108\":12}}],[\"ywrtaw4=\",{\"1\":{\"80\":1}}],[\"y\",{\"1\":{\"63\":1,\"108\":4,\"651\":2,\"662\":4,\"679\":1,\"680\":1,\"722\":2,\"735\":3,\"757\":2,\"839\":4,\"861\":1,\"862\":1,\"863\":1,\"886\":1,\"887\":1,\"888\":1,\"930\":2,\"1003\":4,\"1217\":4,\"1227\":8,\"1274\":8,\"1300\":1,\"1352\":11,\"1353\":11,\"1379\":5}}],[\"your\",{\"1\":{\"531\":1,\"653\":1,\"664\":2,\"665\":1,\"666\":1,\"667\":1}}],[\"you\",{\"1\":{\"1\":1}}],[\"因线程\",{\"1\":{\"1163\":1}}],[\"因为目标值可能在middle或其左边\",{\"1\":{\"1395\":1}}],[\"因为其中有很多的注意点\",{\"1\":{\"1391\":1}}],[\"因为里面有很多细节需要注意\",{\"1\":{\"1389\":1}}],[\"因为划分的片段数较少\",{\"1\":{\"1385\":1}}],[\"因为我看到了这个是求的是组合\",{\"1\":{\"1379\":1}}],[\"因为我们现在只有两张\",{\"1\":{\"1366\":1}}],[\"因为我们使用contextvar会更加智能的知道当前的请求\",{\"1\":{\"1053\":1}}],[\"因为我们自己可以通过代码区控制什么时候打开连接什么时候关闭连接\",{\"1\":{\"962\":1}}],[\"因为上面遍历过了\",{\"1\":{\"1354\":1}}],[\"因为岛屿只能包含水平或垂直这四个方向上的\",{\"1\":{\"1353\":1}}],[\"因为可以消除掉偶数次数的影响\",{\"1\":{\"1340\":1}}],[\"因为从\",{\"1\":{\"1309\":1}}],[\"因为路径\",{\"1\":{\"1303\":1}}],[\"因为卖出价格需要大于买入价格\",{\"1\":{\"1292\":2}}],[\"因为他们是相邻的\",{\"1\":{\"1280\":1}}],[\"因为words中的字符一定要按照某种顺序才能装满字符串\",{\"1\":{\"1276\":1}}],[\"因为是求得最小值所以我们可以初始为最大值\",{\"1\":{\"1276\":1}}],[\"因为无论是先物品还是先背包都是先得到左上角的值\",{\"1\":{\"1271\":1}}],[\"因为背包容量为0所背的物品的最大价值就是0\",{\"1\":{\"1273\":1}}],[\"因为背包容量放足够放编号0物品\",{\"1\":{\"1271\":1}}],[\"因为背包容量比编号0的物品重量还小\",{\"1\":{\"1271\":1}}],[\"因为求得是相互依赖的关系所以我们可以使用有向图来表示\",{\"1\":{\"1241\":1}}],[\"因为肯定做不到所有箭头方向一致\",{\"1\":{\"1240\":1}}],[\"因为现在\",{\"1\":{\"1208\":1}}],[\"因为懂了这个设计模式也会更加方便我们看源码\",{\"1\":{\"1177\":1}}],[\"因为创建和释放线程涉及到大量的系统底层操作\",{\"1\":{\"1036\":1}}],[\"因为每个进程中的线程被独立调度执行\",{\"1\":{\"1029\":1}}],[\"因为每次出队操作都需要移动后续的所有元素\",{\"1\":{\"908\":1}}],[\"因为tcp是一个按序传输的链条\",{\"1\":{\"978\":1}}],[\"因为服务端需要按顺序响应收到的请求\",{\"1\":{\"977\":1}}],[\"因为随着队列操作的进行\",{\"1\":{\"909\":1}}],[\"因为这些类型的实例是不可变的\",{\"1\":{\"900\":1}}],[\"因为my\",{\"1\":{\"855\":1}}],[\"因为多个线程可能同时进入\",{\"1\":{\"784\":1}}],[\"因为被代理的对象往往难以直接获得或者是其内部不想暴露出来\",{\"1\":{\"771\":1}}],[\"因为扩展了新的逻辑如果有问题只会影响新的业务\",{\"1\":{\"762\":1}}],[\"因为异常时自动化测试需要看到当前的页面状态更加方便排查bug\",{\"1\":{\"757\":1}}],[\"因为ui自动化需要一步一步的运行\",{\"1\":{\"729\":1}}],[\"因为undo也是对页面的修改\",{\"1\":{\"389\":1}}],[\"因为undo\",{\"1\":{\"379\":1}}],[\"因为进程需要等待\",{\"1\":{\"664\":1}}],[\"因为它在边界上\",{\"1\":{\"1354\":1}}],[\"因为它在大多数情况下能够提供良好的性能和稳定性\",{\"1\":{\"579\":1}}],[\"因为它含\",{\"1\":{\"1274\":1}}],[\"因为它先被选中了\",{\"1\":{\"1209\":1}}],[\"因为它同样可以实现线程隔离的方式\",{\"1\":{\"1049\":1}}],[\"因为它让原本只适用于数值数组的numpy工具能够处理更加多样化和结构化的表格型数据\",{\"1\":{\"797\":1}}],[\"因为它们是针对每个类的实例单独创建的\",{\"1\":{\"985\":1}}],[\"因为它们是在模块级别定义的\",{\"1\":{\"985\":1}}],[\"因为它们只占用有限的内存\",{\"1\":{\"734\":1}}],[\"因为它们可能预示着更严重的威胁\",{\"1\":{\"631\":1}}],[\"因为它是由原子性\",{\"1\":{\"425\":1}}],[\"因为不管底层如何实现\",{\"1\":{\"762\":1}}],[\"因为不需要管理连接的队列\",{\"1\":{\"579\":1}}],[\"因为不存在索引了\",{\"1\":{\"513\":1}}],[\"因为索引中的字段被更新的时候\",{\"1\":{\"507\":1,\"525\":1}}],[\"因为索引文件要比数据文件小\",{\"1\":{\"350\":1}}],[\"因为高并发的\",{\"1\":{\"507\":1}}],[\"因为只有b+树能存储索引列值\",{\"1\":{\"415\":1}}],[\"因为所有辅助索引都引用主索引\",{\"1\":{\"414\":1}}],[\"因为innodb数据文件本身是一颗b+tree\",{\"1\":{\"414\":1}}],[\"因为innodb的数据文件本身要按主键聚集\",{\"1\":{\"414\":1}}],[\"因为innodb引擎锁机制是基于索引实现的记录锁定\",{\"1\":{\"405\":1}}],[\"因为锁的粒度很小\",{\"1\":{\"404\":1}}],[\"因为后续还可能会用到undo\",{\"1\":{\"389\":1}}],[\"因为要读取最新的数据而且要保证事务的隔离性\",{\"1\":{\"373\":1,\"482\":1}}],[\"因为前面那些组件的操作最终必须通过执行器去调用存储引擎接口才能被执行\",{\"1\":{\"363\":1}}],[\"因为在可重复读隔离级别下\",{\"1\":{\"482\":1}}],[\"因为在b\",{\"1\":{\"345\":1}}],[\"因为在上次关机时该全局变量的值可能大于页中max\",{\"1\":{\"325\":1}}],[\"因为文件事件分派器队列的消费是单线程的\",{\"1\":{\"268\":1}}],[\"因为rdb文件中直接存储的时内存数据\",{\"1\":{\"258\":1}}],[\"因为revisionhistorylimit\",{\"1\":{\"165\":1}}],[\"因为布隆过滤器的每一个\",{\"1\":{\"242\":1}}],[\"因为删掉元素会导致误判率增加\",{\"1\":{\"240\":1,\"243\":1}}],[\"因为\",{\"1\":{\"218\":1,\"227\":4,\"388\":1,\"1276\":2,\"1281\":1,\"1287\":1,\"1289\":1}}],[\"因为extensions\",{\"1\":{\"198\":1}}],[\"因为长期运行的容器不会主动结束\",{\"1\":{\"198\":1}}],[\"因为版本问题\",{\"1\":{\"108\":1}}],[\"因为人就算再细心都会犯错\",{\"1\":{\"58\":1}}],[\"因此将right更新为middle\",{\"1\":{\"1395\":1}}],[\"因此将left更新为middle\",{\"1\":{\"1395\":1}}],[\"因此骑士在进入这些房间时会失去健康点数\",{\"1\":{\"1303\":1}}],[\"因此从小到大\",{\"1\":{\"1280\":1}}],[\"因此是求得排列问题\",{\"1\":{\"1276\":1}}],[\"因此是需要四次挥手\",{\"1\":{\"954\":1}}],[\"因此需要先物品再背包\",{\"1\":{\"1275\":1}}],[\"因此需要从左到右\",{\"1\":{\"1271\":1}}],[\"因此答案是\",{\"1\":{\"1274\":1}}],[\"因此输出5\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"因此长度为\",{\"1\":{\"1207\":1,\"1286\":1}}],[\"因此我们需要先对数据进行排序\",{\"1\":{\"1379\":1}}],[\"因此我们可以从右下角往左上角进行遍历\",{\"1\":{\"1303\":1}}],[\"因此我们先拿标准的背包问题进行分析\",{\"1\":{\"1270\":1}}],[\"因此我们在分析flask的启动过程只需要分析以下代码就可以了\",{\"1\":{\"1057\":1}}],[\"因此我们回答第一个问题\",{\"1\":{\"1049\":1}}],[\"因此我觉得流水线要有以下几个特点\",{\"1\":{\"46\":1}}],[\"因此如果其中一个点丢失了\",{\"1\":{\"978\":1}}],[\"因此通常被称为四次挥手\",{\"1\":{\"953\":1}}],[\"因此即便没有函数重载\",{\"1\":{\"896\":1}}],[\"因此无法直接调用其功能\",{\"1\":{\"799\":1}}],[\"因此无法在使用过程中废止某个\",{\"1\":{\"698\":1}}],[\"因此可以直接用函数来代替类来实现具体策略\",{\"1\":{\"776\":2}}],[\"因此不应该用来闲置着等待某些事件发生\",{\"1\":{\"583\":1}}],[\"因此对于需要启用慢查询日志\",{\"1\":{\"503\":1}}],[\"因此count\",{\"1\":{\"487\":1}}],[\"因此写入磁盘为顺序写\",{\"1\":{\"469\":1}}],[\"因此所有会涉及到\",{\"1\":{\"460\":1}}],[\"因此一个表中只有一个聚簇索引\",{\"1\":{\"439\":1}}],[\"因此只需要保证事务的原子性即可保证一致性\",{\"1\":{\"425\":1}}],[\"因此innodb表数据文件本身就是主索引\",{\"1\":{\"414\":1}}],[\"因此他的管理和落盘都跟数据是一样的\",{\"1\":{\"389\":1}}],[\"因此把频繁访问的数据放在靠近根节点的位置将大大提高热点数据的查询效率\",{\"1\":{\"342\":1}}],[\"因此aof\",{\"1\":{\"261\":1}}],[\"因此在上述配置文件中\",{\"1\":{\"260\":1}}],[\"因此在创建\",{\"1\":{\"76\":1}}],[\"因此必须有一种机制来保证\",{\"1\":{\"255\":1}}],[\"因此误判的根源在于相同的\",{\"1\":{\"242\":1}}],[\"因此借鉴数据库索引的思想\",{\"1\":{\"231\":1}}],[\"因此获取链表长度时不用再遍历整个链表\",{\"1\":{\"218\":1}}],[\"因此\",{\"1\":{\"34\":1,\"74\":1,\"162\":1,\"219\":1,\"388\":1,\"413\":1,\"455\":1,\"482\":2,\"607\":1,\"618\":1,\"758\":1,\"784\":1,\"860\":1,\"920\":1,\"1208\":2,\"1242\":2,\"1281\":1,\"1292\":1}}],[\"说明目标值最多只到middle\",{\"1\":{\"1395\":1}}],[\"说明目标值至少在middle\",{\"1\":{\"1395\":1}}],[\"说明\",{\"1\":{\"1303\":1,\"1377\":1}}],[\"说明s\",{\"1\":{\"1299\":1}}],[\"说明就是一个完全背包\",{\"1\":{\"1276\":1}}],[\"说明着边的两个节点已经连在一起了\",{\"1\":{\"1230\":1}}],[\"说明有两个子序列需要\",{\"1\":{\"1198\":1}}],[\"说明请求的资源还在\",{\"1\":{\"967\":1}}],[\"说明请求的资源已经不存在了\",{\"1\":{\"967\":1}}],[\"说明创建readview时生成该版本的事务已经被提交\",{\"1\":{\"371\":1}}],[\"说明创建readview时生成该版本的事务还是活跃的\",{\"1\":{\"371\":1}}],[\"说明协作文化亟待改进\",{\"1\":{\"58\":1}}],[\"说白了\",{\"1\":{\"30\":1}}],[\"沟通的放大器\",{\"1\":{\"58\":1}}],[\"需熟悉异步编程\",{\"1\":{\"1172\":1}}],[\"需第三方库\",{\"1\":{\"1156\":1}}],[\"需不需要分库分表\",{\"1\":{\"814\":1}}],[\"需求\",{\"1\":{\"1172\":1}}],[\"需求发生改变不会影响老业务的逻辑\",{\"1\":{\"762\":1}}],[\"需求分析\",{\"0\":{\"293\":1}}],[\"需监控重启\",{\"1\":{\"712\":1}}],[\"需改用新的\",{\"1\":{\"967\":1}}],[\"需改用\",{\"1\":{\"656\":1}}],[\"需等待\",{\"1\":{\"599\":1}}],[\"需安装\",{\"1\":{\"567\":1,\"570\":1}}],[\"需在调用前加密\",{\"1\":{\"549\":1}}],[\"需通过并行测试\",{\"1\":{\"56\":1}}],[\"需要考虑的情况更多\",{\"1\":{\"1392\":1}}],[\"需要注意当前节点和上个的相邻节点是不是同一种颜色\",{\"1\":{\"1237\":1}}],[\"需要注意的是job目前可以使用两个api组来操作\",{\"1\":{\"198\":1}}],[\"需要自己构造图\",{\"0\":{\"1237\":1}}],[\"需要两个哈希表分别存储\",{\"1\":{\"1234\":1}}],[\"需要先判断是否先为其他顺子的后续\",{\"1\":{\"1198\":1}}],[\"需要对对象结构中的不同元素进行不同的操作\",{\"1\":{\"1178\":1}}],[\"需要对复杂的对象结构进行遍历\",{\"1\":{\"1178\":1}}],[\"需要对原有结构进行较大的修改\",{\"1\":{\"767\":1}}],[\"需要大量函数\",{\"1\":{\"1142\":1}}],[\"需要强调一点\",{\"1\":{\"947\":1}}],[\"需要强制移动之前的记录\",{\"1\":{\"442\":1}}],[\"需要移动所有后续元素来填补空位\",{\"1\":{\"909\":1}}],[\"需要在使用python多线程时特别注意\",{\"1\":{\"897\":1}}],[\"需要统一输出接口\",{\"1\":{\"798\":1}}],[\"需要创建的对象较少\",{\"1\":{\"765\":1}}],[\"需要创建临时表来存储查询的结果\",{\"1\":{\"349\":1}}],[\"需要跨机器并行的任务调度\",{\"1\":{\"724\":1}}],[\"需要安装\",{\"1\":{\"666\":1}}],[\"需要\",{\"1\":{\"665\":1,\"1172\":1}}],[\"需要第三方库\",{\"1\":{\"665\":1}}],[\"需要监控这些变化是否导致了预期之外的行为\",{\"1\":{\"630\":1}}],[\"需要额外配置消息中间件\",{\"1\":{\"607\":1}}],[\"需要额外的消息中间件\",{\"1\":{\"605\":1}}],[\"需要使用global关键字来声明这个变量是全局的\",{\"1\":{\"985\":1}}],[\"需要使用\",{\"1\":{\"599\":1}}],[\"需要加注释的地方\",{\"1\":{\"531\":1}}],[\"需要加锁\",{\"1\":{\"482\":1}}],[\"需要根据数据库当前的状态\",{\"1\":{\"507\":1}}],[\"需要明确可能导致\",{\"1\":{\"506\":1}}],[\"需要重新连接或新开一个会话才能看到修改值\",{\"1\":{\"503\":1}}],[\"需要重演命令\",{\"1\":{\"258\":1}}],[\"需要回表\",{\"1\":{\"455\":1}}],[\"需要定时触\",{\"1\":{\"434\":1}}],[\"需要定期进行aof重写\",{\"1\":{\"261\":1}}],[\"需要严格保证事务的原子性\",{\"1\":{\"425\":1}}],[\"需要write\",{\"1\":{\"390\":1}}],[\"需要把整棵树遍历一遍\",{\"1\":{\"345\":1}}],[\"需要通过该页的副本来还原该页\",{\"1\":{\"320\":1,\"469\":1}}],[\"需要事务支持\",{\"1\":{\"310\":1}}],[\"需要不断aof重写\",{\"1\":{\"263\":1}}],[\"需要缩短\",{\"1\":{\"227\":1}}],[\"需要手动将spec\",{\"1\":{\"198\":1}}],[\"需要组织文化提供三根\",{\"1\":{\"32\":1}}],[\"需要所有角色共同参与\",{\"1\":{\"31\":1}}],[\"需要相适应的企业文化\",{\"1\":{\"30\":1}}],[\"需要各个团队之间紧密合作\",{\"1\":{\"18\":1}}],[\"保留那些经常被命中的数据\",{\"1\":{\"929\":1}}],[\"保护\",{\"1\":{\"769\":1}}],[\"保守估计\",{\"1\":{\"725\":1}}],[\"保持代码简洁\",{\"1\":{\"546\":1}}],[\"保持高质量标准同样重要\",{\"1\":{\"26\":1}}],[\"保证输入为\",{\"1\":{\"1221\":1}}],[\"保证这个数组是连续递增的\",{\"1\":{\"1207\":1}}],[\"保证\",{\"1\":{\"956\":1}}],[\"保证一个类只有一个实例\",{\"1\":{\"763\":1}}],[\"保证某一个类在运行期间只有一个实例对外提供服务\",{\"1\":{\"763\":1}}],[\"保证反馈渠道与sre的值班人员之间沟通顺畅\",{\"1\":{\"640\":1}}],[\"保证每个线程按固定的顺序来处理记录\",{\"1\":{\"408\":1}}],[\"保证每个人的金额几率相等\",{\"1\":{\"295\":1}}],[\"保证的高并发的要求\",{\"1\":{\"289\":1}}],[\"保存了当前本次请求的相关数据\",{\"1\":{\"1101\":1}}],[\"保存的关键字要比b\",{\"1\":{\"345\":1}}],[\"保存的字符串时\",{\"1\":{\"227\":1}}],[\"保存实际数据内容\",{\"1\":{\"219\":1}}],[\"保障代码模块正确性\",{\"1\":{\"56\":1}}],[\"高引用次数\",{\"1\":{\"1403\":1}}],[\"高级数据结构\",{\"0\":{\"917\":1}}],[\"高层模块不应该依赖于底层模块\",{\"1\":{\"762\":1}}],[\"高层接口\",{\"1\":{\"709\":1}}],[\"高可靠性场景\",{\"1\":{\"724\":1}}],[\"高可用性的分布式任务处理场景\",{\"1\":{\"607\":1}}],[\"高\",{\"1\":{\"710\":2}}],[\"高内聚\",{\"1\":{\"543\":1}}],[\"高度越低\",{\"1\":{\"341\":1}}],[\"高并发和实时通信设计\",{\"1\":{\"1173\":1}}],[\"高并发\",{\"1\":{\"1172\":1},\"2\":{\"820\":1}}],[\"高并发就代表着数据量大\",{\"0\":{\"816\":1}}],[\"高并发的选择的框架\",{\"0\":{\"815\":1}}],[\"高并发架构\",{\"0\":{\"812\":1}}],[\"高并发下性能优异\",{\"1\":{\"665\":1}}],[\"高并发场景\",{\"1\":{\"592\":1,\"1161\":1}}],[\"高并发场景下\",{\"1\":{\"301\":1}}],[\"高并发业务\",{\"1\":{\"293\":1}}],[\"高性能的地位就不保了\",{\"1\":{\"260\":1}}],[\"高效队列\",{\"0\":{\"910\":1}}],[\"高效的异步编程\",{\"1\":{\"588\":1}}],[\"高效的插入和查询\",{\"1\":{\"244\":1}}],[\"高效地插入和查询\",{\"1\":{\"240\":1}}],[\"高版本的redis中底层数据结构是quicklist\",{\"1\":{\"224\":1}}],[\"高阶命令\",{\"1\":{\"124\":1}}],[\"高频\",{\"1\":{\"56\":1}}],[\"高管需以身作则\",{\"1\":{\"33\":1}}],[\"鼓励开发人员将大功能拆分为小增量\",{\"1\":{\"55\":1}}],[\"鼓励团队成员积极参与到这一过程中来\",{\"1\":{\"628\":1}}],[\"鼓励团队主动暴露问题并协作解决\",{\"1\":{\"32\":1}}],[\"鼓励团队质疑现状\",{\"1\":{\"20\":1}}],[\"破解这一困境需要\",{\"1\":{\"55\":1}}],[\"部门变动等因素\",{\"1\":{\"640\":1}}],[\"部分第三方库\",{\"1\":{\"665\":1}}],[\"部分依赖标准库的库\",{\"1\":{\"599\":1}}],[\"部分控制器类型如下\",{\"1\":{\"176\":1}}],[\"部分团队因害怕频繁集成导致主干不稳定\",{\"1\":{\"55\":1}}],[\"部署的\",{\"0\":{\"556\":1}}],[\"部署的所有应用\",{\"1\":{\"118\":2}}],[\"部署回滚常用命令\",{\"1\":{\"165\":1}}],[\"部署进展之前的最长时间\",{\"1\":{\"153\":1}}],[\"部署进度等全流程信息\",{\"1\":{\"32\":1}}],[\"部署用的命令\",{\"1\":{\"124\":1}}],[\"部署或pod\",{\"1\":{\"124\":1}}],[\"部署网络插件\",{\"1\":{\"108\":1}}],[\"部署流水线应该让那些提供快速反馈的任务尽早执行\",{\"1\":{\"46\":1}}],[\"部署后的健康检查与指标追踪\",{\"1\":{\"40\":1}}],[\"部署阶段\",{\"1\":{\"40\":1}}],[\"部署规则\",{\"1\":{\"39\":1}}],[\"部署\",{\"0\":{\"117\":1},\"1\":{\"25\":1,\"125\":1,\"630\":1,\"641\":1},\"2\":{\"82\":1,\"103\":1,\"109\":1,\"121\":1,\"126\":1,\"137\":1,\"149\":1,\"173\":1,\"182\":1,\"192\":1,\"204\":1}}],[\"部署和监控等步骤\",{\"1\":{\"21\":1}}],[\"许多团队将ci工具的安装等同于持续集成的实现\",{\"1\":{\"54\":1}}],[\"许多团队误以为安装了jenkins\",{\"1\":{\"42\":1}}],[\"都在边界上或可以到达边界\",{\"1\":{\"1354\":1}}],[\"都有一个尺寸\",{\"1\":{\"1364\":1}}],[\"都有一个胃口值\",{\"1\":{\"1364\":1}}],[\"都有\",{\"1\":{\"1287\":1}}],[\"都有内容\",{\"1\":{\"117\":1}}],[\"都应该排在课程\",{\"1\":{\"1242\":1}}],[\"都存在一条位于节点\",{\"1\":{\"1236\":1}}],[\"都被连通\",{\"1\":{\"1225\":1}}],[\"都基于\",{\"1\":{\"1164\":1}}],[\"都必须维护一个\",{\"1\":{\"952\":1}}],[\"都必须决定是否进行处理\",{\"1\":{\"805\":1}}],[\"都非常迅速\",{\"1\":{\"911\":1}}],[\"都实现同一个接口\",{\"1\":{\"771\":1}}],[\"都实现同一个\",{\"1\":{\"771\":1}}],[\"都与接口或基类方法的期望行为一致\",{\"1\":{\"762\":1}}],[\"都能确保资源被正确地初始化和清理\",{\"1\":{\"746\":1}}],[\"都会保证其内部的代码被执行\",{\"1\":{\"749\":1}}],[\"都会修改buffer\",{\"1\":{\"425\":1}}],[\"都会自动给涉及到的数据加上排他锁\",{\"1\":{\"404\":1}}],[\"都会检测当前aof文件的尺寸\",{\"1\":{\"260\":1}}],[\"都将被终止\",{\"1\":{\"198\":1}}],[\"都由\",{\"1\":{\"114\":1}}],[\"都是完全平方数\",{\"1\":{\"1276\":1}}],[\"都是求二维矩阵中的面积问题\",{\"1\":{\"1201\":1}}],[\"都是\",{\"1\":{\"482\":1}}],[\"都是基于\",{\"1\":{\"200\":1}}],[\"都是deployment用于协调pod的创建\",{\"1\":{\"178\":1}}],[\"都是http\",{\"1\":{\"147\":1}}],[\"都是请求路径\",{\"1\":{\"100\":1}}],[\"都是测试很多遍才肯定提交代码\",{\"1\":{\"58\":1}}],[\"都是团队协作与文化进化的勋章\",{\"1\":{\"46\":1}}],[\"都需通过工具\",{\"1\":{\"52\":1}}],[\"打家劫舍的问题关键在于偷或者不偷\",{\"1\":{\"1280\":1}}],[\"打家劫舍也是动态规划中一个很经典的问题\",{\"1\":{\"1280\":1}}],[\"打家劫舍\",{\"0\":{\"1279\":1,\"1280\":1},\"1\":{\"1280\":1},\"2\":{\"1284\":1}}],[\"打开一个文件\",{\"1\":{\"986\":1}}],[\"打开redis配置文件\",{\"1\":{\"210\":1}}],[\"打补丁后\",{\"1\":{\"591\":1,\"592\":1,\"597\":1}}],[\"打地基\",{\"0\":{\"541\":1}}],[\"打印32位的二进制的数字\",{\"0\":{\"1329\":1}}],[\"打印\",{\"1\":{\"1303\":1}}],[\"打印dp数组\",{\"1\":{\"1207\":1}}],[\"打印dp\",{\"1\":{\"1198\":1,\"1292\":1,\"1299\":1}}],[\"打印输出\",{\"1\":{\"986\":1}}],[\"打印结果为2\",{\"1\":{\"855\":1}}],[\"打印结果\",{\"1\":{\"847\":1,\"1009\":1}}],[\"打印客户端和服务器版本信息\",{\"1\":{\"124\":1}}],[\"打印服务器上支持的api版本\",{\"1\":{\"124\":1}}],[\"打印服务器上支持的api资源\",{\"1\":{\"124\":1}}],[\"打印pod中容器的日志\",{\"1\":{\"124\":2}}],[\"打包\",{\"1\":{\"52\":1}}],[\"打破\",{\"0\":{\"31\":1}}],[\"守门人\",{\"0\":{\"52\":1}}],[\"能不能种n个花\",{\"1\":{\"1376\":1}}],[\"能则返回\",{\"1\":{\"1376\":1}}],[\"能否在不打破种植规则的情况下种入\",{\"1\":{\"1376\":1}}],[\"能否问题\",{\"1\":{\"1359\":1}}],[\"能否帮助值班人员快速识别故障\",{\"1\":{\"640\":1}}],[\"能获取的最大价值就是dp\",{\"1\":{\"1271\":1}}],[\"能获取的价值在于第i个物品要不要取\",{\"1\":{\"1271\":1}}],[\"能被正确的关闭\",{\"1\":{\"956\":1}}],[\"能显著提高程序性能\",{\"1\":{\"924\":1}}],[\"能确保优先级高的任务优先得到处理\",{\"1\":{\"921\":1}}],[\"能有效地将代码统一到一个级别上\",{\"1\":{\"767\":1}}],[\"能就会影响到老业务受影响\",{\"1\":{\"762\":1}}],[\"能告诉你当前\",{\"1\":{\"518\":1}}],[\"能完全实现主从数据同步和数据的恢复\",{\"1\":{\"393\":1}}],[\"能清楚记录每一个行数据的修改细节\",{\"1\":{\"393\":1}}],[\"能够达到的最大利润\",{\"1\":{\"1292\":1}}],[\"能够让oncall人员立即知道该做什么\",{\"1\":{\"640\":1}}],[\"能够动态添加\",{\"1\":{\"606\":1}}],[\"能够支持比mysql更大的数据量\",{\"1\":{\"433\":1}}],[\"能够保证\",{\"1\":{\"390\":1}}],[\"能够通知程序进行相应的读写操作\",{\"1\":{\"268\":1,\"269\":1}}],[\"能对不同业务的数据进行分级管理\",{\"1\":{\"301\":1}}],[\"能快速发现兼容性\",{\"1\":{\"51\":1}}],[\"能消除部门间的推诿\",{\"1\":{\"32\":1}}],[\"早期暴露缺陷\",{\"1\":{\"51\":1}}],[\"挑战与启示\",{\"1\":{\"49\":1}}],[\"思路二\",{\"0\":{\"1338\":1},\"1\":{\"1339\":1}}],[\"思路一\",{\"0\":{\"1337\":1},\"1\":{\"1339\":1}}],[\"思路和递推公式基本一致\",{\"1\":{\"1303\":1}}],[\"思路看注释\",{\"1\":{\"1202\":1}}],[\"思路\",{\"0\":{\"1298\":1},\"1\":{\"1198\":2,\"1207\":1,\"1208\":1,\"1209\":1,\"1221\":1,\"1229\":1,\"1230\":1,\"1237\":1,\"1241\":1,\"1274\":1,\"1275\":1,\"1281\":1,\"1282\":1,\"1286\":1,\"1287\":1,\"1288\":1,\"1292\":2,\"1297\":1,\"1299\":2,\"1303\":3,\"1307\":1,\"1313\":1,\"1335\":1,\"1340\":1,\"1341\":1,\"1377\":1,\"1378\":1,\"1380\":1,\"1384\":1,\"1385\":1,\"1394\":2}}],[\"思考\",{\"0\":{\"421\":1},\"1\":{\"498\":2}}],[\"思考持续集成的意义\",{\"1\":{\"49\":1}}],[\"思维方法\",{\"1\":{\"18\":1}}],[\"9999\",{\"1\":{\"1390\":2}}],[\"99\",{\"1\":{\"984\":1,\"1339\":2}}],[\"90\",{\"1\":{\"339\":1}}],[\"900秒之内至少一次写操作\",{\"1\":{\"256\":1}}],[\"900\",{\"1\":{\"256\":1}}],[\"9的\",{\"1\":{\"181\":1}}],[\"9377\",{\"1\":{\"90\":1}}],[\"9376\",{\"1\":{\"88\":1,\"90\":1,\"93\":1}}],[\"96\",{\"1\":{\"73\":12,\"108\":1}}],[\"9\",{\"0\":{\"49\":1,\"194\":1,\"292\":1,\"424\":1,\"739\":1,\"885\":1,\"900\":1},\"1\":{\"108\":2,\"181\":6,\"549\":1,\"555\":1,\"662\":1,\"679\":1,\"880\":1,\"920\":1,\"921\":1,\"1023\":1,\"1207\":1,\"1225\":1,\"1275\":1,\"1276\":2,\"1280\":3,\"1281\":5,\"1282\":2,\"1286\":1,\"1292\":3,\"1309\":1,\"1335\":1,\"1384\":2,\"1385\":1,\"1390\":4}}],[\"定时器等\",{\"1\":{\"899\":1}}],[\"定时确认\",{\"0\":{\"616\":1}}],[\"定时总开关\",{\"0\":{\"615\":1}}],[\"定时执行是否处于可用时间\",{\"0\":{\"618\":1}}],[\"定时执行\",{\"1\":{\"613\":1}}],[\"定时执行等\",{\"1\":{\"606\":1}}],[\"定时任务\",{\"1\":{\"662\":1},\"2\":{\"620\":1,\"621\":1}}],[\"定时任务真的执行了吗\",{\"0\":{\"619\":1}}],[\"定时任务完成后的消息通知\",{\"0\":{\"617\":1}}],[\"定时任务设计的注意点\",{\"0\":{\"614\":1}}],[\"定时任务的类型\",{\"0\":{\"613\":1}}],[\"定时任务的执行顺序通过利用堆化进行排序\",{\"1\":{\"609\":1}}],[\"定时任务的实现原理\",{\"0\":{\"608\":1}}],[\"定时任务的设计和思路\",{\"0\":{\"603\":1}}],[\"定时任务主动刷新缓存\",{\"1\":{\"251\":1}}],[\"定位优化对象的性能瓶颈\",{\"1\":{\"507\":1}}],[\"定位完成后如果需要流水线开发人员快速修改\",{\"1\":{\"46\":1}}],[\"定期清理任务结果\",{\"1\":{\"661\":1}}],[\"定期组织模拟故障场景的演练活动\",{\"1\":{\"641\":1}}],[\"定期审查ci\",{\"1\":{\"630\":1}}],[\"定期回顾过往发生的各类事件及其处理过程\",{\"1\":{\"628\":1}}],[\"定期抽样\",{\"1\":{\"211\":1}}],[\"定期删除\",{\"1\":{\"211\":1}}],[\"定义个tail\",{\"1\":{\"1207\":1}}],[\"定义具体的访问者类\",{\"1\":{\"1180\":1}}],[\"定义访问者\",{\"0\":{\"1180\":1}}],[\"定义访问者接口\",{\"1\":{\"1179\":1,\"1180\":1}}],[\"定义被访问者接口\",{\"1\":{\"1179\":1,\"1180\":1}}],[\"定义模型\",{\"1\":{\"1150\":1}}],[\"定义资源类\",{\"1\":{\"1147\":1}}],[\"定义资源模型\",{\"1\":{\"1147\":1}}],[\"定义操作\",{\"1\":{\"1144\":1}}],[\"定义处理函数\",{\"0\":{\"1062\":1}}],[\"定义url\",{\"1\":{\"1060\":1,\"1063\":1}}],[\"定义函数列表\",{\"1\":{\"1060\":1}}],[\"定义视图函数并创建路由规则\",{\"1\":{\"1065\":1}}],[\"定义视图函数\",{\"0\":{\"1063\":1},\"1\":{\"1059\":1}}],[\"定义迭代器\",{\"0\":{\"1015\":1}}],[\"定义了一个与全局作用域中同名的变量\",{\"1\":{\"985\":1}}],[\"定义了一个抽象方法\",{\"1\":{\"791\":1}}],[\"定义优先级比较\",{\"1\":{\"920\":1}}],[\"定义细节如下\",{\"1\":{\"696\":1}}],[\"定义任务\",{\"0\":{\"651\":1}}],[\"定义状态和事件\",{\"1\":{\"563\":1,\"574\":1}}],[\"定义一个数组来接住递增数组的每一个元素就可以了\",{\"1\":{\"1207\":1}}],[\"定义一个访问者对象\",{\"1\":{\"1177\":1}}],[\"定义一个上下文变量\",{\"1\":{\"1081\":1}}],[\"定义一个对象\",{\"1\":{\"855\":1}}],[\"定义一个用于创建对象的接口\",{\"1\":{\"766\":1}}],[\"定义一个简单的状态机\",{\"1\":{\"563\":1}}],[\"定义一个不合规范的key\",{\"1\":{\"73\":1}}],[\"定义数据的属性和基本操作\",{\"1\":{\"545\":1}}],[\"定义的标准统计行数的语法\",{\"1\":{\"488\":1}}],[\"定义的关联后端\",{\"1\":{\"97\":1}}],[\"定义的抽象能够解耦这种关联\",{\"1\":{\"86\":1}}],[\"定义是否自动使用nodeports\",{\"1\":{\"87\":1}}],[\"定义\",{\"0\":{\"66\":1,\"69\":1,\"76\":1,\"86\":1,\"95\":1,\"152\":1,\"186\":1,\"189\":1,\"196\":1,\"200\":1,\"217\":1,\"231\":1,\"238\":1,\"249\":1,\"268\":1,\"276\":1,\"314\":1,\"318\":1,\"379\":1,\"382\":1,\"385\":1,\"474\":1,\"511\":1,\"775\":1,\"780\":1,\"797\":1,\"804\":1,\"982\":1,\"990\":1,\"1014\":1,\"1021\":1,\"1029\":1,\"1296\":1},\"1\":{\"482\":1,\"762\":3,\"831\":1,\"995\":1,\"1236\":1}}],[\"定义统一的构建\",{\"1\":{\"39\":1}}],[\"就漏掉了\",{\"1\":{\"1393\":1}}],[\"就找到了节点6\",{\"1\":{\"1345\":1}}],[\"就得到缺失的数\",{\"1\":{\"1335\":1}}],[\"就比如这样aa\",{\"1\":{\"1299\":1}}],[\"就返回\",{\"1\":{\"1274\":1}}],[\"就将这个图称为\",{\"1\":{\"1236\":1}}],[\"就将typed设置为false\",{\"1\":{\"930\":1}}],[\"就实现了加权有向图\",{\"1\":{\"1219\":1}}],[\"就知道了\",{\"1\":{\"1217\":1}}],[\"就进入了\",{\"1\":{\"953\":1}}],[\"就向客户端发送\",{\"1\":{\"953\":1}}],[\"就只能先主动建立一个连接\",{\"1\":{\"952\":1}}],[\"就完成了对象的创建和初始化\",{\"1\":{\"894\":1}}],[\"就扩展功能而言\",{\"1\":{\"770\":1}}],[\"就可以了\",{\"1\":{\"1242\":1}}],[\"就可以发第二个请求出去\",{\"1\":{\"975\":1}}],[\"就可以指定窗口大小\",{\"1\":{\"959\":1}}],[\"就可以独立开发了\",{\"1\":{\"762\":1}}],[\"就可以得到索引的本质\",{\"1\":{\"412\":1}}],[\"就这\",{\"1\":{\"735\":1}}],[\"就像开发本地使用的函数一样\",{\"1\":{\"769\":1}}],[\"就像使用本地函数一样\",{\"1\":{\"769\":1}}],[\"就像墙上的插座\",{\"1\":{\"676\":1}}],[\"就像在豌豆荚中\",{\"1\":{\"140\":1}}],[\"就应该是0\",{\"1\":{\"1273\":1}}],[\"就应该通过增加连接池大小或减少并发线程数目的方法来解决问题\",{\"1\":{\"581\":1}}],[\"就应该立即将流量切回老版本上\",{\"1\":{\"171\":1}}],[\"就足够了\",{\"1\":{\"579\":1}}],[\"就不能为0了\",{\"1\":{\"1276\":1}}],[\"就不必一次创建所有的元素\",{\"1\":{\"1022\":1}}],[\"就不应该再使用索引扫描来完成这个query了\",{\"1\":{\"507\":1,\"525\":1}}],[\"就不存在null值列表\",{\"1\":{\"323\":1}}],[\"就需要从表中拿数据\",{\"1\":{\"507\":1,\"521\":1}}],[\"就需要判断trx\",{\"1\":{\"371\":1}}],[\"就必须使用锁\",{\"1\":{\"1031\":1}}],[\"就必须修改配置文件\",{\"1\":{\"503\":1}}],[\"就必须满足以下条件\",{\"1\":{\"338\":1}}],[\"就引出了\",{\"1\":{\"482\":1}}],[\"就称之为幻读\",{\"1\":{\"482\":1}}],[\"就根据回滚指针回滚到上一条记录继续比较\",{\"1\":{\"477\":1}}],[\"就宕机了\",{\"1\":{\"468\":1}}],[\"就没有必要再单独建立\",{\"1\":{\"451\":1}}],[\"就很容易明白为什么不建议使用过长的字段作为主键\",{\"1\":{\"414\":1}}],[\"就很容易产生死锁和阻塞\",{\"1\":{\"408\":1}}],[\"就从free链表中选出一个空闲的缓冲页\",{\"1\":{\"319\":1}}],[\"就形成了跳跃表\",{\"1\":{\"231\":1}}],[\"就取值为5字节\",{\"1\":{\"219\":1}}],[\"就默认用255表示整个压缩列表的结束\",{\"1\":{\"219\":1}}],[\"就行了\",{\"1\":{\"1217\":1}}],[\"就行\",{\"1\":{\"218\":1}}],[\"就是答案\",{\"1\":{\"1403\":2}}],[\"就是先找到所有的回文串\",{\"1\":{\"1299\":1}}],[\"就是不持有的时候减个手续费\",{\"1\":{\"1292\":1}}],[\"就是连续递增子序列\",{\"1\":{\"1287\":1}}],[\"就是后一个数大于前面的一个数\",{\"1\":{\"1286\":1}}],[\"就是问物品能不能把背包装满\",{\"1\":{\"1276\":1}}],[\"就是快指针代表着什么\",{\"1\":{\"1263\":1}}],[\"就是原地修改数组\",{\"1\":{\"1263\":1}}],[\"就是两指针都是从头开始\",{\"1\":{\"1263\":1}}],[\"就是两个指针同向而行\",{\"1\":{\"1255\":1}}],[\"就是两个指针相向而行或者相背而行\",{\"1\":{\"1255\":1}}],[\"就是当一个子节点的根节点为a时\",{\"1\":{\"1225\":1}}],[\"就是每个节点相连的边的条数\",{\"1\":{\"1218\":1}}],[\"就是我们要运行的关键字\",{\"1\":{\"1188\":1}}],[\"就是我们的金丝雀\",{\"1\":{\"171\":1}}],[\"就是请求上下文的对象\",{\"1\":{\"1101\":1}}],[\"就是为什么使用contextvar\",{\"1\":{\"1049\":1}}],[\"就是使用了强制缓存\",{\"1\":{\"969\":1}}],[\"就是可迭代对象\",{\"1\":{\"892\":1}}],[\"就是利用keyerror异常\",{\"1\":{\"758\":1}}],[\"就是要看我们能不能想到使用生成器函数来做了\",{\"1\":{\"735\":1}}],[\"就是将月\",{\"1\":{\"611\":1}}],[\"就是说这一次请求和上一次请求是没有任何关系的\",{\"1\":{\"688\":1}}],[\"就是说某个字段的值为null时不统计\",{\"1\":{\"486\":1}}],[\"就是说通过一种机制\",{\"1\":{\"268\":1,\"269\":1}}],[\"就是记录锁和间隙锁的组合\",{\"1\":{\"482\":1}}],[\"就是你这个事务的\",{\"1\":{\"477\":1}}],[\"就是你这个事务的id\",{\"1\":{\"371\":1}}],[\"就是\",{\"1\":{\"477\":1,\"860\":1,\"1057\":1}}],[\"就是m\",{\"1\":{\"371\":1}}],[\"就是通过双层循环比较数据来获得结果\",{\"1\":{\"513\":1}}],[\"就是通过\",{\"1\":{\"368\":1,\"475\":1}}],[\"就是指通过某种特定的条件\",{\"1\":{\"299\":1}}],[\"就是background\",{\"1\":{\"256\":1}}],[\"就是所谓的a\",{\"1\":{\"171\":1}}],[\"就绪检测\",{\"1\":{\"147\":1}}],[\"就绪探测情况下的放弃\",{\"1\":{\"147\":1}}],[\"就绪探针\",{\"1\":{\"146\":1,\"147\":1}}],[\"就会把前面path\",{\"1\":{\"1221\":1}}],[\"就会把该变量的值当作新记录的row\",{\"1\":{\"325\":1}}],[\"就会阻塞住所有的\",{\"1\":{\"977\":1}}],[\"就会重新发送\",{\"1\":{\"952\":1}}],[\"就会给其建立一个\",{\"1\":{\"460\":1}}],[\"就会给其建立一个hash索引\",{\"1\":{\"314\":1,\"420\":1}}],[\"就会通过query\",{\"1\":{\"431\":1}}],[\"就会将该变量的值刷新到系统表空间的页号为7的页面中一个max\",{\"1\":{\"325\":1}}],[\"就会将负面影响控制在最小范围内\",{\"1\":{\"171\":1}}],[\"就会导致大量的请求都打到数据库上面去\",{\"1\":{\"249\":1}}],[\"就会产生缓冲区溢出\",{\"1\":{\"227\":1}}],[\"就会非常地便捷\",{\"1\":{\"120\":1}}],[\"就会强制同步到这次部署信息期望的最终结果\",{\"1\":{\"117\":1}}],[\"就会影响成员在组织内的安全感\",{\"1\":{\"30\":1}}],[\"就把它放在后面执行\",{\"1\":{\"46\":1}}],[\"对每个孩子\",{\"1\":{\"1364\":1}}],[\"对值为\",{\"1\":{\"1354\":2}}],[\"对称性\",{\"1\":{\"1225\":1}}],[\"对应的值为\",{\"1\":{\"1341\":2}}],[\"对应的交易状态为\",{\"1\":{\"1292\":1}}],[\"对应数据结构的题目我们的第一思路应该是能不能通过遍历一遍得到答案\",{\"1\":{\"1229\":1}}],[\"对应不同类方法\",{\"1\":{\"1143\":1}}],[\"对应表中的主键值\",{\"1\":{\"340\":1}}],[\"对外部作用域的变量进行引用\",{\"1\":{\"990\":1}}],[\"对外暴露的端口等\",{\"1\":{\"115\":1}}],[\"对代理模式来说\",{\"1\":{\"771\":1}}],[\"对装饰器模式来说\",{\"1\":{\"771\":1}}],[\"对修改关闭\",{\"1\":{\"762\":1}}],[\"对扩展开放和对修改关闭表示当一个类或一个方法有新需求或者需求发生改变时应该采用扩展的方式而不应该采用修改原有\",{\"1\":{\"762\":1}}],[\"对扩展开放\",{\"1\":{\"762\":1}}],[\"对常见库的补丁更完善\",{\"1\":{\"666\":1}}],[\"对比表\",{\"0\":{\"607\":1}}],[\"对比补丁前后的效果\",{\"0\":{\"596\":1}}],[\"对内循环没优化\",{\"1\":{\"513\":1}}],[\"对表连接支持较完整\",{\"1\":{\"433\":1}}],[\"对数据库进行恢复\",{\"1\":{\"425\":1}}],[\"对索引中包含的字段先做判断\",{\"1\":{\"455\":1}}],[\"对索引列运算\",{\"1\":{\"416\":1}}],[\"对索引列进行范围查询\",{\"1\":{\"349\":1}}],[\"对索引字段进行函数运算\",{\"1\":{\"416\":1}}],[\"对索引加锁顺序的不一致很可能会导致死锁\",{\"1\":{\"408\":1}}],[\"对sql语句进行分析\",{\"1\":{\"408\":1}}],[\"对满足id=10条件的记录和主键分别加x锁\",{\"1\":{\"405\":1}}],[\"对不同索引的加锁行为\",{\"1\":{\"405\":1}}],[\"对b\",{\"1\":{\"345\":1}}],[\"对缓存数据页进行描述的控制块\",{\"1\":{\"318\":1}}],[\"对职位表进行垂直拆分\",{\"1\":{\"301\":1}}],[\"对服务器性能影响较小\",{\"1\":{\"263\":1}}],[\"对aof日志进行瘦身\",{\"1\":{\"259\":1,\"261\":1}}],[\"对一个\",{\"1\":{\"227\":1}}],[\"对一些应用的某些部分\",{\"1\":{\"93\":1}}],[\"对遇到的每个字符进行计数\",{\"1\":{\"227\":1}}],[\"对所有设置了过期时间的key使用lfu算法进行删除\",{\"1\":{\"212\":1}}],[\"对所有设置了过期时间的key使用lru算法进行删除\",{\"1\":{\"212\":1}}],[\"对所有设置了过期时间的key随机删除\",{\"1\":{\"212\":1}}],[\"对所有key使用lfu算法进行删除\",{\"1\":{\"212\":1}}],[\"对所有key使用lru算法进行删除\",{\"1\":{\"212\":1}}],[\"对所有key随机删除\",{\"1\":{\"212\":1}}],[\"对已经执行了的任务\",{\"1\":{\"202\":1}}],[\"对于很多题解所以也不明白\",{\"1\":{\"1403\":1}}],[\"对于最后一位顾客\",{\"1\":{\"1366\":1}}],[\"对于接下来的\",{\"1\":{\"1366\":1}}],[\"对于完全背包的求组合和排列问题都是dp\",{\"1\":{\"1275\":1}}],[\"对于完全的完全背包问题\",{\"1\":{\"1275\":1}}],[\"对于\",{\"1\":{\"1236\":1}}],[\"对于这个系列我们要关注的点要放在偷或者不偷\",{\"1\":{\"1280\":1}}],[\"对于这个问题我们很容易想到可以通过遍历一遍看看是否存在从source到target的路径\",{\"1\":{\"1229\":1}}],[\"对于这种路径类型\",{\"1\":{\"100\":1}}],[\"对于并查集的优化一般有两个方向\",{\"1\":{\"1225\":1}}],[\"对于一般的树可能出现极端不平衡的情况\",{\"1\":{\"1225\":1}}],[\"对于一些比较重要的权限\",{\"1\":{\"698\":1}}],[\"对于一些关键性的操作\",{\"1\":{\"616\":1}}],[\"对于同步锁来说\",{\"1\":{\"1034\":1}}],[\"对于代码来说\",{\"1\":{\"892\":1}}],[\"对于简单单表的增删查改可以参考我的这种方式可以对于单表的操作变得比较简单\",{\"1\":{\"860\":1}}],[\"对于框架\",{\"0\":{\"815\":1}}],[\"对于较长的责任链\",{\"1\":{\"809\":1}}],[\"对于幂等任务\",{\"1\":{\"658\":1}}],[\"对于根因分析\",{\"1\":{\"635\":1}}],[\"对于涉及资金流动或其他高敏感度业务的操作失败\",{\"1\":{\"632\":1}}],[\"对于应用程序级别的告警\",{\"1\":{\"631\":1}}],[\"对于构建失败的情况\",{\"1\":{\"630\":1}}],[\"对于特别紧急的情况\",{\"1\":{\"627\":1,\"638\":1}}],[\"对于只需要定时任务而不涉及复杂的消息传递或大规模任务分发的应用来说\",{\"1\":{\"607\":1}}],[\"对于非常简单的场景来说\",{\"1\":{\"606\":1}}],[\"对于已经使用了celery的项目来说\",{\"1\":{\"605\":1}}],[\"对于事务\",{\"1\":{\"583\":1}}],[\"对于大多数情况\",{\"1\":{\"579\":1}}],[\"对于大部分应用都是合适的选择\",{\"1\":{\"579\":1}}],[\"对于单键索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"对于每一行数据\",{\"1\":{\"461\":1}}],[\"对于不同产品系列有比较多共性特征时\",{\"1\":{\"767\":1}}],[\"对于不同的记录\",{\"1\":{\"340\":1}}],[\"对于不需要分布式处理能力的小型应用或项目来说\",{\"1\":{\"605\":1}}],[\"对于不等于\",{\"1\":{\"455\":1}}],[\"对于查询有一定提高\",{\"1\":{\"451\":1}}],[\"对于有全表扫描和全表锁定的sql语句\",{\"1\":{\"408\":1}}],[\"对于数据库的影响\",{\"0\":{\"814\":1}}],[\"对于数据库的多表操作时\",{\"1\":{\"407\":1}}],[\"对于数据库连接来说就只连接5次\",{\"1\":{\"507\":1,\"520\":1}}],[\"对于数据进行多版本的处理\",{\"1\":{\"368\":1}}],[\"对于statement模式无法复制的操作使用row模式保存binlog\",{\"1\":{\"395\":1}}],[\"对于未分区的表\",{\"1\":{\"349\":1}}],[\"对于新的变更操作将仍然被写入到原aof文件中\",{\"1\":{\"261\":1}}],[\"对于变更操作比较密集的server\",{\"1\":{\"260\":1}}],[\"对于添加过的元素不会发生误判\",{\"1\":{\"240\":1}}],[\"对于内存不友好\",{\"1\":{\"211\":1}}],[\"对于cpu不友好\",{\"1\":{\"211\":1}}],[\"对于某些服务\",{\"1\":{\"90\":1}}],[\"对于反馈机制\",{\"1\":{\"46\":1}}],[\"对象和算法进行分离\",{\"1\":{\"1194\":1}}],[\"对象来创建新对象\",{\"1\":{\"894\":1}}],[\"对象拷贝其实是更为快捷的创建对象的方式\",{\"1\":{\"894\":1}}],[\"对象类似于\",{\"1\":{\"200\":1}}],[\"对象在集群中的存活时长\",{\"1\":{\"198\":1}}],[\"对象将创建一个或多个\",{\"1\":{\"196\":1}}],[\"对象之间的结构\",{\"1\":{\"120\":1}}],[\"对象的\",{\"0\":{\"825\":1},\"1\":{\"119\":1}}],[\"对象的spec和status\",{\"0\":{\"113\":1}}],[\"对象中不定义\",{\"1\":{\"118\":1}}],[\"对象中存储的数据可以被\",{\"1\":{\"69\":1}}],[\"对象都包含了两个重要的字段\",{\"1\":{\"113\":1}}],[\"对象\",{\"1\":{\"95\":1,\"99\":1,\"198\":2,\"200\":1,\"278\":1,\"782\":1,\"856\":1}}],[\"对象上配置多个端口定义\",{\"1\":{\"90\":1}}],[\"对象定义一个逻辑组的端点\",{\"1\":{\"86\":1}}],[\"对象时\",{\"1\":{\"69\":1,\"197\":1}}],[\"对频繁集成的抵触\",{\"0\":{\"55\":1}}],[\"对此\",{\"1\":{\"33\":1}}],[\"重量\",{\"1\":{\"1270\":1}}],[\"重量级进程\",{\"1\":{\"725\":1}}],[\"重点是要实现数据隔离\",{\"1\":{\"1051\":1}}],[\"重点不是非要使用栈来做这种数据格式\",{\"1\":{\"1051\":1}}],[\"重传机制\",{\"0\":{\"958\":1}}],[\"重置受影响账户密码等\",{\"1\":{\"631\":1}}],[\"重复这个过程恰好\",{\"1\":{\"1365\":1}}],[\"重复子数组\",{\"2\":{\"1311\":1}}],[\"重复子数组问题\",{\"0\":{\"1306\":1}}],[\"重复上述过程直到没有披萨剩下\",{\"1\":{\"1282\":1}}],[\"重复发送多次\",{\"1\":{\"952\":1}}],[\"重复代码\",{\"1\":{\"549\":1}}],[\"重复事务自动化\",{\"0\":{\"25\":1},\"1\":{\"25\":1}}],[\"重复事务自动化和监测一切是验证环的四个工作原则\",{\"1\":{\"22\":1}}],[\"重做\",{\"1\":{\"469\":1}}],[\"重做日志\",{\"1\":{\"425\":1}}],[\"重启后则会失效\",{\"1\":{\"503\":1}}],[\"重启时可以读取redo\",{\"1\":{\"425\":1}}],[\"重启mysql\",{\"1\":{\"279\":1,\"503\":1}}],[\"重启效率因此大幅得到提升\",{\"1\":{\"264\":1}}],[\"重启的时候\",{\"1\":{\"264\":1}}],[\"重启策略\",{\"1\":{\"112\":1}}],[\"重写过程中\",{\"1\":{\"261\":1}}],[\"重写\",{\"0\":{\"261\":1,\"827\":1}}],[\"重新分配一个\",{\"1\":{\"245\":1}}],[\"重新创建\",{\"0\":{\"158\":1}}],[\"重新出现的情况\",{\"1\":{\"74\":1}}],[\"重要\",{\"1\":{\"115\":1}}],[\"重要反馈优先\",{\"1\":{\"46\":1}}],[\"当待查找区间中的元素个数为奇数个\",{\"1\":{\"1393\":1}}],[\"当nums\",{\"1\":{\"1395\":3}}],[\"当nums1\",{\"1\":{\"1307\":1}}],[\"当num\",{\"1\":{\"1340\":1}}],[\"当s\",{\"1\":{\"1313\":2}}],[\"当socket\",{\"1\":{\"679\":2}}],[\"当不同时我们取两个最大的就可以了\",{\"1\":{\"1308\":1}}],[\"当天没有股票所以为0\",{\"1\":{\"1292\":1}}],[\"当物品为0时\",{\"1\":{\"1271\":1}}],[\"当背包容量为0时\",{\"1\":{\"1271\":1}}],[\"当它们相遇时我们需要做什么\",{\"1\":{\"1263\":1}}],[\"当可以用这种方法将所有人分进两组时\",{\"1\":{\"1237\":1}}],[\"当时我在做就是在纠结信封的宽度一致如何处理\",{\"1\":{\"1209\":1}}],[\"当时我在学习这个模式时老师讲到一个经典的例子就是购物车\",{\"1\":{\"780\":1}}],[\"当另一个信封的宽度和高度都比这个信封大的时候\",{\"1\":{\"1209\":1}}],[\"当遍历到4时我们需要得到前面数组的信息\",{\"1\":{\"1207\":1}}],[\"当请求过来的时候会执行\",{\"1\":{\"1057\":1}}],[\"当线程池中所有的线程都被占用后\",{\"1\":{\"1036\":1}}],[\"当任务到来后\",{\"1\":{\"1036\":1}}],[\"当绿灯时所有子线程都恢复\",{\"1\":{\"1035\":1}}],[\"当红灯时所有子线程都暂停运行\",{\"1\":{\"1035\":1}}],[\"当函数被执行时\",{\"1\":{\"983\":1}}],[\"当函数内部抛出异常而未被捕获时\",{\"1\":{\"754\":1}}],[\"当本次请求需要的数据完毕后\",{\"1\":{\"962\":1}}],[\"当浏览器需要从服务器获取网页数据的时候\",{\"1\":{\"962\":1}}],[\"当发送端的数据到达接收主机时\",{\"1\":{\"958\":1}}],[\"当发生行溢出时\",{\"1\":{\"327\":1}}],[\"当客户端发生的\",{\"1\":{\"952\":1}}],[\"当达到容量上限时\",{\"1\":{\"912\":1}}],[\"当执行list\",{\"1\":{\"909\":1}}],[\"当你创建一个新对象时\",{\"1\":{\"901\":1}}],[\"当你将浏览器配置成使用代理功能时\",{\"1\":{\"769\":1}}],[\"当处理大规模数据时\",{\"1\":{\"893\":1}}],[\"当上下文代码中出现异常时\",{\"1\":{\"847\":1,\"1009\":1}}],[\"当上下文中的代码正常执行的时候这些参数都是none没有任何意义\",{\"1\":{\"847\":1,\"1009\":1}}],[\"当上一个entry长度小于254字节时\",{\"1\":{\"219\":1}}],[\"当脱离了这个上下文环境就是none\",{\"1\":{\"847\":1,\"1009\":1}}],[\"当缓存容量满了以后\",{\"1\":{\"837\":1,\"1001\":1}}],[\"当责任链未正确配置时\",{\"1\":{\"809\":1}}],[\"当第一次导入模块时\",{\"1\":{\"782\":1}}],[\"当互联网返回响应时\",{\"1\":{\"769\":1}}],[\"当需要找出一组数据中的前k个最大或最小元素时\",{\"1\":{\"921\":1}}],[\"当需要执行一个异步io操作时\",{\"1\":{\"899\":1}}],[\"当需要添加新产品时\",{\"1\":{\"790\":1}}],[\"当需要对一个对象的访问提供一些额外操作时\",{\"1\":{\"769\":1}}],[\"当需要提升代码的扩展性并降低维护成本时\",{\"1\":{\"767\":1}}],[\"当需要访问某个页的数据时\",{\"1\":{\"319\":1}}],[\"当条件不满足预期我们主动抛出异常\",{\"1\":{\"753\":1}}],[\"当预期某段代码可能引发异常时\",{\"1\":{\"742\":1}}],[\"当没有更多的值可返回时\",{\"1\":{\"731\":1}}],[\"当没有索引时\",{\"1\":{\"405\":1}}],[\"当两台设备通过插座\",{\"1\":{\"676\":1}}],[\"当告警触发时\",{\"1\":{\"636\":1}}],[\"当检测到硬件资源接近极限时\",{\"1\":{\"631\":1}}],[\"当有新的版本发布或者配置更改时\",{\"1\":{\"630\":1}}],[\"当cpu使用率持续超过预设阈值一段时间后触发警告级告警\",{\"1\":{\"626\":1}}],[\"当连接被释放时\",{\"1\":{\"579\":1}}],[\"当目前总连接数没有超过配置的上限且池中没有现成可用的连接的情况下\",{\"1\":{\"578\":1}}],[\"当一条query所返回的数据超过了全表的15\",{\"1\":{\"507\":1,\"525\":1}}],[\"当一个线程在执行未被上锁代码块时\",{\"1\":{\"1033\":1}}],[\"当一个线程在执行被上锁代码块时\",{\"1\":{\"1033\":1}}],[\"当一个线程执行python字节码时\",{\"1\":{\"897\":1}}],[\"当一个事务第一次执行查询\",{\"1\":{\"477\":1}}],[\"当一个pod中所有容器都准备好\",{\"1\":{\"146\":1}}],[\"当我们遇到这些关键字就需要注意了我们需要用到快慢指针\",{\"1\":{\"1263\":1}}],[\"当我们发现手动模拟一下感觉可以局部最优推出整体最优\",{\"1\":{\"1359\":1}}],[\"当我们发现出现了偶数次我们第一反应就是使用\",{\"1\":{\"1340\":1}}],[\"当我们发现题目中有连通两个词那么我们不妨试试并查集\",{\"1\":{\"1230\":1}}],[\"当我们发送请求的时候会打印call\",{\"1\":{\"1057\":1}}],[\"当我们传过来一个关键字的时候\",{\"1\":{\"1189\":1}}],[\"当我们排除掉一些模版静态文件之后我们可以得到以下部分\",{\"1\":{\"1059\":1}}],[\"当我们被问到python多线程的时候\",{\"1\":{\"1029\":1}}],[\"当我们释放\",{\"1\":{\"578\":1}}],[\"当我们使用engine对象所对应的sql数据库连接的资源时\",{\"1\":{\"578\":1}}],[\"当我们拿到这个\",{\"1\":{\"506\":1}}],[\"当我们在浏览器使用开发者工具的时候\",{\"1\":{\"970\":1}}],[\"当我们在\",{\"1\":{\"115\":1}}],[\"当然\",{\"1\":{\"809\":1}}],[\"当然也可以自定义一些属性\",{\"1\":{\"751\":1}}],[\"当然就是从该记录开始\",{\"1\":{\"455\":1}}],[\"当然这个每个人的理解都不同\",{\"1\":{\"345\":1}}],[\"当mysql接收到客户端的查询sql之后\",{\"1\":{\"431\":1}}],[\"当数据发生修改时\",{\"1\":{\"425\":1}}],[\"当进行索引查询时\",{\"1\":{\"420\":2,\"456\":1}}],[\"当进行缓冲池中的脏页刷新到磁盘的操作时\",{\"1\":{\"320\":1,\"469\":1}}],[\"当i=3\",{\"1\":{\"1376\":1}}],[\"当i=j时\",{\"1\":{\"1307\":1}}],[\"当i=j时这时dp\",{\"1\":{\"1299\":1}}],[\"当i\",{\"1\":{\"1376\":1}}],[\"当i与j相同\",{\"1\":{\"1299\":1}}],[\"当io操作完成时\",{\"1\":{\"898\":1}}],[\"当ib\",{\"1\":{\"390\":1}}],[\"当innodb引擎根据查询统计发现某一查询满足hash索引的数据结构特点\",{\"1\":{\"314\":1,\"420\":1}}],[\"当事务提交时\",{\"1\":{\"425\":1}}],[\"当事务提交的时候\",{\"1\":{\"389\":1}}],[\"当事务对数据库进行修改时\",{\"1\":{\"425\":1}}],[\"当事务对数据加上共享锁后\",{\"1\":{\"404\":1}}],[\"当事务回滚时使用undo\",{\"1\":{\"379\":1}}],[\"当系统比较空闲时\",{\"1\":{\"1036\":1}}],[\"当系统时间到达某个任务的时间戳时\",{\"1\":{\"609\":1}}],[\"当系统崩溃\",{\"1\":{\"388\":1}}],[\"当系统启动时\",{\"1\":{\"325\":1}}],[\"当故障发生致使内存数据丢失后\",{\"1\":{\"383\":1}}],[\"当读取的某一行被其他事务锁定时\",{\"1\":{\"380\":1}}],[\"当update一条记录时\",{\"1\":{\"380\":1}}],[\"当某条连接有新的数据可以处理时\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"当某个部署流水线的一次运行实例构建出制品\",{\"1\":{\"46\":1}}],[\"当内存中的数据被全部写入到新的aof文件之后\",{\"1\":{\"261\":1}}],[\"当buffer数据达到阀值时触发实际写入\",{\"1\":{\"260\":1}}],[\"当用户在读取该范围的数据时会发现有新的幻影行\",{\"1\":{\"482\":1}}],[\"当用户设置了多个save的选项配置\",{\"1\":{\"256\":1}}],[\"当用户需要自定义selector时\",{\"1\":{\"198\":1}}],[\"当在规定的时间内\",{\"1\":{\"256\":1}}],[\"当其中一个缓冲过期后\",{\"1\":{\"251\":1}}],[\"当实际元素数量超过初始化数量时\",{\"1\":{\"245\":1}}],[\"当以下两个条件都满足时\",{\"1\":{\"201\":1}}],[\"当成功结束的\",{\"1\":{\"197\":1}}],[\"当\",{\"1\":{\"197\":1,\"198\":1,\"227\":2,\"332\":1,\"349\":2,\"460\":1,\"513\":1,\"1208\":2}}],[\"当删除\",{\"1\":{\"190\":1}}],[\"当前citations\",{\"1\":{\"1403\":1}}],[\"当前矩形的面积是多少\",{\"1\":{\"1377\":1}}],[\"当前位置值不是\",{\"1\":{\"1354\":1}}],[\"当前格子的血量取最大值\",{\"1\":{\"1303\":1}}],[\"当前披萨的位置\",{\"1\":{\"1282\":1}}],[\"当前元素\",{\"1\":{\"1198\":2}}],[\"当前flask版本为3\",{\"1\":{\"1045\":1}}],[\"当前线程或进程\",{\"1\":{\"898\":1}}],[\"当前jwt已经过期了\",{\"1\":{\"872\":1}}],[\"当前系统所需并发数据库连接\",{\"1\":{\"580\":1}}],[\"当前query中过滤性最好的字段在索引字段顺序中排列要靠前\",{\"1\":{\"507\":1,\"525\":1}}],[\"当前sql的具体功能\",{\"1\":{\"507\":1}}],[\"当前写操作没有完成前\",{\"1\":{\"401\":1}}],[\"当前读和快照读不同\",{\"1\":{\"373\":1,\"482\":1}}],[\"当前读是读取的数据库最新的数据\",{\"1\":{\"373\":1,\"482\":1}}],[\"当前读\",{\"1\":{\"373\":1,\"482\":5}}],[\"当前查询执行的数据表\",{\"1\":{\"349\":1}}],[\"当前entry的长度\",{\"1\":{\"218\":1}}],[\"当前需要无头服务\",{\"1\":{\"190\":1}}],[\"当前支持的路径类型有三种\",{\"1\":{\"100\":1}}],[\"当节点从集群中移除时\",{\"1\":{\"186\":1}}],[\"当使用\",{\"1\":{\"177\":1,\"349\":1}}],[\"当确认新版本运行良好后\",{\"1\":{\"171\":1}}],[\"当此值为\",{\"1\":{\"159\":1}}],[\"当此值设置为\",{\"1\":{\"159\":1}}],[\"当探测失败时\",{\"1\":{\"147\":1}}],[\"当type为时\",{\"1\":{\"87\":1}}],[\"当已挂载的\",{\"1\":{\"74\":1}}],[\"当部署完成流水线后如何才能让开发自己触发流水线\",{\"1\":{\"46\":1}}],[\"当部署失败时\",{\"1\":{\"32\":1}}],[\"稳定可靠\",{\"1\":{\"664\":1}}],[\"稳定的\",{\"1\":{\"191\":1}}],[\"稳定\",{\"1\":{\"191\":1}}],[\"稳定运行\",{\"1\":{\"46\":1}}],[\"稳定性等指标纳入绩效考核\",{\"1\":{\"33\":1}}],[\"所代表的含义是\",{\"1\":{\"1393\":1}}],[\"所背的物品价值可以最大为dp\",{\"1\":{\"1273\":2}}],[\"所缓存的数据就越多\",{\"1\":{\"514\":1}}],[\"所花费的时间也会越来越多\",{\"1\":{\"498\":1}}],[\"所取的数据完全在索引中就能拿到\",{\"1\":{\"415\":1}}],[\"所拥有的记录的数量\",{\"1\":{\"324\":1}}],[\"所谓左右指针\",{\"1\":{\"1255\":1}}],[\"所谓local\",{\"1\":{\"1101\":1}}],[\"所谓的无状态\",{\"1\":{\"962\":1}}],[\"所谓无状态就是服务端并不会保存身份认证相关的数据\",{\"1\":{\"690\":1}}],[\"所谓\",{\"1\":{\"268\":1,\"269\":1}}],[\"所示\",{\"1\":{\"227\":1}}],[\"所保存字符串的长度\",{\"1\":{\"226\":1}}],[\"所在时区来进行计算的\",{\"1\":{\"200\":1}}],[\"所需的pod\",{\"1\":{\"153\":1}}],[\"所投射的内容最终也会被更新\",{\"1\":{\"74\":1}}],[\"所有字符\",{\"1\":{\"1300\":1}}],[\"所有可能的组合为\",{\"1\":{\"1275\":1}}],[\"所有可能的路径\",{\"0\":{\"1221\":1}}],[\"所有箭头方向都是一致的\",{\"1\":{\"1240\":1}}],[\"所有子序列的长度\",{\"1\":{\"1198\":1}}],[\"所有信息通过请求传递\",{\"1\":{\"1144\":1}}],[\"所有信号\",{\"0\":{\"1110\":1}}],[\"所有视图函数的url默认回调函数应用程序\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"所有生成器交替执行\",{\"1\":{\"1041\":1}}],[\"所有内置非系统退出异常的基类\",{\"1\":{\"986\":1}}],[\"所有assert语句将被忽略\",{\"1\":{\"756\":1}}],[\"所有平台\",{\"1\":{\"705\":1}}],[\"所有线程共享同一个数据库连接\",{\"1\":{\"579\":1}}],[\"所有需要查询的字段的值\",{\"1\":{\"415\":1}}],[\"所有没有提交的事务的数据自动回滚\",{\"1\":{\"390\":1}}],[\"所有已经提交的事务的数据仍然存在\",{\"1\":{\"390\":1}}],[\"所有引擎都可以使用\",{\"1\":{\"390\":1}}],[\"所有根节点和支节点同样大小的情况下\",{\"1\":{\"345\":1}}],[\"所有叶子节点之间都有一个链指针\",{\"1\":{\"344\":1}}],[\"所有叶子节点都在同一层\",{\"1\":{\"338\":1}}],[\"所有表共同使用一个\",{\"1\":{\"334\":1}}],[\"所有的初始化为即可\",{\"1\":{\"1307\":1}}],[\"所有的\",{\"1\":{\"1300\":1}}],[\"所有的文件强制添加以下文件头\",{\"1\":{\"531\":1}}],[\"所有的操作都是按照顺序线性执行的\",{\"1\":{\"268\":1}}],[\"所有的键值对的健和值的字符串长度都小于等于\",{\"1\":{\"220\":1}}],[\"所有\",{\"1\":{\"200\":1,\"1242\":1,\"1281\":2,\"1354\":1}}],[\"所有现有的\",{\"1\":{\"158\":1}}],[\"所有这些对象合起来\",{\"1\":{\"112\":1}}],[\"所有机器安装nfs\",{\"1\":{\"63\":1}}],[\"所有节点中\",{\"1\":{\"339\":1}}],[\"所有节点\",{\"1\":{\"63\":1}}],[\"所有角色的目标必须统一\",{\"1\":{\"32\":1}}],[\"所以想到了二分算法\",{\"1\":{\"1403\":1}}],[\"所以她的\",{\"1\":{\"1403\":1}}],[\"所以你应该输出2\",{\"1\":{\"1364\":1}}],[\"所以你应该输出1\",{\"1\":{\"1364\":1}}],[\"所以递归三部曲中同样也适用于dfs\",{\"1\":{\"1347\":1}}],[\"所以用递归的方式来实现是最方便的\",{\"1\":{\"1347\":1}}],[\"所以用0\",{\"1\":{\"1280\":1}}],[\"所以啊a^b一定有一\",{\"1\":{\"1340\":1}}],[\"所以要从i+1开始算起\",{\"1\":{\"1299\":1}}],[\"所以要用一个for循环将所有节点都作为起点调用一次\",{\"1\":{\"1241\":1}}],[\"所以i是从下到上\",{\"1\":{\"1299\":1}}],[\"所以innodb要求表必须有主键\",{\"1\":{\"414\":1}}],[\"所以是回文串\",{\"1\":{\"1297\":1}}],[\"所以最大利润为\",{\"1\":{\"1292\":2}}],[\"所以也需要求最长子序列的长度\",{\"1\":{\"1288\":1}}],[\"所以也是可迭代对象\",{\"1\":{\"892\":1}}],[\"所以长度为max\",{\"1\":{\"1281\":1}}],[\"所以和打家劫舍连续起来\",{\"1\":{\"1281\":1}}],[\"所以答案是\",{\"1\":{\"1274\":1,\"1366\":1}}],[\"所以数组转化为\",{\"1\":{\"1274\":4}}],[\"所以代码如下\",{\"1\":{\"1230\":1}}],[\"所以说它们的复杂度和find一样\",{\"1\":{\"1225\":1}}],[\"所以对于这里\",{\"1\":{\"1220\":1}}],[\"所以对于普通的select语句\",{\"1\":{\"405\":1}}],[\"所以遍历是所有数据结构的基础\",{\"1\":{\"1220\":1}}],[\"所以有向图中每个节点\",{\"1\":{\"1218\":1}}],[\"所以可以省略这一步吗\",{\"1\":{\"1207\":1}}],[\"所以初始化为1\",{\"1\":{\"1207\":1}}],[\"所以情况有两种\",{\"1\":{\"1198\":1}}],[\"所以自己就看了下关于这个访问者的设计模式\",{\"1\":{\"1177\":1}}],[\"所以若要保证线程安全\",{\"1\":{\"1031\":1}}],[\"所以如果列表元素可以用某种算法用已知量推导出来\",{\"1\":{\"1022\":1}}],[\"所以如果可以\",{\"1\":{\"408\":1}}],[\"所以受到内存限制\",{\"1\":{\"1022\":1}}],[\"所以安全上存在以下三个风险\",{\"1\":{\"971\":1}}],[\"所以记不住任何状态\",{\"1\":{\"962\":1}}],[\"所以http连接是一种短连接\",{\"1\":{\"962\":1}}],[\"所以heap\",{\"1\":{\"324\":1}}],[\"所以服务端的\",{\"1\":{\"954\":1}}],[\"所以服务端每收到一个\",{\"1\":{\"952\":1}}],[\"所以需要加一\",{\"1\":{\"1275\":1}}],[\"所以需要在\",{\"1\":{\"900\":1}}],[\"所以需要定期进行aof重写\",{\"1\":{\"259\":1}}],[\"所以这是完全背包问题\",{\"1\":{\"1275\":1}}],[\"所以这里求的是排列问题\",{\"1\":{\"1275\":1}}],[\"所以这里我们可以确定以上的说法是正确的\",{\"1\":{\"1094\":1}}],[\"所以这里就是定义视图函数\",{\"1\":{\"1063\":1}}],[\"所以这里查了些资料关于monkey\",{\"1\":{\"587\":1}}],[\"所以这次还是2print\",{\"1\":{\"856\":1}}],[\"所以先输出2print\",{\"1\":{\"856\":1}}],[\"所以不建议使用左闭右开区间这种写法\",{\"1\":{\"1392\":1}}],[\"所以不参与交易可以获得最大利润\",{\"1\":{\"1292\":1}}],[\"所以不需要加括号调用\",{\"1\":{\"856\":1}}],[\"所以不能使用索引中的值来避免读取行\",{\"1\":{\"461\":1}}],[\"所以出现一个概念叫负载均衡\",{\"1\":{\"813\":1}}],[\"所以我想学习下robot\",{\"1\":{\"1186\":1}}],[\"所以我们输出\",{\"1\":{\"1366\":1}}],[\"所以我们在和ab进行运算即可消除\",{\"1\":{\"1340\":1}}],[\"所以我们在新线程里修改my\",{\"1\":{\"855\":1}}],[\"所以我们需要定义两个dp数组\",{\"1\":{\"1288\":1}}],[\"所以我们需要再初始值和递推公式上稍微做点改变\",{\"1\":{\"1276\":1}}],[\"所以我们可以得出其中一个数最右边一定不为1\",{\"1\":{\"1340\":1}}],[\"所以我们可以理解为相邻的两个元素是不可以取得\",{\"1\":{\"1281\":1}}],[\"所以我们可以直接套用模版\",{\"1\":{\"1229\":1}}],[\"所以我们可以使用dfs进行遍历一遍图即可得到答案\",{\"1\":{\"1229\":1}}],[\"所以我们就不再需要visited数组了\",{\"1\":{\"1221\":1}}],[\"所以我们应该使用一个visited数组进行辅助\",{\"1\":{\"1220\":1}}],[\"所以我们使用的生成器函数也是不可逆的\",{\"1\":{\"735\":1}}],[\"所以我这里提供的是前端使用vue来实现socket\",{\"1\":{\"673\":1}}],[\"所以debug对于调测就是神器\",{\"1\":{\"729\":1}}],[\"所以查询了很多的资料来学习下关于python多进程\",{\"1\":{\"702\":1}}],[\"所以还是比较奇怪为什么它会选择多进程呢\",{\"1\":{\"702\":1}}],[\"所以被驱动表需要进行扫描\",{\"1\":{\"513\":1}}],[\"所以速度很快\",{\"1\":{\"507\":1,\"521\":1}}],[\"所以优先选择\",{\"1\":{\"487\":1}}],[\"所以发生资源争抢的概率也最小\",{\"1\":{\"404\":1}}],[\"所以当我们需要return时需要这么写\",{\"1\":{\"1221\":1}}],[\"所以当我们使用完连接对象之后\",{\"1\":{\"582\":1}}],[\"所以当前读是需要对数据进行加锁的\",{\"1\":{\"373\":1,\"482\":1}}],[\"所以当data数据较大时\",{\"1\":{\"342\":1}}],[\"所以上面的b\",{\"1\":{\"339\":1}}],[\"所以compact行格式把这些值为null的列存储到null值列表中\",{\"1\":{\"323\":1}}],[\"所以在存储数据的时候要把这些数据占用的字节数也存起来\",{\"1\":{\"323\":1}}],[\"所以库级别的数据库操作还是有io瓶颈\",{\"1\":{\"303\":1}}],[\"所以redis才叫单线程模型\",{\"1\":{\"268\":1}}],[\"所以redis主进程阻塞时间只有fork阶段的那一下\",{\"1\":{\"256\":1}}],[\"所以它的适用范围应该还是比较有限的\",{\"1\":{\"234\":1}}],[\"所以获取一个\",{\"1\":{\"227\":1}}],[\"所以为了获取一个\",{\"1\":{\"227\":1}}],[\"所以为我们需要流程来规范每个同事\",{\"1\":{\"58\":1}}],[\"所以ziplist只好将一些必要的偏移量信息记录在了每一个节点里\",{\"1\":{\"218\":1}}],[\"所以\",{\"1\":{\"117\":1,\"219\":1,\"227\":1,\"268\":1,\"345\":1,\"361\":2,\"959\":1,\"977\":1,\"1041\":1,\"1325\":1,\"1393\":1}}],[\"所以删除就没\",{\"1\":{\"117\":1}}],[\"所以流水线必须要快速体现结果\",{\"1\":{\"46\":1}}],[\"更改数组\",{\"1\":{\"1266\":1}}],[\"更改你的镜像或者命令行\",{\"1\":{\"72\":1}}],[\"更高效的性能\",{\"1\":{\"1089\":1}}],[\"更清晰的上下文管理\",{\"1\":{\"1069\":1,\"1089\":1}}],[\"更细粒度的上下文绑定\",{\"1\":{\"1069\":1}}],[\"更简单点理解生成器就是一个迭代器\",{\"1\":{\"1021\":1}}],[\"更加容易扩展\",{\"1\":{\"765\":1}}],[\"更加是组织文化的体现\",{\"1\":{\"46\":1}}],[\"更好的做法是预先检查文件存在\",{\"1\":{\"758\":1}}],[\"更重要的是通过对历史数据进行深入分析来不断优化现有规则配置\",{\"1\":{\"628\":1}}],[\"更重要的是不需要反复的创建的销毁连接\",{\"1\":{\"358\":2}}],[\"更适合中小型项目中的定时任务需求\",{\"1\":{\"607\":1}}],[\"更快地获取连接\",{\"1\":{\"579\":1}}],[\"更能为团队创造可持续的价值\",{\"1\":{\"557\":1}}],[\"更急需优化\",{\"1\":{\"507\":1}}],[\"更不需要发生任何存储引擎的交互\",{\"1\":{\"431\":1}}],[\"更大的过滤器\",{\"1\":{\"245\":1}}],[\"更新为\",{\"1\":{\"1208\":1}}],[\"更新该位置的值为nums\",{\"1\":{\"1207\":1}}],[\"更新有两种方法\",{\"1\":{\"943\":1}}],[\"更新计数器\",{\"1\":{\"940\":1}}],[\"更新非常频繁的字段不适合创建索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"更新数据库删除缓存\",{\"1\":{\"289\":2}}],[\"更新完成数据库的时候\",{\"1\":{\"285\":1}}],[\"更新mysql数据库的值\",{\"1\":{\"283\":1}}],[\"更新\",{\"1\":{\"165\":1,\"178\":1,\"482\":2,\"599\":1}}],[\"更新过程中不可用的\",{\"1\":{\"159\":1}}],[\"更新资源的注解\",{\"1\":{\"124\":1}}],[\"更新资源标签\",{\"1\":{\"124\":1}}],[\"更新一个或多个节点上的污点\",{\"1\":{\"124\":1}}],[\"更新到新键映射到\",{\"1\":{\"74\":1}}],[\"更是团队协作的\",{\"1\":{\"58\":1}}],[\"更是构建高质量软件和高效团队协作的基石\",{\"1\":{\"49\":1}}],[\"更是组织敏捷性的终极体现\",{\"1\":{\"46\":1}}],[\"更是安全\",{\"1\":{\"45\":1}}],[\"更是贯穿整个软件生命周期的反馈环\",{\"1\":{\"43\":1}}],[\"更是持续交付体系的\",{\"1\":{\"37\":1}}],[\"更是一面\",{\"1\":{\"34\":1}}],[\"更是可以直接应用于日常工作中的有效策略\",{\"1\":{\"26\":1}}],[\"试金石\",{\"0\":{\"46\":1}}],[\"试验结果不应该用于直接评判个人\",{\"1\":{\"30\":1}}],[\"合理使用异常处理机制对于提升程序的健壮性至关重要\",{\"1\":{\"758\":1}}],[\"合理利用logging模块记录日志信息是监控程序运行状态\",{\"1\":{\"755\":1}}],[\"合理的监控指标可以帮助我们快速定位性能瓶颈和服务故障点\",{\"1\":{\"625\":1}}],[\"合理设计并利用索引\",{\"0\":{\"525\":1},\"1\":{\"507\":1}}],[\"合理规划迭代范围\",{\"1\":{\"32\":1}}],[\"合规的价值\",{\"1\":{\"45\":1}}],[\"合规检查\",{\"1\":{\"45\":1}}],[\"问总共有多少条不同的路径\",{\"1\":{\"1303\":1}}],[\"问凑满这个背包最少有多少物品\",{\"1\":{\"1276\":1}}],[\"问背包能背的物品最大价值是多少\",{\"1\":{\"1271\":1}}],[\"问题中有设计最大值\",{\"1\":{\"1359\":1}}],[\"问题的\",{\"1\":{\"1225\":1}}],[\"问题又来了如果元素两个条件都可以满足该怎么办\",{\"1\":{\"1198\":1}}],[\"问题2\",{\"0\":{\"1048\":1}}],[\"问题1\",{\"0\":{\"1047\":1}}],[\"问题引入\",{\"0\":{\"843\":1,\"1045\":1}}],[\"问题为什么对象不可以直接被序列化\",{\"0\":{\"823\":1}}],[\"问题三\",{\"0\":{\"692\":1,\"848\":1},\"1\":{\"1009\":1,\"1376\":1}}],[\"问题二\",{\"0\":{\"687\":1,\"878\":1},\"1\":{\"847\":1,\"1009\":1,\"1376\":1}}],[\"问题点\",{\"0\":{\"294\":1}}],[\"问题一\",{\"0\":{\"686\":1,\"877\":1},\"1\":{\"283\":1,\"847\":1,\"1009\":1,\"1376\":1}}],[\"问题有可能更新缓存失败\",{\"1\":{\"282\":1}}],[\"问题redis单线程如何处理多并发客户端连接\",{\"1\":{\"267\":1}}],[\"问题\",{\"0\":{\"286\":1,\"853\":1},\"1\":{\"44\":1,\"57\":1,\"264\":1,\"304\":1,\"482\":1,\"590\":1,\"1379\":1}}],[\"问责\",{\"1\":{\"32\":2}}],[\"r2\",{\"1\":{\"1280\":2}}],[\"r1\",{\"1\":{\"1280\":2}}],[\"rlock\",{\"1\":{\"1032\":1}}],[\"rv\",{\"1\":{\"844\":3,\"849\":6,\"856\":8,\"1010\":6,\"1049\":8,\"1050\":3,\"1094\":4,\"1103\":10,\"1111\":5,\"1112\":5}}],[\"rbr\",{\"0\":{\"393\":1}}],[\"rdb\",{\"1\":{\"264\":3}}],[\"rdb的cow机制中\",{\"1\":{\"258\":1}}],[\"rdb的优缺点\",{\"0\":{\"258\":1}}],[\"rdb无法做到实时持久化\",{\"1\":{\"258\":1}}],[\"rdb文件小\",{\"1\":{\"258\":1}}],[\"rdb子进程会根据redis主进程的内存生成临时的快照文件\",{\"1\":{\"257\":1}}],[\"rdb执行流程\",{\"0\":{\"257\":1}}],[\"rdb持久化触发机制分为\",{\"1\":{\"256\":1}}],[\"rdb快照是某个时间点的一次全量数据备份\",{\"1\":{\"256\":1}}],[\"rdb机制\",{\"0\":{\"256\":1}}],[\"rabbit\",{\"1\":{\"1314\":2}}],[\"rabbitmq服务启动\",{\"1\":{\"656\":1}}],[\"rabbitmq\",{\"1\":{\"647\":1}}],[\"rabbbit\",{\"1\":{\"1314\":4}}],[\"raceacar\",{\"1\":{\"1297\":1}}],[\"race\",{\"1\":{\"1297\":1}}],[\"raise\",{\"1\":{\"732\":1,\"744\":1,\"751\":1,\"753\":1,\"754\":1,\"758\":1,\"827\":1,\"849\":3,\"854\":2,\"856\":1,\"861\":1,\"862\":1,\"872\":2,\"879\":1,\"1010\":3,\"1049\":3,\"1050\":3,\"1063\":2,\"1094\":4,\"1098\":1,\"1100\":1,\"1102\":1,\"1103\":2,\"1104\":1,\"1188\":2,\"1189\":1,\"1194\":1}}],[\"rank大\",{\"1\":{\"1226\":1}}],[\"rank\",{\"1\":{\"1226\":1,\"1227\":6}}],[\"randint\",{\"1\":{\"735\":2}}],[\"rand\",{\"1\":{\"716\":1,\"720\":1}}],[\"random\",{\"1\":{\"212\":2,\"716\":1,\"720\":1,\"735\":3,\"986\":1}}],[\"range\",{\"1\":{\"349\":2,\"350\":1,\"416\":1,\"708\":1,\"709\":1,\"712\":2,\"713\":2,\"736\":1,\"776\":1,\"832\":1,\"833\":1,\"916\":1,\"986\":1,\"996\":1,\"997\":1,\"1023\":3,\"1030\":1,\"1033\":2,\"1049\":2,\"1198\":2,\"1202\":5,\"1207\":3,\"1208\":3,\"1209\":1,\"1227\":2,\"1229\":2,\"1230\":1,\"1236\":1,\"1237\":2,\"1241\":2,\"1242\":2,\"1257\":1,\"1259\":1,\"1265\":1,\"1266\":1,\"1272\":4,\"1273\":2,\"1274\":9,\"1275\":4,\"1276\":4,\"1280\":2,\"1281\":1,\"1286\":2,\"1287\":1,\"1288\":3,\"1289\":2,\"1292\":14,\"1298\":1,\"1299\":10,\"1303\":22,\"1307\":10,\"1308\":6,\"1309\":3,\"1313\":3,\"1314\":5,\"1329\":1,\"1331\":1,\"1335\":1,\"1338\":1,\"1339\":3,\"1352\":3,\"1353\":3,\"1354\":6,\"1364\":1,\"1365\":1,\"1366\":1,\"1379\":3,\"1385\":1,\"1403\":1}}],[\"raw\",{\"1\":{\"96\":1}}],[\"rc=framework\",{\"1\":{\"1194\":1}}],[\"rc=stopped\",{\"1\":{\"1194\":1}}],[\"rcvd\",{\"1\":{\"951\":1}}],[\"rc仅支持基于相等选择器的需求\",{\"1\":{\"179\":1}}],[\"rc\",{\"1\":{\"177\":1,\"371\":1,\"405\":1,\"477\":1,\"478\":2,\"482\":2,\"1194\":5}}],[\"rc和rs\",{\"0\":{\"175\":1}}],[\"rs支持新的基于集合的选择器需求\",{\"1\":{\"179\":1}}],[\"rs控制pod的副本数\",{\"1\":{\"164\":1}}],[\"rs\",{\"1\":{\"162\":1,\"177\":1,\"200\":1}}],[\"rob\",{\"1\":{\"1280\":2}}],[\"robot源码分析\",{\"0\":{\"1424\":1}}],[\"robotsettings\",{\"1\":{\"1194\":2}}],[\"robot的运行流程\",{\"0\":{\"1192\":1}}],[\"robot先获取所用的关键字放在一个list中\",{\"1\":{\"1188\":1}}],[\"robotframework是一个以关键字驱动的测试框架\",{\"1\":{\"1186\":1}}],[\"robotframework\",{\"0\":{\"1193\":1},\"1\":{\"1193\":1,\"1194\":2},\"2\":{\"1184\":1,\"1185\":1,\"1190\":1,\"1191\":1,\"1195\":1,\"1196\":1}}],[\"robot如何使用访问者模式\",{\"0\":{\"1181\":1}}],[\"robot中访问者模式\",{\"0\":{\"1176\":1}}],[\"robot\",{\"1\":{\"570\":4,\"1193\":1,\"1194\":3}}],[\"roivaheb\",{\"1\":{\"799\":1}}],[\"routing\",{\"1\":{\"1100\":1,\"1103\":2}}],[\"routecallable\",{\"1\":{\"1063\":1,\"1094\":2}}],[\"routes\",{\"1\":{\"542\":2,\"654\":1}}],[\"route\",{\"1\":{\"542\":2,\"822\":1,\"831\":1,\"849\":1,\"873\":1,\"1010\":1,\"1057\":1,\"1059\":1,\"1063\":6,\"1077\":1,\"1079\":1,\"1094\":2,\"1112\":1,\"1124\":5,\"1147\":1,\"1152\":1}}],[\"round\",{\"1\":{\"610\":1}}],[\"rowsize\",{\"1\":{\"1354\":7}}],[\"rows\",{\"1\":{\"349\":2,\"498\":1,\"503\":2,\"504\":4,\"513\":1,\"1203\":1}}],[\"row\",{\"0\":{\"393\":2},\"1\":{\"325\":4,\"369\":1,\"469\":1,\"482\":1,\"579\":2,\"720\":4,\"1203\":1,\"1354\":12}}],[\"rollback\",{\"1\":{\"849\":1,\"861\":1,\"879\":1,\"1010\":1}}],[\"roll\",{\"1\":{\"325\":1,\"369\":1,\"476\":1}}],[\"rollingupdate\",{\"0\":{\"159\":1},\"1\":{\"159\":3}}],[\"rollout\",{\"1\":{\"124\":1,\"125\":5,\"165\":6}}],[\"root\",{\"1\":{\"63\":2,\"73\":2,\"460\":2,\"504\":2,\"753\":2,\"1059\":10,\"1220\":16,\"1227\":15,\"1348\":3}}],[\"rule并放到url\",{\"1\":{\"1063\":1}}],[\"rule\",{\"1\":{\"1059\":6,\"1063\":10,\"1094\":11,\"1103\":5}}],[\"rules\",{\"1\":{\"97\":1,\"98\":1,\"101\":1}}],[\"ruyuan\",{\"1\":{\"503\":2}}],[\"runkeyword\",{\"1\":{\"1188\":3}}],[\"run这三部分就可以了\",{\"1\":{\"1057\":1}}],[\"runner\",{\"1\":{\"1040\":1,\"1059\":1,\"1194\":5}}],[\"runningloggernamespace\",{\"1\":{\"679\":2}}],[\"runningloggermessagemanager\",{\"1\":{\"679\":2}}],[\"runningtaskmessagemanager\",{\"1\":{\"679\":2}}],[\"running\",{\"1\":{\"135\":1,\"653\":1,\"679\":6,\"681\":4,\"1050\":1,\"1064\":1}}],[\"runtimeerror\",{\"1\":{\"843\":1,\"856\":1,\"1049\":1,\"1094\":1}}],[\"runs\",{\"1\":{\"125\":2,\"555\":2}}],[\"run\",{\"0\":{\"1064\":1},\"1\":{\"117\":1,\"124\":1,\"125\":2,\"555\":4,\"661\":1,\"662\":1,\"680\":1,\"736\":1,\"924\":1,\"925\":1,\"1030\":1,\"1040\":3,\"1049\":1,\"1057\":1,\"1059\":1,\"1064\":8,\"1094\":1,\"1112\":1,\"1124\":3,\"1147\":1,\"1187\":3,\"1188\":2,\"1194\":7}}],[\"rpa\",{\"1\":{\"1194\":2}}],[\"rpa=settings\",{\"1\":{\"1194\":1}}],[\"rpc\",{\"1\":{\"769\":3}}],[\"rpcbind\",{\"1\":{\"63\":1}}],[\"rpm\",{\"1\":{\"108\":1}}],[\"rr解决了幻读\",{\"0\":{\"481\":1}}],[\"rr隔离级别支持\",{\"1\":{\"405\":2}}],[\"rr隔离级别都支持\",{\"1\":{\"405\":1}}],[\"rr\",{\"1\":{\"108\":1,\"371\":1,\"477\":1,\"478\":2,\"482\":5},\"2\":{\"484\":1}}],[\"rid\",{\"1\":{\"1102\":1}}],[\"ri\",{\"1\":{\"108\":1}}],[\"right在循环中会不会意义改变\",{\"1\":{\"1403\":1}}],[\"right代表什么\",{\"1\":{\"1403\":1}}],[\"right的取值范围\",{\"1\":{\"1395\":1}}],[\"right+1\",{\"1\":{\"1393\":2}}],[\"right=\",{\"1\":{\"1391\":1}}],[\"right=mid\",{\"1\":{\"1390\":1,\"1391\":1}}],[\"right\",{\"1\":{\"43\":1,\"1257\":15,\"1258\":5,\"1259\":5,\"1274\":3,\"1297\":7,\"1333\":1,\"1340\":4,\"1377\":8,\"1378\":5,\"1379\":6,\"1390\":8,\"1391\":3,\"1393\":21,\"1394\":3,\"1395\":22,\"1399\":4,\"1400\":8,\"1403\":8}}],[\"rerurn\",{\"1\":{\"1274\":1}}],[\"reraise\",{\"1\":{\"844\":1,\"1050\":1}}],[\"rebot\",{\"1\":{\"1194\":1}}],[\"reuqest\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"render\",{\"0\":{\"1116\":1,\"1129\":1},\"1\":{\"1110\":2,\"1112\":4,\"1116\":1,\"1124\":7,\"1129\":1}}],[\"rendered是一个信号\",{\"1\":{\"1117\":1,\"1130\":1}}],[\"rendered\",{\"0\":{\"1117\":1,\"1130\":1},\"1\":{\"1110\":2}}],[\"re\",{\"1\":{\"986\":1}}],[\"req\",{\"1\":{\"856\":2,\"1045\":5,\"1049\":4,\"1094\":4,\"1103\":6}}],[\"request这个请求处理函数的\",{\"1\":{\"1112\":1}}],[\"request等请求处理函数\",{\"1\":{\"1108\":1}}],[\"request等处理函数进行分析\",{\"1\":{\"1098\":1}}],[\"requestcontext\",{\"1\":{\"1045\":2,\"1073\":1,\"1074\":1,\"1078\":1,\"1100\":3}}],[\"request就是每次请求的request对象\",{\"1\":{\"853\":1}}],[\"request2\",{\"1\":{\"853\":1}}],[\"request1\",{\"1\":{\"853\":1}}],[\"request=\",{\"1\":{\"853\":1}}],[\"request\",{\"0\":{\"1078\":1,\"1114\":1,\"1115\":1,\"1118\":1,\"1119\":1,\"1127\":1,\"1128\":1,\"1131\":1,\"1132\":1},\"1\":{\"799\":6,\"806\":15,\"844\":3,\"856\":4,\"862\":8,\"873\":2,\"1045\":12,\"1049\":9,\"1050\":2,\"1052\":1,\"1059\":19,\"1060\":4,\"1062\":7,\"1064\":2,\"1071\":2,\"1073\":3,\"1074\":4,\"1078\":1,\"1082\":2,\"1084\":5,\"1088\":3,\"1094\":3,\"1098\":6,\"1100\":20,\"1101\":7,\"1102\":16,\"1103\":28,\"1104\":4,\"1108\":1,\"1110\":8,\"1111\":9,\"1112\":9,\"1114\":1,\"1115\":1,\"1118\":1,\"1119\":1,\"1124\":10,\"1127\":1,\"1128\":1,\"1131\":1,\"1132\":1,\"1137\":2}}],[\"requests\",{\"1\":{\"67\":1,\"136\":1,\"591\":1,\"592\":1,\"594\":1,\"597\":2,\"598\":2,\"665\":1}}],[\"require\",{\"1\":{\"1102\":1}}],[\"requirements\",{\"1\":{\"555\":2}}],[\"required=true\",{\"1\":{\"1147\":2,\"1150\":1}}],[\"required\",{\"1\":{\"87\":1,\"133\":1,\"153\":2,\"822\":1,\"831\":1,\"849\":1,\"1010\":1,\"1063\":5,\"1094\":5}}],[\"reverse=true\",{\"1\":{\"1380\":1,\"1384\":1}}],[\"reversestring\",{\"1\":{\"1258\":1}}],[\"reverse\",{\"1\":{\"776\":1}}],[\"reversed\",{\"1\":{\"776\":1,\"1103\":2}}],[\"revision=2\",{\"1\":{\"165\":1}}],[\"revision=1\",{\"1\":{\"125\":2}}],[\"revisionhistorylimit\",{\"0\":{\"162\":1},\"1\":{\"153\":1,\"162\":1}}],[\"remote\",{\"1\":{\"769\":1}}],[\"removeduplicates\",{\"1\":{\"1266\":2}}],[\"removeelement\",{\"1\":{\"1265\":1}}],[\"removes\",{\"1\":{\"856\":1}}],[\"remove\",{\"1\":{\"108\":1}}],[\"register\",{\"1\":{\"662\":8,\"679\":1,\"680\":2,\"1187\":2,\"1194\":3}}],[\"registry\",{\"1\":{\"81\":1,\"96\":1,\"108\":5,\"555\":2}}],[\"retry\",{\"1\":{\"658\":1,\"662\":2,\"833\":1,\"997\":1}}],[\"retries=3\",{\"1\":{\"658\":1}}],[\"returned\",{\"1\":{\"856\":1}}],[\"returns\",{\"1\":{\"549\":1,\"1040\":1,\"1094\":1}}],[\"return\",{\"1\":{\"513\":1,\"531\":1,\"533\":7,\"542\":2,\"545\":1,\"548\":1,\"550\":2,\"651\":1,\"662\":1,\"679\":1,\"708\":1,\"709\":1,\"712\":1,\"720\":1,\"722\":1,\"725\":1,\"732\":2,\"746\":1,\"753\":1,\"756\":1,\"757\":4,\"758\":7,\"776\":12,\"783\":2,\"784\":2,\"790\":2,\"791\":2,\"792\":4,\"799\":3,\"806\":9,\"822\":1,\"824\":4,\"825\":2,\"827\":5,\"828\":2,\"831\":1,\"832\":2,\"833\":3,\"839\":7,\"844\":1,\"847\":2,\"849\":7,\"854\":3,\"856\":10,\"861\":3,\"862\":7,\"863\":3,\"872\":3,\"873\":2,\"879\":1,\"880\":1,\"887\":1,\"900\":1,\"902\":2,\"919\":1,\"920\":1,\"929\":3,\"930\":1,\"932\":5,\"933\":3,\"984\":1,\"992\":1,\"996\":2,\"997\":3,\"1003\":7,\"1009\":2,\"1010\":7,\"1015\":2,\"1017\":2,\"1024\":1,\"1040\":1,\"1049\":13,\"1050\":11,\"1057\":4,\"1059\":1,\"1062\":1,\"1063\":4,\"1064\":2,\"1079\":1,\"1084\":1,\"1094\":4,\"1098\":1,\"1100\":2,\"1103\":8,\"1104\":1,\"1111\":1,\"1112\":2,\"1124\":6,\"1147\":2,\"1166\":1,\"1180\":6,\"1182\":8,\"1183\":2,\"1187\":2,\"1188\":6,\"1189\":2,\"1194\":9,\"1198\":5,\"1202\":2,\"1207\":2,\"1208\":1,\"1209\":1,\"1220\":5,\"1221\":5,\"1226\":1,\"1227\":4,\"1229\":8,\"1230\":3,\"1235\":1,\"1236\":2,\"1237\":3,\"1241\":3,\"1242\":4,\"1257\":1,\"1258\":1,\"1259\":2,\"1265\":1,\"1266\":1,\"1272\":1,\"1274\":8,\"1275\":2,\"1276\":3,\"1280\":6,\"1281\":1,\"1282\":4,\"1286\":2,\"1287\":2,\"1288\":2,\"1289\":8,\"1292\":7,\"1297\":2,\"1298\":3,\"1299\":3,\"1300\":2,\"1303\":6,\"1307\":3,\"1308\":2,\"1309\":2,\"1313\":1,\"1314\":1,\"1331\":1,\"1335\":1,\"1337\":1,\"1338\":2,\"1339\":2,\"1340\":1,\"1341\":1,\"1348\":3,\"1352\":1,\"1353\":1,\"1354\":1,\"1364\":1,\"1365\":1,\"1366\":5,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":4,\"1380\":2,\"1384\":1,\"1385\":1,\"1390\":2,\"1393\":1,\"1395\":6,\"1399\":2,\"1400\":4,\"1403\":2}}],[\"refer\",{\"1\":{\"1189\":1}}],[\"refcnt\",{\"1\":{\"844\":4,\"1050\":4}}],[\"refcount\",{\"1\":{\"844\":1,\"1050\":1}}],[\"ref使用普通索引作为查询条件\",{\"1\":{\"349\":1}}],[\"ref当连表查询时\",{\"1\":{\"349\":1}}],[\"ref\",{\"1\":{\"349\":7,\"350\":2,\"1059\":6}}],[\"redprint\",{\"1\":{\"873\":2}}],[\"red\",{\"1\":{\"563\":6,\"566\":7,\"567\":4,\"873\":1,\"902\":1}}],[\"redo\",{\"0\":{\"381\":1,\"387\":1,\"388\":1},\"1\":{\"334\":1,\"380\":1,\"382\":3,\"383\":3,\"388\":10,\"390\":5,\"425\":7,\"469\":2}}],[\"redundant\",{\"1\":{\"321\":2}}],[\"redis数据库的使用\",{\"1\":{\"816\":1}}],[\"redis命中缓存\",{\"1\":{\"284\":1}}],[\"redis是被b写回的旧值\",{\"1\":{\"283\":1}}],[\"redis中没有数据\",{\"1\":{\"274\":1}}],[\"redis中有数据需要和数据库中的数据一致\",{\"1\":{\"274\":1}}],[\"redis基于reactor模式开发了网络事件处理器\",{\"1\":{\"268\":1}}],[\"redis使用epoll来实现io多路复用\",{\"1\":{\"267\":1}}],[\"redis采取了\",{\"1\":{\"261\":1}}],[\"redis永不直接调用文件同步\",{\"1\":{\"260\":1}}],[\"redis都会记录下此时\",{\"1\":{\"260\":1}}],[\"redis都会触发一次bgsave操作\",{\"1\":{\"256\":1}}],[\"redis加载rdb文件的速度比aof快很多\",{\"1\":{\"258\":1}}],[\"redis主进程会fork一个子进程来执行执行rdb操作\",{\"1\":{\"257\":1}}],[\"redis主进程会检查是否有子进程在执行rdb\",{\"1\":{\"257\":1}}],[\"redis发生了写操作的个数满足条件\",{\"1\":{\"256\":1}}],[\"redis简单缓存设计\",{\"1\":{\"250\":1}}],[\"redis的高qps特性\",{\"1\":{\"249\":1}}],[\"redis默认内存多少可用\",{\"1\":{\"210\":1}}],[\"redis\",{\"0\":{\"264\":1,\"1412\":1},\"1\":{\"210\":3,\"225\":2,\"227\":1,\"255\":4,\"257\":1,\"260\":3,\"262\":1,\"264\":3,\"268\":2,\"529\":1,\"605\":1,\"607\":1,\"647\":2,\"648\":2,\"657\":1,\"679\":1},\"2\":{\"207\":1,\"214\":1,\"221\":1,\"228\":1,\"235\":1,\"246\":1,\"253\":1,\"265\":1,\"271\":1,\"290\":1,\"296\":1}}],[\"redis10\",{\"0\":{\"206\":1}}],[\"redis=tomcat\",{\"1\":{\"165\":2}}],[\"recently\",{\"1\":{\"839\":1,\"1003\":1}}],[\"recent\",{\"1\":{\"755\":1}}],[\"receive\",{\"1\":{\"681\":2,\"1167\":1}}],[\"recv\",{\"1\":{\"590\":1}}],[\"rec\",{\"1\":{\"324\":2}}],[\"recordlock\",{\"1\":{\"482\":1}}],[\"recordlock锁\",{\"1\":{\"405\":1}}],[\"records中插入的记录是一条一条紧凑的排列的\",{\"1\":{\"324\":1}}],[\"record\",{\"1\":{\"165\":1,\"324\":4,\"405\":1}}],[\"recreate\",{\"0\":{\"158\":1}}],[\"real\",{\"1\":{\"771\":1,\"1187\":2}}],[\"reached\",{\"1\":{\"580\":1}}],[\"reactor\",{\"0\":{\"270\":1},\"1\":{\"268\":1,\"270\":6}}],[\"reason\",{\"1\":{\"160\":1}}],[\"ready\",{\"1\":{\"565\":3,\"653\":1}}],[\"read时\",{\"1\":{\"389\":1}}],[\"readview\",{\"0\":{\"371\":1,\"372\":1,\"477\":1},\"2\":{\"480\":1}}],[\"read\",{\"0\":{\"373\":2,\"474\":1,\"478\":1,\"482\":1},\"1\":{\"368\":4,\"371\":6,\"372\":2,\"373\":2,\"404\":1,\"425\":2,\"475\":4,\"477\":8,\"478\":3,\"482\":3,\"742\":1,\"746\":1,\"758\":4,\"846\":1,\"1008\":1}}],[\"readness失败导致不给service负载均衡网络中加\",{\"1\":{\"148\":1}}],[\"readinessprobe\",{\"1\":{\"133\":1,\"147\":1}}],[\"readonly=true\",{\"1\":{\"72\":1}}],[\"readwritemany\",{\"1\":{\"67\":4}}],[\"reliable\",{\"1\":{\"1040\":1}}],[\"relative\",{\"1\":{\"1059\":5,\"1094\":1}}],[\"relationship\",{\"1\":{\"886\":3}}],[\"related\",{\"1\":{\"1\":1}}],[\"release\",{\"1\":{\"578\":1,\"854\":1,\"856\":3,\"1033\":3,\"1049\":2}}],[\"reloader\",{\"1\":{\"1064\":2}}],[\"reload\",{\"1\":{\"108\":1}}],[\"represents\",{\"1\":{\"1188\":1}}],[\"repr\",{\"1\":{\"776\":1,\"1050\":2}}],[\"repeatable\",{\"0\":{\"474\":1,\"482\":1},\"1\":{\"371\":1,\"372\":1,\"404\":1,\"425\":1,\"477\":1,\"482\":1}}],[\"replication\",{\"0\":{\"393\":1,\"394\":1,\"395\":1},\"1\":{\"177\":3}}],[\"replicationcontroller\",{\"0\":{\"177\":1},\"1\":{\"176\":1,\"177\":1}}],[\"replicas=x\",{\"1\":{\"155\":1}}],[\"replicas=3\",{\"1\":{\"125\":1}}],[\"replicaset跟replicationcontroller没有本质的不同\",{\"1\":{\"177\":1}}],[\"replicasets\",{\"1\":{\"162\":2,\"177\":1}}],[\"replicaset\",{\"0\":{\"177\":1},\"1\":{\"124\":1,\"159\":5,\"162\":4,\"164\":1,\"176\":1,\"177\":5}}],[\"replicas\",{\"0\":{\"155\":1},\"1\":{\"64\":1,\"67\":1,\"125\":1,\"153\":1,\"155\":1}}],[\"replace\",{\"1\":{\"124\":1,\"202\":1}}],[\"report\",{\"1\":{\"1194\":4}}],[\"repository\",{\"1\":{\"108\":1}}],[\"repos\",{\"1\":{\"108\":2}}],[\"repo\",{\"1\":{\"108\":4}}],[\"rewrite能够正确反应当前内存数据的状态\",{\"1\":{\"261\":1}}],[\"rewrite期间\",{\"1\":{\"260\":1}}],[\"rewrite\",{\"0\":{\"261\":1},\"1\":{\"101\":1,\"260\":4,\"261\":1,\"262\":6}}],[\"resolve\",{\"1\":{\"1187\":3,\"1188\":2}}],[\"resource\",{\"0\":{\"1149\":1},\"1\":{\"99\":3,\"662\":2,\"847\":11,\"848\":4,\"862\":2,\"1009\":15,\"1146\":1,\"1147\":2,\"1149\":2,\"1152\":1}}],[\"resources\",{\"1\":{\"67\":1,\"124\":1,\"133\":1,\"136\":1,\"165\":1}}],[\"reset\",{\"1\":{\"1050\":1,\"1074\":1,\"1076\":1,\"1081\":1,\"1085\":1,\"1088\":1,\"1102\":1,\"1194\":1}}],[\"res\",{\"1\":{\"832\":2,\"833\":3,\"834\":1,\"863\":3,\"929\":2,\"932\":2,\"933\":2,\"996\":2,\"997\":3,\"998\":1}}],[\"rest直接暴力规划解决\",{\"1\":{\"1282\":1}}],[\"restx\",{\"0\":{\"1145\":1,\"1146\":1,\"1148\":1,\"1153\":1},\"1\":{\"1147\":3,\"1152\":1,\"1156\":1}}],[\"restx这个模块\",{\"1\":{\"1140\":1}}],[\"restful\",{\"0\":{\"859\":1,\"1140\":1,\"1141\":1,\"1144\":1,\"1145\":1,\"1156\":1},\"1\":{\"862\":1,\"888\":1,\"1140\":1,\"1144\":1,\"1146\":1,\"1147\":1,\"1156\":1},\"2\":{\"869\":1,\"1158\":1}}],[\"rest\",{\"1\":{\"690\":1,\"1282\":8}}],[\"restart\",{\"1\":{\"108\":1,\"503\":1}}],[\"restartpolicy\",{\"1\":{\"73\":2,\"143\":2,\"197\":1,\"203\":1}}],[\"response=response\",{\"1\":{\"1103\":1}}],[\"responsereturnvalue\",{\"1\":{\"1103\":3}}],[\"response基类\",{\"1\":{\"863\":1}}],[\"response\",{\"0\":{\"863\":1},\"1\":{\"552\":2,\"597\":2,\"862\":20,\"863\":2,\"924\":2,\"925\":2,\"1057\":2,\"1059\":8,\"1064\":6,\"1084\":2,\"1098\":7,\"1100\":5,\"1103\":19,\"1104\":5,\"1111\":1,\"1112\":1,\"1124\":2,\"1166\":2,\"1167\":2}}],[\"resquese\",{\"1\":{\"530\":2}}],[\"resultwriter\",{\"1\":{\"1194\":1}}],[\"result=true\",{\"1\":{\"658\":1}}],[\"results\",{\"1\":{\"657\":1,\"708\":1,\"1194\":1}}],[\"result\",{\"1\":{\"349\":1,\"579\":2,\"648\":1,\"652\":2,\"653\":6,\"657\":2,\"661\":1,\"662\":1,\"709\":1,\"735\":1,\"743\":1,\"748\":2,\"755\":2,\"776\":2,\"806\":3,\"839\":3,\"880\":8,\"1003\":3,\"1033\":1,\"1194\":6,\"1198\":4,\"1221\":18,\"1229\":1,\"1230\":3,\"1242\":5,\"1257\":3,\"1259\":8,\"1288\":3,\"1299\":3,\"1300\":3,\"1307\":8,\"1308\":8,\"1309\":4,\"1329\":3,\"1337\":3,\"1338\":3,\"1339\":5,\"1352\":3,\"1353\":4,\"1376\":3,\"1377\":4,\"1378\":3,\"1379\":11,\"1384\":3,\"1385\":3}}],[\"resume\",{\"1\":{\"165\":1}}],[\"r\",{\"1\":{\"63\":1,\"555\":1,\"742\":1,\"746\":1,\"758\":2,\"844\":2,\"941\":1,\"945\":1,\"1050\":4,\"1102\":2,\"1287\":5}}],[\"rw\",{\"1\":{\"63\":1}}],[\"lcr\",{\"0\":{\"1203\":1}}],[\"lst\",{\"1\":{\"945\":2}}],[\"lt\",{\"1\":{\"920\":1}}],[\"ll\",{\"1\":{\"776\":1,\"806\":3}}],[\"l\",{\"1\":{\"662\":1,\"941\":2,\"945\":3,\"946\":1,\"1258\":4,\"1287\":5}}],[\"lfu算法和lru算法乍看起来是一个意思\",{\"1\":{\"839\":1,\"1003\":1}}],[\"lfu算法\",{\"1\":{\"836\":1,\"1000\":1}}],[\"lfu\",{\"0\":{\"838\":1,\"1002\":1},\"1\":{\"212\":2,\"838\":1,\"1002\":1}}],[\"lfy\",{\"1\":{\"96\":1,\"108\":4}}],[\"lru是一种常用的缓存算法\",{\"1\":{\"929\":1}}],[\"lru的淘汰规则是基于访问时间\",{\"1\":{\"839\":1,\"1003\":1}}],[\"lru算法选择将最近最少使用的数据淘汰\",{\"1\":{\"929\":1}}],[\"lru算法则可能会将其淘汰\",{\"1\":{\"839\":1,\"1003\":1}}],[\"lru算法\",{\"1\":{\"836\":1,\"1000\":1}}],[\"lru\",{\"0\":{\"839\":1,\"930\":1,\"1003\":1},\"1\":{\"212\":2,\"213\":1,\"839\":1,\"929\":2,\"930\":4,\"1003\":1}}],[\"lzgz7mfzcjutn0nk\",{\"1\":{\"108\":1}}],[\"lifo队列\",{\"1\":{\"915\":1}}],[\"lifoqueue\",{\"1\":{\"914\":1,\"915\":1}}],[\"lifecycle\",{\"1\":{\"133\":1,\"135\":3}}],[\"literaryfactory\",{\"1\":{\"791\":2}}],[\"literarybooks\",{\"1\":{\"790\":1,\"791\":1}}],[\"literary\",{\"1\":{\"790\":1}}],[\"literal=password=\",{\"1\":{\"79\":1}}],[\"literal=username=admin\",{\"1\":{\"79\":1}}],[\"literal=special\",{\"1\":{\"70\":2}}],[\"literal\",{\"1\":{\"70\":1}}],[\"linkedlist的实现\",{\"1\":{\"762\":1}}],[\"linkedlist\",{\"1\":{\"762\":1}}],[\"lines\",{\"1\":{\"1194\":6}}],[\"lineitem\",{\"1\":{\"776\":7}}],[\"line\",{\"1\":{\"755\":1}}],[\"linalg\",{\"1\":{\"720\":1}}],[\"linux默认fork\",{\"1\":{\"705\":1}}],[\"linux\",{\"1\":{\"108\":1,\"260\":1,\"334\":4}}],[\"light\",{\"1\":{\"563\":9,\"566\":3,\"567\":4,\"572\":2}}],[\"libraries\",{\"1\":{\"1189\":5}}],[\"library获取可执行对象\",{\"1\":{\"1188\":1}}],[\"librarykeyword\",{\"1\":{\"1187\":1,\"1188\":1}}],[\"library\",{\"1\":{\"1187\":17,\"1188\":1,\"1189\":1}}],[\"libs\",{\"1\":{\"827\":1,\"849\":1,\"872\":1,\"873\":4,\"1010\":1}}],[\"lib\",{\"1\":{\"503\":3}}],[\"limited\",{\"1\":{\"912\":6}}],[\"limit=30\",{\"1\":{\"654\":1}}],[\"limit\",{\"1\":{\"431\":1,\"498\":13,\"499\":7,\"580\":1,\"725\":4,\"732\":4,\"1378\":7}}],[\"limits=\",{\"1\":{\"1193\":1}}],[\"limits=none\",{\"1\":{\"1193\":1}}],[\"limits=cpu=200m\",{\"1\":{\"165\":1}}],[\"limits\",{\"1\":{\"136\":1,\"1193\":1}}],[\"lisi\",{\"1\":{\"405\":1}}],[\"list0\",{\"1\":{\"1023\":2}}],[\"list接口类型时\",{\"1\":{\"762\":1}}],[\"list接口有多个派生类\",{\"1\":{\"762\":1}}],[\"list接口的定义为有序集合\",{\"1\":{\"762\":1}}],[\"list跳表\",{\"0\":{\"230\":1}}],[\"list采用的底层数据结构是ziplist+linkedlist\",{\"1\":{\"224\":1}}],[\"list用quicklist来存储\",{\"1\":{\"224\":1}}],[\"list\",{\"1\":{\"533\":2,\"732\":2,\"776\":6,\"839\":5,\"861\":1,\"862\":1,\"880\":2,\"892\":1,\"945\":1,\"986\":1,\"1003\":5,\"1023\":5,\"1024\":4,\"1050\":1,\"1059\":14,\"1063\":1,\"1094\":1,\"1100\":1,\"1187\":1,\"1189\":2,\"1198\":5,\"1202\":2,\"1207\":2,\"1208\":1,\"1209\":2,\"1217\":4,\"1221\":24,\"1227\":1,\"1229\":4,\"1230\":3,\"1236\":2,\"1237\":2,\"1241\":2,\"1242\":3,\"1257\":4,\"1258\":1,\"1265\":1,\"1266\":1,\"1272\":2,\"1273\":2,\"1274\":4,\"1275\":2,\"1276\":1,\"1280\":3,\"1281\":1,\"1282\":1,\"1286\":1,\"1287\":1,\"1288\":1,\"1289\":2,\"1292\":6,\"1303\":6,\"1307\":6,\"1309\":2,\"1331\":1,\"1335\":1,\"1337\":1,\"1338\":1,\"1339\":2,\"1340\":2,\"1341\":1,\"1352\":2,\"1353\":2,\"1354\":6,\"1364\":2,\"1365\":1,\"1366\":1,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":6,\"1380\":1,\"1384\":2,\"1385\":1,\"1390\":1,\"1395\":2,\"1399\":1,\"1400\":2,\"1403\":2},\"2\":{\"222\":1,\"236\":1}}],[\"like\",{\"1\":{\"334\":6,\"416\":1,\"455\":1,\"469\":1,\"503\":8,\"513\":1,\"844\":1,\"1050\":1}}],[\"liveness失败导致重启\",{\"1\":{\"148\":1}}],[\"liveness和readness并存\",{\"1\":{\"148\":1}}],[\"livenessprobe\",{\"1\":{\"133\":1,\"147\":2}}],[\"lower\",{\"1\":{\"1297\":2}}],[\"loacl是为线程开辟了一块单独的空间\",{\"1\":{\"1049\":1}}],[\"loacl转换到contextvar\",{\"1\":{\"1048\":1}}],[\"loads\",{\"1\":{\"894\":1}}],[\"load\",{\"1\":{\"108\":1,\"862\":2,\"1064\":4}}],[\"loadbalancer\",{\"1\":{\"87\":2,\"93\":4}}],[\"lookup\",{\"1\":{\"856\":5,\"1045\":3,\"1049\":2}}],[\"loop\",{\"1\":{\"349\":2,\"513\":5,\"898\":1,\"899\":1,\"1040\":1}}],[\"locaked\",{\"1\":{\"1033\":1}}],[\"local是使用\",{\"1\":{\"856\":1}}],[\"local使用字典的方式实现了线程隔离\",{\"1\":{\"856\":1}}],[\"localstock到contextvar\",{\"0\":{\"1044\":1}}],[\"localstack是使用它提供的一些push\",{\"1\":{\"856\":1}}],[\"localstack的基本用法\",{\"1\":{\"856\":1}}],[\"localstack源码\",{\"1\":{\"856\":1}}],[\"localstack\",{\"0\":{\"856\":1,\"1073\":1},\"1\":{\"856\":5,\"1045\":2,\"1049\":1,\"1050\":1,\"1071\":1,\"1073\":3}}],[\"locals\",{\"1\":{\"856\":1,\"986\":1}}],[\"local的高明在于\",{\"1\":{\"855\":1}}],[\"localproxy\",{\"1\":{\"854\":1,\"856\":5,\"1045\":10,\"1049\":2,\"1052\":1}}],[\"local对象实际上就是对字典原理的一个封装\",{\"1\":{\"854\":1}}],[\"local对象\",{\"0\":{\"854\":1}}],[\"localexecutor\",{\"1\":{\"714\":1}}],[\"localhost\",{\"1\":{\"504\":1,\"579\":1,\"648\":2,\"722\":1}}],[\"local\",{\"1\":{\"73\":2,\"854\":2,\"855\":3,\"856\":17,\"1049\":17,\"1051\":2,\"1069\":1,\"1073\":1}}],[\"locust\",{\"1\":{\"552\":1}}],[\"lockobject\",{\"1\":{\"1033\":3,\"1035\":4}}],[\"lock锁进行处理\",{\"1\":{\"405\":4}}],[\"lock进行优化\",{\"1\":{\"405\":1}}],[\"lock\",{\"1\":{\"373\":1,\"404\":1,\"405\":7,\"482\":4,\"504\":2,\"704\":1,\"717\":4,\"784\":5,\"897\":1,\"1032\":1,\"1033\":7}}],[\"longestcommonsubsequence\",{\"1\":{\"1308\":2}}],[\"longestpalindromesubseq\",{\"1\":{\"1299\":1}}],[\"longestpalindrome\",{\"1\":{\"1259\":1,\"1299\":1}}],[\"long\",{\"1\":{\"334\":1,\"503\":12,\"776\":3}}],[\"lo\",{\"1\":{\"108\":1}}],[\"logn的高度只存在于平衡二叉树\",{\"1\":{\"1225\":1}}],[\"logic\",{\"1\":{\"776\":3}}],[\"login\",{\"1\":{\"549\":1,\"552\":2,\"822\":1,\"831\":1,\"849\":1,\"1010\":1}}],[\"log文件中\",{\"1\":{\"757\":1}}],[\"logger=logger\",{\"1\":{\"1193\":1}}],[\"logger=none\",{\"1\":{\"1193\":1}}],[\"logger\",{\"1\":{\"550\":5,\"660\":2,\"662\":2,\"679\":11,\"681\":2,\"1103\":1,\"1187\":1,\"1193\":2,\"1194\":12}}],[\"logging\",{\"1\":{\"382\":1,\"550\":4,\"660\":2,\"757\":5}}],[\"log=1\",{\"1\":{\"503\":2}}],[\"log里面读取内容\",{\"1\":{\"494\":1}}],[\"log恢复事务修改过的缓存数据的\",{\"1\":{\"425\":1}}],[\"log刷入磁盘\",{\"1\":{\"425\":1}}],[\"log则是事务原子性和隔离性实现的基础\",{\"1\":{\"425\":1}}],[\"log用于保证事务持久性\",{\"1\":{\"425\":1}}],[\"log用于撤销回退的日志\",{\"1\":{\"379\":1}}],[\"log作为服务器异常宕机后事务数据自动恢复使用\",{\"1\":{\"390\":1}}],[\"log空着的部分\",{\"1\":{\"390\":1}}],[\"log是循环写的\",{\"1\":{\"390\":1}}],[\"log是物理日志\",{\"1\":{\"390\":1,\"425\":1}}],[\"log是innodb引擎特有的\",{\"1\":{\"390\":1}}],[\"log与undo\",{\"0\":{\"390\":1}}],[\"log页而浪费存储空间和性能\",{\"1\":{\"389\":1}}],[\"log分配的页是否可以重用\",{\"1\":{\"389\":1}}],[\"log放入到删除列表中\",{\"1\":{\"389\":1}}],[\"log不能删除\",{\"1\":{\"389\":1}}],[\"log严格的讲不是log\",{\"1\":{\"389\":1}}],[\"log持久化\",{\"0\":{\"388\":1,\"389\":1}}],[\"log的区别\",{\"0\":{\"390\":1}}],[\"log的持久化策略\",{\"0\":{\"387\":1}}],[\"log的指针\",{\"1\":{\"369\":1}}],[\"log可以实现事务的持久性\",{\"1\":{\"383\":1}}],[\"log可以进行回滚\",{\"1\":{\"380\":1}}],[\"log日志\",{\"1\":{\"382\":1}}],[\"log日志文件中\",{\"1\":{\"379\":1}}],[\"log中的信息将数据回滚到修改之前的样子\",{\"1\":{\"425\":1}}],[\"log中分析出该行记录以前的数据版本是怎样的\",{\"1\":{\"380\":1}}],[\"log中会记录一条对应的delete记录\",{\"1\":{\"380\":1}}],[\"log来回滚就可以了\",{\"1\":{\"425\":1}}],[\"log来实现多版本并发控制\",{\"1\":{\"380\":1}}],[\"log来保存数据的历史版本\",{\"1\":{\"368\":1}}],[\"log实现多版本并发控制\",{\"1\":{\"380\":1}}],[\"log还记录了对应的undo\",{\"1\":{\"380\":1}}],[\"log也要实现持久性保护\",{\"1\":{\"379\":1}}],[\"log也会产生redo\",{\"1\":{\"379\":1}}],[\"log历史版本\",{\"1\":{\"373\":1}}],[\"log链条进行连接\",{\"1\":{\"370\":1}}],[\"log多版本链\",{\"0\":{\"370\":1},\"1\":{\"368\":1}}],[\"logfile\",{\"1\":{\"388\":1,\"390\":2}}],[\"logfile1\",{\"1\":{\"334\":1}}],[\"logfile0\",{\"1\":{\"334\":1}}],[\"log重做\",{\"1\":{\"320\":1}}],[\"log之前\",{\"1\":{\"320\":1}}],[\"logstash\",{\"1\":{\"555\":1}}],[\"logs\",{\"1\":{\"73\":1,\"124\":1,\"125\":2,\"334\":1,\"662\":1}}],[\"loglevel=info\",{\"1\":{\"649\":1,\"662\":1,\"664\":1}}],[\"loglevel\",{\"1\":{\"73\":3}}],[\"logdir\",{\"1\":{\"73\":1}}],[\"log\",{\"0\":{\"378\":1,\"381\":1,\"384\":1,\"387\":1,\"476\":1},\"1\":{\"69\":1,\"73\":3,\"234\":1,\"278\":2,\"334\":7,\"379\":2,\"380\":2,\"382\":3,\"383\":2,\"388\":9,\"389\":4,\"390\":2,\"425\":12,\"469\":2,\"475\":2,\"476\":2,\"477\":1,\"482\":1,\"494\":1,\"503\":25,\"681\":3,\"757\":6,\"1194\":4,\"1207\":1,\"1395\":1,\"1399\":1,\"1400\":1},\"2\":{\"480\":1}}],[\"lemonadechange\",{\"1\":{\"1366\":1}}],[\"leet\",{\"1\":{\"1276\":2}}],[\"leetcode\",{\"1\":{\"1276\":2,\"1300\":1}}],[\"least\",{\"1\":{\"838\":1,\"839\":1,\"1002\":1,\"1003\":1}}],[\"leaving\",{\"1\":{\"566\":2}}],[\"leave\",{\"1\":{\"566\":2}}],[\"leaf\",{\"1\":{\"460\":2}}],[\"lengthoflis\",{\"1\":{\"1207\":2,\"1286\":1}}],[\"length\",{\"1\":{\"1194\":6,\"1198\":1,\"1202\":2,\"1203\":2,\"1207\":1,\"1208\":1,\"1209\":2,\"1221\":1,\"1229\":2,\"1230\":3,\"1236\":2,\"1237\":2,\"1241\":2,\"1242\":2,\"1257\":3,\"1266\":1,\"1280\":1,\"1281\":1,\"1282\":2,\"1288\":2,\"1292\":1,\"1297\":1,\"1299\":7,\"1303\":2,\"1307\":2,\"1308\":2,\"1309\":2,\"1313\":2,\"1336\":1,\"1339\":1,\"1340\":1,\"1352\":2,\"1353\":2,\"1354\":2,\"1376\":2,\"1379\":1,\"1380\":8,\"1385\":1,\"1395\":1,\"1399\":1,\"1400\":1,\"1403\":1}}],[\"len取值为1字节\",{\"1\":{\"219\":1}}],[\"len有两种取值情况\",{\"1\":{\"219\":1}}],[\"len\",{\"1\":{\"218\":1,\"226\":1,\"227\":6,\"349\":3,\"776\":1,\"839\":1,\"856\":1,\"925\":1,\"986\":1,\"1003\":1,\"1049\":1,\"1050\":1,\"1102\":1,\"1188\":1,\"1198\":3,\"1202\":2,\"1207\":4,\"1208\":4,\"1209\":2,\"1221\":3,\"1227\":1,\"1236\":1,\"1257\":1,\"1258\":1,\"1259\":6,\"1265\":1,\"1266\":1,\"1272\":2,\"1273\":1,\"1274\":3,\"1275\":2,\"1276\":2,\"1280\":7,\"1282\":4,\"1286\":1,\"1287\":1,\"1288\":1,\"1289\":4,\"1292\":13,\"1297\":1,\"1298\":1,\"1299\":3,\"1300\":1,\"1303\":6,\"1307\":6,\"1308\":4,\"1309\":2,\"1313\":2,\"1314\":4,\"1329\":1,\"1331\":1,\"1335\":1,\"1338\":1,\"1339\":1,\"1352\":2,\"1353\":2,\"1354\":4,\"1364\":2,\"1365\":1,\"1366\":1,\"1376\":6,\"1377\":1,\"1378\":1,\"1379\":6,\"1380\":4,\"1385\":1,\"1390\":1,\"1395\":4,\"1399\":1,\"1400\":2,\"1403\":2}}],[\"leifengyang\",{\"1\":{\"81\":1}}],[\"level=\",{\"1\":{\"1187\":1}}],[\"level=logging\",{\"1\":{\"757\":1}}],[\"level=info\",{\"1\":{\"73\":1}}],[\"level\",{\"1\":{\"73\":2,\"415\":1,\"1187\":3,\"1194\":2}}],[\"left篇论文至少被引用left次\",{\"1\":{\"1403\":2}}],[\"leftlef\",{\"1\":{\"1393\":1}}],[\"left所指向位置是否等于目标元素\",{\"1\":{\"1393\":1}}],[\"left+\",{\"1\":{\"1391\":1}}],[\"left+right的数据量不会超过整型变量最大值时\",{\"1\":{\"1393\":1}}],[\"left+right+1\",{\"1\":{\"1391\":1}}],[\"left+right\",{\"1\":{\"1390\":1,\"1393\":1}}],[\"left=mid+1\",{\"1\":{\"1390\":1}}],[\"left\",{\"1\":{\"43\":1,\"513\":1,\"806\":1,\"1207\":2,\"1209\":1,\"1257\":15,\"1258\":5,\"1259\":5,\"1274\":6,\"1297\":7,\"1376\":28,\"1377\":8,\"1378\":4,\"1379\":9,\"1390\":8,\"1391\":4,\"1393\":16,\"1394\":3,\"1395\":30,\"1399\":6,\"1400\":12,\"1403\":11}}],[\"lable\",{\"1\":{\"1384\":3}}],[\"label\",{\"0\":{\"116\":1},\"1\":{\"116\":3,\"120\":2,\"124\":1}}],[\"labels\",{\"1\":{\"64\":2,\"67\":2,\"120\":1,\"147\":1,\"156\":1,\"1384\":7}}],[\"languages\",{\"1\":{\"1194\":1}}],[\"lang=settings\",{\"1\":{\"1194\":1}}],[\"laiceps\",{\"1\":{\"799\":1}}],[\"largestvalsfromlabels\",{\"1\":{\"1384\":1}}],[\"largestsumafterknegations\",{\"1\":{\"1365\":1}}],[\"large\",{\"1\":{\"776\":4}}],[\"laststoneweightii\",{\"1\":{\"1274\":1}}],[\"last\",{\"1\":{\"755\":1,\"953\":1,\"1385\":3}}],[\"lambda\",{\"1\":{\"565\":1,\"894\":1,\"1059\":2,\"1187\":1}}],[\"latest\",{\"1\":{\"555\":3}}],[\"layout\",{\"1\":{\"1\":2}}],[\"流量控制是结合滑动窗口两个进行控制流量的\",{\"1\":{\"960\":1}}],[\"流量控制\",{\"0\":{\"960\":1}}],[\"流量路由由\",{\"1\":{\"95\":1}}],[\"流畅的python\",{\"1\":{\"776\":2}}],[\"流\",{\"1\":{\"278\":1}}],[\"流程告警\",{\"0\":{\"630\":1}}],[\"流程告警指的是devops过程中发生的失败\",{\"1\":{\"629\":1}}],[\"流程的优化者\",{\"1\":{\"58\":1}}],[\"流程\",{\"0\":{\"42\":1,\"54\":1}}],[\"流水线不仅是\",{\"1\":{\"43\":1}}],[\"流水线中的全生命周期管理\",{\"0\":{\"43\":1}}],[\"流水线立即停止\",{\"1\":{\"40\":1}}],[\"流水线通常分为多个阶段\",{\"1\":{\"40\":1}}],[\"流水线的每一次绿色通过\",{\"1\":{\"46\":1}}],[\"流水线的结果也就是软件包既是持续集成的结束\",{\"1\":{\"46\":1}}],[\"流水线的成败取决于流程的合理性与团队协作\",{\"1\":{\"42\":1}}],[\"流水线的\",{\"0\":{\"39\":1,\"40\":1}}],[\"流水线的部署绝非简单的\",{\"1\":{\"46\":1}}],[\"流水线的部署不仅是技术实践\",{\"1\":{\"46\":1}}],[\"流水线的部署必须与基础设施的自动化结合\",{\"1\":{\"44\":1}}],[\"流水线的部署是验证环中的关键环节\",{\"1\":{\"38\":1}}],[\"流水线的部署\",{\"1\":{\"37\":1,\"46\":1}}],[\"流水线部署是文化变革的\",{\"0\":{\"46\":1}}],[\"流水线部署的挑战与实践启示\",{\"0\":{\"41\":1}}],[\"流水线部署\",{\"0\":{\"38\":1}}],[\"流水线是持续交付的心脏\",{\"0\":{\"37\":1}}],[\"≠\",{\"0\":{\"42\":1,\"54\":1}}],[\"仍面临诸多挑战\",{\"1\":{\"41\":1}}],[\"但为了正确地定位到目标值的最后出现位置\",{\"1\":{\"1395\":1}}],[\"但为了提高性能\",{\"1\":{\"374\":1}}],[\"但条件是这些人的重量之和最多为\",{\"1\":{\"1378\":1}}],[\"但其中缺了一个\",{\"1\":{\"1331\":1,\"1335\":1}}],[\"但其实很不同\",{\"1\":{\"839\":1,\"1003\":1}}],[\"但无法画出第三条不相交的直线\",{\"1\":{\"1309\":1}}],[\"但\",{\"1\":{\"1308\":1}}],[\"但如果用\",{\"1\":{\"1234\":1}}],[\"但如今它主要被deployments\",{\"1\":{\"177\":1}}],[\"但对于邻接矩阵就简单了\",{\"1\":{\"1217\":1}}],[\"但对于非紧急情况下的告警来说\",{\"1\":{\"638\":1}}],[\"但自\",{\"1\":{\"1169\":1}}],[\"但可通过扩展\",{\"1\":{\"1169\":1}}],[\"但效率低下\",{\"1\":{\"1162\":1}}],[\"但会占用少量的内存空间\",{\"1\":{\"1036\":1}}],[\"但你的钱还是会因为\",{\"1\":{\"971\":1}}],[\"但你的号会因为\",{\"1\":{\"971\":1}}],[\"但百度\",{\"1\":{\"971\":1}}],[\"但暂时需要用另一个\",{\"1\":{\"967\":1}}],[\"但现在\",{\"1\":{\"966\":1}}],[\"但访问缺失的键时\",{\"1\":{\"942\":1}}],[\"但直接提供自定义比较函数给heapq模块更为灵活\",{\"1\":{\"920\":1}}],[\"但有时其还会包含一个设置链上下个处理者的方法\",{\"1\":{\"805\":1}}],[\"但此类不符合系统的需要\",{\"1\":{\"798\":1}}],[\"但又扩展了numpy的功能\",{\"1\":{\"797\":1}}],[\"但它不是连续的\",{\"1\":{\"1287\":1}}],[\"但它不是一直存在的\",{\"1\":{\"1101\":1}}],[\"但它有一个明显的缺点\",{\"1\":{\"790\":1}}],[\"但它与直接使用if语句抛出异常有本质区别\",{\"1\":{\"756\":1}}],[\"但让子类决定实例化哪一个类\",{\"1\":{\"788\":1}}],[\"但不对对象本身的功能进行增强\",{\"1\":{\"771\":1}}],[\"但不同的是\",{\"1\":{\"487\":1}}],[\"但两者是不同的\",{\"1\":{\"762\":1}}],[\"但这并不一定\",{\"1\":{\"1225\":1}}],[\"但这并不是其设计初衷\",{\"1\":{\"758\":1}}],[\"但这种方式会占用一定的cpu资源\",{\"1\":{\"612\":1}}],[\"但同时也需注意其对性能的影响\",{\"1\":{\"758\":1}}],[\"但协程可以通过await关键字暂停执行\",{\"1\":{\"736\":1}}],[\"但通信开销大\",{\"1\":{\"704\":1}}],[\"但需注意内存限制\",{\"1\":{\"669\":1}}],[\"但需要依赖\",{\"1\":{\"590\":1,\"682\":1}}],[\"但使用\",{\"1\":{\"666\":1}}],[\"但生产环境建议使用\",{\"1\":{\"657\":1}}],[\"但用户的交互体验已经受到了负面影响\",{\"1\":{\"632\":1}}],[\"但官方文档质量较高\",{\"1\":{\"607\":1}}],[\"但底层已切换为非阻塞模式\",{\"1\":{\"591\":1}}],[\"但由于垃圾收集的不确定性\",{\"1\":{\"582\":1}}],[\"但在复杂场景下存在以下问题\",{\"1\":{\"1142\":1}}],[\"但在\",{\"1\":{\"969\":1}}],[\"但在被普通的装饰器装饰以后\",{\"1\":{\"932\":1}}],[\"但在lru算法里则可能被淘汰\",{\"1\":{\"839\":1,\"1003\":1}}],[\"但在某些情况下可能会提供性能优势\",{\"1\":{\"579\":1}}],[\"但在实际落地中仍面临诸多挑战\",{\"1\":{\"53\":1}}],[\"但在实际落地中\",{\"1\":{\"41\":1}}],[\"但模块间依赖尽量少\",{\"1\":{\"543\":1}}],[\"但随着需求增长\",{\"1\":{\"542\":1}}],[\"但真正的价值在于设计的合理性\",{\"1\":{\"540\":1}}],[\"但实际上是应该用最短的路径访问到数据\",{\"1\":{\"507\":1,\"523\":1}}],[\"但允许有空值\",{\"1\":{\"448\":1}}],[\"但任何事务都不能对数据进行修改\",{\"1\":{\"404\":1}}],[\"但都属于悲观锁范畴\",{\"1\":{\"403\":1}}],[\"但并非采用\",{\"1\":{\"261\":1}}],[\"但很不安全\",{\"1\":{\"260\":1}}],[\"但较为安全\",{\"1\":{\"260\":1}}],[\"但redis的写操作不会同步到主进程的主内存中\",{\"1\":{\"257\":1}}],[\"但replicaset支持集合式selector\",{\"1\":{\"177\":1}}],[\"但是如果我们还是想要使用\",{\"1\":{\"1393\":1}}],[\"但是如果我们系统的并发很高\",{\"1\":{\"249\":1}}],[\"但是一般来说左闭右开区间这种写法在解决问题的过程中\",{\"1\":{\"1392\":1}}],[\"但是一旦发生丢包\",{\"1\":{\"977\":1}}],[\"但是实际写代码可能是非常容易写失败的\",{\"1\":{\"1391\":1}}],[\"但是实际去\",{\"1\":{\"1389\":1}}],[\"但是实际上\",{\"1\":{\"725\":1}}],[\"但是思路也还是比较巧妙的\",{\"1\":{\"1376\":1}}],[\"但是四个角不需要\",{\"1\":{\"1354\":1}}],[\"但是图论中的dfs又是这样的\",{\"1\":{\"1348\":1}}],[\"但是dfs不仅可以解决二叉树问题也可以解决图论中的问题\",{\"1\":{\"1348\":1}}],[\"但是其中边界条件有问题\",{\"1\":{\"1307\":1}}],[\"但是你每笔交易都需要付手续费\",{\"1\":{\"1292\":1}}],[\"但是超时了\",{\"1\":{\"1289\":1}}],[\"但是可以不连续\",{\"1\":{\"1286\":1}}],[\"但是可能是最便捷的实现方案\",{\"1\":{\"908\":1}}],[\"但是针对于求组合问题和排序问题\",{\"1\":{\"1275\":1}}],[\"但是只有基本的背包问题理解清楚\",{\"1\":{\"1270\":1}}],[\"但是力扣上没有标准的背包问题\",{\"1\":{\"1270\":1}}],[\"但是滑动窗口\",{\"1\":{\"1255\":1}}],[\"但是通俗理解就是能不能将一个边的两个节点分别属于不同颜色的集合中\",{\"1\":{\"1234\":1}}],[\"但是多叉树和图最大的区别就是\",{\"1\":{\"1220\":1}}],[\"但是所有元素都是正无穷大的列表\",{\"1\":{\"1207\":1}}],[\"但是关于矩形面积都有一个统一思路就是求\",{\"1\":{\"1201\":1}}],[\"但是第二题不行\",{\"1\":{\"1201\":1}}],[\"但是第一种属于高并发sql\",{\"1\":{\"507\":1}}],[\"但是两题的解题思路完全不一致\",{\"1\":{\"1201\":1}}],[\"但是需要什么数据结构呢\",{\"1\":{\"1198\":1}}],[\"但是也是需要具体分析\",{\"1\":{\"1359\":1}}],[\"但是也有点不好就是运行到一半发现对应的组件库没有\",{\"1\":{\"1189\":1}}],[\"但是也会造成死锁\",{\"1\":{\"404\":1}}],[\"但是原理和robot类似都是使用反射的机制来运行关键字\",{\"1\":{\"1189\":1}}],[\"但是既然robot中出现了这个我们就来看一下这个设计模式\",{\"1\":{\"1177\":1}}],[\"但是gil其实不是python本身的特性\",{\"1\":{\"1029\":1}}],[\"但是那样的话\",{\"1\":{\"962\":1}}],[\"但是想要查看所有元素的数量\",{\"1\":{\"941\":1}}],[\"但是效率低下\",{\"1\":{\"908\":1}}],[\"但是它实现了\",{\"1\":{\"892\":1}}],[\"但是它不记录select\",{\"1\":{\"334\":1}}],[\"但是个人感觉缺少了代码的灵活性\",{\"1\":{\"806\":1}}],[\"但是输出类型不可预知\",{\"1\":{\"798\":1}}],[\"但是我们实际却使用到了贪心\",{\"1\":{\"1358\":1}}],[\"但是我们发现这里没有return\",{\"1\":{\"1221\":1}}],[\"但是我们如何知道当前元素是需要自成顺子还是接到其他的顺子后面\",{\"1\":{\"1198\":1}}],[\"但是我们在实际开发中经常会遇到一些类似这样的问题\",{\"1\":{\"580\":1}}],[\"但是我这里说的是调试中使用\",{\"1\":{\"756\":1}}],[\"但是华为python开发规范中不建议在正式代码使用这种方式\",{\"1\":{\"756\":1}}],[\"但是在数组中用到的也是非常多的\",{\"1\":{\"1263\":1}}],[\"但是在外键时\",{\"1\":{\"878\":1}}],[\"但是在连接被释放后不会被重新放入队列中\",{\"1\":{\"579\":1}}],[\"但是在事务提交的时候\",{\"1\":{\"389\":1}}],[\"但是过长的继承规则\",{\"1\":{\"534\":1}}],[\"但是参数小于10时\",{\"1\":{\"533\":1}}],[\"但是查询变量\",{\"1\":{\"503\":1}}],[\"但是查询数据库的时候加个锁\",{\"1\":{\"285\":1}}],[\"但是新插入记录这个动作\",{\"1\":{\"482\":1}}],[\"但是对表结构设计存在约束\",{\"1\":{\"434\":1}}],[\"但是辅助索引搜索需要检索两遍索引\",{\"1\":{\"414\":1}}],[\"但是加锁时发现跟事务1的加锁顺序正好相反\",{\"1\":{\"408\":1}}],[\"但是有个小小的不如意之处\",{\"1\":{\"935\":1}}],[\"但是有些情况还是会发生死锁\",{\"1\":{\"408\":1}}],[\"但是有部分条件无法使用索引\",{\"1\":{\"351\":1}}],[\"但是当sql操作含有唯一索引时\",{\"1\":{\"405\":1}}],[\"但是要注意\",{\"1\":{\"395\":1}}],[\"但是因为每次提交都写入磁盘\",{\"1\":{\"388\":1}}],[\"但是不会记录select和show这类操作\",{\"1\":{\"385\":1}}],[\"但是不能覆盖推出来的值\",{\"1\":{\"1280\":1}}],[\"但是不能删除元素\",{\"1\":{\"240\":1,\"243\":1}}],[\"但是不能够使应用程序从机器故障中恢复\",{\"1\":{\"117\":1}}],[\"但是没有被标记过的位置\",{\"1\":{\"1354\":1}}],[\"但是没有解决响应的队头阻塞\",{\"1\":{\"977\":1}}],[\"但是没有提交\",{\"1\":{\"371\":1,\"477\":1}}],[\"但是没有完美方案\",{\"1\":{\"287\":1}}],[\"但是这样不满足对数时间复杂度\",{\"1\":{\"1403\":1}}],[\"但是这里有个问题就是我们一开始初始化这个左上角的值后\",{\"1\":{\"1303\":1}}],[\"但是这里和我们代码随想录中写的还不一样\",{\"1\":{\"1221\":1}}],[\"但是这也是只是针对于完全背包问题\",{\"1\":{\"1275\":1}}],[\"但是这不是最好的方式\",{\"1\":{\"909\":1}}],[\"但是这种方式在effective\",{\"1\":{\"748\":1}}],[\"但是这种debug\",{\"1\":{\"735\":1}}],[\"但是这种debug是存在缺陷的\",{\"1\":{\"735\":1}}],[\"但是这个代码还是有坑的\",{\"1\":{\"1221\":1}}],[\"但是这个模块没有swagger文档\",{\"1\":{\"1140\":1}}],[\"但是这个\",{\"1\":{\"360\":1}}],[\"但是这些表还是在同一个库中\",{\"1\":{\"303\":1}}],[\"但是还有查询条件不在索引字段当中\",{\"1\":{\"351\":1,\"374\":1}}],[\"但是时间间隔为两次删除之间的时间间隔\",{\"1\":{\"289\":1}}],[\"但是由于读写操作等待用户输入或输出都是阻塞的\",{\"1\":{\"268\":1}}],[\"但是判断结果为不存在的时候则一定不存在\",{\"1\":{\"240\":1}}],[\"但是压缩列表中zlend的取值默认是255\",{\"1\":{\"219\":1}}],[\"但是ziplist的每个节点的长度是可以不一样的\",{\"1\":{\"218\":1}}],[\"但是job不会删除\",{\"1\":{\"198\":1}}],[\"但是并不直接将流量切过来\",{\"1\":{\"171\":1}}],[\"但是并不能确保\",{\"1\":{\"135\":1}}],[\"但是\",{\"1\":{\"135\":1,\"260\":1,\"776\":1,\"934\":1,\"1364\":1}}],[\"但测试环境使用自己的数据库\",{\"1\":{\"89\":1}}],[\"但推动\",{\"1\":{\"33\":1}}],[\"监听接受信息\",{\"1\":{\"681\":1}}],[\"监听关闭事件\",{\"1\":{\"681\":1}}],[\"监听连接事件\",{\"1\":{\"681\":1}}],[\"监控资源使用\",{\"1\":{\"725\":1}}],[\"监控任务状态\",{\"1\":{\"660\":1}}],[\"监控与日志\",{\"0\":{\"660\":1}}],[\"监控与告警\",{\"1\":{\"555\":1}}],[\"监控指标是构建有效告警体系的基础\",{\"1\":{\"625\":1}}],[\"监控指标的选择\",{\"0\":{\"625\":1}}],[\"监控系统指标\",{\"1\":{\"555\":1}}],[\"监控\",{\"1\":{\"301\":1}}],[\"监控阶段\",{\"1\":{\"40\":1}}],[\"监测一切\",{\"0\":{\"26\":1},\"1\":{\"26\":1}}],[\"监测环节收集数据\",{\"1\":{\"21\":1}}],[\"单词能否组成字符串s\",{\"1\":{\"1276\":1}}],[\"单词就是物品\",{\"1\":{\"1276\":1}}],[\"单词拆分\",{\"1\":{\"1276\":1}}],[\"单调栈\",{\"2\":{\"1204\":1,\"1205\":1,\"1252\":1,\"1253\":1}}],[\"单条查询\",{\"1\":{\"862\":1}}],[\"单例模式\",{\"0\":{\"779\":1},\"1\":{\"780\":1},\"2\":{\"786\":1}}],[\"单例模式的作用和意义\",{\"0\":{\"763\":1}}],[\"单进程耗时\",{\"1\":{\"712\":1}}],[\"单进程\",{\"1\":{\"712\":1}}],[\"单进程单线程\",{\"1\":{\"667\":1}}],[\"单线程便于调试\",{\"1\":{\"668\":1}}],[\"单一职责原则主要是约束类\",{\"1\":{\"762\":1}}],[\"单一职责原则注重的是职责\",{\"1\":{\"762\":1}}],[\"单一职责原则的定义描述非常简单\",{\"1\":{\"762\":1}}],[\"单一职责原则\",{\"1\":{\"543\":1,\"762\":1}}],[\"单一数据表的数据量变小\",{\"1\":{\"299\":1}}],[\"单文件项目的问题\",{\"1\":{\"542\":1}}],[\"单位\",{\"1\":{\"324\":1}}],[\"单位是秒\",{\"1\":{\"147\":1}}],[\"单表数据量超过1000万或100g的时候\",{\"1\":{\"299\":1}}],[\"单机存储容量遇到瓶颈\",{\"1\":{\"299\":1}}],[\"单个商品为20个或以上时提供10\",{\"1\":{\"776\":1}}],[\"单个表执行\",{\"1\":{\"507\":1,\"524\":1}}],[\"单个pod时\",{\"1\":{\"198\":1}}],[\"单个\",{\"1\":{\"130\":1}}],[\"单元测试减少后期问题\",{\"1\":{\"43\":1}}],[\"单元测试\",{\"1\":{\"40\":1,\"52\":1,\"56\":1,\"552\":1}}],[\"单打独斗\",{\"1\":{\"31\":1}}],[\"生态成熟\",{\"1\":{\"1164\":1,\"1173\":1}}],[\"生命周期\",{\"0\":{\"1104\":1}}],[\"生命周期钩子\",{\"0\":{\"135\":1}}],[\"生类的实现\",{\"1\":{\"762\":1}}],[\"生成报告\",{\"1\":{\"1194\":1}}],[\"生成报告信息\",{\"1\":{\"1194\":1}}],[\"生成报表\",{\"1\":{\"645\":1}}],[\"生成关键字\",{\"1\":{\"1187\":1}}],[\"生成交互式\",{\"1\":{\"1146\":1}}],[\"生成器的本质\",{\"0\":{\"1025\":1}}],[\"生成器的一些基础知识吧\",{\"1\":{\"730\":1}}],[\"生成器表达式\",{\"0\":{\"1023\":1}}],[\"生成器是用时间换空间的典型实例\",{\"1\":{\"1022\":1}}],[\"生成器是一个返回迭代器的函数\",{\"1\":{\"1021\":1}}],[\"生成器和协程\",{\"0\":{\"736\":1}}],[\"生成器可以按需产生结果\",{\"1\":{\"734\":1}}],[\"生成器函数\",{\"0\":{\"1024\":1}}],[\"生成器函数可以暂停执行并返回中间结果\",{\"1\":{\"734\":1}}],[\"生成器函数通过yield语句生成值\",{\"1\":{\"733\":1}}],[\"生成器函数是一种特殊的迭代器\",{\"1\":{\"733\":1}}],[\"生成器\",{\"0\":{\"733\":1,\"1020\":1},\"1\":{\"734\":1},\"2\":{\"1019\":1,\"1027\":1}}],[\"生成\",{\"1\":{\"567\":1}}],[\"生成状态图\",{\"1\":{\"567\":1}}],[\"生成隐藏主键列的方式有\",{\"1\":{\"325\":1}}],[\"生成可执行文件\",{\"1\":{\"40\":1}}],[\"生产结束\",{\"1\":{\"916\":1}}],[\"生产了\",{\"1\":{\"916\":1}}],[\"生产者线程\",{\"1\":{\"916\":1}}],[\"生产者消费者模型是一种经典的设计模式\",{\"1\":{\"916\":1}}],[\"生产者消费者模型实例\",{\"0\":{\"916\":1}}],[\"生产环境如何设置\",{\"1\":{\"210\":1}}],[\"生产环境的一致性\",{\"1\":{\"57\":1}}],[\"生产环境\",{\"1\":{\"40\":1}}],[\"生产\",{\"1\":{\"39\":1}}],[\"分数\",{\"1\":{\"1384\":2}}],[\"分割等和子集\",{\"1\":{\"1274\":1}}],[\"分割成长度至少为\",{\"1\":{\"1198\":1}}],[\"分割成\",{\"1\":{\"1198\":1}}],[\"分割数组为连续子序列\",{\"0\":{\"1198\":1}}],[\"分模块管理\",{\"1\":{\"1155\":1}}],[\"分发饼干\",{\"0\":{\"1364\":1}}],[\"分发请求\",{\"1\":{\"1103\":1,\"1104\":1}}],[\"分发给适当的处理程序来对\",{\"1\":{\"270\":1}}],[\"分大小写的字符串数组\",{\"1\":{\"696\":1}}],[\"分析监控系统是否能够在第一时间捕捉到异常\",{\"1\":{\"640\":1}}],[\"分析出查询语句或者是表结构的性能瓶颈\",{\"1\":{\"348\":1,\"377\":1}}],[\"分成了许多格子\",{\"1\":{\"610\":1}}],[\"分页的实现\",{\"0\":{\"498\":1}}],[\"分页优化策略\",{\"0\":{\"499\":1}}],[\"分页优化\",{\"0\":{\"497\":1},\"2\":{\"501\":1}}],[\"分片数可以使用配置参数设置\",{\"1\":{\"460\":1}}],[\"分解cookie\",{\"1\":{\"689\":1}}],[\"分解超级特权\",{\"1\":{\"430\":1}}],[\"分解并快速试错\",{\"1\":{\"20\":1}}],[\"分支节点至少有\",{\"1\":{\"338\":1}}],[\"分别挑选大小为\",{\"1\":{\"1282\":2}}],[\"分别用\",{\"1\":{\"1225\":1}}],[\"分别用应用上下文和请求上下文\",{\"1\":{\"1098\":1}}],[\"分别为10个信号\",{\"1\":{\"1125\":1}}],[\"分别为流程告警\",{\"1\":{\"629\":1}}],[\"分别来演示\",{\"1\":{\"943\":1}}],[\"分别启动生产者和消费者线程\",{\"1\":{\"916\":1}}],[\"分别解释聚簇索引和非聚簇索引\",{\"1\":{\"438\":1}}],[\"分别是\",{\"1\":{\"323\":1,\"1208\":1,\"1288\":1}}],[\"分别存放在不同的库中\",{\"1\":{\"303\":1}}],[\"分别存储在不同的库中\",{\"1\":{\"302\":1}}],[\"分布式数据库的读写\",{\"1\":{\"815\":1}}],[\"分布式数据的一致性\",{\"1\":{\"815\":1}}],[\"分布式的锁\",{\"1\":{\"815\":1}}],[\"分布式系统\",{\"1\":{\"724\":1}}],[\"分布式任务调度\",{\"0\":{\"722\":1}}],[\"分布式任务队列\",{\"1\":{\"607\":1}}],[\"分布式锁\",{\"0\":{\"206\":1}}],[\"分布到不同的数据库上面\",{\"1\":{\"300\":1}}],[\"分库分表\",{\"2\":{\"306\":1}}],[\"分库分表带来的问题\",{\"0\":{\"304\":1}}],[\"分库分表包括\",{\"1\":{\"299\":1}}],[\"分库分表之前\",{\"1\":{\"299\":1}}],[\"分库分表的目的是为了解决由于数据量过大而导致数据库性能降低的问题\",{\"1\":{\"299\":1}}],[\"分库分表解决的问题\",{\"1\":{\"299\":1}}],[\"分库分表和带来的问题\",{\"0\":{\"298\":1}}],[\"分钟级\",{\"1\":{\"258\":1}}],[\"分配给孩子\",{\"1\":{\"1364\":1}}],[\"分配给进程\",{\"1\":{\"725\":1}}],[\"分配到同一个数据库的多张表中\",{\"1\":{\"303\":1}}],[\"分配到不同的数据库\",{\"1\":{\"303\":1}}],[\"分配\",{\"1\":{\"227\":1}}],[\"分配修改所必须要的空间\",{\"1\":{\"227\":1}}],[\"分配了足够多的内存\",{\"1\":{\"227\":1}}],[\"分\",{\"1\":{\"203\":1}}],[\"分隔符分隔的路径中的标签列表\",{\"1\":{\"100\":1}}],[\"分隔的\",{\"1\":{\"100\":1}}],[\"分层时间轮\",{\"0\":{\"611\":1}}],[\"分层状态机\",{\"0\":{\"569\":1}}],[\"分层测试策略\",{\"1\":{\"56\":1}}],[\"分层设计\",{\"0\":{\"40\":1}}],[\"技术骨架\",{\"0\":{\"38\":1}}],[\"心脏\",{\"1\":{\"37\":1}}],[\"以继续向可能的目标值结束位置搜索\",{\"1\":{\"1395\":1}}],[\"以这种方式修改数组后\",{\"1\":{\"1365\":1}}],[\"以这种方法绘制线条\",{\"1\":{\"1309\":1}}],[\"以j结尾的nums2的最长子数组长度为dp\",{\"1\":{\"1307\":1}}],[\"以i结尾的nums1\",{\"1\":{\"1307\":1}}],[\"以i\",{\"1\":{\"1307\":1}}],[\"以累计所有可能的路径数\",{\"1\":{\"1208\":1}}],[\"以3结尾的数组的最长子序列要加一\",{\"1\":{\"1207\":1}}],[\"以自己开头\",{\"1\":{\"1198\":1}}],[\"以view\",{\"1\":{\"1063\":1}}],[\"以endpoint为key\",{\"1\":{\"1063\":1}}],[\"以封装http\",{\"1\":{\"962\":1}}],[\"以确保只创建一次实例\",{\"1\":{\"784\":1}}],[\"以确保索引信息是准确的\",{\"1\":{\"507\":1,\"525\":1}}],[\"以\",{\"1\":{\"762\":1}}],[\"以内\",{\"1\":{\"725\":1}}],[\"以减少人工干预的需求\",{\"1\":{\"640\":1}}],[\"以便于从资源服务器获取资源\",{\"1\":{\"692\":1}}],[\"以便更加精细地控制哪些任务应该暂停\",{\"1\":{\"615\":1}}],[\"以便团队根据相关数据做出判断和决策\",{\"1\":{\"21\":1}}],[\"以针对特定硬件上的特定工作负载进行优化\",{\"1\":{\"430\":1}}],[\"以rr隔离级别为例\",{\"1\":{\"405\":1}}],[\"以上我们已经知道了初始化要做的一些事情\",{\"1\":{\"1060\":1}}],[\"以上两种模式的混合使用\",{\"1\":{\"395\":1}}],[\"以上配置的含义\",{\"1\":{\"256\":1}}],[\"以page页为单位\",{\"1\":{\"318\":1}}],[\"以读为主\",{\"1\":{\"309\":1}}],[\"以达到分散单台设备负载的效果\",{\"1\":{\"299\":1}}],[\"以空字符结尾的字符数组\",{\"1\":{\"225\":1}}],[\"以创建\",{\"1\":{\"181\":2}}],[\"以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点\",{\"1\":{\"1236\":1}}],[\"以使得新版本能够承受越来越大的流量压力\",{\"1\":{\"171\":1}}],[\"以使它们无歧义\",{\"1\":{\"90\":1}}],[\"以秒为单位\",{\"1\":{\"153\":1}}],[\"以yaml形式查看pod\",{\"1\":{\"125\":1}}],[\"以下是一个简单的文件操作示例\",{\"1\":{\"746\":1}}],[\"以下是\",{\"1\":{\"662\":1}}],[\"以下是告警复盘中需要关注的关键点以及devops系统可以为此做出的贡献\",{\"1\":{\"639\":1}}],[\"以下简称\",{\"1\":{\"225\":1}}],[\"以下的只在master节点执行\",{\"1\":{\"108\":1}}],[\"以下结合书中观点与个人思考\",{\"1\":{\"49\":1}}],[\"以及before\",{\"1\":{\"1098\":1}}],[\"以及当前的数据\",{\"1\":{\"1053\":1}}],[\"以及get\",{\"1\":{\"915\":1}}],[\"以及priorityqueue\",{\"1\":{\"914\":1}}],[\"以及pop\",{\"1\":{\"908\":1}}],[\"以及是否沿着链传递请求\",{\"1\":{\"805\":1}}],[\"以及多个实现了该接口或继承自该基类的具体策略类\",{\"1\":{\"775\":1}}],[\"以及异常处理逻辑的执行\",{\"1\":{\"758\":1}}],[\"以及srs感知空间数据类型\",{\"1\":{\"430\":1}}],[\"以及刷脏\",{\"1\":{\"389\":1}}],[\"以及对应缓存页在buffer\",{\"1\":{\"318\":1}}],[\"以及由该\",{\"1\":{\"198\":1}}],[\"以及怎样运行这些容器的声明\",{\"1\":{\"140\":1}}],[\"以及一些基本设置的默认值\",{\"1\":{\"131\":1}}],[\"以及记录这次部署信息\",{\"1\":{\"117\":1}}],[\"以及共享存储\",{\"1\":{\"115\":1}}],[\"以及这些\",{\"1\":{\"115\":1}}],[\"以及单独的\",{\"1\":{\"92\":1}}],[\"以及如何才能访问这些\",{\"1\":{\"86\":1}}],[\"以及流水线的冒烟用例\",{\"1\":{\"58\":1}}],[\"以及组织文化的健康程度\",{\"1\":{\"34\":1}}],[\"若房间里的值为正整数\",{\"1\":{\"1303\":1}}],[\"若房间里的值为负整数\",{\"1\":{\"1303\":1}}],[\"若未打补丁\",{\"1\":{\"592\":1}}],[\"若当前记录的事务\",{\"1\":{\"478\":2}}],[\"若在两次bgsave间宕机\",{\"1\":{\"258\":1}}],[\"若想了解定义\",{\"1\":{\"86\":1}}],[\"若集成失败后团队互相推诿\",{\"1\":{\"58\":1}}],[\"若频繁集成导致构建失败率高\",{\"1\":{\"58\":1}}],[\"若测试执行时间过长\",{\"1\":{\"56\":1}}],[\"若测试用例不足或质量低下\",{\"1\":{\"54\":1}}],[\"若测试环境与生产环境配置不一致\",{\"1\":{\"42\":1}}],[\"若测试环节持续阻塞交付\",{\"1\":{\"32\":1}}],[\"若开发人员每周才合并一次代码\",{\"1\":{\"51\":1}}],[\"若单元测试失败\",{\"1\":{\"40\":1}}],[\"若质量反复出现问题\",{\"1\":{\"34\":1}}],[\"若自动化程度低\",{\"1\":{\"34\":1}}],[\"若交付流程中频繁出现阻塞\",{\"1\":{\"34\":1}}],[\"照出组织文化中隐藏的短板\",{\"1\":{\"34\":1}}],[\"照妖镜\",{\"0\":{\"34\":1,\"58\":1},\"1\":{\"34\":1,\"58\":1}}],[\"五大类\",{\"1\":{\"967\":1}}],[\"五\",{\"0\":{\"34\":1,\"116\":1,\"136\":1,\"144\":1,\"165\":1,\"242\":1,\"289\":1,\"303\":1,\"312\":1,\"390\":1,\"420\":1,\"442\":1,\"533\":1,\"567\":1,\"599\":1,\"638\":1,\"661\":1,\"715\":1,\"750\":1,\"817\":1,\"864\":1,\"922\":1,\"955\":1,\"974\":1,\"986\":1,\"1025\":1,\"1083\":1,\"1221\":1}}],[\"领导层的躬身入局\",{\"1\":{\"33\":1}}],[\"工厂方法模式适用于系统中存在大量相似的对象\",{\"1\":{\"793\":1}}],[\"工厂方法模式引入了一个抽象的工厂基类\",{\"1\":{\"791\":1}}],[\"工厂方法模式\",{\"0\":{\"791\":1}}],[\"工厂方法模式和抽象工厂模式\",{\"1\":{\"788\":1}}],[\"工厂方法模优缺点\",{\"1\":{\"766\":1}}],[\"工厂方法使一个产品类的实例化延迟到其工厂的子类\",{\"1\":{\"766\":1}}],[\"工厂方法\",{\"0\":{\"766\":1}}],[\"工厂方法和抽象工厂\",{\"1\":{\"764\":1}}],[\"工厂模式的实现\",{\"1\":{\"902\":1}}],[\"工厂模式可以通过多种方式实现\",{\"1\":{\"788\":1}}],[\"工厂模式使得一个类的实例化延迟到其子类进行\",{\"1\":{\"788\":1}}],[\"工厂模式\",{\"0\":{\"787\":1},\"1\":{\"788\":1},\"2\":{\"795\":1}}],[\"工厂模式被分为了三种\",{\"1\":{\"764\":1}}],[\"工厂模式有哪些\",{\"0\":{\"764\":1}}],[\"工作线程和线程队列\",{\"1\":{\"1036\":1}}],[\"工作流引擎\",{\"1\":{\"560\":1}}],[\"工作负载方面明显更好\",{\"1\":{\"430\":1}}],[\"工作正在进行中\",{\"1\":{\"283\":2}}],[\"工作原理\",{\"0\":{\"278\":1},\"1\":{\"278\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1}}],[\"工作坊让全员理解持续交付的目标与方法论\",{\"1\":{\"33\":1}}],[\"工具堆砌\",{\"1\":{\"46\":1}}],[\"工具\",{\"0\":{\"42\":1,\"54\":1}}],[\"工具链的成熟度\",{\"1\":{\"34\":1}}],[\"工具暴露协作中的痛点\",{\"1\":{\"33\":1}}],[\"工具依赖误区\",{\"1\":{\"33\":1}}],[\"开区间还是闭区间\",{\"1\":{\"1403\":1}}],[\"开区间\",{\"1\":{\"1391\":1,\"1403\":2}}],[\"开闭原则\",{\"1\":{\"765\":1}}],[\"开放封闭原则\",{\"1\":{\"762\":1}}],[\"开销较大\",{\"1\":{\"1036\":1}}],[\"开销和加锁时间界于表锁和行锁之间\",{\"1\":{\"402\":1}}],[\"开销大\",{\"1\":{\"402\":1}}],[\"开销小\",{\"1\":{\"402\":1}}],[\"开启了慢查询日志只对当前数据库生效\",{\"1\":{\"503\":1}}],[\"开启事务\",{\"1\":{\"404\":1}}],[\"开启mysql的binlog写入功能\",{\"1\":{\"279\":1}}],[\"开启方式\",{\"0\":{\"260\":1}}],[\"开始你拥有\",{\"1\":{\"1281\":1}}],[\"开始节点\",{\"1\":{\"1221\":1}}],[\"开始去执行被\",{\"1\":{\"361\":1}}],[\"开始推送\",{\"1\":{\"278\":1}}],[\"开始进行业务处理\",{\"1\":{\"268\":1,\"269\":1,\"270\":1}}],[\"开始创建\",{\"1\":{\"181\":1}}],[\"开始设置环境\",{\"1\":{\"108\":1}}],[\"开始\",{\"1\":{\"33\":1,\"498\":1,\"1229\":1,\"1341\":2}}],[\"开发的基石\",{\"1\":{\"1173\":1}}],[\"开发效率\",{\"1\":{\"1172\":1}}],[\"开发者可以轻松实现复杂的堆相关应用\",{\"1\":{\"921\":1}}],[\"开发环境设为true可同步执行调试\",{\"1\":{\"654\":1}}],[\"开发人员可以轻松地查看cpu\",{\"1\":{\"634\":1}}],[\"开发如何快速排查\",{\"1\":{\"46\":1}}],[\"开发团队需编写可测试\",{\"1\":{\"31\":1}}],[\"开发\",{\"1\":{\"31\":1,\"39\":1}}],[\"某一天\",{\"1\":{\"1292\":2}}],[\"某个事物将系统表空间中的第100个页面中偏移量为1000处的那个字节的值1改为2\",{\"1\":{\"390\":1}}],[\"某个人或部门\",{\"1\":{\"32\":1}}],[\"某些阻塞式库\",{\"1\":{\"669\":1}}],[\"某些定时任务只应在特定的工作时间内执行\",{\"1\":{\"618\":1}}],[\"某些管理事件的发生\",{\"1\":{\"135\":1}}],[\"某些kubernetes对象应该被所有集群用户看到\",{\"1\":{\"118\":1}}],[\"某些情况下\",{\"1\":{\"118\":1,\"632\":1,\"638\":1}}],[\"某些部门可能因短期效率或成本压力\",{\"1\":{\"33\":1}}],[\"cbbd\",{\"1\":{\"1259\":1,\"1299\":2}}],[\"cbv\",{\"0\":{\"1140\":1,\"1141\":1,\"1143\":1},\"1\":{\"1143\":1}}],[\"cv\",{\"1\":{\"1045\":8,\"1050\":8,\"1094\":2,\"1098\":2,\"1100\":6,\"1102\":4,\"1104\":2}}],[\"c3\",{\"1\":{\"941\":2}}],[\"c2\",{\"1\":{\"941\":2,\"943\":4}}],[\"c1\",{\"1\":{\"941\":1,\"942\":2,\"943\":10,\"944\":3,\"945\":2,\"946\":2}}],[\"csv\",{\"1\":{\"797\":1}}],[\"csv等数据格式的相互转换\",{\"1\":{\"797\":1}}],[\"cur\",{\"1\":{\"1282\":2,\"1377\":2}}],[\"current\",{\"0\":{\"373\":1},\"1\":{\"262\":4,\"373\":1,\"482\":1,\"563\":4,\"732\":4,\"844\":2,\"856\":1,\"872\":3,\"1040\":1,\"1045\":2,\"1050\":2,\"1077\":2,\"1082\":1,\"1088\":1,\"1103\":1,\"1354\":3}}],[\"customnested\",{\"1\":{\"880\":2,\"881\":3}}],[\"custom\",{\"1\":{\"880\":1,\"1194\":1}}],[\"customer\",{\"1\":{\"776\":8}}],[\"customerror\",{\"1\":{\"751\":1}}],[\"customerrorwithdetails\",{\"1\":{\"751\":3}}],[\"cup\",{\"1\":{\"806\":1}}],[\"cd流程实现代码变更的自动化测试和部署\",{\"1\":{\"641\":1}}],[\"cd流水线中的每一个步骤都处于健康状态\",{\"1\":{\"630\":1}}],[\"cd流水线\",{\"1\":{\"555\":1}}],[\"cd日志\",{\"1\":{\"630\":1}}],[\"cd\",{\"1\":{\"555\":1,\"557\":1,\"630\":1,\"641\":1}}],[\"cd工具即可实现持续交付\",{\"1\":{\"33\":1}}],[\"ctxmgr\",{\"1\":{\"844\":1,\"1050\":1}}],[\"ctx\",{\"1\":{\"529\":1,\"844\":3,\"856\":4,\"1045\":6,\"1050\":12,\"1059\":4,\"1071\":2,\"1073\":4,\"1074\":6,\"1082\":2,\"1084\":3,\"1085\":2,\"1088\":4,\"1094\":7,\"1098\":4,\"1100\":12,\"1102\":7,\"1103\":6,\"1104\":3}}],[\"ct\",{\"1\":{\"529\":1}}],[\"ctrl+alt+l\",{\"1\":{\"536\":1}}],[\"ctr\",{\"1\":{\"136\":1}}],[\"cc\",{\"1\":{\"368\":1,\"475\":1}}],[\"c=nginx\",{\"1\":{\"165\":1}}],[\"c8ca0412674b\",{\"1\":{\"125\":2}}],[\"cmd\",{\"1\":{\"555\":1}}],[\"cm\",{\"1\":{\"108\":1}}],[\"child\",{\"1\":{\"1220\":12,\"1348\":4}}],[\"children\",{\"1\":{\"569\":1,\"1220\":4,\"1348\":1}}],[\"cherrypy\",{\"1\":{\"1169\":1}}],[\"cherry\",{\"1\":{\"731\":1}}],[\"checkout\",{\"1\":{\"555\":1}}],[\"checkpoint\",{\"1\":{\"390\":4}}],[\"check\",{\"1\":{\"390\":1,\"758\":2,\"1379\":2}}],[\"chain\",{\"1\":{\"1103\":1}}],[\"change\",{\"1\":{\"563\":6,\"566\":4,\"567\":3,\"572\":2,\"1275\":1}}],[\"channels\",{\"1\":{\"1169\":1,\"1170\":1,\"1172\":1,\"1173\":1}}],[\"channel\",{\"1\":{\"269\":1}}],[\"char\",{\"1\":{\"226\":1,\"1385\":2}}],[\"chown\",{\"1\":{\"108\":1}}],[\"chmod\",{\"1\":{\"108\":2}}],[\"cpython中存在着gil全局线程锁\",{\"1\":{\"1029\":1}}],[\"cpu限制\",{\"1\":{\"725\":1}}],[\"cpu密集型任务\",{\"1\":{\"724\":1}}],[\"cpu密集型任务可线性加速\",{\"1\":{\"712\":1}}],[\"cpu使用\",{\"1\":{\"712\":1}}],[\"cpu\",{\"1\":{\"124\":1,\"136\":2,\"361\":4,\"507\":1,\"590\":2,\"631\":1,\"664\":2,\"668\":2,\"670\":1,\"682\":2,\"714\":1,\"725\":5,\"813\":1}}],[\"cp\",{\"1\":{\"108\":1,\"124\":1}}],[\"celery+rabbitmq\",{\"1\":{\"722\":1}}],[\"celeryexecutor\",{\"1\":{\"714\":1}}],[\"celery中几种worker的区别\",{\"0\":{\"663\":1}}],[\"celery作为第三方模块集成到项目中\",{\"1\":{\"662\":1}}],[\"celery作为一个单独项目运行\",{\"1\":{\"662\":1}}],[\"celeryconfig\",{\"1\":{\"662\":6}}],[\"celery通过任务函数名的路径定位任务\",{\"1\":{\"656\":1}}],[\"celery通过配置文件优化任务执行\",{\"1\":{\"654\":1}}],[\"celery需要一个消息中间件\",{\"1\":{\"647\":1}}],[\"celery基本使用\",{\"0\":{\"644\":1}}],[\"celery\",{\"0\":{\"605\":1,\"607\":1},\"1\":{\"285\":1,\"605\":1,\"607\":3,\"645\":1,\"647\":1,\"648\":4,\"649\":2,\"651\":1,\"653\":1,\"660\":2,\"661\":3,\"662\":26,\"664\":2,\"665\":1,\"666\":1,\"667\":1,\"722\":4},\"2\":{\"671\":1,\"672\":1}}],[\"certificate\",{\"1\":{\"124\":1}}],[\"cert\",{\"1\":{\"108\":1}}],[\"centos\",{\"1\":{\"108\":1}}],[\"centos服务器本地设置2核4g\",{\"1\":{\"106\":1}}],[\"ce\",{\"1\":{\"108\":4}}],[\"car\",{\"1\":{\"1297\":1}}],[\"cart\",{\"1\":{\"776\":17}}],[\"camelcasename\",{\"1\":{\"1188\":1}}],[\"caching\",{\"1\":{\"1155\":1}}],[\"cache装饰器定义如下\",{\"1\":{\"930\":1}}],[\"cache参数说明\",{\"0\":{\"930\":1}}],[\"cache来查找结果\",{\"1\":{\"431\":1}}],[\"cache\",{\"1\":{\"332\":1,\"431\":1,\"839\":13,\"929\":2,\"930\":3,\"969\":1,\"1003\":13,\"1187\":1}}],[\"cast\",{\"1\":{\"1064\":2}}],[\"cases\",{\"1\":{\"1040\":1}}],[\"cabc\",{\"1\":{\"1057\":1,\"1098\":1,\"1100\":1,\"1104\":1}}],[\"canplaceflowers\",{\"1\":{\"1376\":3}}],[\"canpartition\",{\"1\":{\"1274\":1}}],[\"canconstruct\",{\"1\":{\"1300\":1}}],[\"canfinish\",{\"1\":{\"1241\":1}}],[\"can\",{\"1\":{\"799\":2,\"844\":1,\"1050\":1,\"1057\":1}}],[\"canal\",{\"1\":{\"278\":4,\"1297\":1}}],[\"canal是基于msyql\",{\"1\":{\"276\":1}}],[\"canal简介\",{\"0\":{\"275\":1}}],[\"ca\",{\"1\":{\"108\":1}}],[\"calculateminimumhp\",{\"1\":{\"1303\":1}}],[\"calculate\",{\"1\":{\"548\":1,\"725\":1,\"753\":2}}],[\"calico\",{\"1\":{\"108\":1}}],[\"calico网络组件\",{\"0\":{\"102\":1}}],[\"callable\",{\"1\":{\"1063\":2,\"1188\":2}}],[\"calls\",{\"1\":{\"1040\":1,\"1057\":2}}],[\"callback\",{\"1\":{\"862\":4}}],[\"call\",{\"1\":{\"108\":2,\"755\":1,\"834\":1,\"854\":1,\"856\":1,\"998\":1,\"1049\":2,\"1057\":4,\"1188\":3}}],[\"cats\",{\"1\":{\"1276\":1}}],[\"catsandog\",{\"1\":{\"1276\":1}}],[\"cat\",{\"1\":{\"108\":3,\"147\":2,\"385\":1,\"1276\":1}}],[\"capacity\",{\"1\":{\"67\":3}}],[\"cr\",{\"1\":{\"1300\":1}}],[\"credentials=true\",{\"1\":{\"662\":1}}],[\"creator\",{\"1\":{\"371\":2,\"477\":1}}],[\"create方法又是使用librarykeyword来进行创建的\",{\"1\":{\"1187\":1}}],[\"created\",{\"1\":{\"844\":2,\"1050\":1,\"1187\":1}}],[\"create=true\",{\"1\":{\"716\":1}}],[\"create\",{\"1\":{\"70\":3,\"73\":2,\"79\":1,\"81\":1,\"117\":1,\"124\":1,\"125\":11,\"447\":2,\"448\":2,\"449\":1,\"450\":2,\"494\":1,\"579\":2,\"662\":3,\"680\":2,\"792\":6,\"844\":1,\"849\":5,\"854\":1,\"861\":2,\"879\":2,\"924\":1,\"1010\":5,\"1040\":1,\"1049\":2,\"1050\":2,\"1094\":1,\"1100\":1,\"1151\":1,\"1187\":3}}],[\"crashsafe指mysql服务器宕机重启后\",{\"1\":{\"390\":1}}],[\"cron\",{\"1\":{\"200\":2,\"202\":1}}],[\"crontab\",{\"1\":{\"200\":1,\"661\":1}}],[\"cronjob仍然试图重新启动job\",{\"1\":{\"202\":1}}],[\"cronjob\",{\"0\":{\"199\":1},\"1\":{\"176\":1,\"198\":1,\"200\":3,\"202\":3,\"203\":1}}],[\"crd\",{\"1\":{\"97\":1}}],[\"cnf\",{\"1\":{\"334\":1,\"503\":2}}],[\"cnb7x2\",{\"1\":{\"108\":1}}],[\"cn\",{\"1\":{\"96\":1,\"108\":4}}],[\"cname\",{\"1\":{\"93\":1}}],[\"clclass\",{\"1\":{\"1299\":1}}],[\"closing\",{\"1\":{\"849\":1,\"1010\":1}}],[\"closed\",{\"1\":{\"790\":1}}],[\"close\",{\"1\":{\"579\":1,\"582\":1,\"746\":1,\"847\":4,\"848\":2,\"849\":1,\"953\":3,\"1009\":6,\"1010\":1,\"1102\":4,\"1194\":1}}],[\"clear\",{\"1\":{\"844\":2,\"1035\":1,\"1050\":2,\"1102\":3}}],[\"clean\",{\"1\":{\"548\":5}}],[\"cls\",{\"1\":{\"783\":5,\"784\":7,\"900\":6,\"902\":3,\"1057\":2}}],[\"class=query\",{\"1\":{\"849\":1,\"1010\":1}}],[\"class的\",{\"1\":{\"825\":1}}],[\"class\",{\"0\":{\"1141\":1,\"1143\":1},\"1\":{\"190\":1,\"534\":3,\"545\":2,\"563\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1,\"679\":2,\"732\":1,\"746\":1,\"751\":4,\"771\":2,\"776\":6,\"782\":1,\"783\":1,\"784\":2,\"790\":1,\"791\":3,\"792\":3,\"799\":4,\"806\":9,\"824\":2,\"825\":1,\"827\":2,\"828\":1,\"834\":1,\"844\":3,\"847\":2,\"849\":3,\"854\":1,\"855\":2,\"856\":1,\"861\":2,\"862\":1,\"865\":1,\"866\":2,\"867\":1,\"872\":1,\"879\":2,\"880\":1,\"881\":8,\"886\":2,\"887\":6,\"888\":2,\"900\":1,\"902\":4,\"919\":1,\"920\":1,\"998\":1,\"1009\":2,\"1010\":3,\"1015\":1,\"1030\":1,\"1049\":3,\"1050\":5,\"1057\":1,\"1059\":25,\"1061\":1,\"1063\":1,\"1073\":1,\"1074\":1,\"1085\":1,\"1094\":2,\"1100\":3,\"1104\":1,\"1111\":1,\"1112\":1,\"1143\":1,\"1147\":1,\"1149\":1,\"1152\":1,\"1180\":6,\"1182\":1,\"1183\":3,\"1187\":4,\"1188\":3,\"1189\":9,\"1193\":2,\"1194\":4,\"1198\":2,\"1202\":1,\"1207\":2,\"1208\":1,\"1209\":1,\"1221\":3,\"1225\":1,\"1227\":2,\"1229\":3,\"1230\":2,\"1236\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1257\":1,\"1258\":1,\"1259\":1,\"1265\":1,\"1266\":1,\"1274\":4,\"1275\":2,\"1276\":2,\"1280\":2,\"1281\":1,\"1282\":1,\"1286\":1,\"1287\":1,\"1288\":1,\"1289\":2,\"1292\":6,\"1297\":1,\"1298\":1,\"1299\":2,\"1300\":1,\"1303\":4,\"1307\":3,\"1308\":2,\"1309\":1,\"1313\":1,\"1314\":1,\"1331\":1,\"1335\":1,\"1337\":1,\"1338\":1,\"1339\":2,\"1340\":1,\"1341\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1364\":1,\"1365\":1,\"1366\":1,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":2,\"1380\":1,\"1384\":1,\"1385\":1,\"1390\":1,\"1395\":1,\"1399\":1,\"1400\":1,\"1403\":1}}],[\"claimname\",{\"1\":{\"67\":1}}],[\"claim\",{\"1\":{\"66\":1}}],[\"click\",{\"1\":{\"1064\":1}}],[\"clientsession\",{\"1\":{\"924\":1,\"925\":1}}],[\"clienttypeenum\",{\"1\":{\"873\":2}}],[\"clientform\",{\"1\":{\"873\":2}}],[\"client\",{\"1\":{\"331\":1,\"552\":1,\"679\":4,\"681\":1,\"776\":2,\"799\":8,\"806\":1,\"873\":7,\"951\":2,\"1059\":1}}],[\"cli\",{\"1\":{\"108\":1,\"262\":1,\"1050\":1,\"1059\":2,\"1064\":3,\"1194\":5}}],[\"cluster\",{\"1\":{\"92\":1,\"124\":2,\"203\":1,\"227\":1}}],[\"clusterip为none\",{\"1\":{\"87\":1}}],[\"clusterip分配一个用于负载均衡的集群内部ip地址port\",{\"1\":{\"87\":1}}],[\"clusterips是分配给该服务的ip地址列表\",{\"1\":{\"87\":1}}],[\"clusterips\",{\"1\":{\"87\":1}}],[\"clusterip是服务的ip地址\",{\"1\":{\"87\":1}}],[\"clusterip\",{\"1\":{\"87\":2,\"92\":1,\"93\":4}}],[\"c\",{\"0\":{\"227\":1},\"1\":{\"73\":2,\"135\":3,\"147\":3,\"203\":1,\"225\":2,\"227\":9,\"331\":1,\"405\":1,\"482\":1,\"776\":1,\"947\":5,\"1297\":1,\"1299\":1,\"1380\":1}}],[\"citations\",{\"1\":{\"1403\":15}}],[\"circular\",{\"1\":{\"1102\":1}}],[\"cidr=192\",{\"1\":{\"108\":1}}],[\"cidr=10\",{\"1\":{\"108\":1}}],[\"ci\",{\"1\":{\"49\":1,\"52\":1,\"553\":1,\"555\":2,\"557\":1,\"630\":1,\"641\":1}}],[\"ci或github\",{\"1\":{\"42\":1}}],[\"coins\",{\"1\":{\"1275\":7}}],[\"cost\",{\"1\":{\"932\":2,\"933\":2}}],[\"coffee\",{\"1\":{\"806\":1}}],[\"cookie格式如下\",{\"1\":{\"689\":1}}],[\"cookie头部\",{\"1\":{\"689\":1}}],[\"cookie和session\",{\"0\":{\"689\":1}}],[\"cookie\",{\"1\":{\"687\":1,\"689\":2}}],[\"cookies\",{\"1\":{\"552\":1}}],[\"coding\",{\"1\":{\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"code=401\",{\"1\":{\"863\":1}}],[\"code=code\",{\"1\":{\"863\":1}}],[\"code=200\",{\"1\":{\"863\":1}}],[\"code\",{\"1\":{\"44\":1,\"552\":1,\"597\":1,\"755\":1,\"776\":2,\"799\":3,\"806\":1,\"863\":6,\"882\":1,\"1188\":1,\"1194\":1,\"1276\":2}}],[\"countsubstrings\",{\"1\":{\"1299\":1}}],[\"count1\",{\"1\":{\"1274\":3}}],[\"count0\",{\"1\":{\"1274\":3}}],[\"count=3\",{\"1\":{\"833\":1,\"997\":1}}],[\"counter用来判断当前字符串剩余的数量\",{\"1\":{\"1198\":1}}],[\"counter类还支持+\",{\"1\":{\"947\":1}}],[\"counter类可以统计对象的个数\",{\"1\":{\"940\":1}}],[\"counter虽然是字典的子类\",{\"1\":{\"942\":1}}],[\"counter有3种创建对象的方法\",{\"1\":{\"941\":1}}],[\"counter\",{\"0\":{\"940\":1},\"1\":{\"706\":5,\"717\":3,\"756\":6,\"941\":6,\"942\":2,\"943\":6,\"944\":2,\"945\":2,\"946\":2,\"947\":7,\"1198\":20,\"1300\":4}}],[\"countdown=5\",{\"1\":{\"658\":1}}],[\"count中的统计条件可以三种选择\",{\"1\":{\"485\":1}}],[\"count\",{\"0\":{\"485\":3},\"1\":{\"485\":3,\"486\":3,\"487\":11,\"488\":1,\"548\":1,\"833\":1,\"941\":2,\"997\":1,\"1208\":11,\"1274\":5,\"1281\":4,\"1288\":6,\"1339\":3,\"1403\":4}}],[\"col\",{\"1\":{\"1354\":12}}],[\"colsize\",{\"1\":{\"1354\":7}}],[\"cols\",{\"1\":{\"1203\":2}}],[\"color\",{\"1\":{\"902\":5,\"1236\":6,\"1237\":6}}],[\"column\",{\"1\":{\"828\":5,\"849\":3,\"861\":3,\"865\":2,\"879\":3,\"886\":3,\"1010\":3}}],[\"collection\",{\"1\":{\"662\":4}}],[\"collections\",{\"0\":{\"910\":1},\"1\":{\"533\":1,\"776\":1,\"911\":1,\"912\":2,\"941\":1,\"942\":1,\"943\":2,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"1281\":2,\"1300\":1,\"1384\":1},\"2\":{\"949\":1}}],[\"col2\",{\"1\":{\"451\":3}}],[\"col1\",{\"1\":{\"451\":5}}],[\"col=\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"copy\",{\"1\":{\"257\":1,\"555\":2,\"705\":1,\"894\":1}}],[\"cow\",{\"1\":{\"257\":1}}],[\"coroutine\",{\"1\":{\"899\":1,\"923\":2,\"1040\":1}}],[\"cores\",{\"1\":{\"725\":2}}],[\"coredns\",{\"1\":{\"108\":4}}],[\"cors\",{\"1\":{\"662\":3,\"679\":1}}],[\"cordon\",{\"1\":{\"124\":1}}],[\"combinationsum4\",{\"1\":{\"1275\":1}}],[\"common返回top\",{\"1\":{\"946\":1}}],[\"common\",{\"0\":{\"946\":1},\"1\":{\"946\":1}}],[\"comment=\",{\"1\":{\"865\":2,\"886\":2}}],[\"commit\",{\"1\":{\"388\":1,\"482\":1,\"843\":1,\"849\":3,\"861\":2,\"862\":3,\"879\":2,\"1010\":3}}],[\"committed\",{\"1\":{\"371\":1,\"372\":1,\"425\":1,\"477\":1}}],[\"commands\",{\"1\":{\"124\":8,\"1050\":1}}],[\"command\",{\"1\":{\"73\":2,\"125\":1,\"133\":1,\"134\":1,\"135\":3,\"147\":2,\"197\":1}}],[\"complex\",{\"1\":{\"986\":1}}],[\"completed\",{\"1\":{\"135\":1,\"198\":1,\"202\":1,\"709\":2,\"1040\":1}}],[\"completions\",{\"1\":{\"198\":1}}],[\"completion\",{\"1\":{\"124\":1}}],[\"component\",{\"1\":{\"881\":1,\"1189\":1}}],[\"componentschema\",{\"1\":{\"881\":2}}],[\"components\",{\"1\":{\"681\":1}}],[\"compute\",{\"1\":{\"709\":2,\"720\":2}}],[\"compressed\",{\"1\":{\"321\":2}}],[\"compact中的行溢出机制\",{\"0\":{\"327\":1}}],[\"compact行格式中\",{\"1\":{\"323\":1}}],[\"compact行记录由两部分组成\",{\"1\":{\"321\":1,\"322\":1}}],[\"compact\",{\"0\":{\"322\":1},\"1\":{\"321\":3,\"322\":1}}],[\"com\",{\"1\":{\"93\":1,\"96\":2,\"97\":1,\"108\":9,\"843\":1,\"924\":1,\"925\":1}}],[\"convenient\",{\"1\":{\"1040\":1}}],[\"consumer\",{\"1\":{\"713\":1,\"916\":4}}],[\"console\",{\"1\":{\"681\":3,\"1194\":5}}],[\"consistency\",{\"1\":{\"425\":1}}],[\"consistent\",{\"1\":{\"371\":1,\"477\":1}}],[\"const表中最多只有一行匹配的记录\",{\"1\":{\"349\":1}}],[\"const\",{\"1\":{\"349\":3,\"350\":1,\"681\":6}}],[\"conditions\",{\"1\":{\"565\":2,\"573\":2}}],[\"condition\",{\"1\":{\"351\":1,\"455\":1,\"1032\":1}}],[\"connected和union复杂度都下降为\",{\"1\":{\"1226\":1}}],[\"connected\",{\"1\":{\"679\":2,\"681\":1,\"1225\":1,\"1227\":2}}],[\"connect\",{\"1\":{\"578\":1,\"579\":1,\"591\":1,\"679\":2,\"681\":1,\"847\":4,\"848\":2,\"1009\":6,\"1112\":1}}],[\"connection\",{\"1\":{\"332\":1,\"578\":1,\"579\":3,\"580\":1,\"662\":2,\"847\":4,\"848\":2,\"1009\":6}}],[\"connectors\",{\"1\":{\"331\":1}}],[\"conntrack\",{\"1\":{\"108\":1}}],[\"concretestrategyb\",{\"1\":{\"776\":2}}],[\"concretestrategya\",{\"1\":{\"776\":2}}],[\"concrete\",{\"1\":{\"776\":1,\"805\":1}}],[\"concurrent\",{\"0\":{\"709\":1},\"1\":{\"709\":1}}],[\"concurrency=4\",{\"1\":{\"659\":1,\"669\":1,\"722\":1}}],[\"concurrency\",{\"1\":{\"659\":1,\"669\":1}}],[\"concurrencypolicy\",{\"1\":{\"201\":1,\"202\":1}}],[\"concepts\",{\"1\":{\"87\":1}}],[\"conf配置文件进行开启\",{\"1\":{\"260\":1}}],[\"conf\",{\"1\":{\"108\":14,\"256\":1,\"648\":1,\"654\":1,\"657\":1,\"661\":1,\"662\":2,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"679\":1,\"680\":1,\"861\":1,\"862\":1,\"879\":1}}],[\"configure\",{\"1\":{\"1194\":1}}],[\"configuration\",{\"1\":{\"1\":1,\"1189\":1}}],[\"config=instance\",{\"1\":{\"1059\":1}}],[\"configattribute\",{\"1\":{\"1059\":1}}],[\"config\",{\"1\":{\"69\":1,\"70\":3,\"73\":2,\"108\":4,\"124\":1,\"210\":1,\"662\":8,\"679\":1,\"680\":2,\"861\":1,\"862\":1,\"872\":2,\"879\":1,\"1059\":16,\"1061\":1,\"1064\":1,\"1094\":3,\"1194\":3}}],[\"configmap使用参考\",{\"1\":{\"74\":1}}],[\"configmapref\",{\"1\":{\"73\":1}}],[\"configmapkeyref\",{\"1\":{\"73\":3}}],[\"configmap中每一个data键会变成mountpath下面的一个文件名\",{\"1\":{\"72\":1}}],[\"configmap卷提供了向\",{\"1\":{\"69\":1}}],[\"configmap\",{\"0\":{\"68\":1,\"74\":1},\"1\":{\"69\":6,\"70\":4,\"72\":2,\"73\":15,\"74\":6}}],[\"continue\",{\"1\":{\"833\":1,\"997\":1,\"1187\":1,\"1198\":2,\"1257\":1,\"1297\":2,\"1303\":1,\"1352\":1,\"1353\":1,\"1354\":2,\"1384\":1}}],[\"continuous\",{\"1\":{\"49\":1}}],[\"contex是最后pop的\",{\"1\":{\"1102\":1}}],[\"context消灭\",{\"1\":{\"1102\":1}}],[\"context创建\",{\"1\":{\"1102\":1}}],[\"context先于app\",{\"1\":{\"1102\":2}}],[\"contextvar中的set和get方法\",{\"1\":{\"1053\":1}}],[\"contextvars\",{\"0\":{\"1069\":1,\"1074\":1,\"1080\":1},\"1\":{\"1049\":2,\"1050\":1,\"1069\":3,\"1071\":2,\"1074\":3,\"1076\":1,\"1078\":2,\"1081\":2,\"1084\":1,\"1087\":1,\"1088\":2,\"1089\":1}}],[\"contextvar\",{\"0\":{\"1081\":1,\"1082\":1},\"1\":{\"1045\":4,\"1049\":1,\"1051\":1,\"1071\":2,\"1074\":2,\"1076\":2,\"1081\":1,\"1082\":1,\"1088\":1}}],[\"contextmanager\",{\"1\":{\"849\":4,\"861\":2,\"879\":2,\"1010\":4}}],[\"contextlib\",{\"1\":{\"849\":2,\"861\":1,\"879\":1,\"1010\":2}}],[\"contexts\",{\"1\":{\"844\":1,\"1050\":1}}],[\"context\",{\"0\":{\"1076\":1,\"1078\":1},\"1\":{\"662\":1,\"776\":8,\"843\":1,\"844\":9,\"849\":1,\"856\":1,\"1010\":1,\"1040\":2,\"1048\":1,\"1050\":12,\"1059\":3,\"1071\":2,\"1076\":1,\"1077\":1,\"1078\":1,\"1084\":1,\"1098\":5,\"1100\":7,\"1101\":1,\"1102\":1,\"1104\":4,\"1124\":1,\"1137\":1}}],[\"contents\",{\"1\":{\"758\":2}}],[\"content=\",{\"1\":{\"648\":1}}],[\"content\",{\"1\":{\"219\":1,\"742\":1,\"746\":2,\"925\":2,\"1166\":1,\"1167\":1}}],[\"contains\",{\"1\":{\"1050\":2}}],[\"containerport\",{\"1\":{\"147\":1}}],[\"containerd\",{\"1\":{\"108\":1}}],[\"container\",{\"1\":{\"70\":1,\"114\":1,\"115\":6,\"117\":3,\"135\":1}}],[\"containerstatuses获取指定容器的运行状态\",{\"1\":{\"198\":1}}],[\"containers\",{\"1\":{\"64\":1,\"67\":1,\"72\":3,\"73\":2,\"81\":1,\"135\":1,\"136\":1,\"147\":1,\"197\":1,\"203\":1}}],[\"contacts\",{\"1\":{\"499\":3}}],[\"controller\",{\"1\":{\"96\":2,\"108\":1,\"117\":2,\"169\":1,\"177\":3}}],[\"惯性思维\",{\"1\":{\"33\":1}}],[\"绝非易事\",{\"1\":{\"33\":1}}],[\"四个方向\",{\"1\":{\"1354\":1}}],[\"四个单线程进程也能使四核的cpu机器计算资源利用率达到100\",{\"1\":{\"1029\":1}}],[\"四个子节点\",{\"1\":{\"339\":1}}],[\"四次挥手\",{\"1\":{\"953\":1}}],[\"四种方式\",{\"1\":{\"299\":1}}],[\"四\",{\"0\":{\"33\":1,\"75\":1,\"115\":1,\"135\":1,\"143\":1,\"164\":1,\"181\":1,\"213\":1,\"220\":1,\"227\":1,\"234\":1,\"241\":1,\"252\":1,\"259\":1,\"288\":1,\"302\":1,\"311\":1,\"334\":1,\"387\":1,\"406\":1,\"417\":1,\"441\":1,\"514\":1,\"532\":1,\"564\":1,\"596\":1,\"614\":1,\"633\":1,\"655\":1,\"682\":1,\"714\":1,\"736\":1,\"747\":1,\"768\":1,\"800\":1,\"807\":1,\"816\":1,\"835\":1,\"849\":1,\"856\":1,\"863\":1,\"882\":1,\"917\":1,\"954\":1,\"971\":1,\"985\":1,\"999\":1,\"1010\":1,\"1017\":1,\"1024\":1,\"1036\":1,\"1080\":1,\"1125\":1,\"1153\":1,\"1173\":1,\"1220\":1}}],[\"汇报\",{\"1\":{\"32\":1}}],[\"团队协作低效\",{\"1\":{\"557\":1}}],[\"团队协作等关键问题\",{\"1\":{\"54\":1}}],[\"团队需共同制定代码提交规范\",{\"1\":{\"54\":1}}],[\"团队习惯于\",{\"1\":{\"33\":1}}],[\"团队可立即分析是测试用例不足\",{\"1\":{\"32\":1}}],[\"团队可以清晰看到代码提交\",{\"1\":{\"32\":1}}],[\"团队更关注如何通过自动化回滚\",{\"1\":{\"32\":1}}],[\"仪表盘\",{\"1\":{\"32\":1}}],[\"信封\",{\"1\":{\"1209\":1}}],[\"信封能组成一组\",{\"1\":{\"1209\":1}}],[\"信号的总结\",{\"0\":{\"1113\":1}}],[\"信号的使用\",{\"0\":{\"1112\":1}}],[\"信号的定义\",{\"0\":{\"1111\":1}}],[\"信号量锁\",{\"1\":{\"1032\":1}}],[\"信息加密\",{\"1\":{\"971\":1}}],[\"信息架构\",{\"1\":{\"430\":1}}],[\"信息\",{\"1\":{\"334\":1,\"504\":1}}],[\"信息共享与可视化\",{\"1\":{\"32\":1}}],[\"信任文化\",{\"1\":{\"32\":1}}],[\"信任\",{\"0\":{\"32\":1}}],[\"透明的信息流动\",{\"1\":{\"32\":1}}],[\"透明文化\",{\"1\":{\"32\":1}}],[\"透明与共享目标\",{\"0\":{\"32\":1}}],[\"往往会得到一个已存在与连接池中的数据库连接\",{\"1\":{\"578\":1}}],[\"往往习惯于\",{\"1\":{\"32\":1}}],[\"往往始于\",{\"1\":{\"31\":1}}],[\"到达i\",{\"1\":{\"1303\":1}}],[\"到达\",{\"1\":{\"1303\":1}}],[\"到第i家能获取到的金额总和\",{\"1\":{\"1280\":1}}],[\"到顶点\",{\"1\":{\"1229\":3}}],[\"到节点\",{\"1\":{\"1221\":2}}],[\"到每个邻居的权重\",{\"1\":{\"1219\":1}}],[\"到以\",{\"1\":{\"1208\":1}}],[\"到主键索引上找出相应的记录\",{\"1\":{\"455\":1}}],[\"到了超时时间探测还没返回结果说明失败\",{\"1\":{\"147\":4}}],[\"到最佳的\",{\"1\":{\"114\":1}}],[\"到\",{\"1\":{\"32\":2,\"1220\":2,\"1226\":1,\"1229\":2,\"1230\":1,\"1236\":1,\"1241\":1,\"1242\":1,\"1309\":2}}],[\"正值取最小数\",{\"0\":{\"1365\":1}}],[\"正\",{\"1\":{\"1341\":1}}],[\"正确思路\",{\"1\":{\"1307\":1,\"1379\":1}}],[\"正确思路应该是贪心\",{\"1\":{\"1289\":1}}],[\"正确的课程顺序为\",{\"1\":{\"1242\":1}}],[\"正确的流程是\",{\"1\":{\"131\":1}}],[\"正序遍历\",{\"1\":{\"1307\":1}}],[\"正序\",{\"1\":{\"1202\":1,\"1313\":1}}],[\"正方形最大面积\",{\"0\":{\"1202\":1}}],[\"正则表达式的match方法和search方法有什么区别\",{\"0\":{\"895\":1}}],[\"正常我们使用idea的编辑器是可以实现上一步\",{\"1\":{\"735\":1}}],[\"正例\",{\"1\":{\"529\":3,\"530\":1,\"531\":1,\"533\":1,\"534\":1}}],[\"正在运行的pod就删除\",{\"1\":{\"198\":1}}],[\"正在配置所有基础环境信息\",{\"1\":{\"108\":1}}],[\"正是因为dfs搜索可一个方向\",{\"1\":{\"1347\":1}}],[\"正是这场竞争的基石\",{\"1\":{\"46\":1}}],[\"正是要打破这种割裂\",{\"1\":{\"31\":1}}],[\"正如书中所言\",{\"1\":{\"31\":1,\"34\":1,\"46\":1}}],[\"共同探讨如何更好地预防问题的发生\",{\"1\":{\"628\":1}}],[\"共同责任\",{\"1\":{\"31\":1}}],[\"共享通用逻辑\",{\"1\":{\"1143\":1}}],[\"共享对象的同步\",{\"1\":{\"717\":1}}],[\"共享数组\",{\"1\":{\"706\":1}}],[\"共享整型\",{\"1\":{\"706\":1}}],[\"共享内存\",{\"1\":{\"706\":1}}],[\"共享内存空间\",{\"1\":{\"704\":1}}],[\"共享锁只能兼容共享锁\",{\"1\":{\"404\":1}}],[\"共享锁和排它锁\",{\"0\":{\"404\":1}}],[\"共享锁和排他锁是悲观锁的不同实现\",{\"1\":{\"403\":1}}],[\"共享锁\",{\"1\":{\"401\":1,\"404\":1}}],[\"共享表空间使用\",{\"1\":{\"334\":1}}],[\"共享该ip地址\",{\"1\":{\"115\":1}}],[\"共享存储\",{\"1\":{\"115\":1}}],[\"共享目标\",{\"1\":{\"32\":1}}],[\"共担风险\",{\"1\":{\"32\":1}}],[\"共担\",{\"1\":{\"32\":1}}],[\"共创\",{\"1\":{\"20\":1}}],[\"共创和精炼\",{\"1\":{\"20\":1}}],[\"与中间元素\",{\"1\":{\"1390\":1}}],[\"与s\",{\"1\":{\"1299\":2}}],[\"与其把dp\",{\"1\":{\"1273\":1}}],[\"与numpy的集成\",{\"1\":{\"797\":1}}],[\"与null也无关\",{\"1\":{\"488\":1}}],[\"与create\",{\"1\":{\"578\":1}}],[\"与当前读\",{\"0\":{\"373\":1},\"1\":{\"373\":1,\"482\":1}}],[\"与readview中的creator\",{\"1\":{\"371\":1}}],[\"与底层系统文件进行交互\",{\"1\":{\"333\":1}}],[\"与\",{\"0\":{\"227\":1,\"903\":1,\"962\":1,\"1140\":1,\"1156\":1,\"1322\":1},\"1\":{\"349\":4,\"448\":1,\"666\":2,\"971\":1,\"1015\":1,\"1164\":1}}],[\"与前面我们说的job一样定义法\",{\"1\":{\"202\":1}}],[\"与规则的\",{\"1\":{\"97\":1}}],[\"与开发共同设计自动化测试用例\",{\"1\":{\"31\":1}}],[\"与开发协作实现基础设施即代码\",{\"1\":{\"31\":1}}],[\"与探索环相辅相成的是验证环\",{\"1\":{\"21\":1}}],[\"半成品\",{\"1\":{\"31\":1}}],[\"将目标元素target\",{\"1\":{\"1390\":1}}],[\"将整个有序数组集合的查找范围确定为整个数组范围区间\",{\"1\":{\"1390\":1}}],[\"将所有划分结果按顺序连接\",{\"1\":{\"1385\":1}}],[\"将所有流量发送到同一个默认后端\",{\"1\":{\"98\":1}}],[\"将周边靠陆地且相邻的陆地都变成海洋\",{\"1\":{\"1354\":1}}],[\"将二进制里最后面的几个数剔除\",{\"1\":{\"1327\":1}}],[\"将数字转化为二进制后\",{\"1\":{\"1325\":1,\"1326\":1,\"1327\":1}}],[\"将数据和索引分开存储\",{\"1\":{\"440\":1}}],[\"将数据和索引放在一起\",{\"1\":{\"418\":1}}],[\"将数据存储与索引放到了一块\",{\"1\":{\"439\":1}}],[\"将数据读入内存后\",{\"1\":{\"361\":1}}],[\"将数据库部署在不同服务器上\",{\"1\":{\"300\":1}}],[\"将数据大表拆分成若干数据表组成\",{\"1\":{\"299\":1}}],[\"将会挑选你所选择的披萨顺时针方向的下一块披萨\",{\"1\":{\"1282\":1}}],[\"将会挑选你所选择的披萨逆时针方向的下一块披萨\",{\"1\":{\"1282\":1}}],[\"将电影和参演的演员连接\",{\"1\":{\"1234\":1}}],[\"将p和q进行连接\",{\"1\":{\"1225\":1,\"1227\":1}}],[\"将page恢复到崩溃之前的状态\",{\"1\":{\"383\":1}}],[\"将遍历和操作分离开来\",{\"1\":{\"1177\":1}}],[\"将资源分组\",{\"1\":{\"1155\":1}}],[\"将到达这里的每一个\",{\"1\":{\"1093\":1}}],[\"将视图函数放入到view\",{\"1\":{\"1063\":1}}],[\"将线程执行的任务抽象出来\",{\"1\":{\"1036\":1}}],[\"将大大减少底层开销\",{\"1\":{\"1036\":1}}],[\"将大问题分解为小问题\",{\"1\":{\"20\":1}}],[\"将创建和释放线程的操作变成预创建和借还操作\",{\"1\":{\"1036\":1}}],[\"将当前线程设置为\",{\"1\":{\"1035\":1}}],[\"将事件锁设为绿灯状态\",{\"1\":{\"1035\":1}}],[\"将事件锁设为红灯状态\",{\"1\":{\"1035\":1}}],[\"将允许系统根据策略自行切换到其他线程中运行\",{\"1\":{\"1033\":1}}],[\"将不允许切换到其他线程运行\",{\"1\":{\"1033\":1}}],[\"将服务器公钥放入到数字证书中\",{\"1\":{\"972\":1}}],[\"将服务流量路由到与此匹配的标签键和值的pod选择器\",{\"1\":{\"87\":1}}],[\"将ack的标志设置为1\",{\"1\":{\"951\":1}}],[\"将此序号填入\",{\"1\":{\"951\":1}}],[\"将此序号置于\",{\"1\":{\"951\":1}}],[\"将列表转换为堆结构\",{\"1\":{\"920\":1}}],[\"将元素插入队列\",{\"1\":{\"919\":1}}],[\"将my\",{\"1\":{\"855\":1}}],[\"将网络通信\",{\"1\":{\"769\":1}}],[\"将token放入headers中\",{\"1\":{\"691\":1}}],[\"将任务分配到不同队列\",{\"1\":{\"654\":1}}],[\"将代码拆分为独立模块\",{\"1\":{\"542\":1}}],[\"将代码推送到测试环境\",{\"1\":{\"40\":1}}],[\"将复杂的sql\",{\"1\":{\"507\":1,\"524\":1}}],[\"将更新内容写入到slave的db\",{\"1\":{\"494\":1}}],[\"将结果返回给客户端\",{\"1\":{\"356\":1}}],[\"将执行计划交给存储引擎进行执行\",{\"1\":{\"356\":1}}],[\"将前面选取和投影联接起来最终生成查询结果\",{\"1\":{\"332\":1}}],[\"将交由优化器将其转化成执行计划\",{\"1\":{\"332\":1}}],[\"将交付视为一个可预测\",{\"1\":{\"46\":1}}],[\"将交付视为一个端到端的价值流\",{\"1\":{\"31\":1}}],[\"将同一个表中的数据按照某种条件拆分到多台数据库\",{\"1\":{\"302\":1}}],[\"将单张表的数据切分到多个服务器上去\",{\"1\":{\"302\":1}}],[\"将职位描述信息存放在另一张表\",{\"1\":{\"301\":1}}],[\"将职位基本信息放在一张表\",{\"1\":{\"301\":1}}],[\"将原来单体服务的数据库进行拆分\",{\"1\":{\"299\":1}}],[\"将我们存放在同一个数据库中的数据分散存放到多个数据库\",{\"1\":{\"299\":1}}],[\"将缓存数据保存的任务放到消息队列中\",{\"1\":{\"285\":1}}],[\"将连接信息和事件放到队列中\",{\"1\":{\"267\":1}}],[\"将\",{\"1\":{\"264\":1,\"388\":1,\"460\":2,\"1076\":1,\"1078\":1,\"1164\":1}}],[\"将上阶段内存副本中的增量写数据同步到主内存\",{\"1\":{\"257\":1}}],[\"将变成\",{\"1\":{\"227\":2}}],[\"将小于\",{\"1\":{\"227\":1}}],[\"将其包裹在try块内\",{\"1\":{\"742\":1}}],[\"将其放入队列尾部\",{\"1\":{\"579\":1}}],[\"将其刷到\",{\"1\":{\"388\":1}}],[\"将其设置为\",{\"1\":{\"202\":1}}],[\"将其作为自己的一个属性\",{\"1\":{\"856\":1}}],[\"将其作为\",{\"1\":{\"99\":1}}],[\"将至少运行一次\",{\"1\":{\"201\":1}}],[\"将被查询的字段建立普通索引或者联合索引\",{\"1\":{\"415\":1}}],[\"将被标记为\",{\"1\":{\"349\":1}}],[\"将被标记为失败\",{\"1\":{\"198\":1}}],[\"将被终止\",{\"1\":{\"198\":1}}],[\"将清理掉由\",{\"1\":{\"197\":1}}],[\"将完成执行\",{\"1\":{\"197\":1}}],[\"将记录成功结束的\",{\"1\":{\"197\":1}}],[\"将失去回滚到\",{\"1\":{\"162\":1}}],[\"将来\",{\"1\":{\"160\":1}}],[\"将一些执行效率较低的\",{\"1\":{\"506\":1}}],[\"将一个类的接口转换成客户期望的另一个接口\",{\"1\":{\"797\":1}}],[\"将一个表按照字段分成多表\",{\"1\":{\"301\":1,\"303\":1}}],[\"将一个或多个本地端口转发到pod\",{\"1\":{\"124\":1}}],[\"将一直等到\",{\"1\":{\"135\":2}}],[\"将在\",{\"1\":{\"1390\":1}}],[\"将在该函数完成执行之后才删除容器\",{\"1\":{\"135\":1}}],[\"将在群集中资源最优的另一个\",{\"1\":{\"117\":1}}],[\"将节点标记为可调度的\",{\"1\":{\"124\":1}}],[\"将节点标记为不可调度\",{\"1\":{\"124\":1}}],[\"将某个版本的程序整体删除\",{\"1\":{\"120\":1}}],[\"将指示\",{\"1\":{\"117\":1}}],[\"将对象进行分类\",{\"1\":{\"116\":1}}],[\"将image的值改为如下值\",{\"1\":{\"96\":1}}],[\"将运行在一个或一组\",{\"1\":{\"86\":1}}],[\"将spec\",{\"1\":{\"72\":1}}],[\"将应用需要持久化的数据保存到指定位置\",{\"1\":{\"66\":1}}],[\"将分散的代码变更整合为一个稳定\",{\"1\":{\"50\":1}}],[\"将开发过程中的风险前置\",{\"1\":{\"49\":1}}],[\"将测试suite\",{\"1\":{\"1194\":1}}],[\"将测试嵌入到开发早期阶段\",{\"1\":{\"52\":1}}],[\"将测试\",{\"1\":{\"43\":1}}],[\"将部署过程转化为可回滚的\",{\"1\":{\"39\":1}}],[\"将团队交付速度\",{\"1\":{\"33\":1}}],[\"彼此之间缺乏有效沟通\",{\"1\":{\"31\":1}}],[\"每篇论文相应的被引用了\",{\"1\":{\"1403\":1}}],[\"每艘船最多可同时载两人\",{\"1\":{\"1378\":1}}],[\"每艘船可以承载的最大重量为\",{\"1\":{\"1378\":1}}],[\"每位顾客只买一杯柠檬水\",{\"1\":{\"1366\":1}}],[\"每笔交易你只需要为支付一次手续费\",{\"1\":{\"1292\":1}}],[\"每间房内都藏有一定的现金\",{\"1\":{\"1280\":2}}],[\"每件物品都有无限个\",{\"1\":{\"1275\":1}}],[\"每件物品只能用一次\",{\"1\":{\"1270\":1}}],[\"每部电影到演员列表\",{\"1\":{\"1234\":1}}],[\"每部署一个新版本就会创建一个新的副本集\",{\"1\":{\"164\":1}}],[\"每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类\",{\"1\":{\"766\":1}}],[\"每周甚至每月的固定时间点自动触发\",{\"1\":{\"613\":1}}],[\"每种物品有无限件\",{\"1\":{\"1275\":1}}],[\"每种方法都有其特点和适用场景\",{\"1\":{\"781\":1}}],[\"每种连接池类型都有其适用的场景\",{\"1\":{\"579\":1}}],[\"每种类型都有不同的行为和特点\",{\"1\":{\"579\":1}}],[\"每种分组中\",{\"1\":{\"530\":1}}],[\"每种顺序之间添加一个空行\",{\"1\":{\"530\":1}}],[\"每条sql的join操作\",{\"1\":{\"507\":1,\"524\":1}}],[\"每条数据都有两个隐藏字段\",{\"1\":{\"476\":1}}],[\"每小时10次\",{\"1\":{\"507\":1}}],[\"每小时节省2万次io\",{\"1\":{\"507\":2}}],[\"每小时执行10000次\",{\"1\":{\"507\":1}}],[\"每写一个事务\",{\"1\":{\"425\":1}}],[\"每秒2000次\",{\"1\":{\"713\":1}}],[\"每秒1000次\",{\"1\":{\"713\":1}}],[\"每秒刷新写入到磁盘中的\",{\"1\":{\"388\":1}}],[\"每秒同步一次\",{\"1\":{\"260\":1}}],[\"每执行一条\",{\"1\":{\"383\":1}}],[\"每当有新的连接请求且无当前可用的连接对象\",{\"1\":{\"578\":1}}],[\"每当我们在代码中调用engine\",{\"1\":{\"578\":1}}],[\"每当这个变量的值为256的倍数时\",{\"1\":{\"325\":1}}],[\"每当向某个包含隐藏的row\",{\"1\":{\"325\":1}}],[\"每当向集群中添加一个节点时\",{\"1\":{\"186\":1}}],[\"每次拿最大的就是局部最优\",{\"1\":{\"1358\":1}}],[\"每次跳跃两个索引\",{\"1\":{\"1338\":1}}],[\"每次从袋子里拿2个球\",{\"1\":{\"1328\":1}}],[\"每次只能向下或者向右移动一步\",{\"1\":{\"1303\":1}}],[\"每次只验证一个假设\",{\"1\":{\"20\":1}}],[\"每次操作中\",{\"1\":{\"1281\":1}}],[\"每次循环\",{\"1\":{\"1041\":1}}],[\"每次遇到\",{\"1\":{\"1021\":1}}],[\"每次都是在dest目录下新建文件夹\",{\"1\":{\"935\":1}}],[\"每次都会从数据库第一条记录开始扫描\",{\"1\":{\"498\":1}}],[\"每次出队都是优先级最高的元素\",{\"1\":{\"915\":1}}],[\"每次异常抛出和捕获都会消耗额外的cpu周期\",{\"1\":{\"758\":1}}],[\"每次调用next\",{\"1\":{\"733\":1}}],[\"每次定时任务执行前后都应生成详细的日志条目\",{\"1\":{\"619\":1}}],[\"每次插入任务\",{\"1\":{\"609\":1}}],[\"每次请求都会创建一个新的连接\",{\"1\":{\"579\":1}}],[\"每次优化减少2000个io\",{\"1\":{\"507\":1}}],[\"每次20000个io\",{\"1\":{\"507\":1}}],[\"每次20个io\",{\"1\":{\"507\":1}}],[\"每次\",{\"1\":{\"469\":1,\"1226\":1}}],[\"每次脏页刷新必须要先写\",{\"1\":{\"469\":1}}],[\"每次脏页刷新必须要先写double\",{\"1\":{\"320\":1}}],[\"每次加锁和释放锁的开销也会变大\",{\"1\":{\"404\":1}}],[\"每次提交都仅写入到\",{\"1\":{\"388\":1}}],[\"每次会读取一整页\",{\"1\":{\"361\":1}}],[\"每次查询数据\",{\"1\":{\"345\":1}}],[\"每次1mb\",{\"1\":{\"320\":1}}],[\"每一杯柠檬水的售价为\",{\"1\":{\"1366\":1}}],[\"每一块披萨的大小按顺时针方向由循环数组\",{\"1\":{\"1282\":1}}],[\"每一回合\",{\"1\":{\"1274\":1}}],[\"每一条数据都有多个版本\",{\"1\":{\"370\":1,\"476\":1}}],[\"每一条aof记录都立即同步到文件\",{\"1\":{\"260\":1}}],[\"每一张\",{\"1\":{\"334\":1}}],[\"每一张表都会有一个\",{\"1\":{\"334\":1}}],[\"每一张表都会有一个frm\",{\"1\":{\"334\":1}}],[\"每一次读取前都会生成一个快照readview\",{\"1\":{\"374\":1}}],[\"每一次读取数据前都生成一个readview\",{\"1\":{\"372\":1}}],[\"每一次aof记录的添加\",{\"1\":{\"260\":1}}],[\"每一次rewrite之后\",{\"1\":{\"260\":1}}],[\"每一个环节都需要精心规划与实施\",{\"1\":{\"619\":1}}],[\"每一个库只有这张表的部分数据\",{\"1\":{\"303\":1}}],[\"每一个网络连接其实都对应一个文件描述符\",{\"1\":{\"268\":1}}],[\"每一个应用容器都必须能一直运行起来\",{\"1\":{\"142\":1}}],[\"每一个\",{\"1\":{\"113\":1}}],[\"每隔几秒来运行这个\",{\"1\":{\"147\":5}}],[\"每个字母最多出现在一个片段中\",{\"1\":{\"1385\":1}}],[\"每个字符串都是一个长度为一的递增子序列\",{\"1\":{\"1286\":1}}],[\"每个标签最多uselimit的子集\",{\"1\":{\"1384\":1}}],[\"每个孩子最多只能给一块饼干\",{\"1\":{\"1364\":1}}],[\"每个球每次被拿出机会均等如果拿出的是2个白球\",{\"1\":{\"1328\":1}}],[\"每个演员的相邻节点就是该演员参演过的所有电影\",{\"1\":{\"1234\":1}}],[\"每个演员到电影列表\",{\"1\":{\"1234\":1}}],[\"每个电影节点的相邻节点就是参演该电影的所有演员\",{\"1\":{\"1234\":1}}],[\"每个顶点对由\",{\"1\":{\"1229\":1}}],[\"每个数字只能属于一条连线\",{\"1\":{\"1309\":1}}],[\"每个数字都是一个长度为1的顺子\",{\"1\":{\"1198\":1}}],[\"每个数都可以是子数组长度为1的最长子序列\",{\"1\":{\"1207\":1}}],[\"每个整数\",{\"1\":{\"1198\":1}}],[\"每个子序列都是一个\",{\"1\":{\"1198\":1}}],[\"每个资源对应一个或多个\",{\"1\":{\"1149\":1}}],[\"每个上下文\",{\"1\":{\"1071\":1}}],[\"每个请求按顺序执行\",{\"1\":{\"1161\":1}}],[\"每个请求\",{\"1\":{\"1052\":1}}],[\"每个请求会阻塞主线程\",{\"1\":{\"592\":1}}],[\"每个线程之间的数据资源可以相互独立\",{\"1\":{\"1049\":1}}],[\"每个方向都需要一个\",{\"1\":{\"953\":1}}],[\"每个url的下载任务由单独的协程处理\",{\"1\":{\"925\":1}}],[\"每个下载任务视为一个异步操作\",{\"1\":{\"925\":1}}],[\"每个处理者接收到请求后\",{\"1\":{\"805\":1}}],[\"每个处理者均可对请求进行处理\",{\"1\":{\"804\":1}}],[\"每个具体策略类都提供了一种特定的行为实现\",{\"1\":{\"776\":1}}],[\"每个开发者都避免不了遇到异常处理\",{\"1\":{\"740\":1}}],[\"每个核心最多2个进程\",{\"1\":{\"725\":1}}],[\"每个进程占用\",{\"1\":{\"725\":3}}],[\"每个进程需独立连接池\",{\"1\":{\"714\":1}}],[\"每个进程需复制整个\",{\"1\":{\"664\":1}}],[\"每个进程独立内存空间\",{\"1\":{\"713\":1}}],[\"每个进程独立解释器\",{\"1\":{\"712\":1}}],[\"每个任务所分担到的线程本身开销则越小\",{\"1\":{\"1036\":1}}],[\"每个任务运行在独立进程中\",{\"1\":{\"714\":1}}],[\"每个任务在独立的子进程中执行\",{\"1\":{\"664\":1}}],[\"每个任务应包含\",{\"1\":{\"661\":1}}],[\"每个任务都有一个预定的执行时间戳作为键值存入堆中\",{\"1\":{\"609\":1}}],[\"每个格子代表一定的时间\",{\"1\":{\"610\":1}}],[\"每个模块只负责一个功能\",{\"1\":{\"543\":1}}],[\"每个模块专注单一职责\",{\"1\":{\"542\":1}}],[\"每个导入应该独占一行\",{\"1\":{\"530\":1}}],[\"每个内循环要\",{\"1\":{\"513\":1}}],[\"每个事务只有一个sql\",{\"1\":{\"408\":1}}],[\"每个节点是对应的定时任务\",{\"1\":{\"609\":1}}],[\"每个节点的元素个数越多\",{\"1\":{\"341\":1}}],[\"每个节点可以存放多个索引值及对应的data数据\",{\"1\":{\"340\":1}}],[\"每个节点最多拥有m\",{\"1\":{\"338\":1}}],[\"每个节点都是一个ziplist\",{\"1\":{\"224\":1}}],[\"每个表只能有一个主键\",{\"1\":{\"449\":1}}],[\"每个表只有这个表的部分数据\",{\"1\":{\"303\":1}}],[\"每个表存储其中一部分字段\",{\"1\":{\"301\":1,\"303\":1}}],[\"每个服务器具有相应的库与表\",{\"1\":{\"302\":1}}],[\"每个人可能会有多个商品但是只可以有一个购物车\",{\"1\":{\"780\":1}}],[\"每个人都可能不喜欢其他人\",{\"1\":{\"1237\":1}}],[\"每个人都可以抢到红包\",{\"1\":{\"295\":1}}],[\"每个人都需要非常认真的对待版本\",{\"1\":{\"58\":1}}],[\"每个人只可以抢一次\",{\"1\":{\"293\":1,\"294\":1}}],[\"每个zlentry由前一个节点的长度\",{\"1\":{\"219\":1}}],[\"每个pod始终对应各自的存储路径\",{\"1\":{\"191\":1}}],[\"每个pod都与运行它的\",{\"1\":{\"115\":1}}],[\"每个运行的容器都是可重复的\",{\"1\":{\"130\":1}}],[\"每个机器开发的端口\",{\"1\":{\"125\":1}}],[\"每个kubernetes对象可以有多个标签\",{\"1\":{\"120\":1}}],[\"每个路径都有一个由\",{\"1\":{\"97\":1}}],[\"每个rules都包含以下规则\",{\"1\":{\"97\":1}}],[\"每个\",{\"1\":{\"86\":1,\"114\":2,\"115\":1,\"162\":1,\"482\":1}}],[\"每个环节由不同团队负责\",{\"1\":{\"31\":1}}],[\"运算\",{\"1\":{\"1340\":1}}],[\"运算结果等于\",{\"1\":{\"1274\":1}}],[\"运算成功\",{\"1\":{\"748\":1}}],[\"运算符\",{\"1\":{\"434\":1}}],[\"运行结束函数\",{\"1\":{\"1194\":1}}],[\"运行结果\",{\"1\":{\"735\":2}}],[\"运行teardown\",{\"1\":{\"1194\":1}}],[\"运行tests\",{\"1\":{\"1194\":1}}],[\"运行逻辑\",{\"0\":{\"1194\":1}}],[\"运行关键字是通过关键字名称\",{\"1\":{\"1188\":1}}],[\"运行关键字\",{\"0\":{\"1188\":1},\"1\":{\"1188\":1}}],[\"运行一个协程\",{\"1\":{\"1040\":1}}],[\"运行异步主函数\",{\"1\":{\"736\":1}}],[\"运行setup\",{\"1\":{\"1194\":1}}],[\"运行suite\",{\"1\":{\"1194\":2}}],[\"运行socket\",{\"0\":{\"680\":1},\"1\":{\"680\":1}}],[\"运行sh命令\",{\"1\":{\"147\":1}}],[\"运行日志处理\",{\"1\":{\"679\":1}}],[\"运行\",{\"1\":{\"561\":1,\"1035\":1,\"1059\":1}}],[\"运行时\",{\"1\":{\"133\":1}}],[\"运行容器\",{\"0\":{\"128\":1}}],[\"运行环节的任务就是将软件包部署于生产环境\",{\"1\":{\"21\":1}}],[\"运维团队不再以\",{\"1\":{\"32\":1}}],[\"运维团队需提供稳定环境\",{\"1\":{\"31\":1}}],[\"运维\",{\"1\":{\"31\":1}}],[\"孤岛文化\",{\"1\":{\"31\":1}}],[\"孤岛\",{\"0\":{\"31\":1}}],[\"不多于\",{\"1\":{\"1403\":1}}],[\"不到黄河不回头\",{\"1\":{\"1345\":2}}],[\"不管异或顺序是什么\",{\"1\":{\"1324\":1}}],[\"不相交的线\",{\"0\":{\"1309\":1}}],[\"不相同\",{\"1\":{\"1299\":1}}],[\"不改变剩余字符顺序的情况下\",{\"1\":{\"1299\":1}}],[\"不操作\",{\"1\":{\"1292\":3}}],[\"不持有的取上次不持有的\",{\"1\":{\"1292\":1}}],[\"不持有\",{\"1\":{\"1292\":3}}],[\"不持有股票的最大利润\",{\"1\":{\"1292\":2}}],[\"不持有就是卖出\",{\"1\":{\"1292\":1}}],[\"不偷就是前一家的总和\",{\"1\":{\"1280\":2}}],[\"不触动警报装置的情况下\",{\"1\":{\"1280\":1}}],[\"不满足题意\",{\"1\":{\"1274\":1}}],[\"不如只用一个一维数组了\",{\"1\":{\"1273\":1}}],[\"不取的话dp\",{\"1\":{\"1271\":1}}],[\"不存在\",{\"1\":{\"1390\":1}}],[\"不存在满足题意的三元组\",{\"1\":{\"1289\":1}}],[\"不存在平行边\",{\"1\":{\"1236\":1}}],[\"不存在自环\",{\"1\":{\"1236\":1}}],[\"不存在指向顶点自身的边\",{\"1\":{\"1229\":1}}],[\"不存在重复边\",{\"1\":{\"1229\":1}}],[\"不存在由顶点\",{\"1\":{\"1229\":1}}],[\"不存在于磁盘架构中\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"不实现小挂大\",{\"1\":{\"1227\":1}}],[\"不允许旋转信封\",{\"1\":{\"1209\":1}}],[\"不允许有空值\",{\"1\":{\"449\":1}}],[\"不必等其回来\",{\"1\":{\"975\":1}}],[\"不是回文串\",{\"1\":{\"1297\":1}}],[\"不是\",{\"1\":{\"1276\":1,\"1308\":1,\"1313\":1}}],[\"不是二分图\",{\"1\":{\"1237\":1}}],[\"不是通过一个连接\",{\"1\":{\"962\":1}}],[\"不是按照索引值进行存储的\",{\"1\":{\"316\":1,\"463\":1}}],[\"不禁让人感到以后\",{\"1\":{\"941\":1}}],[\"不返回类的类属性\",{\"1\":{\"825\":1}}],[\"不该有直接依赖关系的类之间\",{\"1\":{\"762\":1}}],[\"不应该使用\",{\"1\":{\"698\":1}}],[\"不应该只是组织中某个角色的责任\",{\"1\":{\"30\":1}}],[\"不然有可能会对代码有影响\",{\"1\":{\"682\":1}}],[\"不推荐\",{\"1\":{\"652\":1}}],[\"不具备内置的任务持久化功能\",{\"1\":{\"607\":1}}],[\"不维护连接池\",{\"1\":{\"579\":1}}],[\"不转换\",{\"1\":{\"565\":1}}],[\"不要求字典中出现的单词全部都使用\",{\"1\":{\"1276\":1}}],[\"不要求按特定顺序\",{\"1\":{\"1221\":1}}],[\"不要使用额外的数组空间\",{\"1\":{\"1265\":1}}],[\"不要使用select\",{\"1\":{\"507\":1,\"522\":1}}],[\"不要给另外的数组分配额外的空间\",{\"1\":{\"1258\":1}}],[\"不要有依赖\",{\"1\":{\"762\":1}}],[\"不要过度补丁\",{\"1\":{\"599\":1}}],[\"不要为了\",{\"1\":{\"546\":1}}],[\"不打印密码\",{\"1\":{\"536\":1}}],[\"不利于写代码和业务调试\",{\"1\":{\"534\":1}}],[\"不适合\",{\"1\":{\"664\":1}}],[\"不适合长期持有连接\",{\"1\":{\"579\":1}}],[\"不适合多线程应用\",{\"1\":{\"579\":1}}],[\"不适合写功能\",{\"1\":{\"534\":1}}],[\"不适用于实时性要求较高的场景\",{\"1\":{\"258\":1}}],[\"不超过两层的if\",{\"1\":{\"533\":1}}],[\"不计null\",{\"1\":{\"488\":1}}],[\"不包括记录本身\",{\"1\":{\"482\":1}}],[\"不包含重复值\",{\"1\":{\"1236\":1}}],[\"不包含\",{\"1\":{\"349\":1,\"1236\":1}}],[\"不过我是通过ui来生成流程的所有上面说的这个问题可以大概率避免\",{\"1\":{\"1189\":1}}],[\"不过有一点不同\",{\"1\":{\"1189\":1}}],[\"不过\",{\"1\":{\"920\":1}}],[\"不过理论上会出现幻读\",{\"1\":{\"482\":1}}],[\"不过这里有个小问题\",{\"1\":{\"358\":2}}],[\"不可以学完全部的课程\",{\"1\":{\"1242\":1}}],[\"不可以实现上一步的功能\",{\"1\":{\"735\":1}}],[\"不可以和保留字进行重复\",{\"1\":{\"529\":1}}],[\"不可靠的数据包传输\",{\"1\":{\"675\":1}}],[\"不可用时间\",{\"0\":{\"618\":1}}],[\"不可读\",{\"1\":{\"478\":1}}],[\"不可重复读\",{\"1\":{\"425\":2}}],[\"不可替代的\",{\"0\":{\"52\":1}}],[\"不考虑隔离性会引发的问题\",{\"1\":{\"425\":1}}],[\"不兼容排它锁\",{\"1\":{\"404\":1}}],[\"不仅限于队列\",{\"1\":{\"911\":1}}],[\"不仅可以用于认证\",{\"1\":{\"698\":1}}],[\"不仅能让项目高效运行\",{\"1\":{\"557\":1}}],[\"不仅仅需要更新表中的数据\",{\"1\":{\"507\":1,\"525\":1}}],[\"不仅会加name索引上的记录x锁\",{\"1\":{\"408\":1}}],[\"不仅记录了redo\",{\"1\":{\"380\":1}}],[\"不仅是技术实践\",{\"1\":{\"49\":1}}],[\"不仅是方法论\",{\"1\":{\"34\":1}}],[\"不仅是代码仓的gitlab\",{\"0\":{\"5\":1}}],[\"不在未提交事务的数组中\",{\"1\":{\"478\":1}}],[\"不在\",{\"1\":{\"371\":1}}],[\"不在于缩短了多少交付时间\",{\"1\":{\"34\":1}}],[\"不需要考虑数组中超出新长度后面的元素\",{\"1\":{\"1266\":2}}],[\"不需要导入任何模块即可直接使用\",{\"1\":{\"986\":1}}],[\"不需要等待io操作完成才能继续执行后续的操作\",{\"1\":{\"898\":1}}],[\"不需要关注跟客户端的交互细节\",{\"1\":{\"769\":1}}],[\"不需要关心是哪个类对接口进行了实现\",{\"1\":{\"762\":1}}],[\"不需要改的老逻辑\",{\"1\":{\"762\":1}}],[\"不需要访问主键的索引树\",{\"1\":{\"440\":1}}],[\"不需要回表\",{\"1\":{\"415\":1}}],[\"不需要再通过聚集索引去定位行记录\",{\"1\":{\"415\":1}}],[\"不需要通过索引回表\",{\"1\":{\"351\":1}}],[\"不需要事务支持\",{\"1\":{\"309\":1}}],[\"不使用任何索引\",{\"1\":{\"350\":1}}],[\"不进行磁盘io\",{\"1\":{\"350\":1}}],[\"不用回表\",{\"1\":{\"349\":1}}],[\"不支持继承扩展类的场景\",{\"1\":{\"770\":1}}],[\"不支持排序和范围列查找\",{\"1\":{\"316\":1,\"463\":1}}],[\"不支持\",{\"1\":{\"309\":1}}],[\"不支持always\",{\"1\":{\"197\":1}}],[\"不一定被查询实际使用\",{\"1\":{\"349\":1}}],[\"不一定\",{\"1\":{\"264\":1}}],[\"不暂缓\",{\"1\":{\"260\":1}}],[\"不同为1\",{\"1\":{\"1324\":1}}],[\"不同路径\",{\"1\":{\"1303\":2}}],[\"不同\",{\"1\":{\"1143\":1,\"1237\":1,\"1275\":1}}],[\"不同类型的连接池\",{\"0\":{\"579\":1}}],[\"不同存储引擎支持不同的锁机制\",{\"0\":{\"400\":1}}],[\"不同时\",{\"1\":{\"349\":1}}],[\"不同的子序列\",{\"0\":{\"1314\":1}}],[\"不同的三元组是\",{\"1\":{\"1257\":1}}],[\"不同的\",{\"1\":{\"662\":1}}],[\"不同的就是\",{\"1\":{\"448\":1}}],[\"不同的位代表不同的意思\",{\"1\":{\"324\":1}}],[\"不同的数据可能会出现相同的值\",{\"1\":{\"244\":1}}],[\"不同点\",{\"0\":{\"179\":1}}],[\"不提供任何终止\",{\"1\":{\"190\":1}}],[\"不会包含\",{\"1\":{\"1236\":1}}],[\"不会消耗cpu资源\",{\"1\":{\"1036\":1}}],[\"不会引发keyerror\",{\"1\":{\"942\":1}}],[\"不会讲他从栈中移除\",{\"1\":{\"856\":1}}],[\"不会返回出结果\",{\"1\":{\"848\":1,\"1009\":1}}],[\"不会命中缓存\",{\"1\":{\"839\":1,\"1003\":1}}],[\"不会影响老业务\",{\"1\":{\"762\":1}}],[\"不会出现数据污染等意外情况\",{\"1\":{\"1031\":1}}],[\"不会出现一方有难\",{\"1\":{\"1029\":1}}],[\"不会出现在where子句中的字段不该创建索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"不会出现死锁\",{\"1\":{\"402\":1}}],[\"不会忽略列值为null的数据\",{\"1\":{\"486\":2}}],[\"不会丢失\",{\"1\":{\"425\":1}}],[\"不会失效\",{\"1\":{\"416\":1}}],[\"不会覆盖以前的日志\",{\"1\":{\"385\":1}}],[\"不会驱逐任何key\",{\"1\":{\"212\":1}}],[\"不会生效\",{\"1\":{\"202\":1}}],[\"不会保留已经结束的\",{\"1\":{\"202\":1}}],[\"不会触发上线动作\",{\"1\":{\"165\":1}}],[\"不会产生一次部署信息\",{\"1\":{\"117\":1}}],[\"不接受流量\",{\"1\":{\"148\":1}}],[\"不断地使实际状态趋向于您期望的目标状态\",{\"1\":{\"113\":1}}],[\"不能则返回\",{\"1\":{\"1376\":1}}],[\"不能将节点分割成两个独立的子集\",{\"1\":{\"1236\":1}}],[\"不能将秘密数据写入\",{\"1\":{\"698\":1}}],[\"不能放行任意个数量的子线程继续运行\",{\"1\":{\"1035\":1}}],[\"不能出现连续重复使用多次acquire\",{\"1\":{\"1034\":1}}],[\"不能发挥出计算机中多核的优点\",{\"1\":{\"1029\":1}}],[\"不能看到更晚提交的值\",{\"1\":{\"476\":1}}],[\"不能命中索引\",{\"1\":{\"416\":1}}],[\"不能使用查看文本工具的命令\",{\"1\":{\"385\":1}}],[\"不能删除数据\",{\"1\":{\"244\":1}}],[\"不能直接控制新老版本的存活时间\",{\"1\":{\"172\":1}}],[\"不能更新\",{\"1\":{\"133\":1}}],[\"不能是number\",{\"1\":{\"73\":1}}],[\"不能只因其执行速度慢\",{\"1\":{\"46\":1}}],[\"不愿跨出舒适区\",{\"1\":{\"33\":1}}],[\"是该子集的值之和\",{\"1\":{\"1384\":1}}],[\"是第\",{\"1\":{\"1366\":1}}],[\"是认准一个方向搜\",{\"1\":{\"1345\":1}}],[\"是这两个字符串所共同拥有的子序列\",{\"1\":{\"1308\":1}}],[\"是字符串中的由连续字符组成的一个序列\",{\"1\":{\"1299\":1}}],[\"是回文串\",{\"1\":{\"1297\":1}}],[\"是正着读和倒过来读一样的字符串\",{\"1\":{\"1296\":1,\"1299\":1}}],[\"是某支给定的股票在第\",{\"1\":{\"1292\":2}}],[\"是没有区别的\",{\"1\":{\"1275\":1}}],[\"是没有区别的所以求得是组合问题\",{\"1\":{\"1275\":1}}],[\"是集合\",{\"1\":{\"1274\":1}}],[\"是无法进行拓扑排序的\",{\"1\":{\"1240\":1}}],[\"是二分图\",{\"1\":{\"1237\":1}}],[\"是二进制文件\",{\"1\":{\"256\":1}}],[\"是因为我们一旦return\",{\"1\":{\"1221\":1}}],[\"是相连的\",{\"1\":{\"1217\":1}}],[\"是数组\",{\"1\":{\"1207\":1,\"1286\":1}}],[\"是由一些相邻的\",{\"1\":{\"1353\":1}}],[\"是由它的左上角得出来的\",{\"1\":{\"1271\":1}}],[\"是由dp\",{\"1\":{\"1271\":1}}],[\"是由数组派生而来的序列\",{\"1\":{\"1207\":1,\"1286\":1}}],[\"是由于程序的bug产生的\",{\"1\":{\"407\":1}}],[\"是个可执行函数\",{\"1\":{\"1188\":3}}],[\"是值得我来借鉴的地方\",{\"1\":{\"1186\":1}}],[\"是现代\",{\"1\":{\"1173\":1}}],[\"是下一代接口\",{\"1\":{\"1173\":1}}],[\"是下一代的\",{\"1\":{\"177\":1}}],[\"是的flask不再使用localstock来处理上下文\",{\"1\":{\"1050\":1}}],[\"是有局限的\",{\"1\":{\"1024\":1}}],[\"是访问集合元素的一种方式\",{\"1\":{\"1014\":1}}],[\"是局部变量\",{\"1\":{\"983\":1}}],[\"是超文本传输协议\",{\"1\":{\"966\":1}}],[\"是未发送但总大小超过接收方处理范围\",{\"1\":{\"959\":1}}],[\"是未发送但总大小在接收方处理范围内\",{\"1\":{\"959\":1}}],[\"是已发送但未收到\",{\"1\":{\"959\":1}}],[\"是已发送并收到\",{\"1\":{\"959\":1}}],[\"是函数的注释说明\",{\"1\":{\"932\":1}}],[\"是python中用于异步编程的一种高级控制流特性\",{\"1\":{\"923\":1}}],[\"是作为高度自由的框架\",{\"1\":{\"860\":1}}],[\"是方法\",{\"1\":{\"856\":1}}],[\"是包含当前程序业务逻辑的类\",{\"1\":{\"799\":1}}],[\"是软件工程中一种创建型设计模式\",{\"1\":{\"788\":1}}],[\"是行为设计模式的一种\",{\"1\":{\"775\":1}}],[\"是继承方案的一个替代方案\",{\"1\":{\"771\":1}}],[\"是程序开发人员必会的一项调试程序的技能\",{\"1\":{\"729\":1}}],[\"是1970年1月1日以来的秒数\",{\"1\":{\"696\":2}}],[\"是为了在网络应用环境间传递声明而执行的一种基于json的开放标准rfc7519\",{\"1\":{\"692\":1}}],[\"是电话的接口\",{\"1\":{\"676\":1}}],[\"是网络通信的端点\",{\"1\":{\"674\":1}}],[\"是计算机网络编程中的一个核心概念\",{\"1\":{\"674\":1}}],[\"是业务在运行中所产生的一些问题\",{\"1\":{\"629\":1}}],[\"是阻塞的\",{\"1\":{\"590\":1}}],[\"是状态机的一种\",{\"1\":{\"561\":1}}],[\"是什么\",{\"0\":{\"588\":1,\"1146\":1},\"1\":{\"549\":1}}],[\"是连续递增的\",{\"1\":{\"499\":1}}],[\"是统计列值数量\",{\"1\":{\"488\":1}}],[\"是前开后闭区间\",{\"1\":{\"482\":1}}],[\"是要建立在\",{\"1\":{\"482\":1}}],[\"是每次执行\",{\"1\":{\"478\":1}}],[\"是根据键值\",{\"1\":{\"461\":1}}],[\"是针对\",{\"1\":{\"460\":1}}],[\"是占优的\",{\"1\":{\"434\":1}}],[\"是当事务回滚时能够撤销所有已经成功执行的sql语句\",{\"1\":{\"425\":1}}],[\"是可以根据redo\",{\"1\":{\"425\":1}}],[\"是innodb主索引\",{\"1\":{\"414\":1}}],[\"是innodb的三大特性之一\",{\"1\":{\"312\":1}}],[\"是帮助mysql高效获取数据的数据结构\",{\"1\":{\"412\":1}}],[\"是先将更新记录写入redo\",{\"1\":{\"382\":1}}],[\"是不是应该回头了\",{\"1\":{\"1345\":1}}],[\"是不是可以不用传递dest参数呢\",{\"1\":{\"935\":1}}],[\"是不是比较简单\",{\"1\":{\"867\":1}}],[\"是不会看到别的事务插入的数据的\",{\"1\":{\"482\":2}}],[\"是不会变的\",{\"1\":{\"371\":1,\"477\":1}}],[\"是不能使用的\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"是通过序列号与确认应答\",{\"1\":{\"958\":1}}],[\"是通过自定义namespace的方式来定义的\",{\"1\":{\"677\":1}}],[\"是通过\",{\"1\":{\"368\":1,\"475\":1}}],[\"是通常是随机分配的\",{\"1\":{\"87\":1}}],[\"是以页的形式读取数据的\",{\"1\":{\"361\":1}}],[\"是写给我们人看的\",{\"1\":{\"360\":1}}],[\"是除了\",{\"1\":{\"349\":1}}],[\"是文件的物理存储层\",{\"1\":{\"334\":1}}],[\"是否为\",{\"1\":{\"1313\":1}}],[\"是否能成为回文字符串\",{\"1\":{\"1297\":1}}],[\"是否有一条指向\",{\"1\":{\"1217\":1}}],[\"是否有返回值\",{\"0\":{\"848\":1},\"1\":{\"1009\":1}}],[\"是否有可废弃或自动化的告警项\",{\"1\":{\"640\":1}}],[\"是否存在等级过高或过低的情况\",{\"1\":{\"640\":1}}],[\"是否存在并发修改\",{\"1\":{\"311\":1}}],[\"是否等于\",{\"1\":{\"455\":1}}],[\"是否开启\",{\"1\":{\"334\":2}}],[\"是否必须\",{\"1\":{\"325\":1}}],[\"是否追求快速查询\",{\"1\":{\"311\":1}}],[\"是否需要事务\",{\"1\":{\"311\":1}}],[\"是否是最新的\",{\"1\":{\"74\":1}}],[\"是编写高性能网络服务器的必备技术\",{\"1\":{\"270\":1}}],[\"是跑在单线程中的\",{\"1\":{\"268\":1}}],[\"是基于写命令存储的可读的文本文件\",{\"1\":{\"259\":1}}],[\"是在第一次执行\",{\"1\":{\"478\":1}}],[\"是在生产环境稳定集群之外\",{\"1\":{\"169\":1}}],[\"是在此基础上构建的nodeport并创建一个外部负载平衡器\",{\"1\":{\"87\":1}}],[\"是用于暂停和恢复\",{\"1\":{\"163\":1}}],[\"是用于自动部署\",{\"1\":{\"111\":1}}],[\"是必需的字段\",{\"1\":{\"154\":1}}],[\"是真的\",{\"1\":{\"133\":1}}],[\"是附加在kubernetes对象上的一组名值对\",{\"1\":{\"120\":1}}],[\"是附加在对象上的键\",{\"1\":{\"116\":1}}],[\"是使用\",{\"1\":{\"116\":1}}],[\"是对集群中服务的外部访问进行管理的\",{\"1\":{\"95\":1}}],[\"是\",{\"1\":{\"86\":2,\"97\":1,\"114\":1,\"115\":1,\"117\":1,\"311\":1,\"325\":2,\"349\":3,\"351\":1,\"460\":1,\"477\":1,\"511\":1,\"588\":1,\"1173\":1,\"1308\":1,\"1313\":1}}],[\"是一个非递减数组\",{\"1\":{\"1395\":1,\"1400\":1}}],[\"是一个非常好的选择\",{\"1\":{\"607\":1}}],[\"是一个无向图\",{\"1\":{\"1345\":1}}],[\"是一个无状态协议\",{\"0\":{\"688\":1}}],[\"是一个空字符串\",{\"1\":{\"1297\":1}}],[\"是一个完全平方数就是物品\",{\"1\":{\"1276\":1}}],[\"是一个整数\",{\"1\":{\"1276\":1}}],[\"是一个节点数组\",{\"1\":{\"1236\":1}}],[\"是一个从节点\",{\"1\":{\"1221\":1}}],[\"是一个localstack对象\",{\"1\":{\"856\":1}}],[\"是一个可选的类\",{\"1\":{\"805\":1}}],[\"是一个可选字段\",{\"1\":{\"159\":2,\"160\":1,\"161\":1,\"162\":1}}],[\"是一个可以同时与客户端和服务交互的类\",{\"1\":{\"799\":1}}],[\"是一个抽象工厂\",{\"1\":{\"792\":1}}],[\"是一个特殊的方法\",{\"1\":{\"784\":1}}],[\"是一个特殊的双向链表没有维护双向指针\",{\"1\":{\"218\":1}}],[\"是一个流行的分布式任务调度框架\",{\"1\":{\"714\":1}}],[\"是一个扩展\",{\"1\":{\"673\":1}}],[\"是一个基于python的分布式任务队列\",{\"1\":{\"645\":1}}],[\"是一个灵活且强大的python库\",{\"1\":{\"606\":1}}],[\"是一个分布式任务队列\",{\"1\":{\"605\":1}}],[\"是一个功能强大且易用的状态机库\",{\"1\":{\"574\":1}}],[\"是一个综合性的规定\",{\"1\":{\"425\":1}}],[\"是一个存储区域\",{\"1\":{\"320\":1,\"469\":1}}],[\"是一个磁盘\",{\"1\":{\"260\":1}}],[\"是一个k8s中一个抽象的概念\",{\"1\":{\"115\":1}}],[\"是一种解决特定问题的方式\",{\"1\":{\"1347\":1}}],[\"是一种等价关系\",{\"1\":{\"1225\":1}}],[\"是一种行为型设计模式\",{\"1\":{\"1177\":1}}],[\"是一种典型的以时间换空间的方法\",{\"1\":{\"1022\":1}}],[\"是一种无状态的连接\",{\"1\":{\"962\":1}}],[\"是一种无状态的请求\",{\"1\":{\"686\":1}}],[\"是一种允许在其两端进行添加和删除操作的数据结构\",{\"1\":{\"911\":1}}],[\"是一种优化的队列实现\",{\"1\":{\"911\":1}}],[\"是一种创建型设计模式\",{\"1\":{\"780\":1}}],[\"是一种用于描述系统行为的数学模型\",{\"1\":{\"560\":1}}],[\"是一种时间换空间的思想\",{\"1\":{\"217\":1}}],[\"是一种抽象\",{\"1\":{\"116\":1}}],[\"是一种包含少量敏感信息例如密码\",{\"1\":{\"76\":1}}],[\"是一组容器\",{\"1\":{\"115\":1}}],[\"是一本由乔梁所著的书籍\",{\"1\":{\"18\":1}}],[\"是实现\",{\"1\":{\"37\":1}}],[\"是指从一个陆地单元格走到另一个相邻\",{\"1\":{\"1354\":1}}],[\"是指这样一个新的字符串\",{\"1\":{\"1308\":1}}],[\"是指以i结尾的字符串中最长的递增子序列\",{\"1\":{\"1286\":1}}],[\"是指浏览器每次向服务器发起请求的时候\",{\"1\":{\"962\":1}}],[\"是指在设计代码架构时\",{\"1\":{\"762\":1}}],[\"是指通过一个或多个输入同时传递给服务处理器的服务请求的事件驱动处理模式\",{\"1\":{\"270\":1}}],[\"是指定本\",{\"1\":{\"156\":1}}],[\"是指定所需\",{\"1\":{\"155\":1}}],[\"是指\",{\"1\":{\"30\":2}}],[\"用小饼干来满足小胃口\",{\"1\":{\"1364\":1}}],[\"用a和b来表达这个概率\",{\"1\":{\"1328\":1}}],[\"用整数数组\",{\"1\":{\"1274\":1}}],[\"用语言描述就是\",{\"1\":{\"1226\":1}}],[\"用类定义\",{\"1\":{\"1146\":1}}],[\"用到了外函数的临时变量\",{\"1\":{\"992\":1}}],[\"用到的列都缓存到\",{\"1\":{\"513\":1}}],[\"用psutil监控内存\",{\"1\":{\"725\":1}}],[\"用完后立即关闭\",{\"1\":{\"579\":1}}],[\"用工程思维构建代码\",{\"1\":{\"557\":1}}],[\"用工程思维构建高质量代码\",{\"0\":{\"539\":1}}],[\"用1表示代码行\",{\"1\":{\"486\":1}}],[\"用非单调的字段作为主键在innodb中不是个好主意\",{\"1\":{\"414\":1}}],[\"用undo\",{\"1\":{\"380\":1}}],[\"用m表示\",{\"1\":{\"338\":1}}],[\"用\",{\"1\":{\"227\":1,\"1040\":1,\"1341\":2}}],[\"用作\",{\"1\":{\"225\":1}}],[\"用作协调\",{\"1\":{\"177\":1}}],[\"用来记录请求会话中的信息\",{\"1\":{\"1101\":1}}],[\"用来判断当前事件锁状态\",{\"1\":{\"1035\":1}}],[\"用来指示当前是否允许任何定时任务运行\",{\"1\":{\"615\":1}}],[\"用来指定可以创建的超出期望\",{\"1\":{\"159\":1}}],[\"用来指定\",{\"1\":{\"159\":1}}],[\"用来进行\",{\"1\":{\"513\":1}}],[\"用来进行联表操作的\",{\"1\":{\"511\":1}}],[\"用来匹配两个表的数据\",{\"1\":{\"511\":1}}],[\"用来表示\",{\"1\":{\"477\":1}}],[\"用来表示mysql中哪些事务正在执行\",{\"1\":{\"371\":1}}],[\"用来快速判断某个数据是否存在\",{\"1\":{\"238\":1}}],[\"用来确保容器应用的副本数始终保持在用户定义的副本数\",{\"1\":{\"177\":1}}],[\"用来控制pod的具体状态和行为\",{\"1\":{\"176\":1}}],[\"用来设定出于回滚目的所要保留的旧\",{\"1\":{\"162\":1}}],[\"用来检测应用是否成功启动\",{\"1\":{\"146\":1}}],[\"用于判断是否成环\",{\"1\":{\"1220\":1}}],[\"用于处理更多的任务\",{\"1\":{\"1036\":1}}],[\"用于处理大量消息\",{\"1\":{\"607\":1}}],[\"用于解析和生成json数据\",{\"1\":{\"986\":1}}],[\"用于自定义优先级的计数器\",{\"1\":{\"919\":1}}],[\"用于创建并管理线程池\",{\"1\":{\"1036\":1}}],[\"用于创建类的新实例\",{\"1\":{\"900\":1}}],[\"用于创建其他工厂的模式\",{\"1\":{\"767\":1}}],[\"用于保存当前找到的lis中的最小可能尾部值\",{\"1\":{\"1207\":1}}],[\"用于保存字符串\",{\"1\":{\"226\":1}}],[\"用于保护解释器免受多线程并发访问的影响\",{\"1\":{\"897\":1}}],[\"用于与一些彼此间没有太多关联的类合作\",{\"1\":{\"798\":1}}],[\"用于在创建类的新实例时初始化对象\",{\"1\":{\"901\":1}}],[\"用于在代码中插入检查点\",{\"1\":{\"756\":1}}],[\"用于在没有异常发生的情况下执行代码块\",{\"1\":{\"748\":1}}],[\"用于在程序启动时动态替换标准库中的某些模块\",{\"1\":{\"588\":1}}],[\"用于简单验证任务逻辑\",{\"1\":{\"667\":1}}],[\"用于实时监控应用程序和服务的状态\",{\"1\":{\"634\":1}}],[\"用于实现读已提交和可重复读隔离级别\",{\"1\":{\"475\":1}}],[\"用于实现\",{\"1\":{\"368\":1}}],[\"用于故障切换\",{\"1\":{\"492\":1}}],[\"用于优化查询\",{\"1\":{\"455\":1}}],[\"用于记录新的记录\",{\"1\":{\"390\":1}}],[\"用于记录用户对数据库更新的sql语句信息\",{\"1\":{\"385\":1}}],[\"用于支持\",{\"1\":{\"371\":1,\"477\":1}}],[\"用于存放mysql所有的配置信息文件\",{\"1\":{\"334\":1}}],[\"用于存放一组\",{\"1\":{\"115\":1}}],[\"用于接受客户端发送的各种sql命令\",{\"1\":{\"332\":1}}],[\"用于灾难恢复\",{\"1\":{\"258\":1}}],[\"用于确保容器的应用副本数始终保持在用户定义的副本数\",{\"1\":{\"178\":1}}],[\"用于指定新创建的\",{\"1\":{\"161\":1}}],[\"用于指定系统在报告\",{\"1\":{\"160\":1}}],[\"用于用新pod替换现有pod的部署策略\",{\"1\":{\"153\":1}}],[\"用于检查容器是否准备好接收流量\",{\"1\":{\"146\":1}}],[\"用于检查容器是否准备好了可以接受流量\",{\"1\":{\"146\":1}}],[\"用于检查容器是否正常存活\",{\"1\":{\"146\":2}}],[\"用文件名或标准输入替换资源\",{\"1\":{\"124\":1}}],[\"用户钱容易没\",{\"1\":{\"971\":1}}],[\"用户眼容易瞎\",{\"1\":{\"971\":1}}],[\"用户号容易没\",{\"1\":{\"971\":1}}],[\"用户只需要知道具体工厂的名称就可得到所要的产品\",{\"1\":{\"766\":1}}],[\"用户角色和权限等信息\",{\"1\":{\"692\":1}}],[\"用户登录\",{\"1\":{\"691\":1}}],[\"用户数据报协议\",{\"1\":{\"675\":1}}],[\"用户反馈积极\",{\"1\":{\"607\":1}}],[\"用户名\",{\"1\":{\"549\":1}}],[\"用户信息\",{\"1\":{\"504\":1}}],[\"用户\",{\"1\":{\"504\":1,\"550\":1}}],[\"用户可以在多个列上建立索引\",{\"1\":{\"450\":1}}],[\"用户可以按照自己期望的形式组织\",{\"1\":{\"120\":1}}],[\"用户b\",{\"1\":{\"407\":1}}],[\"用户a\",{\"1\":{\"407\":1}}],[\"用户a访问表a\",{\"1\":{\"407\":1}}],[\"用户通过通信协议发送请求到数据库连接池\",{\"1\":{\"356\":1}}],[\"用户在\",{\"1\":{\"334\":1}}],[\"用户抢过之后不能在抢\",{\"1\":{\"295\":1}}],[\"用户抢红包使用lpush\",{\"1\":{\"295\":1}}],[\"用户不存在\",{\"1\":{\"550\":2}}],[\"用户不想定制selector时\",{\"1\":{\"198\":1}}],[\"用户不需要额外的操作\",{\"1\":{\"198\":1}}],[\"用户需要将jod的spec\",{\"1\":{\"198\":1}}],[\"用户行为数据快速反馈\",{\"1\":{\"43\":1}}],[\"用户行为等多个维度的数据\",{\"1\":{\"26\":1}}],[\"用自己查出来的kube\",{\"1\":{\"108\":1}}],[\"用控制台打印的kubeadm\",{\"1\":{\"108\":1}}],[\"用不了多久\",{\"1\":{\"30\":1}}],[\"也有可能我们觉得思路就该是这样的但是我们就是写不出来\",{\"1\":{\"1358\":1}}],[\"也有其他时机\",{\"1\":{\"260\":1}}],[\"也可能增加骑士的健康点数\",{\"1\":{\"1303\":1}}],[\"也可以不删除\",{\"1\":{\"1313\":1}}],[\"也可以不删除任何字符\",{\"1\":{\"1308\":1}}],[\"也可以理解是一个滚动数组\",{\"1\":{\"1273\":1}}],[\"也可以使用endpoint找到视图函数\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"也可以选择让任务排队等待直到有空闲的线程可用\",{\"1\":{\"1036\":1}}],[\"也可以自己定义应用层协议\",{\"1\":{\"962\":1}}],[\"也可以从右侧操作\",{\"1\":{\"912\":1}}],[\"也可以在类中进行使用\",{\"1\":{\"849\":1,\"1010\":1}}],[\"也可以在创建以后再为其添加标签\",{\"1\":{\"120\":1}}],[\"也可以是\",{\"1\":{\"762\":1}}],[\"也可以是所需\",{\"1\":{\"159\":1}}],[\"也可以用于交换信息\",{\"1\":{\"698\":1}}],[\"也可以增加一些额外的其它业务逻辑所必须的声明信息\",{\"1\":{\"692\":1}}],[\"也可以针对不同类型的定时任务单独设置开关\",{\"1\":{\"615\":1}}],[\"也可以大大降低出现死锁的可能\",{\"1\":{\"408\":1}}],[\"也可以先更新数据库再删除缓存\",{\"1\":{\"287\":1}}],[\"也被删除\",{\"1\":{\"1281\":1}}],[\"也应该在\",{\"1\":{\"1236\":1}}],[\"也包括if\",{\"1\":{\"1194\":1}}],[\"也包括两部分\",{\"1\":{\"425\":1}}],[\"也向客户端发送\",{\"1\":{\"953\":1}}],[\"也即\",{\"1\":{\"953\":1}}],[\"也即是\",{\"1\":{\"227\":1}}],[\"也要可以让一个函数根据调用者传入的参数产生不同的行为\",{\"1\":{\"896\":1}}],[\"也不难理解\",{\"1\":{\"762\":1}}],[\"也称作令牌\",{\"1\":{\"690\":1}}],[\"也称为异步任务框架\",{\"1\":{\"645\":1}}],[\"也称为隐藏列\",{\"1\":{\"325\":1}}],[\"也称为\",{\"1\":{\"111\":1}}],[\"也从侧面认识到告警的重要性\",{\"1\":{\"623\":1}}],[\"也为未来的优化提供了宝贵的参考资料\",{\"1\":{\"619\":1}}],[\"也决定后续关联查询的性能\",{\"1\":{\"512\":1}}],[\"也会被视作不同的子串\",{\"1\":{\"1299\":1}}],[\"也会被视作正确答案\",{\"1\":{\"1265\":1}}],[\"也会包含\",{\"1\":{\"1236\":1}}],[\"也会返回\",{\"1\":{\"1225\":1}}],[\"也会拖慢总查询速度\",{\"1\":{\"498\":1}}],[\"也会在redo\",{\"1\":{\"425\":1}}],[\"也支持表级锁\",{\"1\":{\"400\":2}}],[\"也像数据一样产生对应的redo\",{\"1\":{\"389\":1}}],[\"也缓存记录\",{\"1\":{\"308\":1}}],[\"也就无法根据参数类型来区分重载\",{\"1\":{\"896\":1}}],[\"也就实现了不同的隔离级别\",{\"1\":{\"368\":1,\"475\":1}}],[\"也就是left\",{\"1\":{\"1393\":1}}],[\"也就是同一批数字\",{\"1\":{\"1324\":1}}],[\"也就是异或运算满足交换律\",{\"1\":{\"1324\":1}}],[\"也就是倒叙\",{\"1\":{\"1303\":1}}],[\"也就是可以放入背包多次\",{\"1\":{\"1275\":1}}],[\"也就是存放物品编号为0时\",{\"1\":{\"1271\":1}}],[\"也就是表示不是二分图\",{\"1\":{\"1236\":1}}],[\"也就是这两个节点连通性的判断\",{\"1\":{\"1229\":1}}],[\"也就是合并时数量小的集合直接挂到数量大的集合上\",{\"1\":{\"1225\":1}}],[\"也就是\",{\"1\":{\"1048\":1}}],[\"也就是inner函数的引用\",{\"1\":{\"992\":1}}],[\"也就是hypertext\",{\"1\":{\"966\":1}}],[\"也就是一个线程隔离的栈\",{\"1\":{\"856\":1}}],[\"也就是false\",{\"1\":{\"848\":1,\"1009\":1}}],[\"也就是与接口中方法的期望行为一致\",{\"1\":{\"762\":1}}],[\"也就是被驱动表的扫描次数\",{\"1\":{\"513\":1}}],[\"也就是最大事务\",{\"1\":{\"477\":1}}],[\"也就是最大事务id\",{\"1\":{\"371\":1}}],[\"也就是单个\",{\"1\":{\"461\":1}}],[\"也就是说净交易是每位顾客向你支付\",{\"1\":{\"1366\":1}}],[\"也就是说两个节点\",{\"1\":{\"1236\":1}}],[\"也就是说具有如下三个性质\",{\"1\":{\"1225\":1}}],[\"也就是说在类的设计中\",{\"1\":{\"762\":1}}],[\"也就是说\",{\"1\":{\"698\":1,\"1029\":1,\"1292\":2}}],[\"也就是说提前执行\",{\"1\":{\"456\":1}}],[\"也就是说提前执行where的部分过滤操作\",{\"1\":{\"420\":1}}],[\"也就是说设置为0时是\",{\"1\":{\"388\":1}}],[\"也就是说真正执行\",{\"1\":{\"362\":1}}],[\"也就是说一个或一组线程处理多个\",{\"1\":{\"269\":1}}],[\"也就是m个子树\",{\"1\":{\"338\":1}}],[\"也就被垃圾回收了\",{\"1\":{\"186\":1}}],[\"也需要\",{\"1\":{\"133\":1}}],[\"也无法保障代码质量\",{\"1\":{\"54\":1}}],[\"也无法保证部署的可靠性\",{\"1\":{\"42\":1}}],[\"也是正好用到了数据的有序性\",{\"1\":{\"1403\":1}}],[\"也是在很多算法中出现的\",{\"1\":{\"1395\":1}}],[\"也是递归的一种\",{\"1\":{\"1347\":1}}],[\"也是有效的答案\",{\"1\":{\"1340\":1}}],[\"也是升序的子序列\",{\"1\":{\"1287\":1}}],[\"也是相当于导包的作用\",{\"1\":{\"1188\":1}}],[\"也是可以实现协程隔离\",{\"1\":{\"1049\":1}}],[\"也是需要及时解决的\",{\"1\":{\"629\":1}}],[\"也是非阻塞的\",{\"1\":{\"594\":1}}],[\"也是由于聚簇索引将数据和索引放在一起\",{\"1\":{\"439\":1}}],[\"也是数据库连池\",{\"1\":{\"358\":2}}],[\"也是redis推荐的方式\",{\"1\":{\"260\":1}}],[\"也是流程的建立和优化\",{\"1\":{\"58\":1}}],[\"也是持续交互的开始\",{\"1\":{\"46\":1}}],[\"也是组织凝聚力和成员士气的基础\",{\"1\":{\"30\":1}}],[\"也便于快速定位瓶颈\",{\"1\":{\"32\":1}}],[\"也略懂前端\",{\"1\":{\"0\":1}}],[\"如此循环\",{\"1\":{\"1341\":1}}],[\"如上图所示\",{\"1\":{\"1309\":1}}],[\"如上面的原因2和原因3\",{\"1\":{\"408\":1}}],[\"如上面的图中可以看出\",{\"1\":{\"345\":1}}],[\"如同俄罗斯套娃一样\",{\"1\":{\"1209\":1}}],[\"如同建筑中的地基\",{\"1\":{\"542\":1}}],[\"如聊天\",{\"1\":{\"1162\":1}}],[\"如中间件\",{\"1\":{\"1162\":1}}],[\"如低并发场景\",{\"1\":{\"1161\":1}}],[\"如使用\",{\"1\":{\"1155\":1}}],[\"如使用多进程\",{\"1\":{\"897\":1}}],[\"如权限校验\",{\"1\":{\"1142\":1}}],[\"如有遗漏敬请指正\",{\"1\":{\"1125\":1}}],[\"如局部作用域或嵌套作用域\",{\"1\":{\"985\":1}}],[\"如事件驱动编程中的事件调度\",{\"1\":{\"921\":1}}],[\"如任务调度\",{\"1\":{\"918\":1}}],[\"如numpy\",{\"1\":{\"897\":1}}],[\"如字符串\",{\"1\":{\"797\":1}}],[\"如字典\",{\"1\":{\"706\":1}}],[\"如列表\",{\"1\":{\"731\":1,\"986\":1}}],[\"如容器\",{\"1\":{\"725\":1}}],[\"如数据库查询\",{\"1\":{\"1161\":1}}],[\"如数据库会话\",{\"1\":{\"1143\":1}}],[\"如数据库连接\",{\"1\":{\"725\":1}}],[\"如数据隐私政策\",{\"1\":{\"45\":1}}],[\"如http请求处理\",{\"1\":{\"725\":1}}],[\"如金融交易\",{\"1\":{\"724\":1}}],[\"如msgpack\",{\"1\":{\"716\":1}}],[\"如mongodb\",{\"1\":{\"342\":1}}],[\"如远程服务器或elk\",{\"1\":{\"714\":1}}],[\"如闭包\",{\"1\":{\"714\":1}}],[\"如内存\",{\"1\":{\"714\":1}}],[\"如视频通话\",{\"1\":{\"675\":1}}],[\"如网页浏览\",{\"1\":{\"675\":1}}],[\"如网络爬虫\",{\"1\":{\"592\":1}}],[\"如网络请求\",{\"1\":{\"588\":1,\"664\":1,\"665\":1,\"668\":1}}],[\"如requests\",{\"1\":{\"669\":1}}],[\"如rabbitmq\",{\"1\":{\"605\":1,\"607\":1}}],[\"如未支持非阻塞的库\",{\"1\":{\"665\":1}}],[\"如计算\",{\"1\":{\"664\":1,\"668\":1}}],[\"如循环调用api\",{\"1\":{\"661\":1}}],[\"如发送邮件\",{\"1\":{\"658\":1}}],[\"如自定义类\",{\"1\":{\"656\":1}}],[\"如自动化\",{\"1\":{\"24\":1}}],[\"如重启服务\",{\"1\":{\"640\":1}}],[\"如企业微信\",{\"1\":{\"638\":1}}],[\"如非法登录尝试\",{\"1\":{\"631\":1}}],[\"如响应时间\",{\"1\":{\"625\":1}}],[\"如法定节假日\",{\"1\":{\"615\":1}}],[\"如线程池\",{\"1\":{\"607\":1}}],[\"如某些数据库驱动\",{\"1\":{\"599\":1}}],[\"如请求id\",{\"1\":{\"550\":1}}],[\"如函数内部\",{\"1\":{\"985\":1}}],[\"如函数\",{\"1\":{\"543\":1}}],[\"如下所示\",{\"1\":{\"1034\":1,\"1314\":2}}],[\"如下图所示\",{\"1\":{\"978\":1}}],[\"如下图中\",{\"1\":{\"969\":1}}],[\"如下图是慢日志里其中一条\",{\"1\":{\"504\":1}}],[\"如下代码虽然能快速实现功能\",{\"1\":{\"542\":1}}],[\"如状态字段\",{\"1\":{\"507\":1,\"525\":1}}],[\"如操作a和b两张表时\",{\"1\":{\"407\":1}}],[\"如隔离级别为repeatable\",{\"1\":{\"389\":1}}],[\"如范围查找\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"如slack\",{\"1\":{\"627\":1}}],[\"如select\",{\"1\":{\"314\":1,\"420\":1}}],[\"如sast\",{\"1\":{\"45\":1}}],[\"如图三\",{\"1\":{\"1345\":1}}],[\"如图一\",{\"1\":{\"1345\":1}}],[\"如图\",{\"1\":{\"227\":1}}],[\"如何存储电影演员和电影之间的关系\",{\"1\":{\"1234\":1}}],[\"如何解决\",{\"0\":{\"972\":1}}],[\"如何理解异步io\",{\"0\":{\"898\":1}}],[\"如何选择\",{\"0\":{\"668\":1,\"1172\":1}}],[\"如何选择合适索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"如何使用\",{\"0\":{\"593\":1,\"1082\":1}}],[\"如何自定义状态转换逻辑\",{\"0\":{\"573\":1}}],[\"如何处理无效的事件\",{\"0\":{\"572\":1}}],[\"如何判定是否需要创建索引\",{\"1\":{\"507\":1,\"525\":1}}],[\"如何判断一个页是否在bufferpool中缓存\",{\"0\":{\"319\":1}}],[\"如何设置和修改\",{\"1\":{\"210\":1}}],[\"如何创建和更新应用程序的实例\",{\"1\":{\"117\":1}}],[\"如对\",{\"1\":{\"165\":1}}],[\"如\",{\"1\":{\"120\":1,\"416\":1,\"460\":1,\"503\":1,\"542\":1,\"552\":1,\"561\":2,\"588\":1,\"590\":2,\"591\":1,\"656\":1,\"659\":2,\"665\":1,\"666\":1,\"669\":1,\"674\":1,\"678\":1,\"1069\":2,\"1071\":1,\"1144\":2,\"1155\":1,\"1161\":2,\"1164\":2,\"1169\":1}}],[\"如应用程序中的前端和后端组件\",{\"1\":{\"116\":1}}],[\"如docker\",{\"1\":{\"114\":1}}],[\"如前端\",{\"1\":{\"93\":1}}],[\"如测试用例不足\",{\"1\":{\"58\":1}}],[\"如jenkins\",{\"1\":{\"52\":1}}],[\"如iac\",{\"1\":{\"44\":1,\"57\":1}}],[\"如看板\",{\"1\":{\"32\":1}}],[\"如果直接暴力遍历的话代码如下\",{\"1\":{\"1403\":1}}],[\"如果直接返回−1就是错误的\",{\"1\":{\"1393\":1}}],[\"如果目标值不存在于数组中\",{\"1\":{\"1399\":1}}],[\"如果目标值存在返回下标\",{\"1\":{\"1390\":1}}],[\"如果数组中不存在目标值\",{\"1\":{\"1395\":1,\"1400\":1}}],[\"如果数据量大的话会造成长时间的阻塞\",{\"1\":{\"256\":1}}],[\"如果元素\",{\"1\":{\"1393\":1}}],[\"如果判断语句为left\",{\"1\":{\"1393\":2}}],[\"如果判断结果为存在的时候元素不一定存在\",{\"1\":{\"243\":1}}],[\"如果找到目标值\",{\"1\":{\"1390\":1}}],[\"如果答案不存在\",{\"1\":{\"1380\":1}}],[\"如果答案不止一个\",{\"1\":{\"1380\":1}}],[\"如果推导出全局最优\",{\"1\":{\"1360\":1}}],[\"如果骑士遵循最佳路径\",{\"1\":{\"1303\":1}}],[\"如果他的健康点数在某一时刻降至\",{\"1\":{\"1303\":1}}],[\"如果s\",{\"1\":{\"1299\":3}}],[\"如果spec\",{\"1\":{\"202\":1}}],[\"如果字符串的倒叙和字符串本身删除第一个不相同的字符不相同\",{\"1\":{\"1298\":1}}],[\"如果字符串的反序与原始字符串相同\",{\"1\":{\"1259\":1,\"1299\":1}}],[\"如果它是\",{\"1\":{\"1297\":1}}],[\"如果两个二进制相同位数至少有一个1\",{\"1\":{\"1323\":1}}],[\"如果两个二进制相同位数为1\",{\"1\":{\"1322\":1}}],[\"如果两个软件实体无须直接通信\",{\"1\":{\"762\":1}}],[\"如果两间相邻的房屋在同一晚上被小偷闯入\",{\"1\":{\"1280\":2}}],[\"如果题目给的价值都是正整数那么非0下标都初始化为0就可以了\",{\"1\":{\"1273\":1}}],[\"如果所有断言都通过\",{\"1\":{\"1266\":1}}],[\"如果存在这样的三元组下标\",{\"1\":{\"1289\":1}}],[\"如果存在相互依赖关系\",{\"1\":{\"1241\":1}}],[\"如果存储引擎正在写入页的数据到磁盘时发生了宕机\",{\"1\":{\"468\":1}}],[\"如果一幅图是\",{\"1\":{\"1240\":1}}],[\"如果一幅有向图中存在环\",{\"1\":{\"1240\":1}}],[\"如果一个有四个线程的进程运行在一个四核的cpu机器上\",{\"1\":{\"1029\":1}}],[\"如果一个函数的内部又定义了一个函数\",{\"1\":{\"984\":1}}],[\"如果一个数据在最近一段时间没有被访问到\",{\"1\":{\"839\":1,\"929\":1,\"1003\":1}}],[\"如果一个数据在最近一段时间内使用次数很少\",{\"1\":{\"838\":1,\"1002\":1}}],[\"如果一个数据最先进入缓存中\",{\"1\":{\"837\":1,\"1001\":1}}],[\"如果一个索引包含了\",{\"1\":{\"415\":1}}],[\"如果一个表中存在这样的大字段\",{\"1\":{\"326\":1}}],[\"如果一个工程师有很多的想法\",{\"1\":{\"30\":1}}],[\"如果图是二分图\",{\"1\":{\"1236\":1}}],[\"如果能\",{\"1\":{\"1297\":1}}],[\"如果能将一个图的节点集合分割成两个独立的子集\",{\"1\":{\"1236\":1}}],[\"如果能够在应用程序工作期间\",{\"1\":{\"1036\":1}}],[\"如果该节点和它的相邻节点颜色一致了\",{\"1\":{\"1235\":1}}],[\"如果将\",{\"1\":{\"1230\":1}}],[\"如果边的两个节点已经出现在同一个集合里\",{\"1\":{\"1230\":1}}],[\"如果边的每个节点不是同一个集合就连接起来\",{\"1\":{\"1230\":1}}],[\"如果从\",{\"1\":{\"1229\":1}}],[\"如果某两个节点被连通\",{\"1\":{\"1225\":1}}],[\"如果某些字段信息过长\",{\"1\":{\"326\":1}}],[\"如果现在调用union\",{\"1\":{\"1225\":1}}],[\"如果现在有\",{\"1\":{\"451\":1}}],[\"如果写在里面会少个根节点\",{\"1\":{\"1221\":1}}],[\"如果执行这段代码\",{\"1\":{\"1220\":1,\"1348\":1}}],[\"如果想达到最大的金额\",{\"1\":{\"1358\":1}}],[\"如果想找节点\",{\"1\":{\"1217\":1}}],[\"如果想要使传输的数据有意义\",{\"1\":{\"962\":1}}],[\"如果想要增加一种新的书籍类型\",{\"1\":{\"790\":1}}],[\"如果nums\",{\"1\":{\"1207\":1,\"1395\":1}}],[\"如果用哈希表存储\",{\"1\":{\"1234\":1}}],[\"如果用第二题dp代表最大矩形面积\",{\"1\":{\"1201\":1}}],[\"如果用户不登录就可以访问数据和服务器是及其不安全\",{\"1\":{\"686\":1}}],[\"如果用户能够事先规划好标签的使用\",{\"1\":{\"120\":1}}],[\"如果使用动态规划\",{\"1\":{\"1201\":1}}],[\"如果使用了gevent就必须要加这行\",{\"1\":{\"682\":1}}],[\"如果可以利用字典中出现的一个或多个单词拼接出\",{\"1\":{\"1276\":1}}],[\"如果可以\",{\"1\":{\"1241\":1}}],[\"如果可以分割\",{\"1\":{\"1198\":1}}],[\"如果可以重用\",{\"1\":{\"389\":1}}],[\"如果应用程序需要频繁的将任务派发到线程中执行\",{\"1\":{\"1036\":1}}],[\"如果python脚本作为主程序运行\",{\"1\":{\"986\":1}}],[\"如果http\",{\"1\":{\"978\":1}}],[\"如果服务端处理某个请求消耗的时间比较长\",{\"1\":{\"977\":1}}],[\"如果是\",{\"1\":{\"1395\":2}}],[\"如果是的话就返回\",{\"1\":{\"1393\":1}}],[\"如果是dpi\",{\"1\":{\"1299\":1}}],[\"如果是一个连接的话\",{\"1\":{\"962\":1}}],[\"如果是开发的问题\",{\"1\":{\"46\":1}}],[\"如果按期收到确认应答\",{\"1\":{\"959\":1}}],[\"如果客户端发送的\",{\"1\":{\"952\":1}}],[\"如果计数相同\",{\"1\":{\"946\":1}}],[\"如果任务类本身定义了比较操作\",{\"1\":{\"920\":1}}],[\"如果任务返回复杂对象\",{\"1\":{\"656\":1}}],[\"如果责任链太长或处理时间过长\",{\"1\":{\"809\":1}}],[\"如果未来可能会有更多种类的产品加入\",{\"1\":{\"793\":1}}],[\"如果未设置\",{\"1\":{\"98\":1}}],[\"如果未设置任何的\",{\"1\":{\"98\":1}}],[\"如果安全性要求不高\",{\"1\":{\"770\":1}}],[\"如果try部分的代码成功执行\",{\"1\":{\"748\":1}}],[\"如果同步执行会阻塞用户请求\",{\"1\":{\"645\":1}}],[\"如果观察到用户体验相关的负面反馈增多\",{\"1\":{\"632\":1}}],[\"如果自动化的单元测试\",{\"1\":{\"630\":1}}],[\"如果匹配就调用相应的函数\",{\"1\":{\"612\":1}}],[\"如果只有\",{\"1\":{\"952\":1}}],[\"如果只需要替换部分模块\",{\"1\":{\"595\":1}}],[\"如果只给定一个参数\",{\"1\":{\"498\":1}}],[\"如果程序抛出了这个异常\",{\"1\":{\"758\":1}}],[\"如果程序无限制的创建新的数据库连接对象\",{\"1\":{\"578\":1}}],[\"如果程序执行的是缩短字符串的操作\",{\"1\":{\"227\":1}}],[\"如果程序执行的是增长字符串的操作\",{\"1\":{\"227\":1}}],[\"如果join占用的资源比较多\",{\"1\":{\"507\":1,\"524\":1}}],[\"如果job定义的容器中存在http\",{\"1\":{\"198\":1}}],[\"如果job中定义了多个容器\",{\"1\":{\"198\":1}}],[\"如果内存空间不够还会发生落盘操作\",{\"1\":{\"507\":1,\"521\":1}}],[\"如果1000在外\",{\"1\":{\"507\":1,\"520\":1}}],[\"如果小的循环在外层\",{\"1\":{\"507\":1,\"520\":1}}],[\"如果调优的话\",{\"1\":{\"503\":1}}],[\"如果偏移量固定\",{\"1\":{\"498\":1}}],[\"如果二级索引不存在\",{\"1\":{\"487\":1}}],[\"如果当前位置是最远位置\",{\"1\":{\"1385\":1}}],[\"如果当前索引和下一个索引不一致那么它就是不同的数字\",{\"1\":{\"1338\":1}}],[\"如果当前状态不允许\",{\"1\":{\"572\":1}}],[\"如果当前记录的事务\",{\"1\":{\"478\":3}}],[\"如果当前支持\",{\"1\":{\"87\":1}}],[\"如果查询记录量相同\",{\"1\":{\"498\":1}}],[\"如果查询偏移量变化\",{\"1\":{\"498\":1}}],[\"如果查询需要\",{\"1\":{\"451\":1}}],[\"如果查询缓存有命中的查询结果\",{\"1\":{\"332\":1}}],[\"如果表已经建立了\",{\"1\":{\"451\":1}}],[\"如果表中没有定义主键\",{\"1\":{\"439\":1}}],[\"如果表中所有列都不允许为\",{\"1\":{\"323\":1}}],[\"如果主键比较大的话\",{\"1\":{\"442\":1}}],[\"如果你能给每位顾客正确找零\",{\"1\":{\"1366\":1}}],[\"如果你可以用\",{\"1\":{\"1300\":1}}],[\"如果你已经购买了一个股票\",{\"1\":{\"1292\":1}}],[\"如果你已经设置了主键为聚簇索引\",{\"1\":{\"439\":1}}],[\"如果你不能获取任何利润\",{\"1\":{\"1292\":2}}],[\"如果你不显式定义\",{\"1\":{\"901\":1}}],[\"如果你选择大小为\",{\"1\":{\"1282\":1}}],[\"如果你想修改全局变量\",{\"1\":{\"985\":1}}],[\"如果你想在flask中直接使用db\",{\"1\":{\"843\":1}}],[\"如果你说完一句话\",{\"1\":{\"959\":1}}],[\"如果你严格要求只有函数的参数完全一致时才能命中\",{\"1\":{\"930\":1}}],[\"如果你认为这种情况可以使用缓存命中上一次3+4的结果\",{\"1\":{\"930\":1}}],[\"如果你对某个\",{\"1\":{\"155\":1}}],[\"如果mysql宕机\",{\"1\":{\"425\":1}}],[\"如果要实现新产品直接修改工厂类\",{\"1\":{\"765\":1}}],[\"如果要永久生效\",{\"1\":{\"503\":1}}],[\"如果要禁用\",{\"1\":{\"469\":1}}],[\"如果要回滚事务\",{\"1\":{\"425\":1}}],[\"如果要加可以使用下面的方式\",{\"1\":{\"404\":1}}],[\"如果出现哈希码值相同的情况会拉出一条链表\",{\"1\":{\"461\":1}}],[\"如果出现\",{\"1\":{\"415\":1}}],[\"如果出现数据页损坏\",{\"1\":{\"320\":1,\"469\":1}}],[\"如果不是的话返回\",{\"1\":{\"1393\":1}}],[\"如果不可能完成所有课程\",{\"1\":{\"1242\":1}}],[\"如果不存在\",{\"1\":{\"1308\":1}}],[\"如果不存在相互依赖那么就可以学习完成全部的课程\",{\"1\":{\"1241\":1}}],[\"如果不存在这种列\",{\"1\":{\"414\":1}}],[\"如果不指定n\",{\"1\":{\"946\":1}}],[\"如果不进行数据可视化是极其难以理解的\",{\"1\":{\"633\":1}}],[\"如果不符合比较规则\",{\"1\":{\"477\":1}}],[\"如果不为空\",{\"1\":{\"338\":1}}],[\"如果指定的key存在\",{\"1\":{\"413\":1}}],[\"如果事务执行失败或调用了rollback\",{\"1\":{\"425\":1}}],[\"如果事务提交之后\",{\"1\":{\"425\":1}}],[\"如果事务t对数据a加上排他锁后\",{\"1\":{\"404\":1}}],[\"如果事先对数据排序\",{\"1\":{\"408\":1}}],[\"如果扫描发现唯一索引\",{\"1\":{\"405\":4}}],[\"如果发现某个服务的部署时间过长或出现异常情况\",{\"1\":{\"630\":1}}],[\"如果发现冲突了\",{\"1\":{\"403\":1}}],[\"如果发生\",{\"1\":{\"462\":1,\"463\":1}}],[\"如果发生hash冲突\",{\"1\":{\"315\":1,\"316\":1}}],[\"如果生产中使用mysql的特殊功能较多\",{\"1\":{\"395\":1}}],[\"如果生产中使用mysql的特殊功能较多的\",{\"1\":{\"395\":1}}],[\"如果生产中使用mysql的特殊功能相对少\",{\"1\":{\"395\":1}}],[\"如果被访问版本的trx\",{\"1\":{\"371\":4}}],[\"如果为\",{\"1\":{\"349\":1}}],[\"如果为空或不存在\",{\"1\":{\"87\":1}}],[\"如果我们直接定义dp\",{\"1\":{\"1288\":1}}],[\"如果我们直接删除这一位的话\",{\"1\":{\"242\":1}}],[\"如果我们要处理更多元素\",{\"1\":{\"1022\":1}}],[\"如果我们要根据索引去进行数据表的扫描\",{\"1\":{\"345\":1}}],[\"如果我们的程序使用一个大小为20的线程池来进行并发处理且每个线程都需要一个单独的数据库连接\",{\"1\":{\"581\":1}}],[\"如果我们将参数create\",{\"1\":{\"578\":1}}],[\"如果我们把\",{\"1\":{\"513\":1}}],[\"如果我们在col2上建立一个辅助索引\",{\"1\":{\"413\":1}}],[\"如果页中只能存放下一条记录\",{\"1\":{\"327\":1}}],[\"如果把这些null值都放到记录的真实数据中会比较浪费空间\",{\"1\":{\"323\":1}}],[\"如果业务应用中读取数据库和写缓存的时间不好估算\",{\"1\":{\"287\":1}}],[\"如果多次插入失败\",{\"1\":{\"285\":1}}],[\"如果多个容器紧密耦合并且需要共享磁盘等资源\",{\"1\":{\"115\":1}}],[\"如果遇到物理服务器故障\",{\"1\":{\"260\":1}}],[\"如果有大量输入的\",{\"1\":{\"1313\":1}}],[\"如果有环就没有必要进行排序了\",{\"1\":{\"1240\":1}}],[\"如果有多个答案\",{\"1\":{\"1230\":1}}],[\"如果有\",{\"1\":{\"319\":1,\"513\":1}}],[\"如果有的话\",{\"1\":{\"257\":1}}],[\"如果有一种使用空字符来分割多个单词的特殊数据格式\",{\"1\":{\"227\":1}}],[\"如果有一个容器化的应用程序需要修改\",{\"1\":{\"131\":1}}],[\"如果突然宕机\",{\"1\":{\"255\":1}}],[\"如果进行修改之后\",{\"1\":{\"227\":2}}],[\"如果对于每个\",{\"1\":{\"1287\":1}}],[\"如果对\",{\"1\":{\"227\":2}}],[\"如果忘了这一步就会产生内存泄漏\",{\"1\":{\"227\":1}}],[\"如果忘了这一步就会产生缓冲区溢出\",{\"1\":{\"227\":1}}],[\"如果redis的内存使用超出了设置的最大值会怎么样\",{\"1\":{\"210\":1}}],[\"如果在将所有大写字符转换为小写字符\",{\"1\":{\"1297\":1}}],[\"如果在局部作用域\",{\"1\":{\"985\":1}}],[\"如果在事务中执行了一条没有索引条件的查询\",{\"1\":{\"408\":1}}],[\"如果在\",{\"1\":{\"202\":1}}],[\"如果在金丝雀发布过程中\",{\"1\":{\"171\":1}}],[\"如果此时对新旧版本做各种数据对比\",{\"1\":{\"171\":1}}],[\"如果没有岛屿\",{\"1\":{\"1353\":1}}],[\"如果没有石头剩下\",{\"1\":{\"1274\":1}}],[\"如果没有应用层\",{\"1\":{\"962\":1}}],[\"如果没有的话\",{\"1\":{\"513\":1}}],[\"如果没有这样的索引\",{\"1\":{\"439\":1}}],[\"如果没有索引下推优化\",{\"1\":{\"420\":1,\"456\":1}}],[\"如果没有显式指定\",{\"1\":{\"414\":1}}],[\"如果没有\",{\"1\":{\"319\":1}}],[\"如果没有开启aof持久化功能\",{\"1\":{\"256\":1}}],[\"如果没有问题\",{\"1\":{\"171\":1}}],[\"如果没有设置\",{\"1\":{\"133\":1}}],[\"如果检查失败就会重启这个容器\",{\"1\":{\"146\":1}}],[\"如果检查失败就会重新启动这个容器\",{\"1\":{\"146\":1}}],[\"如果启动就可以进行后续的检查\",{\"1\":{\"146\":1}}],[\"如果容器已经被关闭或者进入了\",{\"1\":{\"135\":1}}],[\"如果\",{\"1\":{\"118\":1,\"158\":1,\"159\":2,\"260\":1,\"390\":1,\"513\":1,\"1207\":1,\"1236\":2,\"1274\":3,\"1364\":1,\"1390\":2}}],[\"如果运行实例的\",{\"1\":{\"117\":1}}],[\"如果节点p和q连通的话\",{\"1\":{\"1225\":1}}],[\"如果节点p和q连通\",{\"1\":{\"1225\":2}}],[\"如果节点\",{\"1\":{\"115\":1,\"1217\":1}}],[\"如果每个\",{\"1\":{\"100\":1}}],[\"如果符合number类型就加个引号\",{\"1\":{\"73\":1}}],[\"如果需要判断把子序列都打印出来怎么办\",{\"1\":{\"1198\":1}}],[\"如果需要支持\",{\"1\":{\"678\":1}}],[\"如果需要更深入的了解\",{\"1\":{\"600\":1}}],[\"如果需要\",{\"1\":{\"46\":1,\"769\":1}}],[\"如果组织成员之间缺乏信任\",{\"1\":{\"30\":1}}],[\"如果领导保守不允许失败\",{\"1\":{\"30\":1}}],[\"后组成的新字符串\",{\"1\":{\"1308\":1}}],[\"后序遍历的优点就是可以在我们遍历完数据后得到返回值后进行处理\",{\"1\":{\"1235\":1}}],[\"后再重复使用多次release\",{\"1\":{\"1034\":1}}],[\"后进先出队列\",{\"1\":{\"914\":1,\"915\":1}}],[\"后init\",{\"1\":{\"903\":1}}],[\"后者则专注于为开发者提供一个轻量级且易于使用的定时任务调度工具\",{\"1\":{\"607\":1}}],[\"后就开始随着偏移量增大\",{\"1\":{\"498\":1}}],[\"后一次查询看到了前一次查询没有看到的行\",{\"1\":{\"482\":1}}],[\"后面我又接触到flask\",{\"1\":{\"1140\":1}}],[\"后面可以跟任意数量的参数\",{\"1\":{\"900\":1}}],[\"后面的到底是什么\",{\"1\":{\"847\":1,\"1009\":1}}],[\"后面的字段如果在索引中\",{\"1\":{\"507\":1,\"521\":1}}],[\"后面使用状态机来实现流程的状态控制\",{\"1\":{\"560\":1}}],[\"后面读取的跟前面读取的结果不一致\",{\"1\":{\"425\":1}}],[\"后面再来请求\",{\"1\":{\"283\":1}}],[\"后续的就不会被再次选中了\",{\"1\":{\"1209\":1}}],[\"后续的操作或故障不应该对其有任何影响\",{\"1\":{\"425\":1}}],[\"后续使用这个flask进行实例化\",{\"1\":{\"827\":1}}],[\"后续扩展时会面临\",{\"1\":{\"542\":1}}],[\"后续我们从mysql锁的机制去分析sql执行的原理\",{\"1\":{\"506\":1}}],[\"后续查询的结果和面前查询结果不同\",{\"1\":{\"425\":1}}],[\"后续某个时间点再一次性将多个操作记录写到\",{\"1\":{\"383\":1}}],[\"后续子进程执行操作时不会阻塞\",{\"1\":{\"257\":1}}],[\"后端还是脚本开发\",{\"1\":{\"540\":1}}],[\"后端的一种常见用法是将所有入站数据导向带有静态资产的对象存储后端\",{\"1\":{\"99\":1}}],[\"后端是互斥的\",{\"1\":{\"99\":1}}],[\"后端是一个引用\",{\"1\":{\"99\":1}}],[\"后端与\",{\"1\":{\"99\":1}}],[\"后\",{\"1\":{\"30\":1,\"117\":1,\"408\":2,\"469\":1}}],[\"763\",{\"0\":{\"1385\":1}}],[\"718\",{\"0\":{\"1307\":1}}],[\"714\",{\"1\":{\"1292\":1}}],[\"740\",{\"0\":{\"1281\":1}}],[\"785\",{\"0\":{\"1236\":1}}],[\"797\",{\"0\":{\"1221\":1}}],[\"7后开始全部支持\",{\"1\":{\"1049\":1}}],[\"7加入了一个新的模块contextvars\",{\"1\":{\"1048\":1}}],[\"724273\",{\"1\":{\"504\":1}}],[\"7支持内部缓存\",{\"1\":{\"431\":1}}],[\"7和8\",{\"0\":{\"429\":1}}],[\"7字节\",{\"1\":{\"325\":1}}],[\"704\",{\"1\":{\"1390\":1}}],[\"700m\",{\"1\":{\"136\":2}}],[\"70\",{\"1\":{\"108\":1,\"159\":1,\"339\":1}}],[\"755\",{\"1\":{\"108\":1}}],[\"7\",{\"0\":{\"29\":1,\"175\":1,\"267\":1,\"398\":1,\"535\":1,\"870\":1,\"898\":1,\"947\":1,\"1028\":1,\"1140\":1,\"1306\":1},\"1\":{\"172\":1,\"181\":4,\"662\":5,\"680\":1,\"712\":2,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"886\":2,\"887\":2,\"888\":2,\"921\":1,\"992\":1,\"1069\":1,\"1207\":13,\"1208\":3,\"1209\":2,\"1274\":3,\"1275\":1,\"1280\":1,\"1286\":11,\"1287\":3,\"1288\":3,\"1292\":13,\"1300\":2,\"1303\":5,\"1307\":1,\"1309\":2,\"1314\":1,\"1335\":1,\"1377\":2,\"1384\":1,\"1385\":1,\"1395\":4,\"1399\":1,\"1400\":4}}],[\"我总结下来二分算法需要问自己以下几个问题\",{\"1\":{\"1403\":1}}],[\"我总结了以下实践建议\",{\"1\":{\"33\":1}}],[\"我对于这个题意总是不太明白\",{\"1\":{\"1403\":1}}],[\"我对devops文化和持续交付有了更深层次的理解\",{\"1\":{\"19\":1}}],[\"我也不知道什么时候使用贪心\",{\"1\":{\"1359\":1}}],[\"我也在编写一个工作流的框架\",{\"1\":{\"1186\":1}}],[\"我也在几年的开发中也总结出来一些异常处理的技巧\",{\"1\":{\"740\":1}}],[\"我想的是以i\",{\"1\":{\"1307\":1}}],[\"我开始想到是递推公式为dp\",{\"1\":{\"1307\":1}}],[\"我可以生成一个字典\",{\"1\":{\"1281\":1}}],[\"我把每个节点\",{\"1\":{\"1217\":1}}],[\"我这样做有个好处就是有些不用的组件库可以在这次运行中不加载\",{\"1\":{\"1189\":1}}],[\"我不是一开始就把所有的内置组件类全部实例化一遍\",{\"1\":{\"1189\":1}}],[\"我实现的代码比较简单\",{\"1\":{\"1189\":1}}],[\"我自己也实现了个类似的功能\",{\"1\":{\"1189\":1}}],[\"我自己在开发一个工作流的框架\",{\"1\":{\"729\":1}}],[\"我觉得这道题非常巧妙\",{\"1\":{\"1376\":1}}],[\"我觉得robot中关键字比较好用\",{\"1\":{\"1186\":1}}],[\"我觉得他也体现了策略模式的思路\",{\"1\":{\"776\":1}}],[\"我曾经在之前的工作中\",{\"1\":{\"1140\":1}}],[\"我是看完解释才明白的\",{\"1\":{\"1281\":1}}],[\"我是使用的时候在进行实例化对应的组件库\",{\"1\":{\"1189\":1}}],[\"我是call方法\",{\"1\":{\"1057\":1}}],[\"我是实例属性\",{\"1\":{\"1057\":2}}],[\"我是类属性\",{\"1\":{\"1057\":2}}],[\"我回复你\",{\"1\":{\"959\":1}}],[\"我来举个effective\",{\"1\":{\"758\":1}}],[\"我相信每个开发都对于日志都是无比的熟悉\",{\"1\":{\"755\":1}}],[\"我相信可以更好地应对未来的挑战\",{\"1\":{\"26\":1}}],[\"我在处理其他事情\",{\"1\":{\"959\":1}}],[\"我在一开始处理时发现\",{\"1\":{\"878\":1}}],[\"我在这家工作刚来的时候公司的同事写一个增删改查接口用了将近100行代码\",{\"1\":{\"860\":1}}],[\"我在这里把告警分为三类\",{\"1\":{\"629\":1}}],[\"我在自己的项目中也应用到socket连接这个功能\",{\"1\":{\"673\":1}}],[\"我在自己的工作流中之前使用到队列作为状态的转换\",{\"1\":{\"560\":1}}],[\"我需要知道的是\",{\"1\":{\"361\":1}}],[\"我们求的是什么\",{\"1\":{\"1403\":1}}],[\"我们并不能确定查找的元素不在这个区间中\",{\"1\":{\"1393\":1}}],[\"我们并查集中主要实现的是这三个api\",{\"1\":{\"1225\":1}}],[\"我们究竟应该使用哪一种写法呢\",{\"1\":{\"1393\":1}}],[\"我们还经常能看到下面两个公式\",{\"1\":{\"1393\":1}}],[\"我们有一个\",{\"1\":{\"1384\":1}}],[\"我们有需要分两个情况\",{\"1\":{\"1376\":1}}],[\"我们首先可以通过双指针判断字符串a是否存在于字符串b中\",{\"1\":{\"1380\":1}}],[\"我们无法退回\",{\"1\":{\"1366\":1}}],[\"我们找还一张\",{\"1\":{\"1366\":1}}],[\"我们找不到递推公式\",{\"1\":{\"1288\":1}}],[\"我们收取一张\",{\"1\":{\"1366\":2}}],[\"我们按顺序收取\",{\"1\":{\"1366\":2}}],[\"我们要求的是什么\",{\"1\":{\"1403\":2}}],[\"我们要抓住这句话\",{\"1\":{\"1403\":1}}],[\"我们要时刻保证我们要取的值在\",{\"1\":{\"1395\":1}}],[\"我们要把这个字符串划分为尽可能多的片段\",{\"1\":{\"1385\":1}}],[\"我们要搜索从节点1到节点6的所有路径\",{\"1\":{\"1345\":1}}],[\"我们要判断从每个节点开始都可不可以放到两个集合中\",{\"1\":{\"1237\":1}}],[\"我们将数组中所有的数字都和右边第一个不为一的数进行\",{\"1\":{\"1340\":1}}],[\"我们加个一个元素就是防止越界\",{\"1\":{\"1338\":1}}],[\"我们判断的点应该是i+1和j+1的最长子数组\",{\"1\":{\"1307\":1}}],[\"我们判断的条件都是在i==j的情况下\",{\"1\":{\"1299\":1}}],[\"我们这里需要确保每个格子的初始hp都是1\",{\"1\":{\"1303\":1}}],[\"我们这里进行一个曲线救国\",{\"1\":{\"1299\":1}}],[\"我们在遍历的过程中需要不断的更新我们初始化的值\",{\"1\":{\"1303\":1}}],[\"我们在传输数据时\",{\"1\":{\"962\":1}}],[\"我们英勇的骑士最初被安置在\",{\"1\":{\"1303\":1}}],[\"我们没有足够的字符去构造\",{\"1\":{\"1300\":1}}],[\"我们使用动规五部曲进行处理\",{\"1\":{\"1299\":1}}],[\"我们使用0代表持有\",{\"1\":{\"1292\":1}}],[\"我们就是来获取其中最大的元素这个时候就和打家劫舍一模一样了\",{\"1\":{\"1281\":1}}],[\"我们获取最大值dp\",{\"1\":{\"1280\":1}}],[\"我们用一个匹配来表示\",{\"1\":{\"1242\":1}}],[\"我们想把每个人分进任意大小的两组\",{\"1\":{\"1237\":1}}],[\"我们发现\",{\"1\":{\"1225\":1}}],[\"我们一般写递归条件需要return\",{\"1\":{\"1221\":1}}],[\"我们一个用链条来表现一个连接上发送的两个流\",{\"1\":{\"978\":1}}],[\"我们只需要这两个数据就可以了\",{\"1\":{\"1221\":1}}],[\"我们不仅仅存储某个节点\",{\"1\":{\"1219\":1}}],[\"我们不要设计大而全的类\",{\"1\":{\"762\":1}}],[\"我们再明确一个图论中特有的度\",{\"1\":{\"1218\":1}}],[\"我们权且称为\",{\"1\":{\"1217\":1}}],[\"我们如何得到a和b不同的数呢\",{\"1\":{\"1340\":1}}],[\"我们如何声明一个上下文管理器\",{\"0\":{\"847\":1,\"1009\":1}}],[\"我们如果满足这个情况呢\",{\"1\":{\"1198\":1}}],[\"我们遍历整个数字\",{\"1\":{\"1198\":1}}],[\"我们总结下来robot的运行流程如下\",{\"1\":{\"1194\":1}}],[\"我们传来的参数格式大概如下\",{\"1\":{\"1189\":1}}],[\"我们平时使用中也并不常见\",{\"1\":{\"1177\":1}}],[\"我们以一个例子来举例说明singal的实现原理\",{\"1\":{\"1111\":1}}],[\"我们以交通灯为例\",{\"1\":{\"563\":1}}],[\"我们理一下运行顺序\",{\"1\":{\"1103\":1}}],[\"我们通过打印可以发现url\",{\"1\":{\"1094\":1}}],[\"我们通常使用iter\",{\"1\":{\"732\":1}}],[\"我们先把0\",{\"1\":{\"1335\":1}}],[\"我们先下结论就是视图函数和url的中间值\",{\"1\":{\"1094\":1}}],[\"我们先来理解\",{\"1\":{\"966\":1}}],[\"我们先来看看发送方的窗口\",{\"1\":{\"959\":1}}],[\"我们先来看下慢日志里到底记录了哪些内容\",{\"1\":{\"504\":1}}],[\"我们需要判断的答案\",{\"1\":{\"1403\":2}}],[\"我们需要判断i=3的情况\",{\"1\":{\"1376\":1}}],[\"我们需要对组合后的集合进行排序\",{\"1\":{\"1384\":1}}],[\"我们需要对于元素进行分配\",{\"1\":{\"1198\":1}}],[\"我们需要求解的问题可以转化为\",{\"1\":{\"1282\":1}}],[\"我们需要转化为\",{\"1\":{\"1241\":1}}],[\"我们需要首先明白一个对象实例化会做那些事情\",{\"1\":{\"1057\":1}}],[\"我们需要定义一套规则来限制这些任务只能在规定的时间段内生效\",{\"1\":{\"618\":1}}],[\"我们来总结下\",{\"1\":{\"1050\":1}}],[\"我们主要看下为什么从threading\",{\"1\":{\"1048\":1}}],[\"我们都将所有的生成器进行一次调用\",{\"1\":{\"1041\":1}}],[\"我们调用内部函数\",{\"1\":{\"992\":1}}],[\"我们构造一个使用场景\",{\"1\":{\"935\":1}}],[\"我们也可以基于\",{\"1\":{\"894\":1}}],[\"我们之间去操作local对象的相关属性\",{\"1\":{\"855\":1}}],[\"我们设计一个类里面既包含了用户的一些操作\",{\"1\":{\"762\":1}}],[\"我们可能习惯性地认为树的高度就是logn\",{\"1\":{\"1225\":1}}],[\"我们可能会写出这样的代码\",{\"1\":{\"902\":1}}],[\"我们可能启动不了这么多进程\",{\"1\":{\"725\":1}}],[\"我们可以获取到右边第一个不为一的数right\",{\"1\":{\"1340\":1}}],[\"我们可以统计每个数在32位下1的出现个数\",{\"1\":{\"1339\":1}}],[\"我们可以根据回文串的定义使用双指针的方式\",{\"1\":{\"1297\":1}}],[\"我们可以初始为0\",{\"1\":{\"1276\":1}}],[\"我们可以确定dp\",{\"1\":{\"1271\":1}}],[\"我们可以遍历一遍图\",{\"1\":{\"1235\":1}}],[\"我们可以粗略的理解为visited\",{\"1\":{\"1220\":1}}],[\"我们可以使用一个简单的例子来说明\",{\"1\":{\"1390\":1}}],[\"我们可以使用动态规划的思路来解决\",{\"1\":{\"1198\":1}}],[\"我们可以使用的方式\",{\"0\":{\"1051\":1}}],[\"我们可以看这两个节点是否在同一个集合中\",{\"1\":{\"1229\":1}}],[\"我们可以看到信号中的request\",{\"1\":{\"1112\":1}}],[\"我们可以看出来一个类进行初始化需要先执行类属性\",{\"1\":{\"1057\":1}}],[\"我们可以通过url\",{\"1\":{\"1094\":1}}],[\"我们可以理出来以下事情\",{\"1\":{\"1063\":1}}],[\"我们可以知道flask初始化\",{\"1\":{\"1060\":1}}],[\"我们可以先改造一下flask\",{\"1\":{\"1057\":1}}],[\"我们可以简单实现下threading\",{\"1\":{\"1049\":1}}],[\"我们可以想象\",{\"1\":{\"1041\":1}}],[\"我们可以将这个饼干\",{\"1\":{\"1364\":1}}],[\"我们可以将事件锁看为红绿灯\",{\"1\":{\"1035\":1}}],[\"我们可以将其分为以下几类\",{\"1\":{\"613\":1}}],[\"我们可以利用endpoint找到url\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"我们可以利用asyncio和asyncio\",{\"1\":{\"925\":1}}],[\"我们可以利用小顶堆\",{\"1\":{\"609\":1}}],[\"我们可以更灵活地控制优先级的比较逻辑\",{\"1\":{\"920\":1}}],[\"我们可以高效地实现优先队列的核心操作\",{\"1\":{\"919\":1}}],[\"我们可以花费更多的精力在更复杂的业务逻辑上\",{\"1\":{\"860\":1}}],[\"我们可以了解到\",{\"1\":{\"856\":1}}],[\"我们可以有一个抽象工厂来同时生产车架和轮胎\",{\"1\":{\"792\":1}}],[\"我们可以在\",{\"1\":{\"784\":1}}],[\"我们应该用\",{\"1\":{\"1220\":1}}],[\"我们应该考虑为整个系统提供一个总的启停按钮\",{\"1\":{\"615\":1}}],[\"我们应当保证连接池的大小不小于线程池的数目\",{\"1\":{\"581\":1}}],[\"我们得到慢查询日志后\",{\"1\":{\"504\":1}}],[\"我们根据查询的页数和查询的记录数可以算出查询的\",{\"1\":{\"499\":1}}],[\"我们\",{\"1\":{\"416\":1}}],[\"我们知道一个页的大小是16kb\",{\"1\":{\"326\":1}}],[\"我们重点来看下两者区别\",{\"1\":{\"308\":1}}],[\"我们会把redis作为只读缓存使用\",{\"1\":{\"287\":1}}],[\"我们线上是512mb\",{\"1\":{\"262\":1}}],[\"我们存储的实际数据的大小可能还没有指针占用的内存大\",{\"1\":{\"218\":1}}],[\"我们把应用程序的数据存储在数据库中\",{\"1\":{\"112\":1}}],[\"我们的领导说过一句话我至今都印象非常深刻\",{\"1\":{\"58\":1}}],[\"我至今还记得每一次提交我都是保持着一颗敬畏之心\",{\"1\":{\"58\":1}}],[\"我认为\",{\"1\":{\"34\":1}}],[\"我的上一份工作也就是持续集成部门\",{\"1\":{\"58\":1}}],[\"我的观点\",{\"0\":{\"34\":1,\"46\":1,\"58\":1}}],[\"我的职责仅限于此\",{\"1\":{\"33\":1}}],[\"我建立了完整的开发测试运维团队就是devops了吗\",{\"1\":{\"30\":1}}],[\"我建立了流水线就是持续交付了吗\",{\"1\":{\"30\":1}}],[\"我深刻意识到\",{\"1\":{\"30\":1}}],[\"而上一题只可以交易一次\",{\"1\":{\"1292\":1}}],[\"而重量为\",{\"1\":{\"1274\":1}}],[\"而所谓快慢指针\",{\"1\":{\"1255\":1}}],[\"而什么叫做拓扑排序呢就是\",{\"1\":{\"1240\":1}}],[\"而灭的\",{\"1\":{\"1101\":1}}],[\"而生\",{\"1\":{\"1101\":1}}],[\"而生成器主要用于迭代器编程\",{\"1\":{\"736\":1}}],[\"而flask引用的werkzeug有对于这个local进行了一层封装封装为了一个栈的形式\",{\"1\":{\"1049\":1}}],[\"而jpython的实现里面里就没有gil\",{\"1\":{\"1029\":1}}],[\"而线程是cpu调度运行的基本单位\",{\"1\":{\"1029\":1}}],[\"而只是集中在其中的某些相邻的元素上\",{\"1\":{\"1022\":1}}],[\"而没\",{\"1\":{\"971\":1}}],[\"而每次请求结束后\",{\"1\":{\"962\":1}}],[\"而http是应用层协议\",{\"1\":{\"962\":1}}],[\"而可以继续发送数据的最大值\",{\"1\":{\"959\":1}}],[\"而可重复读则仅在一个事务中\",{\"1\":{\"374\":1}}],[\"而服务端可能还有数据需要处理和发送\",{\"1\":{\"954\":1}}],[\"而偏函数不能改变一个函数的行为\",{\"1\":{\"934\":1}}],[\"而await用于等待一个异步操作的结果\",{\"1\":{\"923\":1}}],[\"而aof文件中存储的是一条条命令\",{\"1\":{\"258\":1}}],[\"而contextvar也是实现数据隔离这个需求\",{\"1\":{\"1051\":1}}],[\"而consumer线程则不断地从队列中取出并\",{\"1\":{\"916\":1}}],[\"而counter类则要简单便捷的多\",{\"1\":{\"941\":1}}],[\"而count\",{\"1\":{\"488\":1}}],[\"而列表实现的队列在不断出队后\",{\"1\":{\"909\":1}}],[\"而异步io操作则是在事件循环的管理下执行的\",{\"1\":{\"899\":1}}],[\"而异常多出来的容器也会自动回收\",{\"1\":{\"177\":1}}],[\"而协程是一种可以暂停和恢复执行的函数\",{\"1\":{\"899\":1}}],[\"而io操作在后台进行\",{\"1\":{\"898\":1}}],[\"而字典的copy方法可以实现字典对象的浅拷贝\",{\"1\":{\"894\":1}}],[\"而深拷贝不仅会复制对象\",{\"1\":{\"894\":1}}],[\"而lfu是基于访问次数的\",{\"1\":{\"839\":1,\"1003\":1}}],[\"而无需修改其他部分的代码\",{\"1\":{\"808\":1}}],[\"而无需对\",{\"1\":{\"120\":1}}],[\"而具体的工厂如\",{\"1\":{\"791\":1}}],[\"而代理模式对代理的对象施加控制\",{\"1\":{\"771\":1}}],[\"而接口隔离原则注重的是对接口依赖的隔离\",{\"1\":{\"762\":1}}],[\"而如果采用修改的方式\",{\"1\":{\"762\":1}}],[\"而自定义异常可以携带更丰富的上下文信息\",{\"1\":{\"756\":1}}],[\"而显式抛出的异常不会受此影响\",{\"1\":{\"756\":1}}],[\"而对于拓扑排序首先就是要判断图中是不是有环\",{\"1\":{\"1240\":1}}],[\"而对于那些已经存在或者预计未来会扩展到包含分布式计算元素的应用\",{\"1\":{\"607\":1}}],[\"而对于其他查找类型\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"而我们使用contextvar同样也可以实现线程隔离的方式\",{\"1\":{\"1049\":1}}],[\"而我们直接通过socket编程使用tcp协议的时候\",{\"1\":{\"962\":1}}],[\"而我们定义的连接池大小只有10\",{\"1\":{\"581\":1}}],[\"而我们面对不同长度的节点又不可能直接sizeof\",{\"1\":{\"218\":1}}],[\"而设计\",{\"1\":{\"546\":1}}],[\"而造成的幻读问题\",{\"1\":{\"482\":1}}],[\"而pg不存在\",{\"1\":{\"433\":1}}],[\"而使用自增字段作为主键则是一个很好的选择\",{\"1\":{\"414\":1}}],[\"而使用mysqlbinlog解析查看\",{\"1\":{\"385\":1}}],[\"而辅助索引的key可以重复\",{\"1\":{\"413\":1}}],[\"而会把这个数据相邻的数据也一起读到内存中\",{\"1\":{\"361\":1}}],[\"而索引一般在内存中\",{\"1\":{\"349\":1}}],[\"而叶子节点不保存子节点引用\",{\"1\":{\"345\":1}}],[\"而b+tree只需要遍历他的所有叶子节点即可\",{\"1\":{\"345\":1}}],[\"而一旦检测到服务完全不可用\",{\"1\":{\"626\":1}}],[\"而一旦这个假定不成立时\",{\"1\":{\"227\":1}}],[\"而一个varchar\",{\"1\":{\"326\":1}}],[\"而控制块的大小约为数据页的5\",{\"1\":{\"318\":1}}],[\"而且想不到反例\",{\"1\":{\"1359\":1}}],[\"而且还有环\",{\"1\":{\"1282\":1}}],[\"而且这个\",{\"1\":{\"1240\":1}}],[\"而且这些对象还可以组合成不同的家族或系列\",{\"1\":{\"792\":1}}],[\"而且在整个运行中都是反复出现\",{\"1\":{\"1177\":1}}],[\"而且是python自带的模块\",{\"1\":{\"1049\":1}}],[\"而且每个工厂都能按照工厂模式提供对象\",{\"1\":{\"767\":1}}],[\"而且除了基础的生成器\",{\"1\":{\"736\":1}}],[\"而且有助于持续改进监控策略\",{\"1\":{\"637\":1}}],[\"而且数据量过大\",{\"1\":{\"507\":1,\"522\":1}}],[\"而且查询的数据越多\",{\"1\":{\"498\":1}}],[\"而且vacuum清理不及时\",{\"1\":{\"434\":1}}],[\"而且功能实现比较严谨\",{\"1\":{\"433\":1}}],[\"而且会加聚簇索引上的记录x锁\",{\"1\":{\"408\":1}}],[\"而且不会出现某些特定情况下存储过程或function无法被正确复制的问题\",{\"1\":{\"393\":1}}],[\"而且应该是读多写少的情况下才能使用\",{\"1\":{\"234\":1}}],[\"而且只有在数据量较大的情况下才能体现出来优势\",{\"1\":{\"234\":1}}],[\"而且也揭示了如何有效地结合devops实践来加速价值传递\",{\"1\":{\"19\":1}}],[\"而忽略之后的\",{\"1\":{\"227\":1}}],[\"而这\",{\"1\":{\"227\":1}}],[\"而这一切都需要团队成员之间的紧密协作以及对最新技术和工具的灵活运用\",{\"1\":{\"26\":1}}],[\"而quicklist也用到了ziplist\",{\"1\":{\"224\":1}}],[\"而ziplist可以很好的解决这个问题\",{\"1\":{\"218\":1}}],[\"而此时只有\",{\"1\":{\"181\":1}}],[\"而\",{\"1\":{\"98\":1,\"177\":1,\"255\":1,\"268\":1,\"358\":2,\"590\":1,\"682\":1,\"731\":1,\"732\":1,\"900\":1,\"1069\":1,\"1173\":1,\"1220\":1,\"1265\":1,\"1276\":1,\"1313\":1}}],[\"而选择长期维护分支\",{\"1\":{\"55\":1}}],[\"而不仅仅是简单的数值比较\",{\"1\":{\"920\":1}}],[\"而不必等待该操作完成\",{\"1\":{\"898\":1}}],[\"而不需要依赖外部库\",{\"1\":{\"986\":1}}],[\"而不需要为每种产品都创建一个新的工厂类\",{\"1\":{\"792\":1}}],[\"而不需要在原代码中修改\",{\"1\":{\"765\":1}}],[\"而不会重新执行模块代码\",{\"1\":{\"782\":1}}],[\"而不会影响应用程序\",{\"1\":{\"116\":1}}],[\"而不要试图去建立一个很庞大的接口供所有依赖它的类去调用\",{\"1\":{\"762\":1}}],[\"而不管哪种派\",{\"1\":{\"762\":1}}],[\"而不存储字段值\",{\"1\":{\"461\":1}}],[\"而不能保\",{\"1\":{\"227\":1}}],[\"而不是立即产生结果\",{\"1\":{\"734\":1}}],[\"而不是返回一个值\",{\"1\":{\"733\":1}}],[\"而不是得到了一个全新的连接对象\",{\"1\":{\"578\":1}}],[\"而不是快照读\",{\"1\":{\"482\":1}}],[\"而不是单单依赖于某一种技术\",{\"1\":{\"425\":1}}],[\"而不是直接创建容器\",{\"1\":{\"115\":1}}],[\"而不是虚拟ip\",{\"1\":{\"87\":1}}],[\"而不是把问题归结为个人\",{\"1\":{\"58\":1}}],[\"而不是在后续阶段中被再次重复构建\",{\"1\":{\"46\":1}}],[\"而不应该只在特定时间或条件下才发生\",{\"1\":{\"30\":1}}],[\"而在更高层次则采用更大的tick值\",{\"1\":{\"611\":1}}],[\"而在innodb中\",{\"1\":{\"414\":1}}],[\"而在于它迫使组织直面文化问题\",{\"1\":{\"34\":1}}],[\"而在持续交付文化中\",{\"1\":{\"32\":1}}],[\"而是建议\",{\"1\":{\"1392\":1}}],[\"而是树枝\",{\"1\":{\"1220\":1}}],[\"而是继续保持在池中等待下一次的任务\",{\"1\":{\"1036\":1}}],[\"而是cpython实现时引入的一种机制\",{\"1\":{\"1029\":1}}],[\"而是每次都建立一个新的连接\",{\"1\":{\"962\":1}}],[\"而是每秒写入\",{\"1\":{\"388\":1}}],[\"而是返回0\",{\"1\":{\"942\":1}}],[\"而是依赖于元素的自然顺序或显式指定的负优先级值\",{\"1\":{\"920\":1}}],[\"而是由python解释器在实例化对象时自动调用\",{\"1\":{\"900\":1}}],[\"而是可以继续执行其他任务\",{\"1\":{\"899\":1}}],[\"而是当你用到其中某些元素的时候才去求某元素的值\",{\"1\":{\"893\":1}}],[\"而是要设计粒度小\",{\"1\":{\"762\":1}}],[\"而是在需要时按需生成\",{\"1\":{\"734\":1}}],[\"而是仍然连接着数据库\",{\"1\":{\"578\":1}}],[\"而是整个\",{\"1\":{\"513\":1}}],[\"而是加入了\",{\"1\":{\"513\":1}}],[\"而是批量修改的sql语句事件\",{\"1\":{\"394\":1}}],[\"而是像数据一样按page管理\",{\"1\":{\"389\":1}}],[\"而是数据\",{\"1\":{\"389\":1}}],[\"而是基于历史版本读取的一个快照信息\",{\"1\":{\"373\":1,\"482\":1}}],[\"而是从数据库连接池中去获取\",{\"1\":{\"358\":2}}],[\"而是自持久化开始到持久化结束的这段时间发生的增量\",{\"1\":{\"264\":1}}],[\"而是自己构建了一种名为简单动态字符串\",{\"1\":{\"225\":1}}],[\"而是采取了类似rdb快照的方式\",{\"1\":{\"261\":1}}],[\"而是让操作系统来决定何时同步磁盘\",{\"1\":{\"260\":1}}],[\"而是进入了buffer中\",{\"1\":{\"260\":1}}],[\"而是会写到一个临时的内存区域作为一个副本\",{\"1\":{\"257\":1}}],[\"而是使用回调函数\",{\"1\":{\"898\":1}}],[\"而是使用\",{\"1\":{\"227\":1}}],[\"而是存储上一个\",{\"1\":{\"218\":1}}],[\"而是存储上一个节点长度和当前节点长度\",{\"1\":{\"217\":1}}],[\"而是测试人员对新版本进行线上测试\",{\"1\":{\"171\":1}}],[\"而是一场技术与文化的双重革命\",{\"1\":{\"46\":1}}],[\"而是一场需要全员参与的组织文化革命\",{\"1\":{\"30\":1}}],[\"而是与开发协作减少缺陷的产生\",{\"1\":{\"32\":1}}],[\"而需在稳定性与交付速度间找到平衡\",{\"1\":{\"32\":1}}],[\"而持续交付的核心\",{\"1\":{\"31\":1}}],[\"而应该是所有人的责任\",{\"1\":{\"30\":1}}],[\"而非共享内存\",{\"1\":{\"725\":1}}],[\"而非共同解决问题\",{\"1\":{\"58\":1}}],[\"而非全天候无休止地运行\",{\"1\":{\"618\":1}}],[\"而非在\",{\"1\":{\"98\":1}}],[\"而非仅长轮询\",{\"1\":{\"678\":1}}],[\"而非仅奖励个人技术能力\",{\"1\":{\"33\":1}}],[\"而非仅停留在口号层面\",{\"1\":{\"33\":1}}],[\"而非等待\",{\"1\":{\"32\":1}}],[\"而非追究责任\",{\"1\":{\"32\":1}}],[\"而非指责的借口\",{\"1\":{\"32\":1}}],[\"而非\",{\"1\":{\"30\":1,\"548\":1,\"549\":1,\"550\":1,\"1071\":1}}],[\"为最长子序列个数为dp\",{\"1\":{\"1288\":1}}],[\"为true\",{\"1\":{\"1276\":1,\"1299\":1}}],[\"为下一次请求准备\",{\"1\":{\"1104\":1}}],[\"为解决这个问题\",{\"1\":{\"959\":1}}],[\"为积分为1000或以上的顾客提供5\",{\"1\":{\"776\":1}}],[\"为该实例提供一个全局访问节点\",{\"1\":{\"763\":1}}],[\"为不同任务分配队列\",{\"1\":{\"659\":1}}],[\"为匹配的条件增加索引\",{\"1\":{\"514\":1}}],[\"为索引的时候执行过程会如下图\",{\"1\":{\"513\":1}}],[\"为啥写两次\",{\"1\":{\"469\":1}}],[\"为用户提供一个选项\",{\"1\":{\"430\":1}}],[\"为当前读\",{\"1\":{\"373\":1,\"482\":1}}],[\"为负数说明下一条记录在当前记录的前面\",{\"1\":{\"324\":1}}],[\"为1\",{\"1\":{\"324\":1}}],[\"为什么没有return呢\",{\"1\":{\"1221\":1}}],[\"为什么迁移到\",{\"0\":{\"1069\":1}}],[\"为什么使用contextvar\",{\"0\":{\"1047\":1}}],[\"为什么是三次握手不是两次\",{\"0\":{\"952\":1}}],[\"为什么flask关系到装饰器\",{\"1\":{\"831\":1}}],[\"为什么需要\",{\"0\":{\"1141\":1}}],[\"为什么需要这个状态\",{\"0\":{\"956\":1}}],[\"为什么需要四次挥手\",{\"0\":{\"954\":1}}],[\"为什么需要序列化\",{\"0\":{\"822\":1}}],[\"为什么需要它\",{\"1\":{\"600\":1}}],[\"为什么需要模块化\",{\"0\":{\"542\":1}}],[\"为什么\",{\"1\":{\"549\":1}}],[\"为什么还要写共享表空间\",{\"1\":{\"469\":1}}],[\"为什么写两次\",{\"1\":{\"469\":1}}],[\"为什么要先确定最右边\",{\"1\":{\"1379\":1}}],[\"为什么要改变\",{\"0\":{\"893\":1}}],[\"为什么要抽象基类\",{\"0\":{\"860\":1}}],[\"为什么要token认证\",{\"0\":{\"687\":1}}],[\"为什么要添加\",{\"0\":{\"589\":1}}],[\"为什么要加锁\",{\"1\":{\"286\":1}}],[\"为什么要加休眠时间\",{\"1\":{\"286\":1}}],[\"为什么要使用标签\",{\"1\":{\"120\":1}}],[\"为什么单线程还可以这么快\",{\"1\":{\"267\":1}}],[\"为\",{\"1\":{\"159\":2,\"482\":1,\"1198\":1,\"1202\":1,\"1203\":1,\"1208\":1,\"1303\":1,\"1353\":1,\"1376\":1,\"1399\":1}}],[\"为故障排除工作负载和节点创建调试会话\",{\"1\":{\"124\":1}}],[\"为维护做好准备\",{\"1\":{\"124\":1}}],[\"为部署控制器\",{\"1\":{\"124\":1}}],[\"为了统一和简化二分查找算法的写法\",{\"1\":{\"1393\":1}}],[\"为了尽快解救公主\",{\"1\":{\"1303\":1}}],[\"为了便于理解\",{\"1\":{\"935\":1}}],[\"为了便于管理这个堆\",{\"1\":{\"324\":1}}],[\"为了简化解释器的实现\",{\"1\":{\"897\":1}}],[\"为了给下面的讲解提供铺垫我们先来说一下什么是生成器\",{\"1\":{\"730\":1}}],[\"为了减少盗用\",{\"1\":{\"698\":2}}],[\"为了防止冲突\",{\"1\":{\"696\":1}}],[\"为了使某个域名下的所有网页能够共享某些数据\",{\"1\":{\"689\":1}}],[\"为了有效地管理和展示告警信息\",{\"1\":{\"633\":1}}],[\"为了保证告警信息能够被及时传达给相关责任方\",{\"1\":{\"627\":1}}],[\"为了确保告警机制的有效性\",{\"1\":{\"624\":1}}],[\"为了应对特殊情况\",{\"1\":{\"615\":1}}],[\"为了克服单层时间轮所能支持的最大超时时间有限的问题\",{\"1\":{\"611\":1}}],[\"为了节省内存空间\",{\"1\":{\"431\":1}}],[\"为了描述b\",{\"1\":{\"340\":1}}],[\"为了解决简单工厂模式的问题\",{\"1\":{\"791\":1}}],[\"为了解决写失效问题\",{\"1\":{\"320\":1,\"469\":1}}],[\"为了解决这个问题\",{\"1\":{\"264\":1,\"784\":1,\"897\":1}}],[\"为了避免同时被其他人修改\",{\"1\":{\"403\":1}}],[\"为了避免\",{\"1\":{\"227\":1}}],[\"为了避免类似情况\",{\"1\":{\"210\":1}}],[\"为了实现这一需求\",{\"1\":{\"920\":1}}],[\"为了实现\",{\"1\":{\"190\":1}}],[\"为了方便起见\",{\"1\":{\"93\":2}}],[\"为了让节点端口可用\",{\"1\":{\"93\":1}}],[\"为了证伪\",{\"1\":{\"30\":1}}],[\"为了证真而设计\",{\"1\":{\"30\":1}}],[\"为服务使用多个端口时\",{\"1\":{\"90\":1}}],[\"为loadbalancer类型的服务分配\",{\"1\":{\"87\":1}}],[\"为每个需要该configmap的容器添加一个spec\",{\"1\":{\"72\":1}}],[\"为持续交付奠定了坚实的基础\",{\"1\":{\"49\":1}}],[\"为跨部门协作扫清障碍\",{\"1\":{\"33\":1}}],[\"为唯一目标\",{\"1\":{\"32\":1}}],[\"为我们提供了一套非常实用的工作指南\",{\"1\":{\"26\":1}}],[\"为团队提供了一个结构化的方法来识别问题并寻找解决方案\",{\"1\":{\"20\":1}}],[\"进阶知识\",{\"0\":{\"1421\":1}}],[\"进阶\",{\"1\":{\"1207\":1,\"1313\":1}}],[\"进阶话题\",{\"0\":{\"736\":1}}],[\"进阶用法\",{\"0\":{\"568\":1}}],[\"进程切换开销较大\",{\"1\":{\"1163\":1}}],[\"进程是资源的分配单位\",{\"1\":{\"1029\":1}}],[\"进程安全队列\",{\"0\":{\"914\":1}}],[\"进程安全与资源管理\",{\"0\":{\"717\":1}}],[\"进程间共享内存需通过shared\",{\"1\":{\"718\":1}}],[\"进程间通信优化\",{\"0\":{\"716\":1}}],[\"进程间通信\",{\"0\":{\"706\":1}}],[\"进程间通过管道通信\",{\"1\":{\"705\":1}}],[\"进程终止与清理\",{\"1\":{\"717\":1}}],[\"进程启动时复制整个数组\",{\"1\":{\"713\":1}}],[\"进程隔离\",{\"1\":{\"712\":1}}],[\"进程池\",{\"1\":{\"708\":1}}],[\"进程池等\",{\"1\":{\"607\":1}}],[\"进程\",{\"0\":{\"704\":1},\"1\":{\"704\":1}}],[\"进程数可能仅\",{\"1\":{\"725\":1}}],[\"进程数通常控制在\",{\"1\":{\"725\":1}}],[\"进程数\",{\"1\":{\"659\":1}}],[\"进程实时调用\",{\"1\":{\"260\":1}}],[\"进入节点\",{\"1\":{\"1220\":2,\"1348\":1}}],[\"进入\",{\"1\":{\"569\":2}}],[\"进入开发\",{\"1\":{\"31\":1}}],[\"进行比较\",{\"1\":{\"1390\":1}}],[\"进行二分判定\",{\"1\":{\"1237\":1}}],[\"进行了一个懒加载\",{\"1\":{\"1189\":1}}],[\"进行数据交换的操作\",{\"1\":{\"898\":1}}],[\"进行5000次操作\",{\"1\":{\"507\":1,\"520\":1}}],[\"进行分析之前\",{\"1\":{\"506\":1}}],[\"进行统计操作时\",{\"1\":{\"485\":1}}],[\"进行覆盖写\",{\"1\":{\"390\":1}}],[\"进行回退\",{\"1\":{\"379\":1}}],[\"进行磁盘与内存之间的数据交互的\",{\"1\":{\"326\":1}}],[\"进行瘦身\",{\"1\":{\"263\":1}}],[\"进行\",{\"1\":{\"245\":1}}],[\"进行空间扩展的时候\",{\"1\":{\"227\":1}}],[\"进行修改之后\",{\"1\":{\"227\":2}}],[\"进行修改\",{\"1\":{\"227\":1}}],[\"进展失败\",{\"1\":{\"160\":1}}],[\"进度期限秒数\",{\"0\":{\"160\":1}}],[\"进一步提升产品质量和服务水平\",{\"1\":{\"26\":1}}],[\"进而发展现有业务\",{\"1\":{\"18\":1}}],[\"可执行对象\",{\"1\":{\"1188\":1}}],[\"可自定义的16个扩展点\",{\"0\":{\"1107\":1}}],[\"可自动传递上下文\",{\"1\":{\"1078\":1}}],[\"可灵活管理多层上下文\",{\"1\":{\"1087\":1}}],[\"可迭代对象\",{\"1\":{\"893\":1}}],[\"可是\",{\"1\":{\"839\":1,\"1003\":1,\"1376\":1}}],[\"可扩展性\",{\"1\":{\"808\":1,\"1154\":1}}],[\"可靠通话\",{\"1\":{\"676\":1}}],[\"可靠性\",{\"1\":{\"430\":1}}],[\"可容忍少量数据丢失的场景\",{\"1\":{\"675\":1}}],[\"可充分利用\",{\"1\":{\"664\":1}}],[\"可拆分为多个子任务\",{\"1\":{\"661\":1}}],[\"可用时间\",{\"0\":{\"618\":1}}],[\"可用连接被用尽的可能原因\",{\"0\":{\"580\":1}}],[\"可上溢的连接池\",{\"1\":{\"578\":1}}],[\"可视化状态图辅助调试\",{\"1\":{\"574\":1}}],[\"可视化状态机\",{\"0\":{\"567\":1}}],[\"可读\",{\"1\":{\"478\":1}}],[\"可管理性远程管理\",{\"1\":{\"430\":1}}],[\"可观察性性能架构\",{\"1\":{\"430\":1}}],[\"可观察到redis中提供了3中aof记录同步选项\",{\"1\":{\"260\":1}}],[\"可通过转换器\",{\"1\":{\"1164\":1}}],[\"可通过进程限制单个任务的资源占用\",{\"1\":{\"714\":1}}],[\"可通过resource模块限制单个进程的内存\",{\"1\":{\"712\":1}}],[\"可通过\",{\"1\":{\"388\":1}}],[\"可重复读实现\",{\"0\":{\"473\":1}}],[\"可重复读\",{\"0\":{\"474\":1},\"1\":{\"368\":1,\"371\":1,\"372\":1,\"477\":1,\"482\":3},\"2\":{\"480\":1}}],[\"可重复化\",{\"1\":{\"38\":1}}],[\"可立刻将所有流量切回至原稳定集群\",{\"1\":{\"169\":1}}],[\"可包含一个或多个应用程序容器\",{\"1\":{\"115\":1}}],[\"可包含一个或多个\",{\"1\":{\"115\":1}}],[\"可选优先级\",{\"1\":{\"919\":1}}],[\"可选项\",{\"1\":{\"503\":1}}],[\"可选\",{\"0\":{\"595\":1},\"1\":{\"97\":1,\"648\":1}}],[\"可选字段\",{\"1\":{\"93\":1}}],[\"可以直接返回−1\",{\"1\":{\"1393\":1}}],[\"可以直接访问\",{\"1\":{\"986\":1}}],[\"可以是一个数组或列表\",{\"1\":{\"1390\":1}}],[\"可以是虚拟机或物理机\",{\"1\":{\"114\":1}}],[\"可以多次选择同一个下标\",{\"1\":{\"1365\":1}}],[\"可以为\",{\"1\":{\"1354\":1}}],[\"可以画出两条不交叉的线\",{\"1\":{\"1309\":1}}],[\"可以绘制一些连接两个数字\",{\"1\":{\"1309\":1}}],[\"可以用\",{\"1\":{\"1300\":1}}],[\"可以用来向\",{\"1\":{\"119\":1}}],[\"可以先不初始化\",{\"1\":{\"1299\":1}}],[\"可以先加载\",{\"1\":{\"264\":1}}],[\"可以从中删除一个字符\",{\"1\":{\"1297\":1}}],[\"可以表达为\",{\"1\":{\"1281\":1}}],[\"可以由两个下标\",{\"1\":{\"1287\":1}}],[\"可以由\",{\"1\":{\"1276\":2}}],[\"可以无限件使用\",{\"1\":{\"1276\":1}}],[\"可以理解为装满背包大小为0的背包需要1个方法\",{\"1\":{\"1275\":1}}],[\"可以理解为指向下一条记录地址的指针\",{\"1\":{\"324\":1}}],[\"可以构造一个\",{\"1\":{\"1274\":1}}],[\"可以写成这样边遍历边进行染色\",{\"1\":{\"1235\":1}}],[\"可以访问的所有节点的列表\",{\"1\":{\"1221\":1}}],[\"可以获得一个比当前以\",{\"1\":{\"1208\":1}}],[\"可以获得更多的上下文信息\",{\"1\":{\"751\":1}}],[\"可以分割成以下子序列\",{\"1\":{\"1198\":2}}],[\"可以记录用户信息\",{\"1\":{\"1101\":1}}],[\"可以发现endpoint如果为none就是视图函数的名称\",{\"1\":{\"1094\":1}}],[\"可以动态的访问相应的对象\",{\"1\":{\"1052\":1}}],[\"可以选择自动创建一定数量的新线程\",{\"1\":{\"1036\":1}}],[\"可以选择mixed模式\",{\"1\":{\"395\":1}}],[\"可以主动向客户端发送消息\",{\"1\":{\"976\":1}}],[\"可以减少整体的响应时间\",{\"1\":{\"975\":1}}],[\"可以只使用\",{\"1\":{\"962\":1}}],[\"可以标识发送出去的数据包中\",{\"1\":{\"952\":1}}],[\"可以方便地用来构建优先队列\",{\"1\":{\"919\":1}}],[\"可以方便地添加或删除处理者\",{\"1\":{\"808\":1}}],[\"可以立即返回并继续执行后续的操作\",{\"1\":{\"898\":1}}],[\"可以被\",{\"0\":{\"824\":1}}],[\"可以创建一个固定大小的deque\",{\"1\":{\"912\":1}}],[\"可以创建一个名为\",{\"1\":{\"782\":1}}],[\"可以创建应用程序\",{\"1\":{\"117\":1}}],[\"可以像其他任何值一样被传递\",{\"1\":{\"776\":2}}],[\"可以给不同的用户提供不同级别的使用权限\",{\"1\":{\"769\":1}}],[\"可以确保异常情况被完整记录\",{\"1\":{\"755\":1}}],[\"可以大幅提升系统的可维护性和故障排查效率\",{\"1\":{\"755\":1}}],[\"可以大大减少回表次数\",{\"1\":{\"420\":1,\"456\":1}}],[\"可以说如果你不会调试程序\",{\"1\":{\"729\":1}}],[\"可以根据当前应用的实际cpu和内存占用来处理\",{\"1\":{\"725\":1}}],[\"可以根据历史数据自动分类时间序列\",{\"1\":{\"635\":1}}],[\"可以降低服务器查询数据库的次数\",{\"1\":{\"698\":1}}],[\"可以降级为recordlock锁\",{\"1\":{\"405\":4}}],[\"可以包含用户标识\",{\"1\":{\"692\":1}}],[\"可以把它想象成一个时钟\",{\"1\":{\"610\":1}}],[\"可以与django\",{\"1\":{\"607\":1}}],[\"可以很好的解决了上述的风险\",{\"1\":{\"971\":1}}],[\"可以很好的解决查数据库很慢的问题\",{\"1\":{\"249\":1}}],[\"可以很方便地添加定时任务功能\",{\"1\":{\"605\":1}}],[\"可以参考下多叉树的遍历\",{\"1\":{\"1220\":1}}],[\"可以参考这个文章flask\",{\"1\":{\"1048\":1}}],[\"可以参考\",{\"1\":{\"600\":1}}],[\"可以指定参数\",{\"1\":{\"595\":1}}],[\"可以保证同一个事务只能读取到比当前版本更早提交的值\",{\"1\":{\"476\":1}}],[\"可以保证每个事务提交的时候\",{\"1\":{\"476\":1}}],[\"可以将节点分成两组\",{\"1\":{\"1236\":1}}],[\"可以将\",{\"1\":{\"469\":1}}],[\"可以将服务映射到\",{\"1\":{\"93\":1}}],[\"可以在出界之后增加一层判断\",{\"1\":{\"1393\":1}}],[\"可以在o\",{\"1\":{\"921\":1}}],[\"可以在\",{\"1\":{\"784\":1,\"1274\":1}}],[\"可以在异常发生时自动记录详细的错误信息\",{\"1\":{\"755\":1}}],[\"可以在每天\",{\"1\":{\"613\":1}}],[\"可以在索引遍历过程中\",{\"1\":{\"455\":1}}],[\"可以在删除之前将\",{\"1\":{\"190\":1}}],[\"可以建立\",{\"1\":{\"451\":1}}],[\"可以看做是之前两个公式的另一种写法\",{\"1\":{\"1393\":1}}],[\"可以看作为两个人的沟通\",{\"1\":{\"952\":1}}],[\"可以看到旧版本确实使用local\",{\"1\":{\"1050\":1}}],[\"可以看到flask这里不仅对于python线程实现了资源隔离\",{\"1\":{\"1049\":1}}],[\"可以看到有时间戳\",{\"1\":{\"504\":1}}],[\"可以看到叶节点包含了完整的数据记录\",{\"1\":{\"414\":1}}],[\"可以看出myisam的索引文件仅仅保存数据记录的地址\",{\"1\":{\"413\":1}}],[\"可以认为当delete一条记录时\",{\"1\":{\"380\":1}}],[\"可以没有子树\",{\"1\":{\"338\":1}}],[\"可以利用innodb较好的缓存能力来提高内存利用率\",{\"1\":{\"310\":1}}],[\"可以采用多版本并发控制\",{\"1\":{\"308\":1}}],[\"可以监视多个描述符\",{\"1\":{\"268\":1,\"269\":1}}],[\"可以使用索引来求出\",{\"1\":{\"1403\":2}}],[\"可以使用两个数据结构来辅助\",{\"1\":{\"1198\":1}}],[\"可以使用字典来辅助\",{\"1\":{\"1198\":1}}],[\"可以使用可变参数和关键字参数\",{\"1\":{\"896\":1}}],[\"可以使用上下文语句\",{\"1\":{\"846\":1,\"1008\":1}}],[\"可以使用with作为上下文管理器\",{\"1\":{\"845\":1,\"1007\":1}}],[\"可以使用代理模式\",{\"1\":{\"769\":1}}],[\"可以使用抽象工厂模式\",{\"1\":{\"767\":1}}],[\"可以使用下面这种方式\",{\"1\":{\"264\":1}}],[\"可以使用yaml来声明对象\",{\"1\":{\"112\":1}}],[\"可以通过连接到这个信号来做一些闪现消息的处理逻辑\",{\"1\":{\"1123\":1,\"1136\":1}}],[\"可以通过连接到这个信号来执行一些与应用上下文相关的清理操作\",{\"1\":{\"1122\":1,\"1135\":1}}],[\"可以通过连接到这个信号来执行一些与应用上下文相关的操作\",{\"1\":{\"1121\":1,\"1134\":1}}],[\"可以通过连接到这个信号来执行一些初始化操作或记录日志\",{\"1\":{\"1114\":1,\"1127\":1}}],[\"可以通过连接到这个信号来处理请求异常并记录错误信息\",{\"1\":{\"1118\":1,\"1131\":1}}],[\"可以通过连接到这个信号来进行一些应用上下文的收尾工作或资源释放操作\",{\"1\":{\"1120\":1,\"1133\":1}}],[\"可以通过连接到这个信号来进行一些收尾工作或资源释放操作\",{\"1\":{\"1119\":1,\"1132\":1}}],[\"可以通过连接到这个信号来进行一些后处理操作\",{\"1\":{\"1117\":1,\"1130\":1}}],[\"可以通过连接到这个信号来进行一些清理操作或处理请求完成后的逻辑\",{\"1\":{\"1115\":1,\"1128\":1}}],[\"可以通过连接到这个信号来修改要渲染的模板或添加一些数据\",{\"1\":{\"1116\":1,\"1129\":1}}],[\"可以通过copyreg模块的pickle函数来定制指定类型对象的拷贝行为\",{\"1\":{\"894\":1}}],[\"可以通过重写类的\",{\"1\":{\"784\":1}}],[\"可以通过参数直接获取对象\",{\"1\":{\"765\":1}}],[\"可以通过第三方转发该调用\",{\"1\":{\"762\":1}}],[\"可以通过第三方插件实现\",{\"1\":{\"607\":1}}],[\"可以通过构建多层级的时间轮来扩展其适用范围\",{\"1\":{\"611\":1}}],[\"可以通过设置\",{\"1\":{\"503\":1}}],[\"可以通过配置下面的参数设置进行关闭\",{\"1\":{\"460\":1}}],[\"可以通过辅助键来获取数据\",{\"1\":{\"440\":1}}],[\"可以通过\",{\"1\":{\"260\":1}}],[\"可以通过指定\",{\"1\":{\"92\":1}}],[\"可以容纳下\",{\"1\":{\"513\":1}}],[\"可以容纳\",{\"1\":{\"227\":1}}],[\"可以成功执行到进程正常结束\",{\"1\":{\"196\":1}}],[\"可以有返回值\",{\"1\":{\"848\":1,\"1009\":1}}],[\"可以有序地且体面地终止\",{\"1\":{\"190\":1}}],[\"可以有多个pod\",{\"1\":{\"114\":1}}],[\"可以清理所有由其创建的\",{\"1\":{\"186\":1}}],[\"可以进一步扩容\",{\"1\":{\"159\":1}}],[\"可以继续缩容旧有的\",{\"1\":{\"159\":1}}],[\"可以独立使用\",{\"1\":{\"177\":1}}],[\"可以独立跑一个pod\",{\"1\":{\"125\":1}}],[\"可以独立于使用它们的\",{\"1\":{\"76\":1}}],[\"可以高效地查询和监听kubernetes对象\",{\"1\":{\"120\":1}}],[\"可以以多种方式使用\",{\"1\":{\"116\":1}}],[\"可以提供负载均衡\",{\"1\":{\"95\":1}}],[\"可以查阅不带选择算符的\",{\"1\":{\"86\":1}}],[\"可以定位流程中的瓶颈\",{\"1\":{\"58\":1}}],[\"可以帮助团队做出更加明智的决策\",{\"1\":{\"26\":1}}],[\"可合并文化\",{\"1\":{\"55\":1}}],[\"可维护性差\",{\"1\":{\"1142\":1}}],[\"可维护性和用户体验\",{\"1\":{\"540\":1}}],[\"可维护性\",{\"1\":{\"51\":1}}],[\"可维护的代码\",{\"1\":{\"31\":1}}],[\"可能记起来会比较复杂当然也可以记住一个口诀就是左加右减\",{\"1\":{\"1395\":1}}],[\"可能的最大和\",{\"1\":{\"1365\":1}}],[\"可能的二分法\",{\"0\":{\"1237\":1}}],[\"可能感觉很难培养\",{\"1\":{\"1360\":1}}],[\"可能我们就发现不了我们使用的贪心\",{\"1\":{\"1358\":1}}],[\"可能发现问题的\",{\"1\":{\"1189\":1}}],[\"可能存在一系列连续的检查或者处理步骤\",{\"1\":{\"804\":1}}],[\"可能失败的代码\",{\"1\":{\"658\":1}}],[\"可能需要保留原始异常信息的同时\",{\"1\":{\"744\":1}}],[\"可能需要打补丁\",{\"1\":{\"665\":1,\"669\":1}}],[\"可能需要加入人工审核步骤\",{\"1\":{\"616\":1}}],[\"可能需要额外处理\",{\"1\":{\"599\":1}}],[\"可能显得过于重量级\",{\"1\":{\"605\":1}}],[\"可能引发竞争条件\",{\"1\":{\"599\":1}}],[\"可能有的同学会有疑问\",{\"1\":{\"469\":1}}],[\"可能会有多个正确的顺序\",{\"1\":{\"1242\":1}}],[\"可能会有些\",{\"1\":{\"606\":1}}],[\"可能会影响性能\",{\"1\":{\"809\":1}}],[\"可能会导致同样语句锁住更大的范围\",{\"1\":{\"482\":1}}],[\"可能会导致数据丢失\",{\"1\":{\"468\":1}}],[\"可能会增加误判率\",{\"1\":{\"244\":1}}],[\"可能出现页只写了一部分的情况\",{\"1\":{\"468\":1}}],[\"可能造成查询比较慢\",{\"1\":{\"442\":1}}],[\"可能数据比较稀疏\",{\"1\":{\"442\":1}}],[\"可能导致索引失效\",{\"1\":{\"416\":1}}],[\"可能导致最多1秒的aof记录丢失\",{\"1\":{\"260\":1}}],[\"可能进入需要人工干预\",{\"1\":{\"190\":1}}],[\"可能希望将其暴露给\",{\"1\":{\"93\":1}}],[\"可能反映团队对测试重视不足或代码设计缺陷\",{\"1\":{\"58\":1}}],[\"可能因大量变更堆积而难以定位问题\",{\"1\":{\"51\":1}}],[\"可能是质量内建文化尚未建立\",{\"1\":{\"34\":1}}],[\"可能是团队对技术投资缺乏共识\",{\"1\":{\"34\":1}}],[\"可能是信息不透明或责任不清\",{\"1\":{\"34\":1}}],[\"可运行的整体\",{\"1\":{\"50\":1}}],[\"可信赖的过程\",{\"1\":{\"46\":1}}],[\"可追溯的自动化操作\",{\"1\":{\"39\":1}}],[\"可持续地快速发布软件服务\",{\"1\":{\"18\":1}}],[\"通信的效率就越低\",{\"1\":{\"959\":1}}],[\"通信的库\",{\"1\":{\"673\":1}}],[\"通用的变量名缩写\",{\"1\":{\"529\":1}}],[\"通用查询日志\",{\"1\":{\"334\":1}}],[\"通配符会导致索引失效\",{\"1\":{\"416\":1}}],[\"通知运维人员\",{\"1\":{\"285\":1}}],[\"通知rdb持久化完成\",{\"1\":{\"257\":1}}],[\"通常有三种写法\",{\"1\":{\"1394\":1}}],[\"通常我们并不会一次处理所有元素\",{\"1\":{\"1022\":1}}],[\"通常使用list\",{\"1\":{\"908\":1}}],[\"通常用于控制生成一个类实例的过程\",{\"1\":{\"903\":1}}],[\"通常用于初始化一个新实例\",{\"1\":{\"903\":1}}],[\"通常用cls表示\",{\"1\":{\"900\":1}}],[\"通常情况下\",{\"1\":{\"805\":1,\"900\":1}}],[\"通常来自第三方或遗留系统\",{\"1\":{\"799\":1}}],[\"通常需要结合多种工具和技术来构建一个全面的监控和告警体系\",{\"1\":{\"633\":1}}],[\"通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存\",{\"1\":{\"970\":1}}],[\"通常这部分\",{\"1\":{\"264\":1}}],[\"通常这些端点是\",{\"1\":{\"86\":1}}],[\"通常是在元素中包含或绑定比较逻辑\",{\"1\":{\"920\":1}}],[\"通常是\",{\"1\":{\"98\":1}}],[\"通常会被分配随机\",{\"1\":{\"87\":1}}],[\"通常由你定义的选择算符来确定\",{\"1\":{\"86\":1}}],[\"通常由专门的测试团队来执行\",{\"1\":{\"23\":1}}],[\"通过调整搜索范围来逼近目标值的开始位置\",{\"1\":{\"1395\":1}}],[\"通过调度适当的处理程序来响应\",{\"1\":{\"270\":1}}],[\"通过确定目标元素所在的区间范围\",{\"1\":{\"1389\":1}}],[\"通过删除字母匹配到字典里最长单词\",{\"0\":{\"1380\":1}}],[\"通过n\",{\"1\":{\"1341\":1}}],[\"通过传过来的参数运行函数\",{\"1\":{\"1189\":1}}],[\"通过传入library\",{\"1\":{\"1188\":1}}],[\"通过library和method\",{\"1\":{\"1189\":1}}],[\"通过关键字名称获取可执行对象\",{\"1\":{\"1188\":1}}],[\"通过扩展\",{\"1\":{\"1162\":1}}],[\"通过类和命名空间分离不同功能\",{\"1\":{\"1154\":1}}],[\"通过类来组织视图\",{\"1\":{\"1143\":1}}],[\"通过继承和混入\",{\"1\":{\"1143\":1}}],[\"通过继承复用代码\",{\"1\":{\"546\":1}}],[\"通过源码可以发现\",{\"1\":{\"1094\":1}}],[\"通过生成器表达式来生成\",{\"1\":{\"1024\":1}}],[\"通过算数和集合操作得到counter对象将删除计数值小于1的元素\",{\"1\":{\"947\":1}}],[\"通过heapq模块\",{\"1\":{\"921\":1}}],[\"通过维护一个大小为k的最小堆\",{\"1\":{\"921\":1}}],[\"通过维护一个dict来实现线程隔离\",{\"1\":{\"853\":1}}],[\"通过这种方式\",{\"1\":{\"920\":1}}],[\"通过队列作为中介\",{\"1\":{\"916\":1}}],[\"通过put\",{\"1\":{\"915\":2}}],[\"通过集成int\",{\"1\":{\"902\":1}}],[\"通过集群的内部\",{\"1\":{\"93\":1}}],[\"通过事件循环高效处理数千个并发连接\",{\"1\":{\"1163\":1}}],[\"通过事件循环\",{\"1\":{\"899\":1}}],[\"通过事务的可见性保证事务\",{\"1\":{\"368\":1}}],[\"通过gil\",{\"1\":{\"897\":1}}],[\"通过对原型对象的拷贝\",{\"1\":{\"894\":1}}],[\"通过对这些信息的分析\",{\"1\":{\"26\":1}}],[\"通过构造器创建对象属于两阶段构造\",{\"1\":{\"894\":1}}],[\"通过构建可视化价值流\",{\"1\":{\"32\":1}}],[\"通过flask的源码\",{\"1\":{\"856\":1}}],[\"通过定义一个用于创建对象的接口\",{\"1\":{\"788\":1}}],[\"通过装饰器也可以很容易地实现单例模式\",{\"1\":{\"783\":1}}],[\"通过远程代理\",{\"1\":{\"769\":1}}],[\"通过在except块内使用logging\",{\"1\":{\"755\":1}}],[\"通过精细的日志管理\",{\"1\":{\"755\":1}}],[\"通过多进程模型\",{\"1\":{\"721\":1}}],[\"通过多态处理不同场景\",{\"1\":{\"546\":1}}],[\"通过代理对象\",{\"1\":{\"706\":1}}],[\"通过锁\",{\"1\":{\"704\":1}}],[\"通过认证可以知道是否在线\",{\"1\":{\"686\":1}}],[\"通过ci\",{\"1\":{\"641\":1}}],[\"通过系统的复盘可以帮助团队识别并改进监控告警机制中的不足之处\",{\"1\":{\"639\":1}}],[\"通过语音呼叫可以更有效地唤醒相关人员并促使他们采取行动\",{\"1\":{\"638\":1}}],[\"通过图形化界面\",{\"1\":{\"634\":1}}],[\"通过非阻塞\",{\"1\":{\"592\":1}}],[\"通过以下步骤\",{\"1\":{\"574\":1}}],[\"通过流量切换降低风险\",{\"1\":{\"556\":1}}],[\"通过循环外层表的行数据\",{\"1\":{\"513\":1}}],[\"通过索引进行分页\",{\"1\":{\"499\":1}}],[\"通过间隙锁解决\",{\"1\":{\"482\":1}}],[\"通过将用户线程映射到cpu\",{\"1\":{\"430\":1}}],[\"通过multiprocessing\",{\"1\":{\"720\":1}}],[\"通过mysqlbinlog工具来恢复数据\",{\"1\":{\"386\":1}}],[\"通过memcpy函数将脏页复制到内存中的double\",{\"1\":{\"320\":1}}],[\"通过redo\",{\"1\":{\"383\":1}}],[\"通过redis\",{\"1\":{\"260\":1}}],[\"通过read\",{\"1\":{\"371\":1}}],[\"通过解析器语法检查后\",{\"1\":{\"332\":1}}],[\"通过未使用空间\",{\"1\":{\"227\":1}}],[\"通过未使用空间解除了字符串长度和底层数组长度之间的关联\",{\"1\":{\"227\":1}}],[\"通过长度推算下一个元素在什么地方\",{\"1\":{\"218\":1}}],[\"通过牺牲部分读写性能\",{\"1\":{\"217\":1}}],[\"通过\",{\"1\":{\"155\":1,\"368\":1,\"469\":1,\"475\":1,\"553\":1,\"555\":1,\"565\":1,\"567\":1,\"570\":1,\"573\":1,\"590\":2,\"653\":1,\"659\":1,\"665\":1,\"682\":1,\"714\":1,\"756\":1,\"952\":1,\"1052\":1,\"1069\":1,\"1071\":1,\"1076\":2,\"1078\":1,\"1082\":2,\"1087\":1,\"1089\":1,\"1144\":1,\"1146\":1,\"1155\":1,\"1173\":1,\"1266\":1,\"1354\":1}}],[\"通过接口调用删除容器所在\",{\"1\":{\"135\":1}}],[\"通过文件名或stdin将配置应用到资源\",{\"1\":{\"124\":1}}],[\"通过创建应用程序实例并确保它们在集群节点中的运行实例个数\",{\"1\":{\"117\":1}}],[\"通过发布\",{\"1\":{\"117\":2}}],[\"通过一组\",{\"1\":{\"116\":1}}],[\"通过返回\",{\"1\":{\"93\":1}}],[\"通过每个节点上的\",{\"1\":{\"93\":1}}],[\"通过分析构建失败的类型和频率\",{\"1\":{\"58\":1}}],[\"通过docker容器或云平台模板定义环境配置\",{\"1\":{\"57\":1}}],[\"通过测试的代码是安全的\",{\"1\":{\"55\":1}}],[\"通过自动化测试和代码审查\",{\"1\":{\"55\":1}}],[\"通过自动化测试在代码提交后立即运行\",{\"1\":{\"51\":1}}],[\"通过terraform或cloudformation定义环境配置\",{\"1\":{\"44\":1}}],[\"通过日志\",{\"1\":{\"43\":1}}],[\"通过快速构建和测试\",{\"1\":{\"39\":1}}],[\"通过快速交付的成果证明协作的价值\",{\"1\":{\"33\":1}}],[\"通过持续改进实现整体进化\",{\"1\":{\"34\":1}}],[\"通过培训\",{\"1\":{\"33\":1}}],[\"通过学习这些原则\",{\"1\":{\"26\":1}}],[\"书中建议\",{\"1\":{\"56\":1}}],[\"书中强调\",{\"1\":{\"44\":1,\"52\":1,\"57\":1}}],[\"书中强调了不仅要监测应用本身的性能指标\",{\"1\":{\"26\":1}}],[\"书中观点\",{\"1\":{\"43\":1}}],[\"书中指出\",{\"1\":{\"38\":1,\"50\":1}}],[\"书中对此提供了深刻的洞见\",{\"1\":{\"53\":1}}],[\"书中对此也提供了深刻的洞见\",{\"1\":{\"41\":1}}],[\"书中对\",{\"1\":{\"37\":1}}],[\"书中提到\",{\"1\":{\"40\":1,\"51\":1,\"55\":1}}],[\"书中提到的第一个原则是\",{\"1\":{\"23\":1}}],[\"书中提倡通过优化流程\",{\"1\":{\"24\":1}}],[\"在排序数组中查找元素的第一个和最后一个位置\",{\"0\":{\"1400\":1},\"1\":{\"1395\":1}}],[\"在循环体中排除目标元素一定不存在区间\",{\"1\":{\"1394\":1}}],[\"在循环体中找到元素后直接返回结果\",{\"1\":{\"1394\":1}}],[\"在进行区间范围选择的时候\",{\"1\":{\"1394\":1}}],[\"在区间\",{\"1\":{\"1390\":1}}],[\"在柠檬水摊上\",{\"1\":{\"1366\":1}}],[\"在任意次数的移动中离开网格边界的陆地单元格的数量\",{\"1\":{\"1354\":1}}],[\"在任务执行完毕后\",{\"1\":{\"1036\":1}}],[\"在路径上\",{\"1\":{\"1348\":1}}],[\"在dfs中其实就是回溯的过程\",{\"1\":{\"1345\":1}}],[\"在devops实践中\",{\"1\":{\"624\":1,\"638\":1}}],[\"在学习二叉树时候bfs的出现频率更高\",{\"1\":{\"1345\":1}}],[\"在学习回溯算法的时候就看到有的题解中提到了dfs\",{\"1\":{\"1345\":1}}],[\"在下标\",{\"1\":{\"1341\":1}}],[\"在下图中标记为\",{\"1\":{\"1303\":2}}],[\"在数组中找到目标值\",{\"1\":{\"1399\":1}}],[\"在数字的二进制表示中\",{\"1\":{\"1341\":1}}],[\"在数据更新提交的时候才会进行冲突检测\",{\"1\":{\"403\":1}}],[\"在数据修改的时候\",{\"1\":{\"380\":1}}],[\"在数据库中为了实现高并发的数据访问\",{\"1\":{\"368\":1}}],[\"在数据页的user\",{\"1\":{\"324\":1}}],[\"在使用或|运算计算每位1的影响值\",{\"1\":{\"1339\":1}}],[\"在使用二维数组的时候\",{\"1\":{\"1273\":1}}],[\"在两条独立的水平线上按给定的顺序写下\",{\"1\":{\"1309\":1}}],[\"在移除非字母数字字符之后\",{\"1\":{\"1297\":1}}],[\"在此情况下\",{\"1\":{\"1377\":1}}],[\"在此处卖出\",{\"1\":{\"1292\":2}}],[\"在此处买入\",{\"1\":{\"1292\":2}}],[\"在此期间\",{\"1\":{\"171\":1}}],[\"在卖出它之前你就不能再继续购买股票了\",{\"1\":{\"1292\":1}}],[\"在满足以下约束条件下\",{\"1\":{\"1292\":1}}],[\"在满足需求的前提下越短越好\",{\"1\":{\"349\":1}}],[\"在第\",{\"1\":{\"1292\":22}}],[\"在原数组里被\",{\"1\":{\"1287\":1}}],[\"在index未知剩余rest个披萨的情况下可以获得的最多披萨个数\",{\"1\":{\"1282\":1}}],[\"在iss范围内唯一\",{\"1\":{\"696\":1}}],[\"在选修某些课程之前需要一些先修课程\",{\"1\":{\"1241\":1}}],[\"在选择合适的库之前\",{\"1\":{\"607\":1}}],[\"在在同一个集合\",{\"1\":{\"1230\":1}}],[\"在图的遍历过程中\",{\"1\":{\"1220\":1}}],[\"在无向图中\",{\"1\":{\"1218\":1}}],[\"在tail中的位置\",{\"1\":{\"1207\":1}}],[\"在判断是否自成顺子\",{\"1\":{\"1198\":1}}],[\"在判断是否可以自成顺子\",{\"1\":{\"1198\":1}}],[\"在robot中多处源码都有出现\",{\"1\":{\"1194\":1}}],[\"在rr隔离级别\",{\"1\":{\"405\":1}}],[\"在当前上下文中运行\",{\"1\":{\"1194\":1}}],[\"在当前上下文环境中它是\",{\"1\":{\"847\":1,\"1009\":1}}],[\"在看robotframework源码中总是发现有visit这个单词\",{\"1\":{\"1177\":1}}],[\"在长连接和实时通信中表现更优\",{\"1\":{\"1163\":1}}],[\"在高并发场景下性能受限\",{\"1\":{\"1163\":1}}],[\"在请求上下文时调用pop时执行的\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"在请求执行过程中出现异常时执行\",{\"1\":{\"1118\":1,\"1131\":1}}],[\"在调用flask中的消息闪现\",{\"1\":{\"1123\":1,\"1136\":1}}],[\"在调用生成器运行的过程中\",{\"1\":{\"1021\":1}}],[\"在应用上下文被pop时执行\",{\"1\":{\"1122\":1,\"1135\":1}}],[\"在应用上下文被push时执行\",{\"1\":{\"1121\":1,\"1134\":1}}],[\"在应用中调用任务\",{\"1\":{\"652\":1}}],[\"在模板渲染之后执行\",{\"1\":{\"1117\":1,\"1130\":1}}],[\"在模板渲染之前执行\",{\"1\":{\"1116\":1,\"1129\":1}}],[\"在多应用的情况下\",{\"1\":{\"1052\":1}}],[\"在多线程环境中\",{\"1\":{\"579\":1}}],[\"在拥有共享数据的多条线程并行执行的程序中\",{\"1\":{\"1031\":1}}],[\"在内函数中\",{\"1\":{\"992\":1}}],[\"在内存中进行排序\",{\"1\":{\"507\":1,\"521\":1}}],[\"在类定义中\",{\"1\":{\"985\":1}}],[\"在函数内部\",{\"1\":{\"985\":1}}],[\"在函数中创建的变量\",{\"1\":{\"983\":1}}],[\"在互联网早期的时候只是简单的字符文字\",{\"1\":{\"966\":1}}],[\"在迭代器中就会有多少\",{\"1\":{\"945\":1}}],[\"在异步视图中\",{\"1\":{\"1078\":1}}],[\"在异步编程领域\",{\"1\":{\"924\":1}}],[\"在异步操作中\",{\"1\":{\"898\":1}}],[\"在操作系统和网络通信等领域\",{\"1\":{\"921\":1}}],[\"在最小堆中\",{\"1\":{\"919\":1}}],[\"在最底层的时间轮里设置较短的基本时间单位\",{\"1\":{\"611\":1}}],[\"在涉及多线程或多进程的并发程序设计中\",{\"1\":{\"914\":1}}],[\"在大规模数据处理时效率极低\",{\"1\":{\"909\":1}}],[\"在大多数情况下\",{\"1\":{\"900\":1}}],[\"在大多数业务场景下\",{\"1\":{\"287\":1}}],[\"在事件循环中\",{\"1\":{\"899\":2}}],[\"在编程中\",{\"1\":{\"898\":1}}],[\"在计算机中\",{\"1\":{\"898\":1}}],[\"在同步操作中\",{\"1\":{\"898\":1}}],[\"在处理不同品牌的自行车时\",{\"1\":{\"792\":1}}],[\"在处理异常时\",{\"1\":{\"744\":1}}],[\"在其他地方只需要导入此对象即可使用\",{\"1\":{\"782\":1}}],[\"在传统的面向对象编程中\",{\"1\":{\"776\":1}}],[\"在传统开发模式中\",{\"1\":{\"31\":1}}],[\"在被装饰之后你能够在被增强的类上使用增强后的功能\",{\"1\":{\"771\":1}}],[\"在抽象工厂模式中\",{\"1\":{\"767\":1}}],[\"在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类\",{\"1\":{\"766\":1}}],[\"在不触动警报装置的情况下\",{\"1\":{\"1280\":1}}],[\"在不同的\",{\"1\":{\"1040\":1}}],[\"在不了解派生类的情况下\",{\"1\":{\"762\":1}}],[\"在不超过配置所允许的连接上限的条件下\",{\"1\":{\"578\":1}}],[\"在性能敏感的代码段\",{\"1\":{\"758\":1}}],[\"在python\",{\"1\":{\"1048\":1}}],[\"在python标准库中\",{\"1\":{\"911\":1}}],[\"在python的设计初期\",{\"1\":{\"897\":1}}],[\"在python的pandas是大名鼎鼎的数据处理模块\",{\"1\":{\"797\":1}}],[\"在python应用中\",{\"1\":{\"758\":1}}],[\"在python程序开发和调试阶段\",{\"1\":{\"756\":1}}],[\"在python中脱离了上下文环境所声明的类\",{\"1\":{\"845\":1,\"1007\":1,\"1048\":1}}],[\"在python中实现单例模式有多种方法\",{\"1\":{\"781\":1}}],[\"在python中实现策略模式通常涉及创建一个接口或基类\",{\"1\":{\"775\":1}}],[\"在python中\",{\"1\":{\"731\":1,\"732\":1,\"745\":1,\"788\":1,\"894\":1,\"899\":1,\"985\":1,\"986\":1}}],[\"在pod中的容器环境内执行命令\",{\"1\":{\"125\":1}}],[\"在点击下个元素的时候如果失败可能会造成失败重来的尴尬局面\",{\"1\":{\"729\":1}}],[\"在到期之前就会始终有效\",{\"1\":{\"698\":1}}],[\"在客户端发起的第二次请求\",{\"1\":{\"689\":1}}],[\"在线游戏\",{\"1\":{\"675\":1}}],[\"在eventlet或gevent模式下\",{\"1\":{\"669\":1}}],[\"在explain的extra列\",{\"1\":{\"415\":1}}],[\"在全局配置中添加\",{\"1\":{\"662\":1}}],[\"在终端执行\",{\"1\":{\"649\":1}}],[\"在现代web应用中\",{\"1\":{\"645\":1}}],[\"在单指标异常检测方面\",{\"1\":{\"635\":1}}],[\"在非工作时间段或特殊情况下\",{\"1\":{\"627\":1}}],[\"在非并发状态下\",{\"1\":{\"425\":1}}],[\"在2023年11月12日产品控制台访问及api调用出现异常\",{\"1\":{\"623\":1}}],[\"在设计目标上有明显的差异\",{\"1\":{\"607\":1}}],[\"在设计工作流流程中存在一个自增长的主键\",{\"1\":{\"443\":1}}],[\"在固定连接数的情况下\",{\"1\":{\"579\":1}}],[\"在状态转换时执行自定义逻辑\",{\"1\":{\"566\":1}}],[\"在实际开发中\",{\"1\":{\"560\":1}}],[\"在实现\",{\"1\":{\"371\":1,\"477\":1}}],[\"在日志打印中注重隐私保护\",{\"1\":{\"536\":1}}],[\"在日常的运维过程中\",{\"1\":{\"506\":1}}],[\"在外层循环扫描\",{\"1\":{\"513\":1}}],[\"在程序入口尽早调用\",{\"0\":{\"594\":1},\"1\":{\"600\":1}}],[\"在程序中进行封装\",{\"1\":{\"507\":1,\"524\":1}}],[\"在程序以批量方式处理数据的时候\",{\"1\":{\"408\":1}}],[\"在去优化sql时\",{\"1\":{\"507\":1}}],[\"在优化之前了解性能瓶颈在哪\",{\"1\":{\"507\":1}}],[\"在对最终的结果集没有影响的前提下\",{\"1\":{\"512\":1}}],[\"在对这些\",{\"1\":{\"506\":1}}],[\"在对一条数据修改的时候\",{\"1\":{\"403\":1}}],[\"在查询记录时\",{\"1\":{\"498\":2}}],[\"在查询时对数据库的io\",{\"1\":{\"301\":1}}],[\"在统计时\",{\"1\":{\"486\":3}}],[\"在未提交事务的数组中\",{\"1\":{\"478\":1}}],[\"在完成\",{\"1\":{\"469\":1}}],[\"在完成double\",{\"1\":{\"320\":1}}],[\"在支持\",{\"1\":{\"456\":1}}],[\"在支持icp优化后\",{\"1\":{\"420\":1}}],[\"在插入新行时或者主键被更新时\",{\"1\":{\"442\":1}}],[\"在settings文件中设置\",{\"1\":{\"662\":1}}],[\"在sql的标准实现上要比mysql完善\",{\"1\":{\"433\":1}}],[\"在spec\",{\"1\":{\"202\":1}}],[\"在表的结构或数据发生改变时\",{\"1\":{\"431\":1}}],[\"在并发状态下\",{\"1\":{\"425\":1}}],[\"在关系型数据库管理系统中\",{\"1\":{\"425\":1}}],[\"在结构上没有任何区别\",{\"1\":{\"413\":1}}],[\"在myisam中\",{\"1\":{\"413\":1}}],[\"在mysql数据库innodb存储引擎中\",{\"1\":{\"380\":1}}],[\"在修改数据之前先锁定\",{\"1\":{\"403\":1}}],[\"在某一个节点设置个转发\",{\"1\":{\"1093\":1}}],[\"在某些系统中\",{\"1\":{\"804\":1}}],[\"在某些方面\",{\"1\":{\"797\":1}}],[\"在某些情况下\",{\"1\":{\"609\":1,\"920\":1}}],[\"在某些情况下会导致主从数据不一致\",{\"1\":{\"394\":1}}],[\"在某些场景下\",{\"1\":{\"420\":1,\"456\":1}}],[\"在某个时间节点\",{\"1\":{\"249\":1}}],[\"在xxx数据页上做了xxx修改\",{\"1\":{\"390\":1}}],[\"在主库中开启binlog功能\",{\"1\":{\"386\":1}}],[\"在一个长度为\",{\"1\":{\"1282\":1}}],[\"在一个由\",{\"1\":{\"1202\":1}}],[\"在一个内部函数中\",{\"1\":{\"990\":1}}],[\"在一个事务中\",{\"1\":{\"372\":1}}],[\"在一个单独的线程中运行\",{\"1\":{\"270\":1}}],[\"在一些使用\",{\"1\":{\"349\":1}}],[\"在执行时还查询了值为\",{\"1\":{\"349\":1}}],[\"在相同数量的总元素个数下\",{\"1\":{\"341\":1}}],[\"在bufferpool的page页刷新到磁盘真正的位置前\",{\"1\":{\"320\":1}}],[\"在绝大多数情况下\",{\"1\":{\"311\":1}}],[\"在aof\",{\"1\":{\"260\":1}}],[\"在存储上非常紧凑\",{\"1\":{\"255\":1,\"256\":1}}],[\"在存储数据很小的情况下\",{\"1\":{\"218\":1}}],[\"在低版本的redis中\",{\"1\":{\"224\":1}}],[\"在哪里查看\",{\"1\":{\"210\":1}}],[\"在job执行完后\",{\"1\":{\"198\":1}}],[\"在job执行完时马上删除\",{\"1\":{\"198\":1}}],[\"在默认\",{\"1\":{\"190\":1}}],[\"在每一天\",{\"1\":{\"1292\":1}}],[\"在每个请求结束后执行\",{\"1\":{\"1115\":1,\"1128\":1}}],[\"在每个请求到来之前执行\",{\"1\":{\"1114\":1,\"1127\":1}}],[\"在每个节点上运行监控守护进程\",{\"1\":{\"187\":1}}],[\"在每个节点上运行日志收集守护进程\",{\"1\":{\"187\":1}}],[\"在每个节点上运行集群的存储守护进程\",{\"1\":{\"187\":1}}],[\"在每次定期同步时都会检查所挂载的\",{\"1\":{\"74\":1}}],[\"在这里算不同的组合\",{\"1\":{\"1275\":1}}],[\"在这里我们调用外函数传入参数5\",{\"1\":{\"992\":1}}],[\"在这里也分享一下\",{\"1\":{\"740\":1}}],[\"在这样的队列中\",{\"1\":{\"918\":1}}],[\"在这种意义上\",{\"1\":{\"797\":1}}],[\"在这种情况下\",{\"1\":{\"181\":1,\"578\":1,\"1292\":3,\"1313\":1}}],[\"在这个示例中\",{\"1\":{\"792\":1}}],[\"在这个例子中\",{\"1\":{\"790\":1,\"925\":1}}],[\"在这个格子上用一个链表来保存要执行的超时任务\",{\"1\":{\"610\":1}}],[\"在这个数据页上做了什么修改\",{\"1\":{\"390\":1}}],[\"在这个数据驱动的时代\",{\"1\":{\"26\":1}}],[\"在新版的kubernetes中建议使用replicaset\",{\"1\":{\"177\":1}}],[\"在金丝雀发布开始后\",{\"1\":{\"171\":1}}],[\"在继续操作多次\",{\"1\":{\"165\":1}}],[\"在创建对象时\",{\"1\":{\"894\":1}}],[\"在创建或修改表时追加主键约束即可\",{\"1\":{\"449\":1}}],[\"在创建时是默认不会处于暂停状态\",{\"1\":{\"163\":1}}],[\"在创建新\",{\"1\":{\"158\":1}}],[\"在准备就绪后立即将被视为可用\",{\"1\":{\"161\":1}}],[\"在没有任意容器崩溃情况下的最小就绪时间\",{\"1\":{\"161\":1}}],[\"在决定关闭容器时\",{\"1\":{\"135\":1}}],[\"在管理容器时\",{\"1\":{\"135\":1}}],[\"在集群上运行一个特定的映像\",{\"1\":{\"124\":1}}],[\"在集群中有个唯一的\",{\"1\":{\"115\":1}}],[\"在kubernetes界面工具\",{\"1\":{\"120\":1}}],[\"在k8s中\",{\"1\":{\"117\":1}}],[\"在容器启动后立刻发送\",{\"1\":{\"135\":1}}],[\"在容器中拷贝文件和目录\",{\"1\":{\"124\":1}}],[\"在容器中执行命令\",{\"1\":{\"124\":1}}],[\"在容器编排之前的时代\",{\"1\":{\"117\":1}}],[\"在容器命令和参数内\",{\"1\":{\"71\":1}}],[\"在\",{\"1\":{\"117\":1,\"144\":1,\"227\":2,\"264\":2,\"323\":1,\"349\":3,\"371\":1,\"372\":2,\"373\":1,\"455\":3,\"469\":1,\"482\":1,\"588\":1,\"599\":1,\"651\":1,\"662\":1,\"784\":1,\"899\":1,\"901\":1,\"958\":1,\"966\":1,\"971\":1,\"1016\":1,\"1021\":1,\"1035\":1,\"1078\":1,\"1207\":1,\"1220\":2,\"1236\":1,\"1274\":1,\"1393\":2}}],[\"在依赖的\",{\"1\":{\"116\":1}}],[\"在二者均被设置时会无法通过合法性检查\",{\"1\":{\"99\":1}}],[\"在负载均衡器将流量定向到引用的服务之前\",{\"1\":{\"97\":1}}],[\"在评估该方法时\",{\"1\":{\"89\":1}}],[\"在只读卷中添加一个文件\",{\"1\":{\"71\":1}}],[\"在资源不足的情况下\",{\"1\":{\"46\":1}}],[\"在我们需要操作资源的时候\",{\"1\":{\"846\":1,\"1008\":1}}],[\"在我们开发中常常会针对于某个异常封装一个特定的异常类\",{\"1\":{\"751\":1}}],[\"在我看来\",{\"1\":{\"46\":1,\"58\":1}}],[\"在我的机器上能跑\",{\"1\":{\"39\":1,\"52\":1}}],[\"在部署后持续监控生产环境\",{\"1\":{\"43\":1}}],[\"在早期阶段拦截缺陷\",{\"1\":{\"40\":1}}],[\"在阅读\",{\"1\":{\"37\":1}}],[\"在持续交付中\",{\"1\":{\"32\":1}}],[\"在追求高效交付的同时\",{\"1\":{\"26\":1}}],[\"在做一个python自动化框架\",{\"1\":{\"0\":1}}],[\"第\",{\"1\":{\"1366\":2,\"1377\":1,\"1384\":1}}],[\"第i件物品的重量是weight\",{\"1\":{\"1270\":1,\"1275\":1}}],[\"第0行和第0列值为1需要进行初始化为1\",{\"1\":{\"1202\":1}}],[\"第五步\",{\"0\":{\"554\":1}}],[\"第一天卖出股票\",{\"1\":{\"1292\":1}}],[\"第一天买入股票\",{\"1\":{\"1292\":1}}],[\"第一道题可以使用使用二维dp数组表示构成最大正方形的最长边长\",{\"1\":{\"1201\":1}}],[\"第一实现多线程\",{\"0\":{\"1051\":1}}],[\"第一行调用\",{\"1\":{\"594\":1}}],[\"第一指的是代码行数过长\",{\"1\":{\"534\":1}}],[\"第一个dp是最长子序列长度\",{\"1\":{\"1288\":1}}],[\"第一个参数规定缓存的数量\",{\"1\":{\"930\":1}}],[\"第一个参数指定第一个返回记录行的偏移量\",{\"1\":{\"498\":1}}],[\"第一个被处理的表就是驱动表\",{\"1\":{\"512\":1}}],[\"第一个字是\",{\"1\":{\"455\":1}}],[\"第一个重大区别是innodb的数据文件本身就是索引文件\",{\"1\":{\"414\":1}}],[\"第一次middle\",{\"1\":{\"1395\":1}}],[\"第一次不持有股票\",{\"1\":{\"1292\":1}}],[\"第一次持有股票\",{\"1\":{\"1292\":1}}],[\"第一次为syn报文\",{\"1\":{\"951\":1}}],[\"第一次读取前生成一个快照\",{\"1\":{\"374\":1}}],[\"第一次读取数据前生成一个readview\",{\"1\":{\"372\":1}}],[\"第一次写\",{\"1\":{\"320\":1,\"469\":1}}],[\"第一种是rdb快照\",{\"1\":{\"255\":1}}],[\"第一步我们需要将边的信息转化为图的信息\",{\"1\":{\"1241\":1}}],[\"第一步定义dp数组含义\",{\"1\":{\"1207\":1}}],[\"第一步\",{\"0\":{\"541\":1},\"1\":{\"108\":1,\"285\":1,\"1103\":1}}],[\"第四步\",{\"0\":{\"551\":1},\"1\":{\"108\":1}}],[\"第三项和第五项\",{\"1\":{\"1384\":1}}],[\"第三方模块\",{\"1\":{\"1051\":1}}],[\"第三方库兼容性\",{\"1\":{\"669\":1}}],[\"第三方库的兼容性\",{\"1\":{\"599\":1}}],[\"第三方库导入\",{\"1\":{\"530\":1}}],[\"第三共同维护一个话题\",{\"1\":{\"952\":1}}],[\"第三次客户端收到服务端的ack确认消息后\",{\"1\":{\"951\":1}}],[\"第三步\",{\"0\":{\"547\":1},\"1\":{\"108\":1,\"285\":1,\"1103\":1}}],[\"第三个原则\",{\"1\":{\"25\":1}}],[\"第二项和第三项\",{\"1\":{\"1384\":1}}],[\"第二有效沟通\",{\"1\":{\"952\":1}}],[\"第二次不持有股票\",{\"1\":{\"1292\":1}}],[\"第二次持有股票\",{\"1\":{\"1292\":1}}],[\"第二次为服务端收到客户端的\",{\"1\":{\"951\":1}}],[\"第二次调用add函数时参数是4\",{\"1\":{\"930\":1}}],[\"第二次写\",{\"1\":{\"320\":1,\"469\":1}}],[\"第二指的是类的功能过于复杂\",{\"1\":{\"534\":1}}],[\"第二个是最长子序列个数\",{\"1\":{\"1288\":1}}],[\"第二个onpath\",{\"1\":{\"1221\":1}}],[\"第二个参数如果设置为true\",{\"1\":{\"930\":1}}],[\"第二个参数指定返回记录行的最大数目\",{\"1\":{\"498\":1}}],[\"第二个与myisam索引的不同是innodb的辅助索引data域存储相应记录主键的值而不是地址\",{\"1\":{\"414\":1}}],[\"第二个原则是\",{\"1\":{\"24\":1}}],[\"第二种是\",{\"1\":{\"255\":1}}],[\"第二步我们需要检测图中每个节点是否存在互相依赖的关系\",{\"1\":{\"1241\":1}}],[\"第二步\",{\"0\":{\"544\":1},\"1\":{\"108\":1,\"285\":1,\"1103\":1}}],[\"还要比上题简单\",{\"1\":{\"1287\":1}}],[\"还要检测数据是否满足条件和排序等\",{\"1\":{\"361\":1}}],[\"还存储\",{\"1\":{\"1219\":1}}],[\"还挺说这个模块的负责人是物理层面的找不到了\",{\"1\":{\"1140\":1}}],[\"还对协程也实现了数据隔离\",{\"1\":{\"1049\":1}}],[\"还对公司的声誉和经济效益造成了不同程度的影响\",{\"1\":{\"623\":1}}],[\"还介绍了如何利用python的一等函数特性来简化这种设计模式的实现\",{\"1\":{\"776\":1}}],[\"还需安装异步框架\",{\"1\":{\"678\":1}}],[\"还需要具备更高的灵活性\",{\"1\":{\"638\":1}}],[\"还需要考虑告警频率控制\",{\"1\":{\"626\":1}}],[\"还需要关注基础设施健康状况\",{\"1\":{\"26\":1}}],[\"还能显著提升故障排查效率\",{\"1\":{\"635\":1}}],[\"还能显著提高客户的满意度\",{\"1\":{\"23\":1}}],[\"还能够及时发现和处理潜在问题\",{\"1\":{\"624\":1}}],[\"还会给出两个整数\",{\"1\":{\"1384\":1}}],[\"还会递归的复制对象所关联的对象\",{\"1\":{\"894\":1}}],[\"还会记录到app\",{\"1\":{\"757\":1}}],[\"还会判断undo\",{\"1\":{\"389\":1}}],[\"还会为\",{\"1\":{\"227\":1}}],[\"还有一类就是一些请求处理函数\",{\"1\":{\"1108\":1}}],[\"还有一个随机数的流程\",{\"1\":{\"443\":1}}],[\"还有data数据\",{\"1\":{\"342\":1}}],[\"还有两个是\",{\"1\":{\"312\":1,\"460\":1}}],[\"还把从mysql读取的旧值\",{\"1\":{\"283\":1}}],[\"还可以通过session\",{\"1\":{\"1101\":1}}],[\"还可以当作栈或双端队列使用\",{\"1\":{\"911\":1}}],[\"还可以结合自动化操作平台实现快速响应流程自动化\",{\"1\":{\"627\":1}}],[\"还可以附带日志链接或其他有用信息\",{\"1\":{\"617\":1}}],[\"还可以处理复杂的任务工作流\",{\"1\":{\"605\":1}}],[\"还可以不断地调整新旧两个版本的运行的服务器副本数量\",{\"1\":{\"171\":1}}],[\"还可能导致代码逻辑难以理解和维护\",{\"1\":{\"758\":1}}],[\"还可能导致团队士气低落\",{\"1\":{\"24\":1}}],[\"还可能会引发数据膨胀\",{\"1\":{\"434\":1}}],[\"还是选择写在里面\",{\"1\":{\"1221\":1}}],[\"还是系统触发\",{\"1\":{\"261\":1}}],[\"还是后面测试团队的测试\",{\"1\":{\"58\":1}}],[\"还是提交合并的代码审查\",{\"1\":{\"58\":1}}],[\"还是集成测试\",{\"1\":{\"52\":1}}],[\"还是环境配置问题\",{\"1\":{\"32\":1}}],[\"然而当连接池中没有现成可用的连接对象的时候\",{\"1\":{\"578\":1}}],[\"然而\",{\"1\":{\"23\":1,\"74\":1,\"135\":1,\"578\":1,\"605\":1,\"776\":1,\"790\":1,\"797\":1,\"897\":2}}],[\"然后找到最多numwanted\",{\"1\":{\"1384\":1}}],[\"然后遍历数据用较短的两个边相加和第三个边进行比较\",{\"1\":{\"1379\":1}}],[\"然后返还\",{\"1\":{\"1366\":1}}],[\"然后返回\",{\"1\":{\"1266\":1}}],[\"然后向你付\",{\"1\":{\"1366\":1}}],[\"然后除以3\",{\"1\":{\"1339\":1}}],[\"然后你选择大小为\",{\"1\":{\"1282\":1}}],[\"然后偷窃\",{\"1\":{\"1280\":3}}],[\"然后串联起来得到表达式\",{\"1\":{\"1274\":1}}],[\"然后串联起所有整数\",{\"1\":{\"1274\":1}}],[\"然后将它们一起粉碎\",{\"1\":{\"1274\":1}}],[\"然后将新aof文件重命名为appendonly\",{\"1\":{\"261\":1}}],[\"然后从左到右进行遍历\",{\"1\":{\"1257\":1}}],[\"然后从数据库查询\",{\"1\":{\"283\":1}}],[\"然后使用双指针进行遍历\",{\"1\":{\"1378\":1}}],[\"然后使用tcp\",{\"1\":{\"962\":1}}],[\"然后使用一个或多个except子句来捕获并处理这些异常\",{\"1\":{\"742\":1}}],[\"然后是初始化\",{\"1\":{\"894\":1}}],[\"然后是每秒调用\",{\"1\":{\"388\":1}}],[\"然后创建多个实现了该接口的具体策略类\",{\"1\":{\"776\":1}}],[\"然后把n右移一位\",{\"1\":{\"1341\":1}}],[\"然后把\",{\"1\":{\"1217\":1}}],[\"然后把内函数的引用返回存给了demo\",{\"1\":{\"992\":1}}],[\"然后把yield右边的值返回给send方法的调用者\",{\"1\":{\"735\":1}}],[\"然后把磁盘中对应的页加载到该缓冲页的位置\",{\"1\":{\"319\":1}}],[\"然后用next\",{\"1\":{\"732\":1}}],[\"然后用主键到主索引中检索获得记录\",{\"1\":{\"414\":1}}],[\"然后就构成了jwt的第三部分\",{\"1\":{\"697\":1}}],[\"然后通过header中声明的加密方式进行加密\",{\"1\":{\"697\":1}}],[\"然后通过一个不断前进的指针来触发相应槽位内到期的任务\",{\"1\":{\"610\":1}}],[\"然后配合\",{\"1\":{\"499\":1}}],[\"然后累加\",{\"1\":{\"487\":1}}],[\"然后判断是否为空\",{\"1\":{\"487\":1}}],[\"然后添加我们想要的聚簇索引\",{\"1\":{\"439\":1}}],[\"然后以data域的值为地址\",{\"1\":{\"413\":1}}],[\"然后企图访问表a\",{\"1\":{\"407\":1}}],[\"然后又访问表b\",{\"1\":{\"407\":1}}],[\"然后在装重量大的一个人的\",{\"1\":{\"1378\":1}}],[\"然后在\",{\"1\":{\"405\":1,\"1292\":1}}],[\"然后在id=10的主键索引记录上加x锁\",{\"1\":{\"405\":1}}],[\"然后在slave端对相同的数据进行修改\",{\"1\":{\"393\":1}}],[\"然后会在系统空闲的时候或者是按照设定的更新策略再将日志中的内容更新到磁盘之中\",{\"1\":{\"382\":1}}],[\"然后与存储引擎交互\",{\"1\":{\"332\":1}}],[\"然后根据一些mysql规则进一步检查解析树是否合法\",{\"1\":{\"332\":1}}],[\"然后缓冲页对应的控制块作为value\",{\"1\":{\"319\":1}}],[\"然后写缓存\",{\"1\":{\"288\":1}}],[\"然后删除缓存休眠一段时间\",{\"1\":{\"288\":1}}],[\"然后再去重新遍历地图的时候\",{\"1\":{\"1354\":1}}],[\"然后再找最长的\",{\"1\":{\"1299\":1}}],[\"然后再统计个数\",{\"1\":{\"1288\":1}}],[\"然后再想着优化\",{\"1\":{\"1282\":1}}],[\"然后再进行\",{\"1\":{\"469\":1}}],[\"然后再进行redo\",{\"1\":{\"320\":1}}],[\"然后再根据\",{\"1\":{\"456\":1}}],[\"然后再根据where条件来过滤记录\",{\"1\":{\"420\":2}}],[\"然后再通过系统调用\",{\"1\":{\"388\":1}}],[\"然后再重放增量\",{\"1\":{\"264\":1}}],[\"然后再对新版本做运行状态观察\",{\"1\":{\"171\":1}}],[\"然后逐个序列到aof文件中\",{\"1\":{\"261\":1}}],[\"然后利用定时任务主动刷新缓存\",{\"1\":{\"251\":1}}],[\"然后更新\",{\"1\":{\"181\":1}}],[\"然后对新的\",{\"1\":{\"159\":1}}],[\"然后让k8s根据yaml的声明来创建出这个对象\",{\"1\":{\"112\":1}}],[\"然后被\",{\"1\":{\"69\":1}}],[\"然后\",{\"1\":{\"20\":1,\"782\":1}}],[\"质量保障\",{\"1\":{\"557\":1}}],[\"质量保证往往被视为开发流程的最后一环\",{\"1\":{\"23\":1}}],[\"质量验收\",{\"0\":{\"552\":1}}],[\"质量问题频发\",{\"1\":{\"31\":1}}],[\"质量内建\",{\"0\":{\"23\":1},\"1\":{\"22\":1,\"23\":1,\"40\":1}}],[\"质量达标的软件包\",{\"1\":{\"21\":1}}],[\"三角形的定义\",{\"1\":{\"1379\":1}}],[\"三次\",{\"1\":{\"1339\":2}}],[\"三次握手\",{\"1\":{\"951\":1}}],[\"三个回文子串\",{\"1\":{\"1299\":1}}],[\"三元组\",{\"1\":{\"1289\":1}}],[\"三数之和\",{\"0\":{\"1257\":1}}],[\"三种\",{\"0\":{\"513\":1}}],[\"三种策略\",{\"1\":{\"211\":1}}],[\"三种探针\",{\"0\":{\"146\":1}}],[\"三台机器都要设置\",{\"1\":{\"107\":1}}],[\"三台机器设置组内互信可以互相ping通\",{\"1\":{\"106\":1}}],[\"三重价值\",{\"0\":{\"39\":1}}],[\"三\",{\"0\":{\"22\":1,\"32\":1,\"46\":1,\"58\":1,\"68\":1,\"102\":1,\"108\":1,\"114\":1,\"134\":1,\"142\":1,\"154\":1,\"180\":1,\"212\":1,\"219\":1,\"226\":1,\"233\":1,\"240\":1,\"251\":1,\"258\":1,\"264\":1,\"287\":1,\"295\":1,\"301\":1,\"310\":1,\"333\":1,\"351\":1,\"374\":1,\"384\":1,\"405\":1,\"416\":1,\"440\":1,\"494\":1,\"505\":1,\"531\":1,\"563\":1,\"580\":1,\"593\":1,\"613\":1,\"629\":1,\"654\":1,\"681\":1,\"711\":1,\"735\":1,\"745\":1,\"764\":1,\"771\":1,\"793\":1,\"799\":1,\"806\":1,\"815\":1,\"826\":1,\"834\":1,\"847\":1,\"855\":1,\"862\":1,\"873\":1,\"881\":1,\"888\":1,\"913\":1,\"934\":1,\"953\":1,\"968\":1,\"984\":1,\"998\":1,\"1009\":1,\"1016\":1,\"1023\":1,\"1031\":1,\"1050\":1,\"1065\":1,\"1075\":1,\"1095\":1,\"1104\":1,\"1124\":1,\"1148\":1,\"1172\":1,\"1181\":1,\"1189\":1,\"1219\":1,\"1228\":1,\"1334\":1,\"1360\":1,\"1391\":1,\"1395\":1},\"1\":{\"153\":1}}],[\"即左边界\",{\"1\":{\"1390\":1}}],[\"即冷冻期为\",{\"1\":{\"1292\":1}}],[\"即放物品i\",{\"1\":{\"1273\":1}}],[\"即不放物品i\",{\"1\":{\"1273\":1}}],[\"即不存在自环\",{\"1\":{\"1221\":1}}],[\"即不为正无穷大的元素数量\",{\"1\":{\"1207\":1}}],[\"即从节点\",{\"1\":{\"1221\":1}}],[\"即从磁盘把数据加载到内存的成本\",{\"1\":{\"361\":1}}],[\"即把\",{\"1\":{\"1220\":1}}],[\"即所有线程恢复运行\",{\"1\":{\"1035\":1}}],[\"即所有线程暂停运行\",{\"1\":{\"1035\":1}}],[\"即所有的核都可以调度运行一个线程\",{\"1\":{\"1029\":1}}],[\"即所谓的\",{\"1\":{\"425\":1}}],[\"即将开业\",{\"1\":{\"967\":1}}],[\"即最近最少使用\",{\"1\":{\"929\":1}}],[\"即最大可用内存默认没有设置最大值\",{\"1\":{\"210\":1}}],[\"即通过某种机制使不同的接口或数据源能够协同工作\",{\"1\":{\"797\":1}}],[\"即通过将算法或行为封装起来\",{\"1\":{\"776\":1}}],[\"即在这个例子中\",{\"1\":{\"776\":1}}],[\"即在一个while循环体内持续检查当前时间和预设的执行时间是否匹配\",{\"1\":{\"612\":1}}],[\"即可以把一个信封放到另一个信封里面\",{\"1\":{\"1209\":1}}],[\"即可\",{\"1\":{\"933\":1}}],[\"即可清楚的知道方法的行为\",{\"1\":{\"762\":1}}],[\"即可传输电力\",{\"1\":{\"676\":1}}],[\"即没有触发任何异常\",{\"1\":{\"748\":1}}],[\"即拥有\",{\"1\":{\"732\":1}}],[\"即时消息\",{\"1\":{\"636\":1}}],[\"即时通讯工具\",{\"1\":{\"627\":1,\"638\":1}}],[\"即一个事务内部的操作及使用的数据对其他的并发事务是隔离的\",{\"1\":{\"425\":1}}],[\"即undo\",{\"1\":{\"389\":1}}],[\"即多版本控制\",{\"1\":{\"380\":1}}],[\"即当用到某个数据时\",{\"1\":{\"361\":1}}],[\"即并非每次write操作都会触发实际磁盘操作\",{\"1\":{\"260\":1}}],[\"即如果有容器异常退出\",{\"1\":{\"177\":1}}],[\"即蓝色圆圈\",{\"1\":{\"117\":1}}],[\"即图中的正方体\",{\"1\":{\"117\":1}}],[\"即图上紫色圆柱\",{\"1\":{\"115\":1}}],[\"即图上正方体\",{\"1\":{\"115\":1}}],[\"即使是由相同的字符组成\",{\"1\":{\"1299\":1}}],[\"即使是多进程程序\",{\"1\":{\"1029\":1}}],[\"即使是那些未登录的用户\",{\"1\":{\"118\":1}}],[\"即使在往返时间较长的情况下\",{\"1\":{\"959\":1}}],[\"即使在我们的代码中看起来像是连接被释放了一样\",{\"1\":{\"578\":1}}],[\"即使系统具有多个cpu核心\",{\"1\":{\"897\":1}}],[\"即使我们在程序端不限制并发的数据库连接的数目\",{\"1\":{\"578\":1}}],[\"即使频繁作为查询条件\",{\"1\":{\"507\":1,\"525\":1}}],[\"即使经过aof重写瘦身\",{\"1\":{\"263\":1}}],[\"即使工具自动化程度再高\",{\"1\":{\"54\":1}}],[\"即使流水线自动化程度再高\",{\"1\":{\"42\":1}}],[\"即\",{\"1\":{\"21\":1,\"135\":1,\"165\":1,\"269\":1,\"270\":1,\"278\":1,\"371\":1,\"390\":1,\"477\":1,\"1198\":1,\"1299\":2,\"1324\":3,\"1393\":1}}],[\"测试用例\",{\"1\":{\"1194\":1}}],[\"测试装饰器\",{\"1\":{\"932\":3,\"933\":1}}],[\"测试无缓存时将本行注释掉\",{\"1\":{\"929\":1}}],[\"测试区域001\",{\"1\":{\"882\":1}}],[\"测试两种情况的性能差异\",{\"1\":{\"758\":1}}],[\"测试跨平台兼容性\",{\"1\":{\"725\":1}}],[\"测试环境\",{\"1\":{\"668\":1}}],[\"测试与\",{\"1\":{\"557\":1}}],[\"测试的\",{\"0\":{\"552\":1,\"553\":1}}],[\"测试的深度与广度\",{\"0\":{\"56\":1}}],[\"测试隐私返回值方法\",{\"1\":{\"533\":2}}],[\"测试方法\",{\"1\":{\"531\":1}}],[\"测试和生产的对象\",{\"1\":{\"116\":1}}],[\"测试过载\",{\"1\":{\"56\":1}}],[\"测试标准\",{\"1\":{\"54\":1}}],[\"测试覆盖率\",{\"1\":{\"54\":1}}],[\"测试驱动开发\",{\"0\":{\"551\":1},\"1\":{\"52\":1}}],[\"测试左移\",{\"1\":{\"52\":1}}],[\"测试完成后进行部署\",{\"1\":{\"46\":1}}],[\"测试从流水线中拿到软件包进行测试\",{\"1\":{\"46\":1}}],[\"测试阶段\",{\"1\":{\"40\":1}}],[\"测试团队不再追求\",{\"1\":{\"32\":1}}],[\"测试团队需将测试左移\",{\"1\":{\"31\":1}}],[\"测试结果\",{\"1\":{\"32\":1,\"824\":1}}],[\"测试等环节\",{\"1\":{\"25\":1}}],[\"测试\",{\"1\":{\"21\":1,\"31\":1,\"37\":1,\"39\":2,\"57\":1}}],[\"它由\",{\"1\":{\"1282\":1}}],[\"它边长是由长宽构成\",{\"1\":{\"1201\":1}}],[\"它只是request\",{\"1\":{\"1101\":1}}],[\"它决定的是一个端到端的网络路径\",{\"1\":{\"1093\":1}}],[\"它与条件锁的区别在于一次只能放行全部\",{\"1\":{\"1035\":1}}],[\"它能够将算法与对象结构分离\",{\"1\":{\"1177\":1}}],[\"它能够为数据生成独一无二的\",{\"1\":{\"972\":1}}],[\"它能使接口不兼容的对象能够相互合作\",{\"1\":{\"797\":1}}],[\"它也不会降低网络通信的效率\",{\"1\":{\"959\":1}}],[\"它支持访问缺失键\",{\"1\":{\"940\":1}}],[\"它支持异步地将数据放入队列\",{\"1\":{\"924\":1}}],[\"它有\",{\"1\":{\"1218\":1}}],[\"它有3种创建方法\",{\"1\":{\"940\":1}}],[\"它有两个抽象方法分别用来创建车架和轮胎\",{\"1\":{\"792\":1}}],[\"它确保了关键或紧急的任务能够得到及时处理\",{\"1\":{\"918\":1}}],[\"它确保一个类只有一个实例\",{\"1\":{\"780\":1}}],[\"它克服了列表作为队列使用时的主要瓶颈\",{\"1\":{\"911\":1}}],[\"它代表类的实例本身\",{\"1\":{\"901\":1}}],[\"它负责调度和执行异步任务\",{\"1\":{\"899\":1}}],[\"它负责处理和调度异步任务\",{\"1\":{\"899\":1}}],[\"它负责创建新的实例\",{\"1\":{\"784\":1}}],[\"它在实现客户端接口的同时封装了服务对象\",{\"1\":{\"799\":1}}],[\"它声明了一个上下文用于执行策略的方法\",{\"1\":{\"776\":1}}],[\"它定义了一系列算法\",{\"1\":{\"775\":1}}],[\"它实际上是对工厂方法模式的扩展\",{\"1\":{\"767\":1}}],[\"它实现了迭代协议\",{\"1\":{\"732\":1}}],[\"它降低了客户与实现模块之间的耦合\",{\"1\":{\"762\":1}}],[\"它针对的是程序中的实现和细节\",{\"1\":{\"762\":1}}],[\"它通常是一个密码学随机值\",{\"1\":{\"696\":1}}],[\"它通过引入一个中间件\",{\"1\":{\"797\":1}}],[\"它通过状态\",{\"1\":{\"560\":1}}],[\"它通过频繁的代码集成\",{\"1\":{\"49\":1}}],[\"它通过自动化将代码从开发到生产环境的路径标准化\",{\"1\":{\"38\":1}}],[\"它提供了异步编程的基础设施\",{\"1\":{\"899\":1}}],[\"它提供了一种创建对象的最佳方式\",{\"1\":{\"788\":1}}],[\"它提供了一种在不同设备或同一设备上的进程之间进行网络通信的机制\",{\"1\":{\"674\":1}}],[\"它提供高速存储和检索\",{\"1\":{\"308\":1}}],[\"它使得在\",{\"1\":{\"673\":1}}],[\"它使用单一的工厂类来封装对象创建的过程\",{\"1\":{\"790\":1}}],[\"它使用表空间号+数据页号\",{\"1\":{\"319\":1}}],[\"它使用其基于\",{\"1\":{\"74\":1}}],[\"它将所有任务按照它们预计被执行的时间分散到不同的\",{\"1\":{\"610\":1}}],[\"它将开发\",{\"1\":{\"37\":1}}],[\"它可以将这些处理步骤抽象为独立的对象\",{\"1\":{\"804\":1}}],[\"它可以很好地集成到现有的web应用程序中\",{\"1\":{\"606\":1}}],[\"它可以从undo\",{\"1\":{\"380\":1}}],[\"它表示返回最大的记录行数目\",{\"1\":{\"498\":1}}],[\"它对数据库中数据的改变就应该是永久性的\",{\"1\":{\"425\":1}}],[\"它必须等待用户b释放表b才能继续\",{\"1\":{\"407\":1}}],[\"它会替换掉\",{\"1\":{\"1207\":1}}],[\"它会先获取列\",{\"1\":{\"487\":1}}],[\"它会阻断其他写锁和读锁\",{\"1\":{\"401\":1}}],[\"它会记录一个变动的过程或sql语句的逻辑\",{\"1\":{\"390\":1}}],[\"它记录一条对应相反的update记录\",{\"1\":{\"380\":1}}],[\"它是由原字符串在不改变字符的相对顺序的情况下删除某些字符\",{\"1\":{\"1308\":1}}],[\"它是对某个对象结构中各个元素的操作\",{\"1\":{\"1177\":1}}],[\"它是伴\",{\"1\":{\"1101\":1}}],[\"它是为了方便我们通过endpoint找到url\",{\"1\":{\"1094\":1}}],[\"它是任何报文在网络上存在的最长时间\",{\"1\":{\"955\":1}}],[\"它是字典的子类\",{\"1\":{\"940\":1}}],[\"它是类级别的方法\",{\"1\":{\"903\":1}}],[\"它是实例级别的方法\",{\"1\":{\"903\":1}}],[\"它是在\",{\"1\":{\"900\":1}}],[\"它是一把全局锁\",{\"1\":{\"897\":1}}],[\"它是一种特殊的唯一索引\",{\"1\":{\"449\":1}}],[\"它是一种抽象\",{\"1\":{\"86\":1}}],[\"它是读取class中的keys方法的返回值\",{\"1\":{\"824\":1}}],[\"它是已经确定了责任链的next\",{\"1\":{\"806\":1}}],[\"它是\",{\"1\":{\"380\":1}}],[\"它存放着自己的进程\",{\"1\":{\"334\":1}}],[\"它位于系统表空间\",{\"1\":{\"320\":1,\"469\":1}}],[\"它接听来自客户的电话并将线路转移到适当的联系人\",{\"1\":{\"270\":1}}],[\"它就像公司的电话接线员\",{\"1\":{\"270\":1}}],[\"它就通知该进程\",{\"1\":{\"269\":1}}],[\"它就应该直接被用于该流水线后续阶段的构建过程\",{\"1\":{\"46\":1}}],[\"它的出现频率特别高\",{\"1\":{\"1345\":1}}],[\"它的长度为\",{\"1\":{\"1308\":2}}],[\"它的第\",{\"1\":{\"1292\":2}}],[\"它的作用主要是帮助\",{\"1\":{\"1101\":1}}],[\"它的作用\",{\"1\":{\"952\":1}}],[\"它的组成结构为4部分\",{\"1\":{\"268\":1}}],[\"它的主要目的就是快速响应客户端read请求或灾切换\",{\"1\":{\"264\":1}}],[\"它的默认值是1\",{\"1\":{\"155\":1}}],[\"它作为数据备份的第一选择\",{\"1\":{\"264\":1}}],[\"它很慢\",{\"1\":{\"260\":1}}],[\"它替换了ziplist+linkedlist\",{\"1\":{\"224\":1}}],[\"它不仅能够创建一系列相关或相互依赖的对象\",{\"1\":{\"792\":1}}],[\"它不仅展示了如何使用面向对象的方式实现策略模式\",{\"1\":{\"776\":1}}],[\"它不仅帮助团队实时掌握系统状态\",{\"1\":{\"624\":1}}],[\"它不仅支持简单的任务调度\",{\"1\":{\"605\":1}}],[\"它不仅是技术的胜利\",{\"1\":{\"46\":1}}],[\"它不存储指向上一个链表节点和指向下一个链表节点的指针\",{\"1\":{\"217\":1}}],[\"它不等待nginx\",{\"1\":{\"181\":1}}],[\"它们会争夺水源\",{\"1\":{\"1376\":1}}],[\"它们一定拥有相同的根节点\",{\"1\":{\"1225\":1}}],[\"它们被存储在内置作用域中\",{\"1\":{\"986\":1}}],[\"它们包括\",{\"1\":{\"986\":1}}],[\"它们是python语言的一部分\",{\"1\":{\"986\":1}}],[\"它们是允许对\",{\"1\":{\"116\":1}}],[\"它们并发执行\",{\"1\":{\"925\":1}}],[\"它们允许非阻塞地执行多个任务\",{\"1\":{\"923\":1}}],[\"它们通常一起使用来实现异步编程\",{\"1\":{\"899\":1}}],[\"它们通过各自api技术与mysql建立连接\",{\"1\":{\"331\":1}}],[\"它们也成为告警通知的重要渠道之一\",{\"1\":{\"638\":1}}],[\"它们不仅是理论上的建议\",{\"1\":{\"26\":1}}],[\"它允许程序在执行io操作时不阻塞当前线程或进程\",{\"1\":{\"899\":1}}],[\"它允许我们将耗时操作交给后台执行\",{\"1\":{\"645\":1}}],[\"它允许接收者按照自己的节奏来处理问题\",{\"1\":{\"638\":1}}],[\"它允许\",{\"1\":{\"116\":1}}],[\"它暴露了开发流程中的深层问题\",{\"1\":{\"58\":1}}],[\"它要求团队以终为始\",{\"1\":{\"46\":1}}],[\"它包括构建\",{\"1\":{\"21\":1}}],[\"它深入探讨了如何在现代软件开发环境中实施持续交付\",{\"1\":{\"18\":1}}],[\"勇于尝试\",{\"1\":{\"20\":1}}],[\"最值问题\",{\"1\":{\"1359\":1}}],[\"最多中多少个花\",{\"1\":{\"1376\":1}}],[\"最多删除一个字符\",{\"1\":{\"1298\":1}}],[\"最多交易k次\",{\"1\":{\"1292\":1}}],[\"最多交易2次\",{\"1\":{\"1292\":1}}],[\"最多有\",{\"1\":{\"1274\":1}}],[\"最多\",{\"1\":{\"1274\":1,\"1292\":1,\"1297\":1,\"1384\":1}}],[\"最多只会剩下一块\",{\"1\":{\"1274\":1}}],[\"最多一条\",{\"1\":{\"1229\":1}}],[\"最多信封的个数为\",{\"1\":{\"1209\":1}}],[\"最多能有多少个\",{\"1\":{\"1209\":1}}],[\"最多返回1条或0条数据\",{\"1\":{\"350\":1}}],[\"最长子序列\",{\"0\":{\"1309\":1}}],[\"最长子序列的个数\",{\"1\":{\"1288\":1}}],[\"最长公共子序列是\",{\"1\":{\"1308\":2}}],[\"最长公共子序列\",{\"0\":{\"1308\":1}}],[\"最长重复子数组\",{\"0\":{\"1307\":1}}],[\"最长回文子序列\",{\"1\":{\"1299\":1}}],[\"最长回文子串\",{\"0\":{\"1259\":1},\"1\":{\"1299\":1}}],[\"最长联系递增子序列\",{\"0\":{\"1287\":1}}],[\"最长连续递增序列是\",{\"1\":{\"1287\":2}}],[\"最长连续递增序列\",{\"0\":{\"1287\":1}}],[\"最长递增子序列个数\",{\"0\":{\"1288\":1}}],[\"最长递增子序列的长度是1\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"最长递增子序列的个数\",{\"0\":{\"1208\":1,\"1288\":1}}],[\"最长递增子序列是\",{\"1\":{\"1207\":1,\"1286\":1}}],[\"最长递增子序列\",{\"0\":{\"1206\":1,\"1207\":1,\"1286\":1}}],[\"最长宽高\",{\"1\":{\"1201\":1}}],[\"最长为255个ascii个字符\",{\"1\":{\"696\":1}}],[\"最基本的形式\",{\"1\":{\"915\":1}}],[\"最近添加的元素将是最先被获取的元素\",{\"1\":{\"915\":1}}],[\"最近最久未使用算法\",{\"1\":{\"839\":1,\"1003\":1}}],[\"最近最少使用算法\",{\"1\":{\"838\":1,\"1002\":1}}],[\"最近几年\",{\"1\":{\"623\":1}}],[\"最重要的事情\",{\"1\":{\"629\":1}}],[\"最重要的一步就是去分析这个日志\",{\"1\":{\"504\":1}}],[\"最佳实践\",{\"0\":{\"661\":1,\"1088\":1,\"1155\":1},\"1\":{\"600\":1}}],[\"最好使用第二种写法\",{\"1\":{\"1393\":1}}],[\"最好把堆栈信息打印出来\",{\"1\":{\"532\":1}}],[\"最好的情况消耗的资源\",{\"1\":{\"507\":1}}],[\"最差情况下消耗的资源\",{\"1\":{\"507\":1}}],[\"最简单的是使用redis\",{\"1\":{\"431\":1}}],[\"最终检查left是否指向了目标值\",{\"1\":{\"1395\":1}}],[\"最终结果就是拿走最大数额的钱\",{\"1\":{\"1358\":1}}],[\"最终的球是黑的概率是100\",{\"1\":{\"1328\":1}}],[\"最终的球是黑的概率是0\",{\"1\":{\"1328\":1}}],[\"最终的结果都是一个\",{\"1\":{\"1324\":1}}],[\"最终的结果都会符合接口中关于方法的描述\",{\"1\":{\"762\":1}}],[\"最终所有树高都会是一个常数\",{\"1\":{\"1226\":1}}],[\"最终同样会造成程序异常\",{\"1\":{\"578\":1}}],[\"最终会陷入\",{\"1\":{\"557\":1}}],[\"最终应用系统会越来越慢\",{\"1\":{\"408\":1}}],[\"最终在一个机器上有pod\",{\"1\":{\"125\":1}}],[\"最常见的是myisam和innodb\",{\"1\":{\"333\":1}}],[\"最短就绪时间\",{\"0\":{\"161\":1}}],[\"最大\",{\"1\":{\"1292\":1}}],[\"最大利润为\",{\"1\":{\"1292\":1}}],[\"最大利润\",{\"1\":{\"1292\":2}}],[\"最大矩形如上图所示\",{\"1\":{\"1203\":1}}],[\"最大矩形\",{\"0\":{\"1203\":2}}],[\"最大正方形\",{\"0\":{\"1202\":1}}],[\"最大数\",{\"1\":{\"921\":1}}],[\"最大并发访问量\",{\"1\":{\"813\":1}}],[\"最大连接数\",{\"1\":{\"579\":1}}],[\"最大的子集是\",{\"1\":{\"1274\":1}}],[\"最大的优点之一是其惰性计算特性\",{\"1\":{\"734\":1}}],[\"最大的区别在于\",{\"1\":{\"513\":1}}],[\"最大的好处就是不加锁\",{\"1\":{\"368\":1}}],[\"最大的重试次数\",{\"1\":{\"198\":1}}],[\"最大增量\",{\"1\":{\"166\":1}}],[\"最大峰值\",{\"1\":{\"159\":1}}],[\"最大不可用量\",{\"1\":{\"166\":1}}],[\"最大不可用\",{\"1\":{\"159\":1}}],[\"最小值\",{\"1\":{\"1359\":1}}],[\"最小值是\",{\"1\":{\"147\":5}}],[\"最小路径和\",{\"1\":{\"1303\":1}}],[\"最小的可能重量\",{\"1\":{\"1274\":1}}],[\"最小\",{\"1\":{\"1226\":1}}],[\"最小化可行产品\",{\"1\":{\"18\":1}}],[\"最后检查left是否指向了目标值\",{\"1\":{\"1395\":1}}],[\"最后拿走最大数额的钱就是推出全局最优\",{\"1\":{\"1358\":1}}],[\"最后一个格子的需要的血量\",{\"1\":{\"1303\":1}}],[\"最后一个原则是\",{\"1\":{\"26\":1}}],[\"最后一块石头的重量\",{\"1\":{\"1274\":1}}],[\"最后移除当前的请求上下文\",{\"1\":{\"1104\":1}}],[\"最后上下文pop掉\",{\"1\":{\"1100\":1}}],[\"最后pop掉当前的请求上下文\",{\"1\":{\"1100\":1,\"1104\":1}}],[\"最后把该报文发给客户端\",{\"1\":{\"951\":1}}],[\"最后引用软件大神\",{\"1\":{\"557\":1}}],[\"最后恢复设置主键即可\",{\"1\":{\"439\":1}}],[\"最后删除缓存\",{\"0\":{\"284\":1}}],[\"最后在新增和删除的过程中的更新\",{\"1\":{\"234\":1}}],[\"最后关闭剩下的老版本服务\",{\"1\":{\"171\":1}}],[\"最后别忘记把svc暴露的端口要放行\",{\"1\":{\"96\":1}}],[\"最后\",{\"1\":{\"20\":1,\"1218\":1,\"1274\":1}}],[\"促进团队成员之间的合作\",{\"1\":{\"20\":1}}],[\"让重量少的尽量在一起且有序\",{\"1\":{\"1378\":1}}],[\"让你觉得有思路但是又有点难以下手\",{\"1\":{\"1376\":1}}],[\"让你把一幅图\",{\"1\":{\"1240\":1}}],[\"让你能够提供对象的替代品或其占位符\",{\"1\":{\"769\":1}}],[\"让相互不兼容的类能很好地合作\",{\"1\":{\"800\":1}}],[\"让子类决定实例化哪个产品类对象\",{\"1\":{\"766\":1}}],[\"让它成为上一条yield表达式的求值结果\",{\"1\":{\"735\":1}}],[\"让标准库的阻塞式\",{\"1\":{\"600\":1}}],[\"让代码像一座经久耐用的建筑一样\",{\"1\":{\"540\":1}}],[\"让多次累计生效\",{\"1\":{\"165\":1}}],[\"让k8s读取configmap\",{\"1\":{\"71\":1}}],[\"让应用来读取\",{\"1\":{\"71\":1}}],[\"让测试成为设计的一部分\",{\"1\":{\"52\":1}}],[\"让\",{\"1\":{\"46\":1}}],[\"让我深刻认识到\",{\"1\":{\"46\":1}}],[\"让团队相信\",{\"1\":{\"55\":1}}],[\"让团队在代码提交后几分钟内就能看到结果\",{\"1\":{\"39\":1}}],[\"让团队有一个清晰的方向\",{\"1\":{\"20\":1}}],[\"让业务流程井然有序\",{\"1\":{\"0\":1}}],[\"其余两篇论文每篇被引用\",{\"1\":{\"1403\":1}}],[\"其余所有元素均出现两次\",{\"1\":{\"1340\":1}}],[\"其余每个元素都恰出现\",{\"1\":{\"1339\":2}}],[\"其余每个元素均出现两次\",{\"1\":{\"1336\":2}}],[\"其余抛弃\",{\"1\":{\"499\":1}}],[\"其值等于一个整数自乘的积\",{\"1\":{\"1276\":1}}],[\"其值等于另一个整数的平方\",{\"1\":{\"1276\":1}}],[\"其作用是将输入的字符串反转过来\",{\"1\":{\"1258\":1}}],[\"其作用是用来缓存表数据与索引数据\",{\"1\":{\"318\":1}}],[\"其时间复杂度就是树的高度\",{\"1\":{\"1225\":1}}],[\"其工作原理是\",{\"1\":{\"1177\":1}}],[\"其相关的上下文就在栈顶\",{\"1\":{\"1052\":1}}],[\"其子节点的值\",{\"1\":{\"919\":1}}],[\"其目的是降低类之间的耦合度\",{\"1\":{\"762\":1}}],[\"其核心设计依赖多进程\",{\"1\":{\"714\":1}}],[\"其核心作用是让标准库的阻塞式\",{\"1\":{\"588\":1}}],[\"其状态和转换规则是有限且预先定义的\",{\"1\":{\"561\":1}}],[\"其本质就是减少外层循环的数据数量\",{\"1\":{\"514\":1}}],[\"其优化的思路\",{\"1\":{\"513\":1}}],[\"其它系统变量也是如此\",{\"1\":{\"503\":1}}],[\"其它行不加锁\",{\"1\":{\"482\":1}}],[\"其记录是对应的sql语句\",{\"1\":{\"390\":1}}],[\"其实我也不熟\",{\"1\":{\"1380\":1}}],[\"其实我们并不在乎每棵树的结构长什么样\",{\"1\":{\"1226\":1}}],[\"其实只要回答以上几个问题代码也就随即出来了\",{\"1\":{\"1403\":1}}],[\"其实只要把条件处理清楚了也是比较好做的\",{\"1\":{\"1376\":1}}],[\"其实只需要将高度递减就可以避免同宽的情况了\",{\"1\":{\"1209\":1}}],[\"其实就够了\",{\"1\":{\"1360\":1}}],[\"其实可以发现如果把dp\",{\"1\":{\"1273\":1}}],[\"其实可以总结出来一点就是调测功能\",{\"1\":{\"729\":1}}],[\"其实robot的运行关键字思路也是比较简单的\",{\"1\":{\"1188\":1}}],[\"其实这个设计模式是非常少见的\",{\"1\":{\"1177\":1}}],[\"其实这些方法都是比较常见的了\",{\"1\":{\"1124\":1}}],[\"其实这也是我喜欢这个框架的原因就是我们可以根据自己的需求来自定义框架\",{\"1\":{\"1108\":1}}],[\"其实flask中的自定义扩展点我们可以分为两类\",{\"1\":{\"1108\":1}}],[\"其实并不是非要用栈这种数据格式不可\",{\"1\":{\"1051\":1}}],[\"其实嵌套作用域是一个相对概念\",{\"1\":{\"984\":1}}],[\"其实不然\",{\"1\":{\"941\":1}}],[\"其实抽象工厂也是为了减少工厂方法中的子类和工厂类数量\",{\"1\":{\"767\":1}}],[\"其实看这个标题就是知道\",{\"1\":{\"730\":1}}],[\"其实是因为共享表空间是在\",{\"1\":{\"469\":1}}],[\"其实\",{\"1\":{\"358\":2}}],[\"其性能就越高\",{\"1\":{\"321\":1,\"322\":1}}],[\"其数据特点就是比较适合在内存中使用\",{\"1\":{\"314\":1,\"420\":1,\"460\":1}}],[\"其中恰好有两个元素只出现一次\",{\"1\":{\"1340\":1}}],[\"其中第\",{\"1\":{\"1292\":1}}],[\"其中第一种方式是在设计模式这本书中学习的\",{\"1\":{\"806\":1}}],[\"其中每个节点都有一个介于\",{\"1\":{\"1236\":1}}],[\"其中每个顶点标记从\",{\"1\":{\"1229\":1}}],[\"其中每个元素都有一个优先级\",{\"1\":{\"918\":1}}],[\"其中每棵树表示一个集合\",{\"1\":{\"1225\":1}}],[\"其中节点\",{\"1\":{\"1218\":1}}],[\"其中最长递增子序列为\",{\"1\":{\"1207\":1}}],[\"其中有个重要的属性method\",{\"1\":{\"1188\":1}}],[\"其中也会用到动态生成关键字方面的需求\",{\"1\":{\"1186\":1}}],[\"其中一类是flask的信号机制\",{\"1\":{\"1108\":1}}],[\"其中框架中一些提供出来的方法我们肯定需要了解\",{\"1\":{\"1108\":1}}],[\"其中深蓝色方框是发送窗口\",{\"1\":{\"959\":1}}],[\"其中deepcopy可以通过memo字典来保存已经拷贝过的对象\",{\"1\":{\"894\":1}}],[\"其中thread\",{\"1\":{\"853\":1}}],[\"其中定义了\",{\"1\":{\"782\":1}}],[\"其中特别针对于ui自动化的调测\",{\"1\":{\"729\":1}}],[\"其中就需要用到debug功能来帮助实现流程的调测\",{\"1\":{\"729\":1}}],[\"其中就包含set\",{\"1\":{\"689\":1}}],[\"其中替换为自己的名字\",{\"1\":{\"531\":1}}],[\"其中redo\",{\"1\":{\"425\":1}}],[\"其中aof\",{\"1\":{\"262\":1}}],[\"其中\",{\"1\":{\"227\":1,\"482\":1,\"1209\":1,\"1229\":1,\"1236\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1274\":1,\"1292\":4,\"1313\":1,\"1341\":1,\"1354\":1,\"1366\":1,\"1376\":1,\"1403\":1}}],[\"其可能取值包括\",{\"1\":{\"143\":1}}],[\"其他语言可能会有整型溢出问题\",{\"1\":{\"1393\":1}}],[\"其他房间要么是空的\",{\"1\":{\"1303\":1}}],[\"其他情况都初始化为false\",{\"1\":{\"1299\":1}}],[\"其他条件小写字符\",{\"1\":{\"1297\":1}}],[\"其他位置都是由前面推出来的\",{\"1\":{\"1280\":1}}],[\"其他满足题意但较小的子集包括\",{\"1\":{\"1274\":1}}],[\"其他的就不用解释了\",{\"1\":{\"1281\":1}}],[\"其他的变形问题才能够完全明白\",{\"1\":{\"1270\":1}}],[\"其他的信号定义也都是这样这里就不一一展开了\",{\"1\":{\"1111\":1}}],[\"其他以func结尾的同样也是这样的逻辑\",{\"1\":{\"1062\":1}}],[\"其他线程将被阻塞\",{\"1\":{\"897\":1}}],[\"其他用户可以并发读取数据\",{\"1\":{\"404\":1}}],[\"其他表示长度的地方就不能再用255这个值了\",{\"1\":{\"219\":1}}],[\"其他更新\",{\"1\":{\"165\":1}}],[\"其他\",{\"0\":{\"536\":1},\"1\":{\"124\":1}}],[\"其他kubernetes管理应用程序时所需要的信息\",{\"1\":{\"112\":1}}],[\"其意图是按照对用户有意义的方式来标识kubernetes对象\",{\"1\":{\"120\":1}}],[\"其次在需要的时候定义一个入口\",{\"1\":{\"1111\":1}}],[\"其次把\",{\"1\":{\"951\":1}}],[\"其次python是动态类型语言\",{\"1\":{\"896\":1}}],[\"其次\",{\"1\":{\"20\":1}}],[\"其涉及组织中的多个团队\",{\"1\":{\"18\":1}}],[\"识别出需要改进的地方\",{\"1\":{\"20\":1}}],[\"锚定\",{\"1\":{\"20\":2}}],[\"提示\",{\"1\":{\"1202\":1,\"1203\":1,\"1207\":1,\"1208\":1,\"1209\":1,\"1221\":1,\"1229\":1,\"1230\":1,\"1236\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1276\":1,\"1280\":1,\"1281\":1,\"1282\":1,\"1292\":1,\"1297\":1,\"1299\":2,\"1303\":1,\"1307\":1,\"1308\":1,\"1309\":1,\"1313\":1,\"1336\":1,\"1339\":1,\"1340\":1,\"1341\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1376\":1,\"1379\":1,\"1380\":1,\"1385\":1,\"1390\":1,\"1395\":1,\"1399\":1,\"1400\":1,\"1403\":1}}],[\"提示开发团队检查代码质量\",{\"1\":{\"630\":1}}],[\"提高了i\",{\"1\":{\"923\":1}}],[\"提高内存使用率\",{\"1\":{\"893\":1}}],[\"提高模块的相对独立性\",{\"1\":{\"762\":1}}],[\"提高代码的可读性和可维护性\",{\"1\":{\"762\":1}}],[\"提高系统的稳定性\",{\"1\":{\"762\":1}}],[\"提高服务质量\",{\"1\":{\"632\":1}}],[\"提取句子主干\",{\"1\":{\"412\":1}}],[\"提取多层关键节点\",{\"1\":{\"231\":1}}],[\"提取出链表中关键节点\",{\"1\":{\"231\":1}}],[\"提供以下优势\",{\"1\":{\"1143\":1}}],[\"提供的\",{\"1\":{\"1088\":1}}],[\"提供生成随机数的函数\",{\"1\":{\"986\":1}}],[\"提供正则表达式匹配操作\",{\"1\":{\"986\":1}}],[\"提供操作系统相关功能\",{\"1\":{\"986\":1}}],[\"提供日期和时间处理的类\",{\"1\":{\"986\":1}}],[\"提供数学运算函数\",{\"1\":{\"986\":1}}],[\"提供访问解释器的变量和函数\",{\"1\":{\"986\":1}}],[\"提供关于对象的文档字符串\",{\"1\":{\"986\":1}}],[\"提供给你一个自定义这些类的实例化过程的途径\",{\"1\":{\"902\":1}}],[\"提供代码的稳定性和可扩展性\",{\"1\":{\"762\":1}}],[\"提供统一的错误处理逻辑\",{\"1\":{\"757\":1}}],[\"提供无连接\",{\"1\":{\"675\":1}}],[\"提供可靠\",{\"1\":{\"675\":1}}],[\"提供灵活的任务管理和持久化选项\",{\"1\":{\"607\":1}}],[\"提供查询服务\",{\"1\":{\"492\":1}}],[\"提供多版本控制\",{\"1\":{\"380\":1}}],[\"提供回滚操作\",{\"1\":{\"380\":1}}],[\"提供与mysql服务器建立的支持\",{\"1\":{\"331\":1}}],[\"提供与插件交互的实用程序\",{\"1\":{\"124\":1}}],[\"提供\",{\"1\":{\"198\":1}}],[\"提供了无缝的异步体验\",{\"1\":{\"1173\":1}}],[\"提供了put\",{\"1\":{\"915\":1}}],[\"提供了push\",{\"1\":{\"856\":1}}],[\"提供了更多操作灵活性\",{\"1\":{\"912\":1}}],[\"提供了强大的数据结构如\",{\"1\":{\"797\":1}}],[\"提供了不同类型的执行器来满足不同的并发需求\",{\"1\":{\"607\":1}}],[\"提供了几种不同类型的连接池\",{\"1\":{\"579\":1}}],[\"提供了一种完全不同的方式来管理应用程序\",{\"1\":{\"117\":1}}],[\"提供了\",{\"1\":{\"97\":1}}],[\"提出应该从项目的最初阶段就将质量作为核心考虑因素\",{\"1\":{\"23\":1}}],[\"提问\",{\"1\":{\"20\":2}}],[\"提升了整体的下载效率\",{\"1\":{\"925\":1}}],[\"提升i\",{\"0\":{\"925\":1}}],[\"提升任务并行能力\",{\"1\":{\"714\":1}}],[\"提升应用的响应能力\",{\"1\":{\"645\":1}}],[\"提升性能\",{\"0\":{\"592\":1}}],[\"提升存储和恢复速度\",{\"1\":{\"394\":1}}],[\"提升数据刷新的效率\",{\"1\":{\"382\":1}}],[\"提升效率\",{\"1\":{\"318\":1}}],[\"提升代码质量\",{\"1\":{\"51\":1}}],[\"提升可靠性\",{\"1\":{\"38\":1}}],[\"提升持续交付能力\",{\"1\":{\"18\":1}}],[\"提升用户反馈速度\",{\"1\":{\"18\":1}}],[\"这确保了当left和right相邻时\",{\"1\":{\"1395\":1}}],[\"这其实跟二分查找算法的两种不同思路和三种写法有关\",{\"1\":{\"1394\":1}}],[\"这点明确后我们开始递归五部曲\",{\"1\":{\"1307\":1}}],[\"这道题就把以上的注意点很好的概括出来的\",{\"1\":{\"1395\":1}}],[\"这道题求得是到达右下角的最短路径\",{\"1\":{\"1303\":1}}],[\"这道题其实和打家劫舍也是有点像\",{\"1\":{\"1282\":1}}],[\"这笔交易所能获得利润\",{\"1\":{\"1292\":9}}],[\"这题我一开始使用的回溯算法\",{\"1\":{\"1379\":1}}],[\"这题的特殊点在于可以交易2次\",{\"1\":{\"1292\":1}}],[\"这题因为要求最长递增子序列个数\",{\"1\":{\"1288\":1}}],[\"这题和第一题看起来相似但是差别很大\",{\"1\":{\"1288\":1}}],[\"这下你可以理解它们二者的区别了吧\",{\"1\":{\"1220\":1}}],[\"这表示可以通过添加\",{\"1\":{\"1208\":1}}],[\"这属于\",{\"1\":{\"977\":2}}],[\"这会造成什么情况呢\",{\"1\":{\"952\":1}}],[\"这会导致某一文件的\",{\"1\":{\"268\":1}}],[\"这对应于队列中新元素的加入\",{\"1\":{\"908\":1}}],[\"这对于调试非常有帮助\",{\"1\":{\"756\":1}}],[\"这对于追踪和分析问题原因至关重要\",{\"1\":{\"755\":1}}],[\"这对于释放资源\",{\"1\":{\"749\":1}}],[\"这对于处理大数据集或无限序列特别有用\",{\"1\":{\"734\":1}}],[\"这对于快速迭代和响应市场变化至关重要\",{\"1\":{\"25\":1}}],[\"这两种写法都没有问题\",{\"1\":{\"1393\":1}}],[\"这两道题看起来是比较类似的\",{\"1\":{\"1201\":1}}],[\"这两个公式其实分别等同于之前两个公式\",{\"1\":{\"1393\":1}}],[\"这两个数据是干嘛的\",{\"1\":{\"1221\":1}}],[\"这两个情况是需要又先后顺序的\",{\"1\":{\"1198\":1}}],[\"这两个临时变量就不会释放\",{\"1\":{\"992\":1}}],[\"这两个方法区别在于\",{\"1\":{\"903\":1}}],[\"这两颗\",{\"1\":{\"440\":1}}],[\"这也带来了一些限制和挑战\",{\"1\":{\"897\":1}}],[\"这也就是设计模式中的原型模式\",{\"1\":{\"894\":1}}],[\"这也是我们平时最长遇见的\",{\"1\":{\"629\":1}}],[\"这也是你没有为服务显式指定\",{\"1\":{\"93\":1}}],[\"这肯定大大提高了工作效率\",{\"1\":{\"860\":1}}],[\"这违反了面向对象设计中的开闭原则\",{\"1\":{\"790\":1}}],[\"这段代码更接近于一个简单的查找表或者说是基于函数的一等公民特性实现的轻量级策略模式\",{\"1\":{\"776\":1}}],[\"这显然会带来较大不变\",{\"1\":{\"767\":1}}],[\"这增加了系统的复杂度\",{\"1\":{\"766\":1}}],[\"这意味着第一个房屋和最后一个房屋是紧挨着的\",{\"1\":{\"1280\":1}}],[\"这意味着存在多条路径到达相同的最长递增子序列长度\",{\"1\":{\"1208\":1}}],[\"这意味着通过将\",{\"1\":{\"1208\":1}}],[\"这意味着在等待期间\",{\"1\":{\"923\":1}}],[\"这意味着在多核cpu上\",{\"1\":{\"897\":1}}],[\"这意味着在python中\",{\"1\":{\"897\":1}}],[\"这意味着同一个工厂可以生产多个不同类型的产品\",{\"1\":{\"792\":1}}],[\"这意味着\",{\"1\":{\"748\":1}}],[\"这意味着它不会一次性生成所有数据\",{\"1\":{\"734\":1}}],[\"这使得生产环境中的性能影响最小\",{\"1\":{\"756\":1}}],[\"这使得python中的所有可迭代对象都可以被自然地用于for循环\",{\"1\":{\"731\":1}}],[\"这使得在不同的云或\",{\"1\":{\"130\":1}}],[\"这简直就是神器\",{\"1\":{\"729\":1}}],[\"这可以让生成器变为双向通道\",{\"1\":{\"735\":1}}],[\"这可以包括但不限于电子邮件\",{\"1\":{\"627\":1}}],[\"这可以通过电话\",{\"1\":{\"636\":1}}],[\"这可以通过电子邮件\",{\"1\":{\"617\":1}}],[\"这可以通过发送邮件\",{\"1\":{\"616\":1}}],[\"这几类问题\",{\"1\":{\"425\":1}}],[\"这四个级别可以逐个解决脏读\",{\"1\":{\"425\":1}}],[\"这棵树的叶节点data域保存了完整的数据记录\",{\"1\":{\"414\":1}}],[\"这就死锁就产生了\",{\"1\":{\"407\":1}}],[\"这就是最优值\",{\"1\":{\"1274\":1}}],[\"这就是与期望行为一致的替换\",{\"1\":{\"762\":1}}],[\"这就是替换\",{\"1\":{\"762\":1}}],[\"这就是为什么要小表驱动大表\",{\"1\":{\"507\":1,\"520\":1}}],[\"这就是所谓的预写式技术\",{\"1\":{\"382\":1}}],[\"这就是有名的程序局部性原理\",{\"1\":{\"361\":1}}],[\"这时可以使用一个except块来同时捕获多个异常类型\",{\"1\":{\"743\":1}}],[\"这时也需要引起重视\",{\"1\":{\"632\":1}}],[\"这时如果使用函数返回值可能会有一些意料之外的结果\",{\"1\":{\"533\":1}}],[\"这时写入就是离散的了\",{\"1\":{\"469\":1}}],[\"这时用户a由于用户b已经锁住表b\",{\"1\":{\"407\":1}}],[\"这时就会发生行溢出\",{\"1\":{\"326\":1}}],[\"这时候不能再执行新的更新\",{\"1\":{\"390\":1}}],[\"这时候会被单独分配空间\",{\"1\":{\"326\":1}}],[\"这时候我们的数据库服务会面临非常大的风险\",{\"1\":{\"249\":1}}],[\"这时候我们的请求会全部去查一遍数据库\",{\"1\":{\"249\":1}}],[\"这时候有大量的请求打过来\",{\"1\":{\"249\":1}}],[\"这时\",{\"1\":{\"227\":1,\"1225\":1}}],[\"这是二分查找的一个难点\",{\"1\":{\"1394\":1}}],[\"这是能让孩子们满足胃口的饼干的最小尺寸\",{\"1\":{\"1364\":1}}],[\"这是标准的背包问题\",{\"1\":{\"1270\":1}}],[\"这是不可能的\",{\"1\":{\"1241\":1}}],[\"这是可能的\",{\"1\":{\"1241\":1}}],[\"这是一个标准的后序遍历\",{\"1\":{\"1235\":1}}],[\"这是一种最基础也是最直接的方式\",{\"1\":{\"612\":1}}],[\"这是因为\",{\"1\":{\"1052\":1}}],[\"这是我们所不希望看到的\",{\"1\":{\"932\":1}}],[\"这是finally块\",{\"1\":{\"749\":1}}],[\"这是导致连接被用尽问题最直接的一种原因\",{\"1\":{\"581\":1}}],[\"这是\",{\"1\":{\"579\":1}}],[\"这是sql92\",{\"1\":{\"488\":1}}],[\"这是最基本的索引类型\",{\"1\":{\"447\":1}}],[\"这是linux对文件系统的优化\",{\"1\":{\"260\":1}}],[\"这是典型的\",{\"1\":{\"218\":1}}],[\"这是针对以前没有\",{\"1\":{\"147\":1}}],[\"这在标签用户指南中有描述\",{\"1\":{\"177\":1}}],[\"这样是非常麻烦的\",{\"1\":{\"1303\":1}}],[\"这样每次调用find函数向树根遍历的同时\",{\"1\":{\"1226\":1}}],[\"这样每个节点的父节点就是整棵树的根节点\",{\"1\":{\"1226\":1}}],[\"这样可以取到次低位\",{\"1\":{\"1341\":1}}],[\"这样可以保证最后合成的树rank\",{\"1\":{\"1226\":1}}],[\"这样可以确保后续的数字有更小的目标去匹配\",{\"1\":{\"1207\":1}}],[\"这样可以在尽可能减少树的深度的同时\",{\"1\":{\"338\":1}}],[\"这样又会没有递推关系\",{\"1\":{\"1201\":1}}],[\"这样会引起死锁造成程序的阻塞\",{\"1\":{\"1034\":1}}],[\"这样做的好处是在不改变现有代码的情况下可以轻松地扩展新类型的产品\",{\"1\":{\"791\":1}}],[\"这样做不仅可以帮助我们追踪问题所在\",{\"1\":{\"619\":1}}],[\"这样只用计算一次\",{\"1\":{\"776\":1}}],[\"这样以后就避免了修改客户代码\",{\"1\":{\"765\":1}}],[\"这样在处理异常时\",{\"1\":{\"751\":1}}],[\"这样在宕机重启时\",{\"1\":{\"320\":1,\"469\":1}}],[\"这样不仅可以帮助团队总结经验教训\",{\"1\":{\"637\":1}}],[\"这样既可以保持较高的精度\",{\"1\":{\"611\":1}}],[\"这样日志信息就会被写入到\",{\"1\":{\"503\":1}}],[\"这样从服务器上的数据就和主服务器上的数据相同了\",{\"1\":{\"494\":1}}],[\"这样的划分是错误的\",{\"1\":{\"1385\":1}}],[\"这样的传输方式有一个缺点\",{\"1\":{\"959\":1}}],[\"这样的规则\",{\"1\":{\"613\":1}}],[\"这样的话就可以直接返回索引中的的数据\",{\"1\":{\"415\":1}}],[\"这样的信息可能会被放在\",{\"1\":{\"76\":1}}],[\"这样主库就可以把binlog传递给从库\",{\"1\":{\"386\":1}}],[\"这样一方面线程之前不需要是争抢连接\",{\"1\":{\"358\":2}}],[\"这样就可以通过一个节点\",{\"1\":{\"1217\":1}}],[\"这样就完成了\",{\"1\":{\"867\":1}}],[\"这样就降低了客户代码修改的可能性\",{\"1\":{\"765\":1}}],[\"这样就不需要每次提交事务都实时进行刷脏了\",{\"1\":{\"425\":1}}],[\"这样就会触发隐式类型转换\",{\"1\":{\"416\":1}}],[\"这样就解决了因为反复的创建和销毁连接而带来的性能损耗问题了\",{\"1\":{\"358\":2}}],[\"这样就无法判断究竟是哪个输入产生的\",{\"1\":{\"242\":1}}],[\"这样\",{\"1\":{\"171\":1,\"1225\":1}}],[\"这类方式对于ui自动化测试中有奇效\",{\"1\":{\"757\":1}}],[\"这类工具的优势在于可以迅速触达用户\",{\"1\":{\"638\":1}}],[\"这类的告警一般需要最紧急\",{\"1\":{\"629\":1}}],[\"这类任务会在特定日期和时间启动一次\",{\"1\":{\"613\":1}}],[\"这类报告会在资源状态中体现为\",{\"1\":{\"160\":1}}],[\"这类经典问题\",{\"1\":{\"39\":1}}],[\"这次部署实际的运行的内容\",{\"1\":{\"164\":1}}],[\"这次部署的名字\",{\"1\":{\"125\":1}}],[\"这次部署信息有\",{\"1\":{\"117\":1}}],[\"这提供了一种自我修复机制来解决机器故障或维护问题\",{\"1\":{\"117\":1}}],[\"这个排序有可能不熟\",{\"1\":{\"1380\":1}}],[\"这个可以通过排序实现\",{\"1\":{\"1380\":1}}],[\"这个位置我们是可以种花的\",{\"1\":{\"1376\":1}}],[\"这个孩子会得到满足\",{\"1\":{\"1364\":1}}],[\"这个算法我一开始接触的时候简直就是一脸懵\",{\"1\":{\"1345\":1}}],[\"这个算法的核心在于\",{\"1\":{\"838\":1,\"1002\":1}}],[\"这个判断条件是因为python的特殊性\",{\"1\":{\"1339\":1}}],[\"这个图比较明确点\",{\"1\":{\"1307\":1}}],[\"这个图可能不是连通图\",{\"1\":{\"1236\":1}}],[\"这个公式是正确的\",{\"1\":{\"1307\":1}}],[\"这个题和上一题相比就差别比较大了\",{\"1\":{\"1339\":1}}],[\"这个题是不是和上一题是一致的\",{\"1\":{\"1299\":1}}],[\"这个题目判断的是从一个节点是否存在到达另一个节点的路径\",{\"1\":{\"1229\":1}}],[\"这个比较简单和上面第二个比较类似\",{\"1\":{\"1292\":1}}],[\"这个地方所有的房屋都\",{\"1\":{\"1280\":1}}],[\"这个在链表中使用更加多\",{\"1\":{\"1263\":1}}],[\"这个分成奇数和偶数分别进行判断\",{\"1\":{\"1259\":1}}],[\"这个visited数组可以避免我们走回头路\",{\"1\":{\"1220\":1}}],[\"这个信封就可以放进另一个信封里\",{\"1\":{\"1209\":1}}],[\"这个数列必须是\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"这个数据在lfu算法里会被保留\",{\"1\":{\"839\":1,\"1003\":1}}],[\"这个代码需要注意两点\",{\"1\":{\"1237\":1}}],[\"这个代码相当于from\",{\"1\":{\"1189\":1}}],[\"这个代码表示我们可以利用werkzeug实现一个socket服务\",{\"1\":{\"1064\":1}}],[\"这个method就是keywordcreator调用create的返回值\",{\"1\":{\"1187\":1}}],[\"这个method实际上就是一个可执行的对象\",{\"1\":{\"1187\":1}}],[\"这个其实我们也是可以从源码中发现\",{\"1\":{\"1112\":1}}],[\"这个入口我们什么都没有操作\",{\"1\":{\"1111\":1}}],[\"这个就是一个简单的访问者的示例\",{\"1\":{\"1180\":1}}],[\"这个就是比较简单\",{\"1\":{\"1061\":1}}],[\"这个就像是有一种养成系的感觉\",{\"1\":{\"1108\":1}}],[\"这个配置请求处理函数它的实现逻辑呢\",{\"1\":{\"1062\":1}}],[\"这个方法会调用访问者对当前对象进行访问\",{\"1\":{\"1179\":1}}],[\"这个方法要么返回迭代的下一项\",{\"1\":{\"1025\":1}}],[\"这个方法要在最后一个元素之后需抛出\",{\"1\":{\"1025\":1}}],[\"这个方法通常用于设置对象的初始状态\",{\"1\":{\"901\":1}}],[\"这个模块会包含脚本的代码\",{\"1\":{\"986\":1}}],[\"这个模型不仅提供了一种新的视角来看待软件开发过程\",{\"1\":{\"19\":1}}],[\"这个连接就会在客户端和服务端的进程中一直存在\",{\"1\":{\"962\":1}}],[\"这个连接并不是被销毁了\",{\"1\":{\"578\":1}}],[\"这个新的函数的部分参数已被偏函数确定下来\",{\"1\":{\"934\":1}}],[\"这个新的函数完成已有函数相同的功能\",{\"1\":{\"934\":1}}],[\"这个默认的方法什么也不做\",{\"1\":{\"901\":1}}],[\"这个操作本就是线程隔离的\",{\"1\":{\"855\":1}}],[\"这个操作的复杂度为\",{\"1\":{\"227\":1}}],[\"这个库里有一个local模块\",{\"1\":{\"853\":1}}],[\"这个as\",{\"1\":{\"847\":1,\"1009\":1}}],[\"这个对象不可以被flask的jsonify函数所序列化\",{\"1\":{\"822\":1}}],[\"这个例子应该比较明显了\",{\"1\":{\"758\":1}}],[\"这个是告诉浏览器可以使用本地缓存的资源\",{\"1\":{\"970\":1}}],[\"这个是非常常见的一个技巧\",{\"1\":{\"753\":1}}],[\"这个是由参数\",{\"1\":{\"503\":1}}],[\"这个部分需要base64编码后的header和base64编码后的payload使用\",{\"1\":{\"697\":1}}],[\"这个值相当于向结构化令牌中加入了一个攻击者无法获得的随机熵组件\",{\"1\":{\"696\":1}}],[\"这个响应头\",{\"1\":{\"689\":1}}],[\"这个问题就必须要涉及到session\",{\"1\":{\"687\":1}}],[\"这个按钮可以是一个环境变量或者是数据库表中的字段\",{\"1\":{\"615\":1}}],[\"这个上限等于create\",{\"1\":{\"578\":1}}],[\"这个\",{\"1\":{\"560\":1}}],[\"这个以\",{\"1\":{\"536\":2}}],[\"这个类中有大量的实现方法\",{\"1\":{\"534\":1}}],[\"这个日志会记录下所有修改了数据库的sql\",{\"1\":{\"494\":1}}],[\"这个过程是很短的\",{\"1\":{\"962\":1}}],[\"这个过程\",{\"1\":{\"455\":1}}],[\"这个字段的值是否符合\",{\"1\":{\"455\":1}}],[\"这个字段长度为6个字节\",{\"1\":{\"414\":1}}],[\"这个叫做回表操作\",{\"1\":{\"419\":1}}],[\"这个索引就是覆盖索引\",{\"1\":{\"415\":1}}],[\"这个索引的key是数据表的主键\",{\"1\":{\"414\":1}}],[\"这个属性表示当前记录的类型\",{\"1\":{\"324\":1}}],[\"这个属性标记着当前记录是否被删除\",{\"1\":{\"324\":1}}],[\"这个列表就是\",{\"1\":{\"323\":1}}],[\"这个时候我们需要看i和j之间的距离\",{\"1\":{\"1299\":1}}],[\"这个时候need需要修改为记录那些子序列产生的需求\",{\"1\":{\"1198\":1}}],[\"这个时候解析器就上场了\",{\"1\":{\"360\":1}}],[\"这个时候数据不一致的窗口期为两次删除缓存之间的时间间隔\",{\"1\":{\"288\":1}}],[\"这个时间为缓存数据插入到数据库的两倍\",{\"1\":{\"285\":1}}],[\"这个时间复杂度是\",{\"1\":{\"218\":1}}],[\"这个休眠时间为了保证将数据写入到缓存中\",{\"1\":{\"286\":1}}],[\"这个处理器被称为文件事件处理器\",{\"1\":{\"268\":1}}],[\"这个pod其实本质里面就是一个容器\",{\"1\":{\"125\":1}}],[\"这个pod即使挂了\",{\"1\":{\"117\":1}}],[\"这个实例会被包含在称为\",{\"1\":{\"117\":1}}],[\"这里指的是从右到左寻找\",{\"1\":{\"1403\":1}}],[\"这里指的是所有的节点是否存在相互依赖的关系\",{\"1\":{\"1241\":1}}],[\"这里一旦满足条件就可以证明\",{\"1\":{\"1379\":1}}],[\"这里最长的子序列不一定为最后一个字符结尾的\",{\"1\":{\"1286\":1}}],[\"这里i的范围为n\",{\"1\":{\"1276\":1}}],[\"这里求得是装满背包的最小价值\",{\"1\":{\"1276\":1}}],[\"这里求的是排列问题\",{\"1\":{\"1275\":1}}],[\"这里dp数组长度需要初始化为背包大小\",{\"1\":{\"1275\":1}}],[\"这里课程表的第一题有一点不同的就是这里不仅仅要得到是否可以学完全部的课程还要得到课程的排序\",{\"1\":{\"1242\":1}}],[\"这里需要注意需要遍历所有的节点\",{\"1\":{\"1241\":1}}],[\"这里需要注意我们是使用依赖的关系还是被依赖的关系\",{\"1\":{\"1241\":1}}],[\"这里题目求得是课程之间是否存在相互依赖的关系\",{\"1\":{\"1241\":1}}],[\"这里就不是一个二分图\",{\"1\":{\"1235\":1}}],[\"这里就是可以通过endpoint内部调用flask内部请求\",{\"1\":{\"1094\":1}}],[\"这里所说的\",{\"1\":{\"1225\":1}}],[\"这里只需要遍历一遍图即可知道答案\",{\"1\":{\"1221\":1}}],[\"这里肯定需要数据结构的辅助\",{\"1\":{\"1198\":1}}],[\"这里实际上使用了访问者模式\",{\"1\":{\"1194\":1}}],[\"这里self\",{\"1\":{\"1194\":1}}],[\"这里也就是访问者的意义所在\",{\"1\":{\"1194\":1}}],[\"这里类的实例化比较简单\",{\"1\":{\"1193\":1}}],[\"这里类名必须要和模块名一致\",{\"1\":{\"1189\":1}}],[\"这里调用的就是keywordcreator的create方法\",{\"1\":{\"1187\":1}}],[\"这里返回的是关键字library\",{\"1\":{\"1187\":1}}],[\"这里返回falsk\",{\"1\":{\"680\":1}}],[\"这里我们先要分清在for里面和外面的区别\",{\"1\":{\"1221\":1}}],[\"这里我们需要传入endpoint\",{\"1\":{\"1124\":1}}],[\"这里我们其他的都可以进行忽略只要看以下这个部分就可以了\",{\"1\":{\"1064\":1}}],[\"这里包括session\",{\"1\":{\"1104\":1}}],[\"这里代码跳着截取的\",{\"1\":{\"1094\":1}}],[\"这里相当于执行inner函数\",{\"1\":{\"992\":1}}],[\"这里可以初始化实例的属性\",{\"1\":{\"900\":1}}],[\"这里使用到了一些自定义的基类请参考flask\",{\"1\":{\"888\":1}}],[\"这里使用genvent\",{\"1\":{\"679\":1}}],[\"这里拿flask举例说明\",{\"1\":{\"870\":1}}],[\"这里要注意两点\",{\"1\":{\"755\":1}}],[\"这里简单总结一下\",{\"1\":{\"673\":1}}],[\"这里以redis为例\",{\"1\":{\"647\":1}}],[\"这里以英文字符的ascii码作为比较准则\",{\"1\":{\"414\":1}}],[\"这里\",{\"1\":{\"513\":1,\"791\":1}}],[\"这里设表一共有三列\",{\"1\":{\"413\":1}}],[\"这里的思路和上题不同的是我们需要判断text1\",{\"1\":{\"1308\":1}}],[\"这里的判断条件有问题\",{\"1\":{\"1307\":1}}],[\"这里的一笔交易指买入持有并卖出股票的整个过程\",{\"1\":{\"1292\":1}}],[\"这里的true就是有环\",{\"1\":{\"1242\":1}}],[\"这里的值进行重复添加\",{\"1\":{\"1221\":1}}],[\"这里的self\",{\"1\":{\"1188\":2}}],[\"这里的endpiont就是视图函数和url的中间值\",{\"1\":{\"1063\":1}}],[\"这里的参数就代表这异常信息\",{\"1\":{\"847\":1,\"1009\":1}}],[\"这里的成本主要包括两个方面\",{\"1\":{\"361\":1}}],[\"这里的\",{\"1\":{\"264\":1,\"1353\":1}}],[\"这里是因为\",{\"1\":{\"1348\":1}}],[\"这里是因为迭代器本身是不可逆的\",{\"1\":{\"735\":1}}],[\"这里是在for循环外的\",{\"1\":{\"1221\":1}}],[\"这里是需要先判断是否可以接到其他子序列后面\",{\"1\":{\"1198\":1}}],[\"这里是信号的处理\",{\"1\":{\"1112\":1}}],[\"这里是flask的全部信号\",{\"1\":{\"1111\":1}}],[\"这里是稍微复杂点\",{\"1\":{\"1063\":1}}],[\"这里是jwt\",{\"1\":{\"695\":1}}],[\"这里是和发生hash冲突的数据结构有关\",{\"1\":{\"242\":1}}],[\"这里是用来记录链表长度的\",{\"1\":{\"218\":1}}],[\"这里有可能下载失败\",{\"1\":{\"108\":1}}],[\"这里其实是非常重要的\",{\"1\":{\"46\":1}}],[\"这等同于你请求\",{\"1\":{\"93\":1}}],[\"这适用于\",{\"1\":{\"74\":1}}],[\"这既是对于人的保护\",{\"1\":{\"58\":1}}],[\"这要求打破部门kpi的割裂\",{\"1\":{\"32\":1}}],[\"这要求管理者跳出原有软件交付管理思维模式\",{\"1\":{\"18\":1}}],[\"这不是我的问题\",{\"1\":{\"31\":1}}],[\"这本书使我认识到\",{\"1\":{\"26\":1}}],[\"这包括但不限于构建\",{\"1\":{\"25\":1}}],[\"这些直线需要同时满足满足\",{\"1\":{\"1309\":1}}],[\"这些关键字对象包括library\",{\"1\":{\"1188\":1}}],[\"这些函数在返回模板前调用\",{\"1\":{\"1124\":1,\"1137\":1}}],[\"这些线程最开始都处于阻塞状态\",{\"1\":{\"1036\":1}}],[\"这些内置功能为python编程提供了极大的便利\",{\"1\":{\"986\":1}}],[\"这些内置的变量和函数是python语言的一部分\",{\"1\":{\"986\":1}}],[\"这些内置的变量和函数是python语言的核心组成部分\",{\"1\":{\"986\":1}}],[\"这些局部变量只能在这个作用域内使用\",{\"1\":{\"983\":1}}],[\"这些信息就会丢失\",{\"1\":{\"932\":1}}],[\"这些产品\",{\"1\":{\"916\":1}}],[\"这些队列类内部实现了锁机制\",{\"1\":{\"914\":1}}],[\"这些参数将传递给\",{\"1\":{\"900\":1}}],[\"这些事情都发生在1分50秒之前的10秒钟里\",{\"1\":{\"839\":1,\"1003\":1}}],[\"这些事件不仅影响了用户体验\",{\"1\":{\"623\":1}}],[\"这些都极大地扩展了迭代器的使用范围\",{\"1\":{\"736\":1}}],[\"这些指标直接关系到整个系统的运行效率和服务可用性\",{\"1\":{\"631\":1}}],[\"这些问题肯定需要及时汇报\",{\"1\":{\"629\":1}}],[\"这些连接会在我们的程序结束运行之后自动被销毁\",{\"1\":{\"578\":1}}],[\"这些对数据库的连接是通过一个连接池\",{\"1\":{\"578\":1}}],[\"这些头信息会在后面的一些功能中看到\",{\"1\":{\"324\":1}}],[\"这些变长的数据类型占用的存储空间分为两部分\",{\"1\":{\"323\":1}}],[\"这些额外信息分为3类\",{\"1\":{\"323\":1}}],[\"这些库分别部署在不同的服务器\",{\"1\":{\"303\":1}}],[\"这些限制使得\",{\"1\":{\"227\":1}}],[\"这些相当于一个状态机\",{\"1\":{\"176\":1}}],[\"这些旧\",{\"1\":{\"162\":1}}],[\"这些容器共享存储\",{\"1\":{\"140\":1}}],[\"这些容器构成分配给该节点的\",{\"1\":{\"130\":1}}],[\"这些资源包括\",{\"1\":{\"115\":1}}],[\"这些等待时间不仅降低了工作效率\",{\"1\":{\"24\":1}}],[\"这些原则不仅为提高软件交付的速度和效率提供了指导\",{\"1\":{\"22\":1}}],[\"这种在有序数组中寻找第一个和最后一个位置\",{\"1\":{\"1395\":1}}],[\"这种写法能够防止整型溢出问题\",{\"1\":{\"1393\":1}}],[\"这种写法\",{\"1\":{\"1392\":1}}],[\"这种写法将路由\",{\"1\":{\"542\":1}}],[\"这种有明确的index\",{\"1\":{\"1282\":1}}],[\"这种关系\",{\"1\":{\"1241\":1}}],[\"这种路径压缩的效果如下\",{\"1\":{\"1226\":1}}],[\"这种操作可以改变元素的类或状态\",{\"1\":{\"1177\":1}}],[\"这种边循环边计算的机制\",{\"1\":{\"1022\":1}}],[\"这种做法更加高效\",{\"1\":{\"894\":1}}],[\"这种自由可能是带有一定风险的\",{\"1\":{\"860\":1}}],[\"这种模式是先指定具体的处理者\",{\"1\":{\"806\":1}}],[\"这种模式特别适用于那些需要通过多个步骤来处理请求的情况\",{\"1\":{\"804\":1}}],[\"这种无状态的的好处是快速\",{\"1\":{\"688\":1}}],[\"这种算法是最简单的方案\",{\"1\":{\"513\":1}}],[\"这种分页查询机制\",{\"1\":{\"498\":1}}],[\"这种分层设计体现了\",{\"1\":{\"40\":1}}],[\"这种索引叫做组复合索引\",{\"1\":{\"450\":1}}],[\"这种索引叫做聚集索引\",{\"1\":{\"414\":1}}],[\"这种存储方式非常适合基于主键匹配的查询\",{\"1\":{\"434\":1}}],[\"这种死锁比较常见\",{\"1\":{\"407\":1}}],[\"这种方式是在b站中学习的\",{\"1\":{\"806\":1}}],[\"这种方式的优点在于易于理解和实现\",{\"1\":{\"790\":1}}],[\"这种方式简化了代码结构\",{\"1\":{\"776\":1}}],[\"这种方式虽然可行但是成本比较大\",{\"1\":{\"758\":1}}],[\"这种方式非常常见\",{\"1\":{\"751\":1}}],[\"这种方式通常用于生产环境出现问题时的通知\",{\"1\":{\"638\":1}}],[\"这种方式即使系统崩溃也不会丢失任何数据\",{\"1\":{\"388\":1}}],[\"这种方法虽然实现了功能\",{\"1\":{\"908\":1}}],[\"这种方法的一个潜在问题是在线程环境中可能会出现问题\",{\"1\":{\"784\":1}}],[\"这种方法不仅能有效应对复杂的it环境\",{\"1\":{\"635\":1}}],[\"这种方法不仅能够减少后期修复错误的成本\",{\"1\":{\"23\":1}}],[\"这种方法适用于那些对任务执行顺序有严格要求的应用场景\",{\"1\":{\"609\":1}}],[\"这种技术可以大大减少io操作的频率\",{\"1\":{\"382\":1}}],[\"这种紧凑排列的结构又被称为堆\",{\"1\":{\"324\":1}}],[\"这种的话会出现不一致的时间窗口\",{\"1\":{\"289\":1}}],[\"这种机制的使用需要\",{\"1\":{\"268\":1,\"269\":1}}],[\"这种机制就是\",{\"1\":{\"255\":1}}],[\"这种情况叫做部分写失效\",{\"1\":{\"468\":1}}],[\"这种情况就是redis的缓存击穿\",{\"1\":{\"249\":1}}],[\"这种情况也造成了布隆过滤器的删除问题\",{\"1\":{\"242\":1}}],[\"这种情况下你的总和不是最大的\",{\"1\":{\"1282\":1}}],[\"这种情况下\",{\"1\":{\"120\":1,\"581\":1}}],[\"这种透明不仅让每个人了解自己的工作如何影响整体交付\",{\"1\":{\"32\":1}}],[\"这种全员参与的模式\",{\"1\":{\"31\":1}}],[\"这种\",{\"1\":{\"31\":1,\"32\":1,\"55\":1}}],[\"这种闭环式的反馈机制使得团队能够快速响应变化\",{\"1\":{\"21\":1}}],[\"这一点很重要\",{\"1\":{\"1345\":1}}],[\"这一层拷贝到dp\",{\"1\":{\"1273\":1}}],[\"这一类题目基本上有个比较明显的特征\",{\"1\":{\"1263\":1}}],[\"这一机制不应当被用来作为释放连接资源的手段\",{\"1\":{\"582\":1}}],[\"这一样的现象\",{\"1\":{\"482\":1}}],[\"这一过程会沿着调用栈逐级回溯\",{\"1\":{\"754\":1}}],[\"这一过程打破了传统开发中\",{\"1\":{\"50\":1}}],[\"这一过程本质上是将\",{\"1\":{\"38\":1}}],[\"这一理念的核心载体\",{\"1\":{\"37\":1}}],[\"这一理念彻底改变了我对软件质量的看法\",{\"1\":{\"23\":1}}],[\"这一环强调了通过自动化的手段来加快软件从开发到上线的过程\",{\"1\":{\"21\":1}}],[\"阅读\",{\"1\":{\"19\":1,\"30\":1}}],[\"二维dp数组中的dp\",{\"1\":{\"1273\":1}}],[\"二维数组是没有影响的\",{\"1\":{\"1271\":1}}],[\"二维数组\",{\"0\":{\"1271\":1}}],[\"二分搜索\",{\"0\":{\"1440\":1}}],[\"二分搜索个人总结\",{\"0\":{\"1388\":1}}],[\"二分算法\",{\"2\":{\"1404\":1,\"1405\":1}}],[\"二分算法的前提是数据有序\",{\"1\":{\"1403\":1}}],[\"二分答案法\",{\"0\":{\"1402\":1}}],[\"二分查找位置\",{\"0\":{\"1398\":1}}],[\"二分查找算法的写法中\",{\"1\":{\"1393\":1}}],[\"二分查找中的注意点\",{\"0\":{\"1391\":1}}],[\"二分查找的算法步骤\",{\"0\":{\"1390\":1}}],[\"二分查找的基本算法思想为\",{\"1\":{\"1389\":1}}],[\"二分查找的基本思想是很简单的可能很多小学生都可以思考出来\",{\"1\":{\"1389\":1}}],[\"二分查找定义\",{\"0\":{\"1389\":1}}],[\"二分查找\",{\"1\":{\"1255\":1,\"1390\":1}}],[\"二分查找等具体的技巧\",{\"1\":{\"1255\":1}}],[\"二分图是要求我们获取到该节点和其相邻节点的颜色都不一致\",{\"1\":{\"1235\":1}}],[\"二分图的判定方法\",{\"0\":{\"1235\":1}}],[\"二分图的顶点集可分割为两个互不相交的子集\",{\"1\":{\"1234\":1}}],[\"二分图的定义\",{\"0\":{\"1234\":1}}],[\"二分图\",{\"0\":{\"1233\":1},\"1\":{\"1236\":2},\"2\":{\"1239\":1}}],[\"二分法\",{\"1\":{\"1207\":1},\"2\":{\"1401\":1}}],[\"二叉树\",{\"0\":{\"1427\":1},\"2\":{\"1214\":1,\"1215\":1}}],[\"二叉树的遍历\",{\"0\":{\"1213\":1}}],[\"二者没有可比性\",{\"1\":{\"962\":1}}],[\"二者都应该依赖于抽象\",{\"1\":{\"762\":1}}],[\"二者都消耗磁盘io\",{\"1\":{\"261\":1}}],[\"二是深拷贝可能对原本设计为多个对象共享的数据也进行拷贝\",{\"1\":{\"894\":1}}],[\"二是磁盘上的重做日志文件\",{\"1\":{\"425\":1}}],[\"二进制加1\",{\"1\":{\"1325\":1}}],[\"二进制在python中表示为\",{\"1\":{\"1321\":1}}],[\"二进制格式\",{\"1\":{\"976\":1}}],[\"二进制日志\",{\"1\":{\"334\":1,\"494\":1}}],[\"二进制安全\",{\"1\":{\"227\":1}}],[\"二\",{\"0\":{\"19\":1,\"31\":1,\"41\":1,\"53\":1,\"65\":1,\"94\":1,\"107\":1,\"112\":1,\"125\":1,\"133\":1,\"141\":1,\"153\":1,\"177\":1,\"188\":1,\"199\":1,\"211\":1,\"218\":1,\"225\":1,\"232\":1,\"239\":1,\"250\":1,\"257\":1,\"275\":1,\"280\":1,\"294\":1,\"300\":1,\"309\":1,\"332\":1,\"343\":1,\"350\":1,\"371\":1,\"381\":1,\"404\":1,\"415\":1,\"432\":1,\"439\":1,\"461\":1,\"493\":1,\"499\":1,\"504\":1,\"512\":1,\"519\":1,\"530\":1,\"562\":1,\"579\":1,\"589\":1,\"608\":1,\"624\":1,\"650\":1,\"677\":1,\"707\":1,\"730\":1,\"741\":1,\"763\":1,\"770\":1,\"776\":1,\"781\":1,\"789\":1,\"798\":1,\"805\":1,\"814\":1,\"823\":1,\"828\":1,\"833\":1,\"844\":1,\"854\":1,\"861\":1,\"872\":1,\"880\":1,\"887\":1,\"910\":1,\"931\":1,\"952\":1,\"967\":1,\"983\":1,\"992\":1,\"997\":1,\"1008\":1,\"1015\":1,\"1022\":1,\"1030\":1,\"1049\":1,\"1058\":1,\"1070\":1,\"1094\":1,\"1103\":1,\"1109\":1,\"1145\":1,\"1168\":1,\"1180\":1,\"1188\":1,\"1194\":1,\"1218\":1,\"1227\":1,\"1256\":1,\"1264\":1,\"1275\":1,\"1297\":1,\"1328\":1,\"1346\":1,\"1359\":1,\"1390\":1}}],[\"并返还\",{\"1\":{\"1366\":1}}],[\"并返回其索引\",{\"1\":{\"1399\":1}}],[\"并返回其面积\",{\"1\":{\"1202\":1,\"1203\":1}}],[\"并返回可以绘制的最大连线数\",{\"1\":{\"1309\":1}}],[\"并返回该序列的长度\",{\"1\":{\"1287\":1,\"1299\":1}}],[\"并返回移除后数组的新长度\",{\"1\":{\"1265\":1}}],[\"并输出这个最大数值\",{\"1\":{\"1364\":1}}],[\"并需要回溯\",{\"1\":{\"1347\":1}}],[\"并移除所有非字母数字字符之后\",{\"1\":{\"1297\":1}}],[\"并选择在\",{\"1\":{\"1292\":2}}],[\"并按照它们最初在\",{\"1\":{\"1266\":1}}],[\"并按照既定的安全策略采取行动\",{\"1\":{\"631\":1}}],[\"并使图中的每一条边的两个节点一个来自\",{\"1\":{\"1236\":1}}],[\"并使程序能够更高效地利用系统资源\",{\"1\":{\"899\":1}}],[\"并查集思路\",{\"1\":{\"1229\":1}}],[\"并查集的实现\",{\"0\":{\"1227\":1}}],[\"并查集是一种用于管理元素所属集合的数据结构\",{\"1\":{\"1225\":1}}],[\"并查集\",{\"0\":{\"1224\":1},\"2\":{\"1232\":1}}],[\"并满足上述条件\",{\"1\":{\"1198\":1}}],[\"并保存到keywords列表中\",{\"1\":{\"1187\":1}}],[\"并保持在那里直到终止或被删除\",{\"1\":{\"115\":1}}],[\"并对其中的元素进行不同的操作\",{\"1\":{\"1178\":1}}],[\"并进入\",{\"1\":{\"1035\":1}}],[\"并创建了内函数\",{\"1\":{\"992\":1}}],[\"并根据这些数据来设置对象的状态\",{\"1\":{\"901\":1}}],[\"并根据输入参数返回不同类型的对象\",{\"1\":{\"790\":1}}],[\"并赋值给一个变量后不会立即进行求值\",{\"1\":{\"893\":1}}],[\"并让具体的工厂子类实现具体的对象创建逻辑\",{\"1\":{\"791\":1}}],[\"并让它对外提供服务\",{\"1\":{\"21\":1}}],[\"并由代理对象来控制对原有对象的引用\",{\"1\":{\"771\":1}}],[\"并允许将请求提交给对象前后进行一些处理\",{\"1\":{\"769\":1}}],[\"并提供一个全局访问点来获取这个实例\",{\"1\":{\"780\":1}}],[\"并提供恢复机制\",{\"1\":{\"756\":1}}],[\"并提供了异步支持\",{\"1\":{\"607\":1}}],[\"并提供了多种调度方式\",{\"1\":{\"606\":1}}],[\"并记录错误信息\",{\"1\":{\"661\":1}}],[\"并设置\",{\"1\":{\"659\":1}}],[\"并设置红包的过期时间\",{\"1\":{\"295\":1}}],[\"并规避常见问题\",{\"1\":{\"645\":1}}],[\"并建立常态化的容量规划与性能优化措施\",{\"1\":{\"640\":1}}],[\"并为每种类型选择最适合的检测算法\",{\"1\":{\"635\":1}}],[\"并尽快实施修复方案\",{\"1\":{\"631\":1}}],[\"并优化流程以防止类似问题再次发生\",{\"1\":{\"630\":1}}],[\"并暂停后续部署直到问题解决\",{\"1\":{\"630\":1}}],[\"并能根据异常的严重程度设置不同级别的告警\",{\"1\":{\"626\":1}}],[\"并确保任务按正确的顺序执行\",{\"1\":{\"899\":1}}],[\"并确保多线程环境下的线程安全\",{\"1\":{\"897\":2}}],[\"并确保解释器内部数据结构在多线程环境下的安全性\",{\"1\":{\"897\":1}}],[\"并确保依赖库与\",{\"1\":{\"600\":1}}],[\"并确保指定数量的\",{\"1\":{\"196\":1}}],[\"并配置连接池\",{\"1\":{\"579\":1}}],[\"并分享如何用工程思维打造高质量代码\",{\"1\":{\"540\":1}}],[\"并判断哪个版本可见的过程\",{\"1\":{\"374\":1}}],[\"并生成一条条的执行计划\",{\"1\":{\"361\":1}}],[\"并完成与存储引擎的交互\",{\"1\":{\"334\":1}}],[\"并发能力\",{\"1\":{\"1172\":1}}],[\"并发传输\",{\"1\":{\"976\":1}}],[\"并发安全\",{\"0\":{\"913\":1}}],[\"并发送一个http响应到客户端\",{\"1\":{\"689\":1}}],[\"并发执行所有事件的调度和等待\",{\"1\":{\"1040\":1}}],[\"并发执行\",{\"1\":{\"607\":1,\"659\":1}}],[\"并发进入\",{\"1\":{\"570\":1}}],[\"并发状态机\",{\"0\":{\"570\":1}}],[\"并发性能最大\",{\"1\":{\"404\":1}}],[\"并发度一般\",{\"1\":{\"402\":1}}],[\"并发度也最高\",{\"1\":{\"402\":1}}],[\"并发度最低\",{\"1\":{\"402\":1}}],[\"并发环境下\",{\"1\":{\"374\":1}}],[\"并发控制中\",{\"1\":{\"373\":1,\"482\":1}}],[\"并发相对较低\",{\"1\":{\"309\":1}}],[\"并发处理能力\",{\"1\":{\"308\":1}}],[\"并发量是不是够大\",{\"1\":{\"299\":1}}],[\"并发策略\",{\"1\":{\"202\":1}}],[\"并等待将来使用\",{\"1\":{\"227\":1}}],[\"并在下一次执行\",{\"1\":{\"1021\":1}}],[\"并在事件循环的控制下执行\",{\"1\":{\"899\":1}}],[\"并在事后进行全面的复盘\",{\"1\":{\"641\":1}}],[\"并在适当的时候执行\",{\"1\":{\"899\":1}}],[\"并在io操作完成后获取操作结果的过程\",{\"1\":{\"898\":1}}],[\"并在文件末尾实例化了一个\",{\"1\":{\"782\":1}}],[\"并在减少副本时执行清理\",{\"1\":{\"191\":1}}],[\"并在每个节点上分配一个端口路由到与clusterip相同的端点\",{\"1\":{\"87\":1}}],[\"并不能增加\",{\"1\":{\"1299\":1}}],[\"并不能保证该钩子函数在容器的\",{\"1\":{\"135\":1}}],[\"并不是客户端的请求错误\",{\"1\":{\"967\":1}}],[\"并不是取出所有字段\",{\"1\":{\"332\":1}}],[\"并不是查询出全部数据再过滤\",{\"1\":{\"332\":1}}],[\"并不是独占的\",{\"1\":{\"242\":1}}],[\"并不会简单粗暴的应用\",{\"1\":{\"513\":1}}],[\"并不会去看\",{\"1\":{\"455\":1}}],[\"并不会覆盖以前的日志\",{\"1\":{\"390\":1}}],[\"并不会只读取这个数据\",{\"1\":{\"361\":1}}],[\"并不会直接写磁盘\",{\"1\":{\"320\":1,\"469\":1}}],[\"并不会删除它关联的存储卷\",{\"1\":{\"190\":1}}],[\"并\",{\"1\":{\"181\":1}}],[\"并占用\",{\"1\":{\"162\":1}}],[\"并且查找的元素不在有序数组中\",{\"1\":{\"1393\":2}}],[\"并且每块饼干\",{\"1\":{\"1364\":1}}],[\"并且每座岛屿只能由水平方向和\",{\"1\":{\"1352\":1}}],[\"并且字典中的单词可以重复使用\",{\"1\":{\"1276\":1}}],[\"并且原数组\",{\"1\":{\"1266\":2}}],[\"并且课程\",{\"1\":{\"1242\":1}}],[\"并且学习课程\",{\"1\":{\"1241\":1}}],[\"并且没有顶点存在与自身相连的边\",{\"1\":{\"1229\":1}}],[\"并且存在5个子序列的长度为1\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"并且一般外部函数的返回值为内部函数\",{\"1\":{\"990\":1}}],[\"并且负责返回类的新实例\",{\"1\":{\"900\":1}}],[\"并且这些步骤可以动态地添加\",{\"1\":{\"804\":1}}],[\"并且希望能够在不修改原有代码的基础上轻松添加新的对象类型\",{\"1\":{\"793\":1}}],[\"并且更加符合\",{\"1\":{\"776\":1}}],[\"并且是一种服务端无状态的认证方式\",{\"1\":{\"690\":1}}],[\"并且易于存档查阅历史记录\",{\"1\":{\"638\":1}}],[\"并且支持富文本格式的消息发送\",{\"1\":{\"638\":1}}],[\"并且能够更好地融入日常工作流程中\",{\"1\":{\"638\":1}}],[\"并且能够与其他编程语言通信\",{\"1\":{\"607\":1}}],[\"并且难以做到精准控制\",{\"1\":{\"612\":1}}],[\"并且可以实现持久化任务\",{\"1\":{\"607\":1}}],[\"并且有较多的配置项\",{\"1\":{\"607\":1}}],[\"并且耗尽所有数据库允许的连接\",{\"1\":{\"578\":1}}],[\"并且子查询使用了覆盖索引进行优化\",{\"1\":{\"499\":1}}],[\"并且锁住数据前后范围\",{\"1\":{\"405\":1,\"482\":1}}],[\"并且提交事务时\",{\"1\":{\"389\":1}}],[\"并且导致b树的层数变高\",{\"1\":{\"342\":1}}],[\"并且以升序排序\",{\"1\":{\"338\":1}}],[\"并且记录了语句的发生时间\",{\"1\":{\"334\":1}}],[\"并且返回用户需要查询的结果\",{\"1\":{\"332\":1}}],[\"并且把该变量自增1\",{\"1\":{\"325\":1}}],[\"并且休眠一段时间\",{\"1\":{\"285\":1}}],[\"并且会阻塞redis主进程\",{\"1\":{\"258\":1}}],[\"并且除了字符串的末尾之外\",{\"1\":{\"227\":1}}],[\"并且需\",{\"1\":{\"227\":1}}],[\"并且对外暴露了统一的流量入口\",{\"1\":{\"169\":1}}],[\"并且对路径中的元素逐个完成\",{\"1\":{\"100\":1}}],[\"并且\",{\"1\":{\"135\":1,\"1265\":2}}],[\"并且所有用户都是可以读取的\",{\"1\":{\"118\":1}}],[\"并且自己可以快速分析流水线结果\",{\"1\":{\"46\":1}}],[\"并将该线程标记为已占用\",{\"1\":{\"1036\":1}}],[\"并将该值加上256之后赋值给全局变量\",{\"1\":{\"325\":1}}],[\"并将它们连接成一条链\",{\"1\":{\"804\":1}}],[\"并将它们同步分派给请求对应的处理线程\",{\"1\":{\"270\":1}}],[\"并将其转换为适用于被封装服务对象的调用\",{\"1\":{\"799\":1}}],[\"并将其部署到生产环境中运行\",{\"1\":{\"21\":1}}],[\"并将这些数据统一为\",{\"1\":{\"797\":1}}],[\"并将每个算法封装起来\",{\"1\":{\"775\":1}}],[\"并将生成器推进到下一条yield表达式\",{\"1\":{\"735\":1}}],[\"并将\",{\"1\":{\"72\":1,\"225\":1,\"1365\":1}}],[\"并行运行\",{\"1\":{\"1040\":1}}],[\"并行运行的pod个数\",{\"1\":{\"198\":1}}],[\"并行计算每行的范数\",{\"1\":{\"720\":1}}],[\"并行计算\",{\"1\":{\"708\":1}}],[\"并行执行\",{\"1\":{\"598\":1}}],[\"并行首先会节省时间\",{\"1\":{\"46\":1}}],[\"并行化原则\",{\"1\":{\"46\":1}}],[\"并主动参与自动化构建\",{\"1\":{\"31\":1}}],[\"并做出适当的反应\",{\"1\":{\"21\":1}}],[\"并统计展现结果\",{\"1\":{\"21\":1}}],[\"并通过另一个协程异步处理这些数据\",{\"1\":{\"924\":1}}],[\"并通过示例展示其核心功能\",{\"1\":{\"560\":1}}],[\"并通过流量控制\",{\"1\":{\"169\":1}}],[\"并通过代码审查确保代码风格和质量的一致性\",{\"1\":{\"54\":1}}],[\"并通过自动化构建和测试快速验证代码的正确性\",{\"1\":{\"50\":1}}],[\"并通过自动化\",{\"1\":{\"46\":1}}],[\"并通过全员参与的方式在整个开发过程中持续关注和提升产品质量\",{\"1\":{\"23\":1}}],[\"并通过实时监控来保证系统的稳定性和可靠性\",{\"1\":{\"21\":1}}],[\"并通过不断的科学探索与快速验证\",{\"1\":{\"18\":1}}],[\"并快速开创新业务\",{\"1\":{\"18\":1}}],[\"的算法\",{\"1\":{\"1399\":1}}],[\"的算法解决此问题\",{\"1\":{\"1395\":1,\"1400\":1}}],[\"的话\",{\"1\":{\"1393\":1}}],[\"的话作为结束\",{\"1\":{\"557\":1}}],[\"的每个元素都将在\",{\"1\":{\"1390\":1}}],[\"的整数数组\",{\"1\":{\"1377\":1}}],[\"的位置进行深度优先遍历\",{\"1\":{\"1354\":2}}],[\"的位置是否可以到达边界\",{\"1\":{\"1354\":1}}],[\"的位置只能从\",{\"1\":{\"1303\":1}}],[\"的陆地单元格或跨过\",{\"1\":{\"1354\":1}}],[\"的单元格的数目\",{\"1\":{\"1353\":1}}],[\"的单向流程\",{\"1\":{\"43\":1}}],[\"的四个边缘都被\",{\"1\":{\"1353\":1}}],[\"的奇数下标的个数\",{\"1\":{\"1341\":1}}],[\"的偶数下标的个数\",{\"1\":{\"1341\":1}}],[\"的二进制矩阵\",{\"1\":{\"1353\":1,\"1354\":1}}],[\"的二进制表示是\",{\"1\":{\"1341\":2}}],[\"的二进制形式\",{\"1\":{\"1341\":2}}],[\"的二维数组\",{\"1\":{\"1230\":1}}],[\"的直线相交\",{\"1\":{\"1309\":1}}],[\"的直线将与从\",{\"1\":{\"1309\":1}}],[\"的直线\",{\"1\":{\"1309\":1}}],[\"的情况\",{\"1\":{\"1308\":1}}],[\"的情况下\",{\"1\":{\"482\":1}}],[\"的房间里\",{\"1\":{\"1303\":1}}],[\"的同时加入\",{\"1\":{\"1299\":1}}],[\"的同时满足下述\",{\"1\":{\"1198\":1}}],[\"的子串是否是回文子串\",{\"1\":{\"1299\":1}}],[\"的子序列\",{\"1\":{\"1207\":1,\"1286\":1,\"1308\":2,\"1313\":2}}],[\"的递增子序列\",{\"1\":{\"1289\":1}}],[\"的环形数组中\",{\"1\":{\"1282\":1}}],[\"的披萨\",{\"1\":{\"1282\":7}}],[\"的点数\",{\"1\":{\"1281\":2}}],[\"的完全平方数的最少数量\",{\"1\":{\"1276\":1}}],[\"的硬币不能凑成总金额\",{\"1\":{\"1275\":1}}],[\"的不同\",{\"1\":{\"1274\":1}}],[\"的石头新重量为\",{\"1\":{\"1274\":1}}],[\"的石头将会完全粉碎\",{\"1\":{\"1274\":1}}],[\"的背包\",{\"1\":{\"1270\":1}}],[\"的其余元素与\",{\"1\":{\"1266\":1}}],[\"的前五个元素被修改为\",{\"1\":{\"1266\":1}}],[\"的前两个元素被修改为\",{\"1\":{\"1266\":1}}],[\"的前\",{\"1\":{\"1266\":1}}],[\"的唯一元素的数量为\",{\"1\":{\"1266\":1}}],[\"的唯一区别是选择器的支持\",{\"1\":{\"177\":1}}],[\"的唯一区别是\",{\"1\":{\"163\":1}}],[\"的数目\",{\"1\":{\"1274\":1,\"1299\":1}}],[\"的数组\",{\"1\":{\"1266\":1}}],[\"的数据量可能会超过整型变量最大值时\",{\"1\":{\"1393\":1}}],[\"的数据有三行\",{\"1\":{\"482\":1}}],[\"的数据有两行\",{\"1\":{\"482\":1}}],[\"的数据文件\",{\"1\":{\"334\":1}}],[\"的数据不会因为故障而丢失\",{\"1\":{\"255\":1}}],[\"的数据全部在内存里\",{\"1\":{\"255\":1}}],[\"的元素组合的个数\",{\"1\":{\"1275\":1}}],[\"的元素\",{\"1\":{\"1265\":1,\"1274\":1,\"1281\":2}}],[\"的元素前缀\",{\"1\":{\"100\":1}}],[\"的额外空间解决这一问题\",{\"1\":{\"1258\":1}}],[\"的形式给出\",{\"1\":{\"1258\":1}}],[\"的形式表示\",{\"1\":{\"899\":1}}],[\"的图里面\",{\"1\":{\"1240\":1}}],[\"的邻接节点组成\",{\"1\":{\"1236\":1}}],[\"的邻居\",{\"1\":{\"1217\":1}}],[\"的邻居都存到一个列表里\",{\"1\":{\"1217\":1}}],[\"的映射\",{\"1\":{\"1234\":1}}],[\"的映射和\",{\"1\":{\"1234\":1}}],[\"的树中添加一条边后的图\",{\"1\":{\"1230\":1}}],[\"的树\",{\"1\":{\"1226\":1}}],[\"的路径\",{\"1\":{\"1229\":2}}],[\"的路径并输出\",{\"1\":{\"1221\":1}}],[\"的路径无法通过合法性检查\",{\"1\":{\"100\":1}}],[\"的遍历\",{\"1\":{\"1220\":1}}],[\"的节点用绿色表示\",{\"1\":{\"1220\":1}}],[\"的节点用灰色表示\",{\"1\":{\"1220\":1}}],[\"的节点都运行了一个指定的\",{\"1\":{\"186\":1}}],[\"的入度为\",{\"1\":{\"1218\":1}}],[\"的概念\",{\"1\":{\"1218\":1}}],[\"的概念中\",{\"1\":{\"117\":1}}],[\"的边界\",{\"1\":{\"1354\":1}}],[\"的边\",{\"1\":{\"1217\":1}}],[\"的相同\",{\"1\":{\"1208\":1}}],[\"的最长递增子序列数量与\",{\"1\":{\"1208\":1}}],[\"的最大\",{\"1\":{\"1384\":1}}],[\"的最大值为\",{\"1\":{\"1377\":1}}],[\"的最大子集是\",{\"1\":{\"1274\":1}}],[\"的最大子集的长度\",{\"1\":{\"1274\":1}}],[\"的最大矩形\",{\"1\":{\"1203\":1}}],[\"的最大正方形\",{\"1\":{\"1202\":1}}],[\"的最大缺点是\",{\"1\":{\"698\":1}}],[\"的序列\",{\"1\":{\"1198\":1}}],[\"的连续递增子序列\",{\"1\":{\"1198\":1}}],[\"的返回值\",{\"1\":{\"1188\":3}}],[\"的扩展\",{\"1\":{\"1170\":1}}],[\"的框架\",{\"0\":{\"1169\":1,\"1170\":1}}],[\"的对比\",{\"0\":{\"1156\":1}}],[\"的对应修订版本的能力\",{\"1\":{\"162\":1}}],[\"的升级版\",{\"1\":{\"1146\":1}}],[\"的终极解决方案\",{\"0\":{\"1145\":1}}],[\"的优势与最佳实践\",{\"0\":{\"1153\":1}}],[\"的优势\",{\"0\":{\"1143\":1}}],[\"的优化\",{\"1\":{\"460\":1}}],[\"的基本用法\",{\"0\":{\"1081\":1}}],[\"的基本信息\",{\"1\":{\"115\":1}}],[\"的实现\",{\"1\":{\"1074\":1}}],[\"的实例\",{\"1\":{\"117\":1}}],[\"的上下文机制通过\",{\"1\":{\"1089\":1}}],[\"的上下文\",{\"1\":{\"1071\":1}}],[\"的上下文中保存的数据都是存放在栈里并且会动态变化的\",{\"1\":{\"1052\":1}}],[\"的迁移主要基于以下优势\",{\"1\":{\"1069\":1}}],[\"的用法\",{\"1\":{\"1040\":1}}],[\"的方案\",{\"1\":{\"1314\":2}}],[\"的方法\",{\"1\":{\"1025\":1}}],[\"的方式来实现文件事件处理器\",{\"1\":{\"268\":1}}],[\"的方式\",{\"1\":{\"198\":1}}],[\"的函数被称为生成器\",{\"1\":{\"1021\":1}}],[\"的队头阻塞\",{\"1\":{\"977\":1}}],[\"的意思\",{\"1\":{\"967\":1}}],[\"的涵义已经可以扩展为图片\",{\"1\":{\"966\":1}}],[\"的报文\",{\"1\":{\"953\":1}}],[\"的时间找到某一节点的根节点\",{\"1\":{\"1226\":1}}],[\"的时间复杂度内完成\",{\"1\":{\"921\":1}}],[\"的时候卖出\",{\"1\":{\"1292\":11}}],[\"的时候买入\",{\"1\":{\"1292\":11}}],[\"的时候\",{\"1\":{\"507\":1,\"525\":1,\"1271\":1}}],[\"的时候代表记录被删除掉了\",{\"1\":{\"324\":1}}],[\"的时候代表记录并没有被删除\",{\"1\":{\"324\":1}}],[\"的作用\",{\"0\":{\"902\":1}}],[\"的主要原因是为了简化python解释器的设计和实现\",{\"1\":{\"897\":1}}],[\"的代理\",{\"1\":{\"1101\":1}}],[\"的代码可复用性并不会很高\",{\"1\":{\"860\":1}}],[\"的代码可能会写的比较自由\",{\"1\":{\"860\":1}}],[\"的代价\",{\"1\":{\"460\":2}}],[\"的local模块下\",{\"1\":{\"856\":1}}],[\"的default方法\",{\"0\":{\"827\":1}}],[\"的名义实现其功能\",{\"1\":{\"797\":1}}],[\"的文件\",{\"1\":{\"782\":1}}],[\"的模块本身就是天然的单例模式\",{\"1\":{\"782\":1}}],[\"的模式\",{\"1\":{\"50\":1}}],[\"的风格\",{\"1\":{\"776\":1}}],[\"的风险\",{\"1\":{\"542\":1}}],[\"的风险较小\",{\"1\":{\"76\":1}}],[\"的原始定义是\",{\"1\":{\"770\":1}}],[\"的原则\",{\"1\":{\"40\":1}}],[\"的机器可运行\",{\"1\":{\"725\":1}}],[\"的有效期应该设置得比较短\",{\"1\":{\"698\":1}}],[\"的权限\",{\"1\":{\"698\":1}}],[\"的认证流程与cookie很相似\",{\"1\":{\"691\":1}}],[\"的认证方式类似于临时的证书签名\",{\"1\":{\"690\":1}}],[\"的场景\",{\"1\":{\"690\":1,\"1220\":1}}],[\"的比喻理解\",{\"0\":{\"676\":1}}],[\"的关键特性\",{\"0\":{\"675\":1}}],[\"的进程数可通过\",{\"1\":{\"669\":1}}],[\"的类型\",{\"1\":{\"662\":1}}],[\"的清理工具避免数据堆积\",{\"1\":{\"661\":1}}],[\"的某些补丁可能因新版本的\",{\"1\":{\"599\":1}}],[\"的非阻塞实现\",{\"1\":{\"590\":1}}],[\"的全局解释器锁\",{\"1\":{\"590\":1,\"664\":1,\"682\":1}}],[\"的协程数通常由任务数量自动管理\",{\"1\":{\"669\":1}}],[\"的协程\",{\"1\":{\"588\":1,\"590\":1,\"682\":1}}],[\"的核心区别\",{\"0\":{\"1160\":1}}],[\"的核心原则\",{\"0\":{\"1144\":1}}],[\"的核心机制\",{\"0\":{\"1080\":1}}],[\"的核心作用\",{\"1\":{\"600\":1}}],[\"的核心流程\",{\"1\":{\"553\":1}}],[\"的核心就是\",{\"1\":{\"475\":1}}],[\"的折扣\",{\"1\":{\"549\":1}}],[\"的视角\",{\"1\":{\"540\":1}}],[\"的大小不重要\",{\"1\":{\"1266\":1}}],[\"的大小\",{\"1\":{\"514\":1,\"1384\":1}}],[\"的空间开得很大\",{\"1\":{\"513\":1}}],[\"的性能\",{\"1\":{\"513\":1}}],[\"的字段有索引\",{\"1\":{\"513\":1}}],[\"的字段已经在被驱动表中建立了索引\",{\"1\":{\"513\":1}}],[\"的字符串增长操作\",{\"1\":{\"227\":1}}],[\"的字符串缩短操作\",{\"1\":{\"227\":1}}],[\"的开销如下\",{\"1\":{\"513\":1}}],[\"的特点\",{\"0\":{\"698\":1},\"1\":{\"513\":1}}],[\"的具体信息\",{\"1\":{\"504\":1}}],[\"的范围\",{\"1\":{\"499\":1}}],[\"的所有元素也是\",{\"1\":{\"1274\":1}}],[\"的所有值\",{\"1\":{\"1236\":1}}],[\"的所有邻居节点\",{\"1\":{\"1217\":1,\"1219\":1}}],[\"的所有\",{\"1\":{\"482\":1}}],[\"的三元组都满足题意\",{\"1\":{\"1289\":1}}],[\"的三次查询\",{\"1\":{\"482\":1}}],[\"的三大特性之一\",{\"1\":{\"460\":1}}],[\"的生成策略不同\",{\"1\":{\"475\":1}}],[\"的页写入到磁盘时\",{\"1\":{\"468\":1}}],[\"的页和操作系统的页大小不一致\",{\"1\":{\"468\":1}}],[\"的自适应\",{\"1\":{\"460\":1}}],[\"的快速查询\",{\"1\":{\"460\":2}}],[\"的操作放到\",{\"1\":{\"1220\":1}}],[\"的操作\",{\"1\":{\"460\":1,\"1034\":1}}],[\"的部分过滤操作\",{\"1\":{\"456\":1}}],[\"的版本上推出\",{\"1\":{\"455\":1}}],[\"的新特点\",{\"0\":{\"430\":1}}],[\"的区别\",{\"0\":{\"429\":1,\"432\":1,\"903\":1,\"962\":1}}],[\"的两个表的字符编码不同\",{\"1\":{\"416\":1}}],[\"的示意图\",{\"1\":{\"414\":1}}],[\"的执行状态\",{\"1\":{\"518\":1}}],[\"的执行\",{\"1\":{\"363\":1}}],[\"的动作是在存储引擎中完成的\",{\"1\":{\"362\":1}}],[\"的成本主要和页的大小有关\",{\"1\":{\"361\":1}}],[\"的架构体系中也已经提供了这样的一个池子\",{\"1\":{\"358\":2}}],[\"的行\",{\"1\":{\"349\":1}}],[\"的交互协议\",{\"1\":{\"278\":1}}],[\"的内容\",{\"1\":{\"264\":1,\"349\":1}}],[\"的内容将出现在该目录中\",{\"1\":{\"72\":1}}],[\"的aof日志方式\",{\"1\":{\"264\":1}}],[\"的rdb快照方式\",{\"1\":{\"264\":1}}],[\"的值代表nums以num\",{\"1\":{\"1207\":1}}],[\"的值还是\",{\"1\":{\"503\":1}}],[\"的值来开启\",{\"1\":{\"503\":1}}],[\"的值\",{\"1\":{\"262\":1,\"455\":2,\"1021\":1,\"1274\":1}}],[\"的值为\",{\"1\":{\"92\":1,\"503\":2,\"1352\":1,\"1354\":1}}],[\"的glibc提供了fsync\",{\"1\":{\"260\":1}}],[\"的增量数据\",{\"1\":{\"258\":1}}],[\"的持久化机制有两种\",{\"1\":{\"255\":1}}],[\"的持久化机制\",{\"1\":{\"255\":1}}],[\"的未使用空间\",{\"1\":{\"227\":2}}],[\"的长度已经确定了\",{\"1\":{\"1299\":1}}],[\"的长度将大于等于\",{\"1\":{\"227\":1}}],[\"的长度\",{\"1\":{\"227\":1,\"986\":1,\"1308\":1}}],[\"的默认字符串表示\",{\"1\":{\"225\":1}}],[\"的默认值是0\",{\"1\":{\"210\":1}}],[\"的抽象类型\",{\"1\":{\"225\":1}}],[\"的获取获取数据length\",{\"1\":{\"218\":1}}],[\"的记录内容\",{\"1\":{\"504\":1}}],[\"的记录一条条取出来回表\",{\"1\":{\"455\":1}}],[\"的记录\",{\"1\":{\"202\":1,\"455\":2}}],[\"的保证\",{\"1\":{\"190\":1}}],[\"的网络标识\",{\"1\":{\"190\":1}}],[\"的存储必须由\",{\"1\":{\"190\":1}}],[\"的副本已创建\",{\"1\":{\"181\":1}}],[\"的副本\",{\"1\":{\"181\":1}}],[\"的创建\",{\"1\":{\"177\":1}}],[\"的流量都切换到新版本上\",{\"1\":{\"171\":1}}],[\"的任何修改都不会触发新的上线\",{\"1\":{\"163\":1}}],[\"的可选布尔字段\",{\"1\":{\"163\":1}}],[\"的可选字段\",{\"1\":{\"155\":1}}],[\"的输出\",{\"1\":{\"162\":1}}],[\"的修订历史记录存储在它所控制的\",{\"1\":{\"162\":1}}],[\"的总和最小\",{\"1\":{\"1303\":1}}],[\"的总数不超过所需\",{\"1\":{\"159\":1}}],[\"的总延迟可能与\",{\"1\":{\"74\":1}}],[\"的百分比\",{\"1\":{\"159\":2}}],[\"的个数上限\",{\"1\":{\"159\":1}}],[\"的重试次数\",{\"1\":{\"147\":1}}],[\"的集合框架为例\",{\"1\":{\"762\":1}}],[\"的集合\",{\"1\":{\"140\":1}}],[\"的shell补全代码\",{\"1\":{\"124\":1}}],[\"的客户端或者自动化工具可以存取这些信息以实现其自定义的逻辑\",{\"1\":{\"119\":1}}],[\"的地址一定写成自己master机器的ip地址\",{\"1\":{\"108\":1}}],[\"的服务\",{\"1\":{\"93\":1}}],[\"的取值以及行为如下\",{\"1\":{\"93\":1}}],[\"的策略\",{\"1\":{\"86\":1,\"388\":1}}],[\"的组成部分\",{\"1\":{\"86\":1}}],[\"的细节\",{\"1\":{\"79\":1}}],[\"的工作流程中暴露\",{\"1\":{\"76\":1}}],[\"的一个子序列\",{\"1\":{\"1313\":1}}],[\"的一个注解来触发立即刷新\",{\"1\":{\"74\":1}}],[\"的一方\",{\"1\":{\"956\":1}}],[\"的一等函数特性被用来直接将函数作为策略对象\",{\"1\":{\"776\":1}}],[\"的一种特例\",{\"1\":{\"349\":1}}],[\"的一些共享资源\",{\"1\":{\"115\":1}}],[\"的一致性\",{\"1\":{\"39\":1}}],[\"的当前值\",{\"1\":{\"74\":1}}],[\"的\",{\"0\":{\"1073\":1,\"1085\":1},\"1\":{\"69\":2,\"97\":1,\"135\":1,\"143\":1,\"156\":1,\"181\":1,\"200\":1,\"202\":1,\"227\":7,\"413\":1,\"469\":1,\"482\":1,\"714\":1,\"769\":1,\"1069\":1,\"1071\":1,\"1143\":1,\"1230\":1,\"1274\":2,\"1303\":1,\"1314\":1,\"1399\":1,\"1403\":1}}],[\"的问题\",{\"1\":{\"52\":1}}],[\"的阐述让我深刻意识到\",{\"1\":{\"37\":1}}],[\"的过程中\",{\"1\":{\"37\":1}}],[\"的信任\",{\"1\":{\"32\":1}}],[\"的思维\",{\"1\":{\"31\":1}}],[\"的线性流程\",{\"1\":{\"31\":1}}],[\"的恐惧感\",{\"1\":{\"18\":1}}],[\"的4个核心工作原则是坚持少做\",{\"1\":{\"18\":1}}],[\"害怕失败\",{\"1\":{\"18\":1}}],[\"摆脱\",{\"1\":{\"18\":1}}],[\"从前到后\",{\"1\":{\"1307\":1}}],[\"从右到左\",{\"1\":{\"1303\":1,\"1341\":1}}],[\"从左上角到右下角一共有\",{\"1\":{\"1303\":1}}],[\"从左上角开始\",{\"1\":{\"1303\":1}}],[\"从左到右遍历\",{\"1\":{\"1207\":1}}],[\"从左到右\",{\"1\":{\"1202\":1,\"1286\":1,\"1292\":1,\"1303\":3}}],[\"从中选出任意两块石头\",{\"1\":{\"1274\":1}}],[\"从图中的某一个节点开始遍历\",{\"1\":{\"1220\":1}}],[\"从其他os线程中调度一个协程\",{\"1\":{\"1040\":1}}],[\"从队列中取出一个空闲线程\",{\"1\":{\"1036\":1}}],[\"从队列中获取并处理任务\",{\"1\":{\"916\":1}}],[\"从本质上来说\",{\"1\":{\"962\":1}}],[\"从本地到生产\",{\"0\":{\"555\":1}}],[\"从python\",{\"1\":{\"923\":1}}],[\"从pubtime索引出发\",{\"1\":{\"408\":1}}],[\"从选择合适的调度引擎到制定合理的执行策略\",{\"1\":{\"619\":1}}],[\"从上到下从左到右\",{\"1\":{\"1313\":1}}],[\"从上到下正序即可\",{\"1\":{\"1303\":1}}],[\"从上到下进行遍历\",{\"1\":{\"1271\":1}}],[\"从上到下\",{\"1\":{\"1202\":1,\"1303\":2,\"1307\":1}}],[\"从上面过程可知\",{\"1\":{\"954\":1}}],[\"从上述过程中我们可以发现\",{\"1\":{\"903\":1}}],[\"从上表可以看出\",{\"1\":{\"607\":1}}],[\"从上文知道\",{\"1\":{\"414\":1}}],[\"从建房子到写代码\",{\"0\":{\"539\":1}}],[\"从原来的\",{\"1\":{\"513\":1}}],[\"从relay\",{\"1\":{\"494\":1}}],[\"从库启动之后\",{\"1\":{\"494\":2}}],[\"从库启动并发起连接\",{\"1\":{\"494\":1}}],[\"从库服务器能连通主库\",{\"1\":{\"493\":1}}],[\"从库拿到binlog后实现数据恢复达到主从数据一致性\",{\"1\":{\"386\":1}}],[\"从name索引出发\",{\"1\":{\"408\":1}}],[\"从mysql5\",{\"1\":{\"308\":1}}],[\"从容器中的stdin读取将始终导致eof\",{\"1\":{\"133\":1}}],[\"从一组键值对创建\",{\"1\":{\"941\":1}}],[\"从一个可迭代对象\",{\"1\":{\"941\":1}}],[\"从一个目录或url构建一个定制目标\",{\"1\":{\"124\":1}}],[\"从一开始就将业务问题进行分解\",{\"1\":{\"18\":1}}],[\"从文件或stdin中创建资源\",{\"1\":{\"124\":1}}],[\"从同样的镜像创建\",{\"1\":{\"115\":1}}],[\"从节点\",{\"1\":{\"63\":1}}],[\"从开发到生产的无缝衔接\",{\"0\":{\"57\":1}}],[\"从口号变为现实\",{\"1\":{\"46\":1}}],[\"从手工操作转化为机器可执行的流程\",{\"1\":{\"38\":1}}],[\"从\",{\"0\":{\"518\":1},\"1\":{\"32\":2,\"33\":1,\"74\":1,\"507\":1,\"1220\":2,\"1384\":1}}],[\"从技术部门的\",{\"1\":{\"31\":1}}],[\"从而保证\",{\"1\":{\"1207\":1}}],[\"从而降低了实现的复杂性\",{\"1\":{\"897\":1}}],[\"从而简化了代码结构并提高了其可读性和可维护性\",{\"1\":{\"804\":1}}],[\"从而使原本因接口不兼容而不能一起工作的类能够协同工作\",{\"1\":{\"797\":1}}],[\"从而可以创建相应品牌下的所有组件\",{\"1\":{\"792\":1}}],[\"从而控制类的行为\",{\"1\":{\"783\":1}}],[\"从而避免陷入无限循环\",{\"1\":{\"1395\":1}}],[\"从而避免造成数据访问异常\",{\"1\":{\"1052\":1,\"1053\":1}}],[\"从而避免刚才所说的自引用递归问题\",{\"1\":{\"894\":1}}],[\"从而避免了为每个新策略创建额外的类所带来的复杂性\",{\"1\":{\"776\":1}}],[\"从而避免阻塞\",{\"1\":{\"590\":1}}],[\"从而解放主线程\",{\"1\":{\"645\":1}}],[\"从而解决了因为对数据库表的加锁而导致的两个如下问题\",{\"1\":{\"373\":1,\"482\":1}}],[\"从而实现了并发执行的效果\",{\"1\":{\"923\":1}}],[\"从而实现更加精细化的数据分析和异常检测\",{\"1\":{\"634\":1}}],[\"从而实现\",{\"1\":{\"588\":1}}],[\"从而浪费资源\",{\"1\":{\"507\":1,\"520\":1}}],[\"从而产生相应的redo\",{\"1\":{\"425\":1}}],[\"从而提高代码的可维护性和可扩展性\",{\"1\":{\"1177\":1}}],[\"从而提高性能\",{\"1\":{\"898\":1}}],[\"从而提高系统的可用性和稳定性\",{\"1\":{\"624\":1}}],[\"从而提高业务的敏捷性\",{\"1\":{\"18\":1}}],[\"从而提升整体性能\",{\"1\":{\"420\":1,\"456\":1}}],[\"从而让用户能够读取到当前事务操作之前的数据\",{\"1\":{\"380\":1}}],[\"从而达到全局最优\",{\"1\":{\"1358\":1}}],[\"从而达到多个服务器共同分摊压力的效果\",{\"1\":{\"300\":1}}],[\"从而达到提升数据库性能的目的\",{\"1\":{\"299\":1}}],[\"从而不再阻塞主进程\",{\"1\":{\"257\":1}}],[\"从而消除人为失误\",{\"1\":{\"38\":1}}],[\"从而加快整个交付过程\",{\"1\":{\"24\":1}}],[\"从而收集并分析真实的反馈\",{\"1\":{\"21\":1}}],[\"从而验证是否符合最初的预期\",{\"1\":{\"21\":1}}],[\"从失败中学习\",{\"1\":{\"20\":1}}],[\"860\",{\"0\":{\"1366\":1}}],[\"881\",{\"0\":{\"1378\":1}}],[\"886\",{\"0\":{\"1237\":1}}],[\"88\",{\"1\":{\"1023\":2}}],[\"8848\",{\"1\":{\"73\":6}}],[\"8gb内存\",{\"1\":{\"713\":1}}],[\"8912\",{\"1\":{\"125\":1}}],[\"800\",{\"1\":{\"1180\":1}}],[\"8080\",{\"1\":{\"125\":1}}],[\"80\",{\"1\":{\"73\":6,\"88\":1,\"90\":1,\"93\":3,\"101\":1,\"125\":1,\"147\":3,\"553\":1}}],[\"80mi\",{\"1\":{\"67\":2}}],[\"8\",{\"0\":{\"37\":1,\"184\":1,\"273\":1,\"411\":1,\"536\":1,\"728\":1,\"876\":1,\"899\":1,\"1039\":1,\"1159\":1,\"1312\":1},\"1\":{\"18\":1,\"73\":1,\"108\":4,\"165\":2,\"172\":1,\"356\":1,\"431\":1,\"460\":1,\"531\":1,\"662\":6,\"679\":1,\"680\":1,\"725\":2,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":2,\"886\":1,\"887\":1,\"888\":1,\"921\":1,\"1225\":1,\"1274\":3,\"1282\":4,\"1292\":5,\"1335\":1,\"1377\":4,\"1384\":2,\"1385\":1,\"1395\":5,\"1400\":5}}],[\"坚持快速反馈和持续改进并衡量\",{\"1\":{\"18\":1}}],[\"和右边界\",{\"1\":{\"1390\":1}}],[\"和以下标j为结尾的字符串t\",{\"1\":{\"1313\":1}}],[\"和前一个格子\",{\"1\":{\"1303\":1}}],[\"和奇数数量有关\",{\"1\":{\"1296\":1}}],[\"和今天买入的状态dp\",{\"1\":{\"1292\":1}}],[\"和今天买入的利润0\",{\"1\":{\"1292\":1}}],[\"和为j的完全平方数的最少数量为dp\",{\"1\":{\"1276\":1}}],[\"和为\",{\"1\":{\"1276\":1}}],[\"和两个整数\",{\"1\":{\"1274\":1}}],[\"和课程\",{\"1\":{\"1242\":2}}],[\"和数组\",{\"1\":{\"1237\":1}}],[\"和节点\",{\"1\":{\"1236\":1}}],[\"和整数\",{\"1\":{\"1229\":1}}],[\"和顶点\",{\"1\":{\"1229\":1}}],[\"和出度\",{\"1\":{\"1218\":1}}],[\"和出队\",{\"1\":{\"911\":1}}],[\"和这个列表关联起来\",{\"1\":{\"1217\":1}}],[\"和上次持有的最大值\",{\"1\":{\"1292\":1}}],[\"和上题一致\",{\"1\":{\"1287\":1,\"1339\":1}}],[\"和上题连续递增子序列完全一致\",{\"1\":{\"1209\":1}}],[\"和上一次重写后aof文件空间\",{\"1\":{\"262\":1}}],[\"和s\",{\"1\":{\"1299\":1}}],[\"和suite运行分离\",{\"1\":{\"1194\":1}}],[\"和string类型提到的\",{\"1\":{\"218\":1}}],[\"和实时应用的首选\",{\"1\":{\"1173\":1}}],[\"和请求上下文\",{\"1\":{\"1100\":1}}],[\"和app\",{\"1\":{\"1057\":1}}],[\"和一个目标值\",{\"1\":{\"1390\":1,\"1395\":1,\"1400\":1}}],[\"和一个目标整数\",{\"1\":{\"1275\":1}}],[\"和一个字符串数组\",{\"1\":{\"1380\":1}}],[\"和一个字符串列表\",{\"1\":{\"1276\":1}}],[\"和一个整数\",{\"1\":{\"1274\":1,\"1292\":2,\"1300\":1,\"1365\":1}}],[\"和一个值\",{\"1\":{\"1265\":1}}],[\"和一个\",{\"1\":{\"953\":1}}],[\"和|操作分别返回两个counter对象各元素的最小值和最大值\",{\"1\":{\"947\":1}}],[\"和装饰器对比来理解\",{\"1\":{\"934\":1}}],[\"和从中取出数据\",{\"1\":{\"924\":1}}],[\"和获取并移除最小元素\",{\"1\":{\"919\":1}}],[\"和get\",{\"1\":{\"915\":1}}],[\"和其他模式的关系\",{\"0\":{\"800\":1}}],[\"和真实处理的类\",{\"1\":{\"771\":1}}],[\"和被装饰者\",{\"1\":{\"771\":1}}],[\"和代码最大长度一致\",{\"1\":{\"531\":1}}],[\"和子查询\",{\"0\":{\"524\":1},\"1\":{\"507\":1}}],[\"和count\",{\"1\":{\"487\":1}}],[\"和使用场景\",{\"1\":{\"438\":1}}],[\"和undo\",{\"1\":{\"425\":1}}],[\"和持久性\",{\"1\":{\"425\":1}}],[\"和许多其他\",{\"1\":{\"334\":1}}],[\"和rdb类似\",{\"1\":{\"262\":1}}],[\"和rdb快照写入\",{\"1\":{\"261\":1}}],[\"和未暂停的\",{\"1\":{\"163\":1}}],[\"和选择器\",{\"1\":{\"116\":1}}],[\"和静态端口\",{\"1\":{\"93\":1}}],[\"和在集群中运行的应用程序也可以对\",{\"1\":{\"76\":1}}],[\"和\",{\"0\":{\"116\":1,\"177\":1,\"387\":1,\"432\":1,\"485\":1,\"893\":1,\"1141\":1,\"1159\":1,\"1160\":1},\"1\":{\"18\":1,\"30\":1,\"95\":1,\"97\":3,\"114\":1,\"120\":1,\"143\":1,\"154\":1,\"159\":1,\"176\":1,\"177\":1,\"202\":1,\"227\":1,\"318\":1,\"321\":2,\"322\":1,\"349\":1,\"368\":1,\"371\":1,\"380\":1,\"405\":1,\"421\":1,\"451\":1,\"477\":1,\"478\":1,\"513\":1,\"570\":1,\"607\":1,\"647\":1,\"731\":1,\"732\":1,\"746\":1,\"791\":1,\"792\":1,\"951\":1,\"954\":1,\"986\":1,\"1014\":1,\"1069\":1,\"1071\":2,\"1170\":2,\"1202\":1,\"1203\":1,\"1208\":1,\"1217\":1,\"1221\":1,\"1225\":1,\"1229\":2,\"1230\":3,\"1236\":3,\"1237\":1,\"1257\":1,\"1274\":10,\"1275\":2,\"1276\":3,\"1281\":3,\"1282\":4,\"1287\":2,\"1288\":1,\"1303\":2,\"1307\":1,\"1308\":2,\"1309\":2,\"1313\":1,\"1314\":1,\"1352\":1,\"1376\":1,\"1377\":1,\"1378\":1,\"1380\":1,\"1384\":3}}],[\"0异或一个数为那个数本身\",{\"1\":{\"1324\":1}}],[\"0b100110\",{\"1\":{\"1321\":1}}],[\"0b\",{\"1\":{\"1321\":1}}],[\"0位置为nums\",{\"1\":{\"1280\":1}}],[\"0～9\",{\"1\":{\"1225\":1}}],[\"0~9\",{\"1\":{\"1225\":1}}],[\"09\",{\"1\":{\"1112\":1}}],[\"0+\",{\"0\":{\"1083\":1},\"1\":{\"1074\":1}}],[\"040\",{\"0\":{\"1203\":1}}],[\"04\",{\"0\":{\"1063\":1,\"1331\":1,\"1335\":1},\"1\":{\"1112\":1}}],[\"0x0000021>\",{\"1\":{\"1094\":1}}],[\"0x0000022>\",{\"1\":{\"1094\":1}}],[\"0x000002c7b9955b48>\",{\"1\":{\"1023\":1}}],[\"0x000001b61cc30af0>endpoint为key\",{\"1\":{\"1063\":1}}],[\"0x01b1ead0>\",{\"1\":{\"848\":1,\"1009\":1}}],[\"0x0152fa58>\",{\"1\":{\"848\":1,\"1009\":1}}],[\"0x018dea80>\",{\"1\":{\"847\":1,\"1009\":1}}],[\"0改进\",{\"0\":{\"977\":1}}],[\"0之间的区别\",{\"0\":{\"974\":1}}],[\"0之后已废弃\",{\"1\":{\"431\":1}}],[\"07\",{\"1\":{\"776\":1}}],[\"0s\",{\"1\":{\"712\":1}}],[\"05\",{\"0\":{\"1064\":1},\"1\":{\"662\":1,\"776\":1,\"827\":1,\"872\":1}}],[\"0024798000004011556\",{\"1\":{\"758\":1}}],[\"0001\",{\"1\":{\"1274\":3}}],[\"000\",{\"1\":{\"1033\":4}}],[\"00041819999933068175\",{\"1\":{\"758\":1}}],[\"000371\",{\"1\":{\"504\":1}}],[\"000000\",{\"1\":{\"503\":3}}],[\"005959z\",{\"1\":{\"504\":1}}],[\"00\",{\"1\":{\"503\":2,\"513\":1,\"1203\":1}}],[\"00c9e977ee52632098aadb515c90076603daee94a167728110ef8086d0d5b37d\",{\"1\":{\"108\":1}}],[\"0开始默认限制是256tb\",{\"1\":{\"308\":1}}],[\"0才引入的特性\",{\"1\":{\"264\":1}}],[\"0宕机\",{\"1\":{\"148\":1}}],[\"03\",{\"0\":{\"1062\":1},\"1\":{\"67\":2,\"108\":2,\"827\":1,\"872\":2}}],[\"02\",{\"0\":{\"1061\":1},\"1\":{\"67\":2,\"504\":1,\"888\":1}}],[\"01背包组合dp\",{\"1\":{\"1274\":1}}],[\"01背包题目在力扣中没有原题\",{\"1\":{\"1274\":1}}],[\"01背包的变形\",{\"0\":{\"1274\":1}}],[\"01\",{\"0\":{\"1060\":1,\"1270\":1},\"1\":{\"67\":2,\"107\":1,\"469\":1,\"1203\":1}}],[\"0\",{\"0\":{\"264\":1,\"429\":1,\"430\":1,\"974\":2,\"1070\":1,\"1357\":1},\"1\":{\"18\":1,\"19\":1,\"23\":1,\"26\":1,\"30\":1,\"37\":1,\"46\":1,\"63\":1,\"73\":8,\"81\":1,\"93\":2,\"96\":2,\"107\":2,\"108\":17,\"125\":2,\"147\":4,\"159\":4,\"161\":1,\"190\":1,\"198\":1,\"202\":1,\"264\":1,\"324\":2,\"356\":1,\"361\":1,\"388\":1,\"469\":2,\"482\":7,\"498\":1,\"503\":4,\"504\":1,\"507\":2,\"513\":2,\"520\":2,\"532\":1,\"533\":3,\"549\":1,\"613\":1,\"648\":2,\"660\":3,\"661\":1,\"706\":6,\"712\":1,\"713\":1,\"717\":1,\"725\":2,\"732\":1,\"733\":1,\"743\":1,\"753\":2,\"755\":1,\"756\":1,\"757\":1,\"758\":6,\"776\":7,\"844\":2,\"848\":1,\"849\":1,\"861\":1,\"862\":1,\"871\":1,\"879\":1,\"908\":3,\"909\":1,\"919\":1,\"929\":2,\"930\":2,\"942\":1,\"943\":1,\"944\":1,\"975\":1,\"1009\":1,\"1010\":1,\"1023\":1,\"1024\":1,\"1045\":1,\"1049\":1,\"1050\":2,\"1064\":5,\"1069\":1,\"1071\":1,\"1089\":1,\"1112\":2,\"1147\":1,\"1169\":1,\"1180\":6,\"1194\":1,\"1198\":10,\"1202\":21,\"1203\":8,\"1207\":4,\"1208\":1,\"1209\":2,\"1221\":15,\"1225\":4,\"1227\":1,\"1229\":15,\"1236\":9,\"1237\":1,\"1241\":13,\"1242\":16,\"1257\":24,\"1258\":1,\"1259\":1,\"1265\":9,\"1266\":6,\"1271\":8,\"1272\":4,\"1273\":2,\"1274\":19,\"1275\":7,\"1276\":5,\"1280\":13,\"1281\":8,\"1282\":6,\"1286\":3,\"1288\":1,\"1289\":2,\"1292\":95,\"1297\":1,\"1299\":4,\"1300\":1,\"1303\":49,\"1307\":17,\"1308\":7,\"1309\":2,\"1313\":3,\"1314\":4,\"1324\":2,\"1329\":3,\"1331\":2,\"1332\":1,\"1335\":4,\"1337\":1,\"1338\":1,\"1339\":7,\"1340\":7,\"1341\":5,\"1352\":34,\"1353\":100,\"1354\":45,\"1364\":1,\"1365\":6,\"1366\":3,\"1376\":29,\"1377\":3,\"1378\":2,\"1379\":4,\"1380\":2,\"1384\":5,\"1385\":2,\"1390\":3,\"1395\":7,\"1399\":1,\"1400\":4,\"1403\":6}}],[\"一名科研人员的\",{\"1\":{\"1403\":1}}],[\"一不小心就会写失败\",{\"1\":{\"1389\":1}}],[\"一部分地块种植了花\",{\"1\":{\"1376\":1}}],[\"一定不是答案\",{\"1\":{\"1403\":2}}],[\"一定满足x+y\",{\"1\":{\"1379\":1}}],[\"一定是等于1的\",{\"1\":{\"1299\":1}}],[\"一定为1\",{\"1\":{\"1275\":1}}],[\"一定为0\",{\"1\":{\"1271\":1}}],[\"一股\",{\"1\":{\"1292\":1}}],[\"一开始你手头没有任何零钱\",{\"1\":{\"1366\":1}}],[\"一开始我想的是从左上角到右下角进行遍历\",{\"1\":{\"1303\":1}}],[\"一开始我想用dp数组的方式\",{\"1\":{\"1289\":1}}],[\"一开始i==j的时候初始化为true\",{\"1\":{\"1299\":1}}],[\"一开始拿到题目我是有点蒙圈的\",{\"1\":{\"1281\":1}}],[\"一块披萨\",{\"1\":{\"1282\":1}}],[\"一夜之内能够偷窃到的最高金额\",{\"1\":{\"1280\":1}}],[\"一和零\",{\"1\":{\"1274\":1}}],[\"一维dp数组初始化\",{\"1\":{\"1273\":1}}],[\"一维数组\",{\"1\":{\"1273\":1}}],[\"一维滚动数组\",{\"0\":{\"1273\":1}}],[\"一起向某个方向移动\",{\"1\":{\"1263\":1}}],[\"一快一慢\",{\"1\":{\"1255\":1}}],[\"一些可行的构造方案包括\",{\"1\":{\"1300\":1}}],[\"一些原本属于自己的自省信息会丢失\",{\"1\":{\"932\":1}}],[\"一些大的数据类型比如text可以存储更多\",{\"1\":{\"326\":1}}],[\"一是一个对象如果直接或间接的引用了自身\",{\"1\":{\"894\":1}}],[\"一是内存中的日志缓冲\",{\"1\":{\"425\":1}}],[\"一句话概述\",{\"1\":{\"892\":1}}],[\"一对多视图\",{\"1\":{\"888\":1}}],[\"一对多关系\",{\"0\":{\"885\":1}}],[\"一对一\",{\"1\":{\"886\":1}}],[\"一段时间后\",{\"1\":{\"953\":1}}],[\"一段时间内被命中很多次\",{\"1\":{\"839\":1,\"1003\":1}}],[\"一段代码可能会抛出多种类型的异常\",{\"1\":{\"743\":1}}],[\"一书中还探讨了如何利用python的一等函数特性来进一步简化策略模式\",{\"1\":{\"776\":1}}],[\"一书中关于策略模式的说明非常详细\",{\"1\":{\"776\":1}}],[\"一书中把它称作远程代理\",{\"1\":{\"769\":1}}],[\"一书中\",{\"1\":{\"764\":1}}],[\"一台机器需要可以接受的最大访问量是多少\",{\"1\":{\"813\":1}}],[\"一台\",{\"1\":{\"725\":1}}],[\"一处改动\",{\"1\":{\"542\":1}}],[\"一共有几种方式可以到达\",{\"1\":{\"1303\":2}}],[\"一共有四种作用域\",{\"1\":{\"982\":1}}],[\"一共有内循环\",{\"1\":{\"513\":1}}],[\"一共有\",{\"1\":{\"513\":1,\"1274\":1}}],[\"一共有4种类型的记录\",{\"1\":{\"324\":1}}],[\"一种是使用subtract方法\",{\"1\":{\"943\":1}}],[\"一种是使用update方法\",{\"1\":{\"943\":1}}],[\"一种是\",{\"1\":{\"461\":1}}],[\"一致\",{\"1\":{\"1266\":1}}],[\"一致状态的含义是数据库中的数据应满足完整性约束\",{\"1\":{\"425\":1}}],[\"一致性\",{\"1\":{\"425\":3}}],[\"一页的成本就是\",{\"1\":{\"361\":1}}],[\"一条sql语句的执行过程详解\",{\"0\":{\"355\":1}}],[\"一颗m阶的b树\",{\"1\":{\"338\":1}}],[\"一般解决问题包括但是不仅限于两数之和类问题\",{\"1\":{\"1255\":1}}],[\"一般线程池都必须具备下面几个组成部分\",{\"1\":{\"1036\":1}}],[\"一般都会分开发送\",{\"1\":{\"954\":1}}],[\"一般来讲都会设置软删除\",{\"1\":{\"877\":1}}],[\"一般来说\",{\"1\":{\"579\":1,\"581\":1}}],[\"一般可能需要具体问题具体分析\",{\"1\":{\"725\":1}}],[\"一般120个字符\",{\"1\":{\"536\":1}}],[\"一般5个之内\",{\"1\":{\"533\":1}}],[\"一般不超过2层\",{\"1\":{\"533\":1}}],[\"一般的分页查询使用简单的\",{\"1\":{\"498\":1}}],[\"一般的实现方式是对记录数据版本进行比对\",{\"1\":{\"403\":1}}],[\"一般在50行内\",{\"1\":{\"533\":1}}],[\"一般在\",{\"1\":{\"439\":1}}],[\"一般在没有使用到索引的时候会出现\",{\"1\":{\"349\":1}}],[\"一般会使用statement模式保存binlog\",{\"1\":{\"395\":1}}],[\"一般建议选择取值2\",{\"1\":{\"388\":1}}],[\"一般为表的定义的主键\",{\"1\":{\"369\":1}}],[\"一般是分组里主键最大值才有的\",{\"1\":{\"324\":1}}],[\"一般是读就绪或写就绪\",{\"1\":{\"268\":1,\"269\":1}}],[\"一般使用定期删除加上allkeys\",{\"1\":{\"213\":1}}],[\"一个子集的\",{\"1\":{\"1384\":1}}],[\"一个机器人位于一个\",{\"1\":{\"1303\":2}}],[\"一个字符串的\",{\"1\":{\"1308\":1}}],[\"一个字符的回文子序列长度就是1\",{\"1\":{\"1299\":1}}],[\"一个字典counter用来判断当前元素的数量\",{\"1\":{\"1198\":1}}],[\"一个可能的最长回文子序列为\",{\"1\":{\"1299\":2}}],[\"一个是取dp\",{\"1\":{\"1273\":1}}],[\"一个是取自己dp\",{\"1\":{\"1273\":1}}],[\"一个是内存中的日志缓冲\",{\"1\":{\"382\":1}}],[\"一个正确的课程顺序是\",{\"1\":{\"1242\":1}}],[\"一个空数组\",{\"1\":{\"1242\":1}}],[\"一个来自\",{\"1\":{\"1236\":1}}],[\"一个节点的根节点接到另一个节点的根节点上\",{\"1\":{\"1225\":1}}],[\"一个代表最长高\",{\"1\":{\"1201\":1}}],[\"一个代表最长宽\",{\"1\":{\"1201\":1}}],[\"一个私有变量\",{\"1\":{\"854\":1}}],[\"一个缓存的数据\",{\"1\":{\"839\":1,\"1003\":1}}],[\"一个类只负责完成一个职责或者功能\",{\"1\":{\"762\":1}}],[\"一个进程崩溃不影响其他进程\",{\"1\":{\"712\":1}}],[\"一个完整的告警管理系统不仅仅局限于发送通知\",{\"1\":{\"628\":1}}],[\"一个新的连接会被建立并返回给调用创建新连接的方法的程序\",{\"1\":{\"578\":1}}],[\"一个连接资源时\",{\"1\":{\"578\":1}}],[\"一个函数只完成一个任务\",{\"1\":{\"548\":1}}],[\"一个py文件一般不超过300行\",{\"1\":{\"536\":1}}],[\"一个pod由一个pause容器设置好整个pod里面所有的容器的网络和名称空间等信息\",{\"1\":{\"141\":1}}],[\"一个页需要分\",{\"1\":{\"468\":1}}],[\"一个页中存放的行数据越多\",{\"1\":{\"321\":1,\"322\":1}}],[\"一个事务执行过程中看到的数据\",{\"1\":{\"474\":1,\"482\":1}}],[\"一个事务中多次按相同条件查询\",{\"1\":{\"425\":1}}],[\"一个事务中多次读取同一行记录的结果不一致\",{\"1\":{\"425\":1}}],[\"一个事务读取到了另一个事务修改但未提交的数据\",{\"1\":{\"425\":1}}],[\"一个逻辑工作单元要成为事务\",{\"1\":{\"425\":1}}],[\"一个线程负责管理一个连接\",{\"1\":{\"332\":1}}],[\"一个myd表数据文件\",{\"1\":{\"308\":1}}],[\"一个大红包分为多个小红包\",{\"1\":{\"293\":1}}],[\"一个元素的计数是多少\",{\"1\":{\"945\":1}}],[\"一个元素判断结果为没有时则一定没有\",{\"1\":{\"243\":1}}],[\"一个元素如果判断结果为存在的时候元素不一定存在\",{\"1\":{\"240\":1}}],[\"一个key可能对应着多个数据\",{\"1\":{\"242\":1}}],[\"一个英文字母一个字节\",{\"1\":{\"220\":1}}],[\"一个deployment产生三个资源\",{\"1\":{\"164\":1}}],[\"一个启动失败就会尝试重启pod内的这个容器\",{\"1\":{\"142\":1}}],[\"一个或多个子序列\",{\"1\":{\"1198\":1}}],[\"一个或多个\",{\"1\":{\"140\":1}}],[\"一个\",{\"1\":{\"114\":1,\"200\":1,\"308\":4,\"1354\":1}}],[\"一样长\",{\"1\":{\"74\":1}}],[\"一旦线程的切换变的有序后\",{\"1\":{\"1031\":1}}],[\"一旦完成三次握手\",{\"1\":{\"951\":1}}],[\"一旦泄露\",{\"1\":{\"698\":1}}],[\"一旦\",{\"1\":{\"698\":1}}],[\"一旦定时任务顺利完成\",{\"1\":{\"617\":1}}],[\"一旦获得批准\",{\"1\":{\"616\":1}}],[\"一旦需要回滚操作\",{\"1\":{\"476\":1}}],[\"一旦某个描述符就绪\",{\"1\":{\"268\":1,\"269\":1}}],[\"一旦重试次数达到了\",{\"1\":{\"198\":1}}],[\"一旦达到\",{\"1\":{\"198\":1}}],[\"一旦删除了旧的\",{\"1\":{\"162\":1}}],[\"一旦实现了自动回滚\",{\"1\":{\"160\":1}}],[\"一旦旧\",{\"1\":{\"159\":1}}],[\"一旦启动后续就不用了\",{\"1\":{\"146\":1}}],[\"一旦犯错我们可以考虑流程的优化\",{\"1\":{\"58\":1}}],[\"一旦出现故障\",{\"1\":{\"32\":1}}],[\"一次购买一杯\",{\"1\":{\"1366\":1}}],[\"一次acquire\",{\"1\":{\"1034\":1}}],[\"一次可以放行特定个\",{\"1\":{\"1032\":1}}],[\"一次可以放行任意个\",{\"1\":{\"1032\":1}}],[\"一次全部放行\",{\"1\":{\"1032\":1}}],[\"一次只能放行一个\",{\"1\":{\"1032\":2}}],[\"一次只获取一个元素\",{\"1\":{\"731\":1}}],[\"一次缓存的数据越多\",{\"1\":{\"514\":1}}],[\"一次查询就可以找到\",{\"1\":{\"349\":1}}],[\"一次性进行处理往往是不方便的\",{\"1\":{\"893\":1}}],[\"一次性的放到文件事件分派器中\",{\"1\":{\"267\":1}}],[\"一次性成功探针\",{\"1\":{\"146\":1}}],[\"一次\",{\"1\":{\"260\":1,\"1339\":2,\"1354\":1}}],[\"一次部署\",{\"1\":{\"46\":1}}],[\"一次验证一点\",{\"1\":{\"20\":1}}],[\"一\",{\"0\":{\"18\":1,\"30\":1,\"38\":1,\"50\":1,\"62\":1,\"85\":1,\"106\":1,\"124\":1,\"129\":1,\"140\":1,\"152\":1,\"176\":1,\"185\":1,\"195\":1,\"210\":1,\"217\":1,\"224\":1,\"231\":1,\"238\":1,\"249\":1,\"256\":1,\"274\":1,\"293\":1,\"299\":1,\"308\":1,\"331\":1,\"338\":1,\"349\":1,\"355\":1,\"367\":1,\"378\":1,\"399\":1,\"412\":1,\"425\":1,\"429\":1,\"438\":1,\"460\":1,\"467\":1,\"492\":1,\"498\":1,\"503\":1,\"511\":1,\"518\":1,\"529\":1,\"561\":1,\"578\":1,\"588\":1,\"604\":1,\"623\":1,\"646\":1,\"674\":1,\"703\":1,\"729\":1,\"740\":1,\"762\":1,\"769\":1,\"775\":1,\"780\":1,\"788\":1,\"797\":1,\"804\":1,\"813\":1,\"822\":1,\"827\":1,\"832\":1,\"843\":1,\"853\":1,\"860\":1,\"871\":1,\"879\":1,\"886\":1,\"907\":1,\"929\":1,\"940\":1,\"951\":1,\"966\":1,\"982\":1,\"990\":1,\"991\":1,\"996\":1,\"1007\":1,\"1014\":1,\"1021\":1,\"1029\":1,\"1046\":1,\"1057\":1,\"1069\":1,\"1093\":1,\"1099\":1,\"1108\":1,\"1141\":1,\"1160\":1,\"1177\":1,\"1187\":1,\"1193\":1,\"1217\":1,\"1225\":1,\"1234\":1,\"1241\":1,\"1255\":1,\"1263\":1,\"1270\":1,\"1296\":1,\"1321\":1,\"1345\":1,\"1358\":1,\"1389\":1}}],[\"611\",{\"0\":{\"1379\":1}}],[\"695\",{\"0\":{\"1353\":1}}],[\"63\",{\"1\":{\"1303\":1}}],[\"6379\",{\"1\":{\"648\":2}}],[\"62\",{\"1\":{\"1303\":1}}],[\"6个回文子串\",{\"1\":{\"1299\":1}}],[\"6个请求处理函数\",{\"1\":{\"1125\":1}}],[\"680\",{\"1\":{\"1297\":1}}],[\"684\",{\"0\":{\"1230\":1}}],[\"674\",{\"0\":{\"1287\":1}}],[\"673\",{\"0\":{\"1208\":1,\"1288\":1}}],[\"659\",{\"0\":{\"1198\":1}}],[\"6版本查询缓存\",{\"1\":{\"356\":1}}],[\"6字节\",{\"1\":{\"325\":2}}],[\"605\",{\"0\":{\"1376\":1}}],[\"60秒之内发生至少10000次写操作\",{\"1\":{\"256\":1}}],[\"60\",{\"1\":{\"256\":1,\"339\":1}}],[\"600\",{\"1\":{\"160\":1}}],[\"66666\",{\"1\":{\"135\":1}}],[\"6b74b79f57\",{\"1\":{\"125\":2}}],[\"647\",{\"1\":{\"1299\":1}}],[\"64mb\",{\"1\":{\"260\":2}}],[\"64byte\",{\"1\":{\"220\":1}}],[\"64系统下不限制内存大小\",{\"1\":{\"210\":1}}],[\"6443\",{\"1\":{\"108\":1}}],[\"64\",{\"1\":{\"73\":4,\"108\":1,\"865\":2,\"886\":2,\"1303\":1}}],[\"6\",{\"0\":{\"17\":1,\"151\":1,\"255\":1,\"286\":1,\"377\":1,\"525\":1,\"569\":1,\"570\":1,\"720\":1,\"721\":1,\"722\":1,\"803\":1,\"859\":1,\"897\":1,\"946\":1,\"1020\":1,\"1084\":1,\"1085\":1,\"1087\":1,\"1088\":1,\"1107\":1,\"1303\":1},\"1\":{\"172\":1,\"198\":1,\"356\":1,\"405\":2,\"408\":4,\"455\":2,\"482\":4,\"652\":2,\"735\":1,\"755\":1,\"879\":1,\"1198\":3,\"1203\":1,\"1207\":4,\"1209\":3,\"1229\":1,\"1281\":2,\"1282\":4,\"1286\":2,\"1289\":2,\"1292\":23,\"1299\":1,\"1303\":2,\"1335\":1,\"1353\":1,\"1365\":1,\"1377\":2,\"1384\":1,\"1395\":3,\"1399\":3,\"1400\":1,\"1403\":3}}],[\"524\",{\"0\":{\"1380\":1}}],[\"52字节以后\",{\"1\":{\"959\":1}}],[\"5=1+1+1+1+1\",{\"1\":{\"1275\":1}}],[\"5=2+1+1+1\",{\"1\":{\"1275\":1}}],[\"5=2+2+1\",{\"1\":{\"1275\":1}}],[\"5=5\",{\"1\":{\"1275\":1}}],[\"516\",{\"1\":{\"1299\":1}}],[\"518\",{\"1\":{\"1275\":1}}],[\"512mb\",{\"1\":{\"260\":1}}],[\"512\",{\"1\":{\"220\":1}}],[\"5起\",{\"1\":{\"923\":1}}],[\"5s\",{\"1\":{\"712\":1,\"713\":1}}],[\"56\",{\"1\":{\"662\":1}}],[\"5秒后重试\",{\"1\":{\"658\":1}}],[\"502\",{\"1\":{\"967\":1}}],[\"501\",{\"1\":{\"967\":1}}],[\"5000\",{\"1\":{\"1064\":2,\"1180\":2,\"1241\":1}}],[\"5000000\",{\"1\":{\"504\":1,\"1023\":1}}],[\"500\",{\"1\":{\"349\":1,\"1282\":1,\"1309\":1,\"1354\":1,\"1385\":1}}],[\"50\",{\"1\":{\"349\":3,\"504\":1,\"725\":2,\"924\":1,\"1180\":1,\"1341\":2,\"1353\":1}}],[\"5个字节也就是40个二进制位\",{\"1\":{\"324\":1}}],[\"5mi\",{\"1\":{\"67\":1}}],[\"5\",{\"0\":{\"14\":1,\"139\":1,\"248\":1,\"285\":1,\"366\":1,\"429\":1,\"524\":1,\"619\":1,\"660\":1,\"698\":1,\"716\":1,\"717\":1,\"718\":1,\"796\":1,\"852\":1,\"896\":1,\"923\":1,\"924\":1,\"925\":1,\"945\":1,\"1013\":1,\"1098\":1,\"1156\":1,\"1165\":1,\"1259\":1,\"1295\":1,\"1333\":1,\"1383\":1},\"1\":{\"108\":1,\"147\":13,\"159\":2,\"181\":3,\"283\":1,\"356\":2,\"405\":1,\"425\":1,\"455\":1,\"504\":1,\"507\":1,\"520\":1,\"706\":2,\"732\":1,\"736\":1,\"753\":1,\"776\":6,\"834\":1,\"839\":1,\"920\":1,\"921\":1,\"947\":1,\"985\":1,\"992\":1,\"998\":1,\"1003\":1,\"1023\":2,\"1049\":2,\"1194\":1,\"1198\":19,\"1203\":1,\"1207\":1,\"1208\":3,\"1209\":2,\"1229\":4,\"1230\":1,\"1237\":3,\"1265\":2,\"1266\":2,\"1274\":10,\"1275\":2,\"1280\":1,\"1282\":2,\"1286\":1,\"1287\":4,\"1288\":3,\"1289\":5,\"1292\":23,\"1299\":1,\"1300\":1,\"1303\":4,\"1307\":1,\"1309\":6,\"1314\":2,\"1335\":1,\"1340\":3,\"1341\":1,\"1365\":3,\"1366\":25,\"1377\":2,\"1378\":3,\"1384\":2,\"1390\":2,\"1395\":6,\"1399\":4,\"1400\":2,\"1403\":4}}],[\"j结尾\",{\"1\":{\"1307\":1}}],[\"j结尾的字符中最长的公共重复子数组\",{\"1\":{\"1307\":1}}],[\"j+1\",{\"1\":{\"1307\":4,\"1308\":4,\"1309\":4,\"1313\":4,\"1314\":1}}],[\"j位置需要的最小血量\",{\"1\":{\"1303\":1}}],[\"j位置一共有dp\",{\"1\":{\"1303\":2}}],[\"j是从左到右\",{\"1\":{\"1299\":1}}],[\"j指的是背包\",{\"1\":{\"1271\":1}}],[\"j处所能构成最大正方形的最大边长\",{\"1\":{\"1202\":1}}],[\"jinja\",{\"1\":{\"1059\":1}}],[\"j\",{\"1\":{\"1024\":4,\"1198\":5,\"1202\":16,\"1203\":1,\"1207\":5,\"1208\":15,\"1221\":3,\"1237\":1,\"1257\":4,\"1271\":14,\"1272\":9,\"1273\":21,\"1274\":17,\"1275\":14,\"1276\":15,\"1286\":4,\"1288\":7,\"1289\":7,\"1292\":10,\"1299\":49,\"1303\":69,\"1307\":20,\"1308\":13,\"1309\":7,\"1313\":18,\"1314\":8,\"1352\":6,\"1353\":5,\"1354\":1,\"1364\":4}}],[\"just\",{\"1\":{\"799\":1}}],[\"jdk\",{\"1\":{\"762\":1}}],[\"jdkversion\",{\"1\":{\"73\":1}}],[\"jti\",{\"1\":{\"696\":1}}],[\"jwtpayload\",{\"1\":{\"872\":2}}],[\"jwtverifyexception\",{\"1\":{\"872\":2}}],[\"jwt的头部承载两个信息\",{\"0\":{\"695\":1}}],[\"jwt就是一个字符串\",{\"0\":{\"693\":1}}],[\"jwt一般可以用作独立的身份验证令牌\",{\"1\":{\"692\":1}}],[\"jwt\",{\"0\":{\"685\":1,\"692\":1,\"698\":1},\"1\":{\"692\":1,\"698\":9,\"872\":6,\"873\":1},\"2\":{\"700\":1,\"851\":1,\"875\":1}}],[\"java\",{\"1\":{\"331\":1}}],[\"john\",{\"1\":{\"776\":1,\"1147\":1}}],[\"joe\",{\"1\":{\"776\":7}}],[\"jobs\",{\"1\":{\"555\":1}}],[\"job怎么定义\",{\"1\":{\"202\":1}}],[\"jobtemplate\",{\"1\":{\"202\":1,\"203\":1}}],[\"job同样可以指定selector来关联pod\",{\"1\":{\"198\":1}}],[\"job任务不建议去运行nginx\",{\"1\":{\"198\":1}}],[\"job就结束了\",{\"1\":{\"198\":1}}],[\"job超时以后\",{\"1\":{\"198\":1}}],[\"job结束需要成功运行的pods\",{\"1\":{\"198\":1}}],[\"job需要手动删除\",{\"1\":{\"198\":1}}],[\"job情况下\",{\"1\":{\"197\":1}}],[\"job\",{\"0\":{\"195\":1},\"1\":{\"176\":1,\"196\":1,\"197\":6,\"198\":8,\"200\":2,\"201\":1,\"202\":2,\"662\":1}}],[\"join优化\",{\"2\":{\"516\":1}}],[\"join\",{\"0\":{\"510\":1,\"513\":1,\"514\":1,\"524\":1},\"1\":{\"108\":2,\"304\":1,\"349\":7,\"351\":1,\"416\":1,\"507\":1,\"511\":2,\"513\":15,\"514\":2,\"662\":1,\"706\":1,\"717\":3,\"776\":1,\"916\":2,\"924\":1,\"935\":3,\"936\":5,\"1033\":2}}],[\"jsonprovider\",{\"1\":{\"1059\":1}}],[\"jsonencoder\",{\"0\":{\"827\":2},\"1\":{\"827\":5}}],[\"jsonify\",{\"1\":{\"822\":1,\"831\":1,\"863\":2}}],[\"json\",{\"0\":{\"824\":1},\"1\":{\"108\":1,\"648\":3,\"692\":1,\"827\":2,\"862\":1,\"873\":1,\"986\":1,\"1059\":2,\"1100\":2}}],[\"jfrog\",{\"2\":{\"12\":1,\"13\":1}}],[\"jfrog和制品仓\",{\"0\":{\"11\":1}}],[\"jenkinsutils\",{\"1\":{\"662\":1}}],[\"jenkinsinstance\",{\"1\":{\"662\":1}}],[\"jenkinsinfo\",{\"1\":{\"662\":1}}],[\"jenkins数据采集任务\",{\"1\":{\"662\":1}}],[\"jenkins数据采集\",{\"1\":{\"662\":1}}],[\"jenkins\",{\"1\":{\"553\":1,\"662\":9},\"2\":{\"9\":1,\"10\":1}}],[\"jenkins创建和jenkins\",{\"0\":{\"8\":1}}],[\"49\",{\"1\":{\"1377\":2}}],[\"494\",{\"1\":{\"1274\":1}}],[\"43692\",{\"1\":{\"1049\":1}}],[\"44228\",{\"1\":{\"1049\":1}}],[\"44196\",{\"1\":{\"1049\":1}}],[\"44\",{\"1\":{\"863\":1}}],[\"443\",{\"1\":{\"73\":6,\"90\":1}}],[\"42804\",{\"1\":{\"1049\":1}}],[\"42\",{\"1\":{\"827\":1,\"886\":1}}],[\"42c9\",{\"1\":{\"125\":2}}],[\"416\",{\"1\":{\"1274\":1}}],[\"41552\",{\"1\":{\"1049\":1}}],[\"41\",{\"1\":{\"662\":1,\"887\":1}}],[\"400\",{\"1\":{\"1280\":1}}],[\"403\",{\"1\":{\"967\":1}}],[\"404\",{\"1\":{\"822\":1,\"831\":1,\"849\":3,\"1010\":3,\"1144\":1}}],[\"40\",{\"1\":{\"662\":1,\"880\":1,\"1274\":1}}],[\"455\",{\"0\":{\"1364\":1}}],[\"45\",{\"1\":{\"504\":1,\"679\":1}}],[\"4k\",{\"1\":{\"468\":2}}],[\"4写满后\",{\"1\":{\"390\":1}}],[\"46~51字节\",{\"1\":{\"959\":1}}],[\"46\",{\"1\":{\"96\":1}}],[\"474\",{\"1\":{\"1274\":1}}],[\"47\",{\"1\":{\"96\":1}}],[\"4\",{\"0\":{\"11\":1,\"26\":1,\"45\":1,\"57\":1,\"128\":1,\"171\":1,\"203\":1,\"237\":1,\"263\":1,\"264\":1,\"279\":1,\"284\":1,\"354\":1,\"403\":1,\"418\":1,\"419\":1,\"523\":1,\"565\":1,\"566\":1,\"612\":1,\"618\":1,\"628\":1,\"637\":1,\"659\":1,\"667\":1,\"673\":1,\"685\":1,\"691\":1,\"697\":1,\"701\":1,\"734\":1,\"787\":1,\"842\":1,\"895\":1,\"918\":1,\"919\":1,\"920\":1,\"921\":2,\"939\":1,\"944\":1,\"1006\":1,\"1081\":1,\"1082\":1,\"1092\":1,\"1113\":1,\"1152\":1,\"1154\":1,\"1155\":1,\"1164\":1,\"1292\":1,\"1332\":1,\"1375\":1,\"1394\":1,\"1402\":1},\"1\":{\"63\":1,\"108\":3,\"172\":1,\"197\":1,\"210\":1,\"264\":2,\"283\":1,\"324\":1,\"356\":1,\"405\":1,\"425\":2,\"455\":1,\"468\":1,\"477\":1,\"506\":1,\"507\":1,\"525\":1,\"555\":1,\"652\":2,\"708\":1,\"712\":3,\"720\":1,\"721\":1,\"753\":1,\"776\":1,\"839\":1,\"882\":1,\"912\":2,\"930\":2,\"941\":1,\"943\":1,\"959\":1,\"1003\":1,\"1023\":1,\"1049\":2,\"1104\":2,\"1194\":2,\"1198\":20,\"1202\":1,\"1203\":1,\"1207\":5,\"1208\":2,\"1209\":3,\"1221\":8,\"1229\":2,\"1230\":3,\"1237\":5,\"1242\":2,\"1257\":3,\"1265\":3,\"1266\":3,\"1270\":1,\"1273\":2,\"1274\":5,\"1275\":2,\"1276\":5,\"1280\":4,\"1281\":12,\"1282\":3,\"1286\":3,\"1287\":2,\"1288\":2,\"1289\":6,\"1292\":29,\"1299\":1,\"1300\":2,\"1303\":3,\"1307\":1,\"1309\":2,\"1335\":1,\"1336\":2,\"1341\":1,\"1365\":5,\"1366\":1,\"1377\":2,\"1378\":4,\"1379\":6,\"1384\":2,\"1390\":2,\"1395\":3,\"1399\":1,\"1400\":1}}],[\"3个孩子的胃口值分别是\",{\"1\":{\"1364\":1}}],[\"3x3\",{\"1\":{\"1303\":1}}],[\"3n\",{\"0\":{\"1282\":1},\"1\":{\"1282\":2}}],[\"377\",{\"1\":{\"1275\":1}}],[\"3最大数\",{\"1\":{\"921\":2}}],[\"354\",{\"0\":{\"1209\":1}}],[\"35\",{\"0\":{\"1399\":1},\"1\":{\"879\":1}}],[\"392\",{\"0\":{\"1313\":1}}],[\"39\",{\"1\":{\"861\":1}}],[\"344\",{\"0\":{\"1258\":1}}],[\"34\",{\"0\":{\"1400\":1},\"1\":{\"680\":1,\"1395\":1}}],[\"334\",{\"0\":{\"1289\":1}}],[\"33\",{\"1\":{\"529\":2,\"929\":1,\"1274\":1}}],[\"3表示最大记录\",{\"1\":{\"324\":1}}],[\"32\",{\"1\":{\"1275\":1,\"1329\":1,\"1339\":3}}],[\"32~45\",{\"1\":{\"959\":1}}],[\"32bit\",{\"1\":{\"827\":1,\"872\":1}}],[\"32gb\",{\"1\":{\"725\":1}}],[\"32位操作系统最多可以使用3g\",{\"1\":{\"210\":1}}],[\"32767\",{\"1\":{\"93\":1}}],[\"3台linux服务器\",{\"1\":{\"106\":1}}],[\"309\",{\"1\":{\"1292\":1}}],[\"304\",{\"1\":{\"970\":1}}],[\"30403\",{\"1\":{\"125\":1}}],[\"302表示临时重定向\",{\"1\":{\"967\":1}}],[\"301\",{\"1\":{\"967\":1}}],[\"300秒之内至少发生10次写操作\",{\"1\":{\"256\":1}}],[\"300\",{\"0\":{\"1207\":1,\"1286\":1},\"1\":{\"256\":1,\"725\":1,\"1202\":1,\"1352\":1}}],[\"30009931\",{\"1\":{\"504\":1}}],[\"30007\",{\"1\":{\"93\":1}}],[\"30000\",{\"1\":{\"93\":1}}],[\"30s\",{\"1\":{\"148\":1}}],[\"30\",{\"1\":{\"147\":1,\"159\":2,\"227\":2,\"661\":2,\"776\":1,\"1270\":1,\"1273\":1,\"1303\":1}}],[\"30m\",{\"1\":{\"67\":2}}],[\"31\",{\"1\":{\"63\":1,\"1274\":1,\"1339\":1}}],[\"3\",{\"0\":{\"8\":1,\"25\":1,\"44\":1,\"56\":1,\"123\":1,\"132\":1,\"168\":1,\"191\":1,\"202\":1,\"230\":1,\"262\":1,\"270\":1,\"278\":1,\"283\":1,\"320\":1,\"348\":1,\"395\":1,\"402\":1,\"522\":1,\"550\":1,\"592\":1,\"607\":1,\"611\":1,\"617\":1,\"627\":1,\"632\":1,\"636\":1,\"644\":1,\"649\":1,\"653\":1,\"658\":1,\"666\":1,\"690\":1,\"696\":1,\"706\":1,\"710\":1,\"712\":1,\"713\":1,\"718\":1,\"722\":1,\"733\":1,\"765\":1,\"766\":1,\"767\":2,\"779\":1,\"784\":1,\"792\":1,\"831\":1,\"839\":1,\"867\":1,\"894\":1,\"914\":1,\"915\":1,\"916\":2,\"920\":1,\"925\":1,\"928\":1,\"943\":1,\"995\":1,\"1003\":1,\"1053\":1,\"1068\":1,\"1070\":1,\"1076\":1,\"1078\":1,\"1083\":1,\"1102\":1,\"1112\":1,\"1144\":1,\"1149\":1,\"1150\":1,\"1151\":2,\"1152\":1,\"1156\":1,\"1163\":1,\"1171\":1,\"1240\":1,\"1285\":1,\"1331\":1,\"1372\":1,\"1392\":1,\"1393\":1,\"1394\":1},\"1\":{\"70\":2,\"108\":3,\"118\":1,\"125\":1,\"147\":4,\"172\":1,\"181\":1,\"202\":1,\"283\":1,\"314\":1,\"324\":2,\"332\":1,\"356\":1,\"390\":2,\"405\":2,\"420\":1,\"425\":1,\"460\":1,\"504\":2,\"506\":1,\"507\":3,\"513\":1,\"525\":2,\"529\":2,\"531\":1,\"555\":1,\"597\":1,\"599\":1,\"662\":4,\"679\":1,\"680\":1,\"713\":1,\"732\":2,\"735\":1,\"783\":1,\"806\":1,\"827\":1,\"856\":1,\"861\":1,\"862\":2,\"863\":2,\"871\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1,\"912\":2,\"919\":1,\"921\":2,\"923\":1,\"930\":2,\"941\":3,\"943\":1,\"946\":1,\"947\":2,\"952\":1,\"959\":1,\"977\":1,\"1048\":1,\"1049\":2,\"1069\":2,\"1071\":1,\"1074\":1,\"1089\":1,\"1100\":1,\"1104\":2,\"1162\":1,\"1169\":1,\"1188\":1,\"1194\":7,\"1198\":29,\"1202\":1,\"1203\":1,\"1207\":9,\"1208\":3,\"1209\":4,\"1217\":1,\"1218\":2,\"1221\":12,\"1225\":1,\"1229\":3,\"1230\":6,\"1236\":5,\"1237\":8,\"1242\":7,\"1257\":2,\"1265\":8,\"1266\":4,\"1270\":1,\"1273\":1,\"1274\":11,\"1275\":7,\"1276\":3,\"1280\":16,\"1281\":17,\"1282\":4,\"1286\":7,\"1287\":4,\"1288\":3,\"1289\":11,\"1292\":39,\"1297\":2,\"1299\":1,\"1300\":3,\"1303\":13,\"1307\":4,\"1308\":5,\"1309\":3,\"1314\":2,\"1335\":2,\"1336\":4,\"1339\":5,\"1340\":5,\"1352\":1,\"1354\":1,\"1364\":3,\"1365\":8,\"1366\":4,\"1376\":3,\"1377\":2,\"1378\":11,\"1379\":7,\"1384\":10,\"1390\":2,\"1393\":3,\"1395\":4,\"1399\":4,\"1400\":2,\"1403\":8}}],[\"2为3\",{\"1\":{\"1395\":1}}],[\"2个孩子的胃口值分别是1\",{\"1\":{\"1364\":1}}],[\"2+1就可以了\",{\"1\":{\"1276\":1}}],[\"260\",{\"0\":{\"1340\":1}}],[\"26\",{\"0\":{\"1266\":1},\"1\":{\"1274\":1}}],[\"262144\",{\"1\":{\"513\":1}}],[\"2再处理token\",{\"1\":{\"1100\":1}}],[\"2连接双方的网络中有一个数据包丢失\",{\"1\":{\"978\":1}}],[\"2时\",{\"1\":{\"978\":1}}],[\"2改进\",{\"0\":{\"976\":1}}],[\"28\",{\"1\":{\"882\":1,\"1112\":1,\"1303\":2}}],[\"2f\",{\"1\":{\"712\":2,\"776\":2}}],[\"24\",{\"0\":{\"517\":1},\"1\":{\"828\":2}}],[\"244\",{\"1\":{\"73\":4}}],[\"231\",{\"1\":{\"1339\":2,\"1340\":2}}],[\"23\",{\"0\":{\"510\":1},\"1\":{\"529\":2,\"872\":1,\"1112\":1}}],[\"23t13\",{\"1\":{\"504\":1}}],[\"239\",{\"1\":{\"93\":1}}],[\"221\",{\"0\":{\"1202\":1}}],[\"22\",{\"0\":{\"502\":1},\"1\":{\"529\":2,\"680\":1,\"861\":1}}],[\"2msl\",{\"1\":{\"953\":1}}],[\"2m\",{\"1\":{\"469\":1}}],[\"275\",{\"0\":{\"1403\":1}}],[\"279\",{\"1\":{\"1276\":1}}],[\"27\",{\"0\":{\"1265\":1},\"1\":{\"227\":1}}],[\"2595\",{\"0\":{\"1341\":1}}],[\"2500\",{\"1\":{\"1207\":1}}],[\"256k\",{\"1\":{\"513\":1}}],[\"25\",{\"1\":{\"159\":2,\"879\":1}}],[\"207\",{\"0\":{\"1241\":1}}],[\"200\",{\"0\":{\"1352\":1},\"1\":{\"552\":1,\"725\":1,\"863\":2,\"882\":1,\"969\":1,\"1112\":1,\"1144\":1,\"1166\":1,\"1167\":1,\"1203\":1}}],[\"20009951\",{\"1\":{\"504\":1}}],[\"2000\",{\"1\":{\"197\":1,\"1208\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1309\":1}}],[\"200mi\",{\"1\":{\"136\":2}}],[\"20\",{\"0\":{\"491\":1},\"1\":{\"147\":3,\"679\":1,\"735\":1,\"776\":1,\"839\":5,\"921\":2,\"1003\":5,\"1270\":1,\"1273\":1,\"1366\":3}}],[\"2024\",{\"1\":{\"662\":1,\"679\":1,\"1112\":1}}],[\"2023\",{\"1\":{\"662\":3,\"680\":1,\"861\":1,\"862\":1,\"863\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"2023年10月23日\",{\"1\":{\"623\":1}}],[\"2023年11月27日晚间\",{\"1\":{\"623\":1}}],[\"20230416134024990\",{\"1\":{\"460\":1}}],[\"20230416133924934\",{\"1\":{\"460\":1}}],[\"20230416193055777\",{\"1\":{\"370\":1}}],[\"20230416192111694\",{\"1\":{\"369\":1}}],[\"20230422140030329\",{\"1\":{\"285\":1}}],[\"20230422110407573\",{\"1\":{\"270\":1}}],[\"20230422104209647\",{\"1\":{\"251\":1}}],[\"20230422100426672\",{\"1\":{\"232\":1}}],[\"20230422094056447\",{\"1\":{\"217\":1}}],[\"20230401173426576\",{\"1\":{\"95\":1}}],[\"2022\",{\"1\":{\"504\":1,\"827\":1,\"872\":1}}],[\"20250317101651068\",{\"1\":{\"19\":1}}],[\"213\",{\"1\":{\"1280\":1}}],[\"210\",{\"0\":{\"1242\":1}}],[\"21\",{\"0\":{\"428\":1,\"497\":1},\"1\":{\"108\":8,\"662\":1,\"887\":1,\"1274\":1}}],[\"2\",{\"0\":{\"5\":1,\"24\":1,\"40\":1,\"43\":1,\"52\":1,\"55\":1,\"64\":1,\"67\":1,\"111\":1,\"131\":1,\"167\":1,\"187\":1,\"190\":1,\"197\":1,\"201\":1,\"223\":1,\"260\":1,\"261\":2,\"262\":1,\"263\":1,\"269\":1,\"277\":1,\"282\":1,\"317\":1,\"337\":1,\"394\":1,\"401\":1,\"419\":1,\"431\":1,\"433\":1,\"434\":2,\"507\":1,\"521\":1,\"549\":1,\"566\":1,\"570\":1,\"591\":1,\"595\":1,\"606\":1,\"610\":1,\"616\":1,\"622\":1,\"626\":1,\"631\":1,\"635\":1,\"641\":1,\"648\":1,\"652\":1,\"657\":1,\"665\":1,\"676\":1,\"679\":1,\"680\":1,\"689\":1,\"695\":1,\"705\":1,\"708\":1,\"709\":2,\"710\":1,\"713\":1,\"717\":1,\"721\":1,\"731\":1,\"732\":2,\"733\":1,\"734\":1,\"766\":1,\"774\":1,\"783\":1,\"791\":1,\"821\":1,\"824\":1,\"825\":2,\"838\":1,\"846\":1,\"866\":1,\"893\":1,\"906\":1,\"909\":1,\"911\":1,\"912\":2,\"915\":1,\"919\":1,\"924\":1,\"942\":1,\"989\":1,\"1002\":1,\"1052\":1,\"1056\":1,\"1070\":1,\"1071\":1,\"1072\":2,\"1078\":1,\"1082\":1,\"1085\":1,\"1088\":1,\"1101\":1,\"1111\":1,\"1137\":1,\"1143\":1,\"1146\":1,\"1147\":2,\"1150\":1,\"1155\":1,\"1162\":1,\"1170\":1,\"1233\":1,\"1251\":1,\"1279\":1,\"1330\":1,\"1347\":1,\"1348\":1,\"1369\":1,\"1393\":1,\"1398\":1},\"1\":{\"64\":1,\"67\":1,\"93\":1,\"108\":1,\"118\":1,\"125\":1,\"147\":1,\"172\":1,\"227\":1,\"270\":2,\"283\":2,\"287\":1,\"314\":1,\"324\":2,\"332\":1,\"338\":1,\"356\":1,\"361\":1,\"388\":1,\"390\":2,\"405\":1,\"420\":1,\"425\":1,\"455\":1,\"460\":1,\"478\":1,\"498\":1,\"499\":1,\"506\":1,\"507\":3,\"513\":1,\"525\":2,\"529\":2,\"597\":1,\"662\":1,\"706\":2,\"709\":1,\"712\":2,\"713\":1,\"725\":1,\"732\":2,\"748\":1,\"762\":1,\"765\":1,\"783\":1,\"839\":1,\"843\":1,\"855\":3,\"856\":1,\"903\":1,\"912\":2,\"916\":1,\"919\":1,\"929\":1,\"941\":1,\"946\":2,\"947\":2,\"952\":1,\"953\":1,\"959\":1,\"977\":2,\"984\":2,\"1003\":1,\"1045\":1,\"1049\":2,\"1057\":1,\"1073\":1,\"1089\":1,\"1100\":3,\"1104\":2,\"1161\":1,\"1162\":1,\"1172\":1,\"1178\":1,\"1179\":1,\"1194\":2,\"1198\":19,\"1202\":2,\"1203\":1,\"1207\":10,\"1208\":7,\"1209\":4,\"1221\":7,\"1225\":4,\"1229\":11,\"1230\":7,\"1236\":7,\"1237\":10,\"1241\":6,\"1242\":11,\"1257\":8,\"1258\":1,\"1259\":1,\"1265\":17,\"1266\":10,\"1274\":24,\"1275\":21,\"1276\":7,\"1280\":21,\"1281\":15,\"1282\":4,\"1286\":7,\"1287\":7,\"1288\":7,\"1289\":4,\"1292\":67,\"1297\":2,\"1299\":6,\"1300\":5,\"1303\":18,\"1307\":5,\"1308\":1,\"1309\":12,\"1313\":1,\"1314\":1,\"1326\":3,\"1330\":1,\"1332\":1,\"1335\":3,\"1336\":5,\"1338\":1,\"1339\":4,\"1340\":4,\"1341\":4,\"1352\":1,\"1353\":1,\"1354\":1,\"1364\":7,\"1365\":11,\"1366\":4,\"1376\":9,\"1377\":3,\"1378\":7,\"1379\":12,\"1380\":1,\"1384\":7,\"1385\":1,\"1390\":5,\"1391\":2,\"1393\":12,\"1394\":1,\"1395\":10,\"1399\":4,\"1400\":3,\"1403\":6}}],[\"q和r连通\",{\"1\":{\"1225\":1}}],[\"qq\",{\"1\":{\"843\":1}}],[\"q\",{\"1\":{\"713\":6,\"716\":1,\"1225\":3,\"1227\":17,\"1229\":6,\"1230\":18}}],[\"q2\",{\"0\":{\"573\":1},\"1\":{\"482\":1}}],[\"q3\",{\"1\":{\"482\":3}}],[\"q1\",{\"0\":{\"572\":1},\"1\":{\"482\":2}}],[\"quic\",{\"1\":{\"1162\":1}}],[\"quicklist\",{\"2\":{\"229\":1}}],[\"quicklist存储了一个双向链表\",{\"1\":{\"224\":1}}],[\"quicklist定义\",{\"0\":{\"224\":1}}],[\"quicklist和sds\",{\"0\":{\"223\":1}}],[\"quote\",{\"1\":{\"1094\":1}}],[\"queue在这里起到了协调作用\",{\"1\":{\"925\":1}}],[\"queue来高效地管理这些任务\",{\"1\":{\"925\":1}}],[\"queue来收集并发http请求的响应数据\",{\"1\":{\"924\":1}}],[\"queue和协程提升i\",{\"1\":{\"925\":1}}],[\"queue处理并发请求\",{\"1\":{\"924\":1}}],[\"queue是asyncio模块提供的一个线程安全的队列\",{\"1\":{\"924\":1}}],[\"queue模块核心类解析\",{\"0\":{\"915\":1}}],[\"queue模块\",{\"0\":{\"913\":1}}],[\"queue\",{\"0\":{\"922\":1},\"1\":{\"654\":1,\"706\":2,\"713\":1,\"908\":6,\"911\":1,\"912\":6,\"915\":1,\"916\":11,\"919\":3,\"924\":12,\"925\":7}}],[\"queuepool\",{\"1\":{\"578\":1,\"579\":5,\"580\":1}}],[\"queries\",{\"1\":{\"503\":6}}],[\"query\",{\"1\":{\"334\":4,\"431\":1,\"503\":26,\"504\":2,\"513\":1,\"822\":1,\"831\":1,\"847\":4,\"848\":1,\"849\":4,\"862\":6,\"887\":1,\"1009\":5,\"1010\":4}}],[\"quantity\",{\"1\":{\"549\":2,\"776\":5}}],[\"quux\",{\"1\":{\"530\":2}}],[\"qube\",{\"2\":{\"3\":1}}],[\"qube基础使用\",{\"0\":{\"2\":1}}],[\"qos\",{\"1\":{\"136\":3}}],[\"qebe\",{\"2\":{\"4\":1}}],[\"1表示未找到\",{\"1\":{\"1395\":1}}],[\"1及之后\",{\"1\":{\"1395\":1}}],[\"1取二进制的最低位\",{\"1\":{\"1341\":1}}],[\"1→3→1→1→1\",{\"1\":{\"1303\":1}}],[\"1`\",{\"1\":{\"1303\":1}}],[\"1代表卖出\",{\"1\":{\"1292\":1}}],[\"1为这前两家能获取的最大值\",{\"1\":{\"1280\":1}}],[\"1～n\",{\"1\":{\"1230\":1}}],[\"1~31\",{\"1\":{\"959\":1}}],[\"1gb+\",{\"1\":{\"725\":1}}],[\"1gb\",{\"1\":{\"725\":1}}],[\"1e9\",{\"1\":{\"713\":1}}],[\"1err\",{\"1\":{\"73\":1}}],[\"188\",{\"1\":{\"1292\":2}}],[\"18\",{\"0\":{\"481\":1},\"1\":{\"533\":1,\"534\":1,\"758\":1,\"824\":4,\"825\":1,\"880\":1,\"1207\":1,\"1286\":1}}],[\"1mb\",{\"1\":{\"469\":1}}],[\"1500\",{\"1\":{\"1180\":1}}],[\"15\",{\"0\":{\"459\":1,\"1257\":1},\"1\":{\"882\":1,\"921\":2,\"992\":1,\"1221\":1,\"1270\":1,\"1273\":1,\"1366\":1}}],[\"1400\",{\"1\":{\"1300\":1}}],[\"14\",{\"0\":{\"454\":1},\"1\":{\"680\":1,\"879\":1,\"882\":2}}],[\"125\",{\"1\":{\"1297\":1}}],[\"122\",{\"1\":{\"1292\":1}}],[\"121\",{\"1\":{\"1292\":2}}],[\"121212\",{\"1\":{\"882\":1}}],[\"1212\",{\"1\":{\"882\":1}}],[\"128\",{\"1\":{\"828\":1}}],[\"1231\",{\"1\":{\"1057\":1,\"1059\":1,\"1094\":1}}],[\"123456\",{\"1\":{\"843\":1}}],[\"123\",{\"1\":{\"552\":1,\"1124\":1}}],[\"12\",{\"0\":{\"437\":1,\"586\":1},\"1\":{\"662\":1,\"862\":1,\"863\":1,\"882\":1,\"921\":2,\"1276\":2,\"1280\":2,\"1303\":1,\"1384\":1,\"1390\":2}}],[\"127\",{\"1\":{\"93\":1,\"107\":1,\"147\":1,\"1064\":2,\"1112\":1}}],[\"1从头开始记录\",{\"1\":{\"390\":1}}],[\"1个关键字\",{\"1\":{\"338\":1}}],[\"1字节或5字节\",{\"1\":{\"219\":1}}],[\"1ce9\",{\"1\":{\"125\":2}}],[\"160\",{\"1\":{\"1180\":1}}],[\"165\",{\"1\":{\"533\":1}}],[\"16k\",{\"1\":{\"468\":1}}],[\"16kb\",{\"1\":{\"326\":1}}],[\"16384字节\",{\"1\":{\"326\":1}}],[\"16\",{\"0\":{\"466\":1},\"1\":{\"108\":2,\"324\":1,\"661\":2,\"735\":1,\"882\":1,\"886\":1,\"887\":1,\"888\":1,\"1023\":1,\"1276\":1,\"1282\":1,\"1384\":1}}],[\"168\",{\"1\":{\"108\":2}}],[\"137\",{\"0\":{\"1339\":1}}],[\"136\",{\"0\":{\"1336\":1}}],[\"1388\",{\"0\":{\"1282\":1}}],[\"139\",{\"1\":{\"1276\":1}}],[\"130\",{\"1\":{\"159\":2}}],[\"13\",{\"0\":{\"446\":1,\"903\":1},\"1\":{\"108\":1,\"227\":4,\"324\":1,\"735\":1,\"862\":1,\"1276\":2,\"1365\":1}}],[\"1创建k8s\",{\"1\":{\"108\":1}}],[\"174\",{\"1\":{\"1303\":1}}],[\"17\",{\"0\":{\"473\":1,\"1331\":1,\"1335\":1},\"1\":{\"227\":1,\"415\":1,\"882\":1,\"992\":1}}],[\"170\",{\"1\":{\"108\":1}}],[\"171\",{\"1\":{\"93\":1}}],[\"172\",{\"1\":{\"63\":1}}],[\"115\",{\"0\":{\"1314\":1}}],[\"1143\",{\"0\":{\"1308\":1}}],[\"111001\",{\"1\":{\"1274\":2}}],[\"11111\",{\"1\":{\"1203\":1}}],[\"110010\",{\"1\":{\"1341\":1}}],[\"1100\",{\"1\":{\"776\":1}}],[\"11\",{\"0\":{\"84\":1,\"209\":1,\"307\":1,\"577\":1,\"902\":1,\"1377\":1},\"1\":{\"108\":1,\"405\":1,\"679\":1,\"888\":1,\"1274\":2,\"1276\":1,\"1353\":1}}],[\"198\",{\"0\":{\"1280\":1}}],[\"1971\",{\"0\":{\"1229\":1}}],[\"19\",{\"0\":{\"485\":1},\"1\":{\"108\":2,\"662\":1,\"839\":4,\"1003\":4}}],[\"192\",{\"1\":{\"93\":1}}],[\"196\",{\"1\":{\"73\":4}}],[\"190\",{\"1\":{\"73\":4}}],[\"1020\",{\"0\":{\"1354\":1}}],[\"1024\",{\"1\":{\"725\":1}}],[\"1090\",{\"0\":{\"1384\":1}}],[\"109\",{\"1\":{\"1314\":1,\"1395\":4,\"1400\":4}}],[\"10^4\",{\"1\":{\"1313\":1}}],[\"10亿\",{\"1\":{\"1313\":1}}],[\"1035\",{\"0\":{\"1309\":1}}],[\"105\",{\"1\":{\"1209\":2,\"1229\":2,\"1297\":1,\"1395\":1,\"1400\":1,\"1403\":1}}],[\"106\",{\"1\":{\"1208\":2}}],[\"1049\",{\"1\":{\"1274\":1}}],[\"104\",{\"1\":{\"1207\":2,\"1237\":1,\"1276\":1,\"1281\":2,\"1292\":2,\"1336\":3,\"1339\":1,\"1340\":1,\"1376\":1,\"1399\":5}}],[\"101\",{\"1\":{\"1207\":2,\"1286\":2}}],[\"10111\",{\"1\":{\"1203\":1}}],[\"10100\",{\"1\":{\"1203\":1}}],[\"10+\",{\"1\":{\"599\":1}}],[\"1005\",{\"0\":{\"1365\":1}}],[\"1001\",{\"1\":{\"1230\":1}}],[\"10010\",{\"1\":{\"1203\":1}}],[\"100mb\",{\"1\":{\"725\":2}}],[\"10009931\",{\"1\":{\"504\":1}}],[\"1000\",{\"1\":{\"349\":2,\"498\":2,\"507\":1,\"520\":1,\"713\":2,\"716\":1,\"720\":1,\"725\":1,\"776\":1,\"1230\":1,\"1282\":1,\"1299\":2,\"1307\":1,\"1308\":1,\"1341\":1,\"1379\":2,\"1380\":3,\"1403\":1}}],[\"100000000\",{\"1\":{\"832\":1,\"996\":1}}],[\"100000\",{\"1\":{\"499\":2}}],[\"100001\",{\"1\":{\"499\":1}}],[\"10000\",{\"1\":{\"256\":1,\"498\":7,\"1180\":1,\"1390\":1}}],[\"100\",{\"1\":{\"169\":1,\"198\":1,\"260\":1,\"408\":3,\"498\":9,\"499\":2,\"533\":1,\"720\":1,\"733\":1,\"983\":1,\"984\":1,\"985\":1,\"1236\":1,\"1280\":1,\"1303\":1,\"1307\":1,\"1313\":1,\"1403\":2}}],[\"10m\",{\"1\":{\"67\":2}}],[\"10\",{\"0\":{\"61\":1,\"298\":1,\"560\":1,\"758\":1,\"901\":1},\"1\":{\"73\":6,\"93\":1,\"108\":2,\"147\":1,\"159\":2,\"162\":1,\"197\":1,\"198\":1,\"256\":1,\"405\":4,\"408\":3,\"455\":3,\"498\":2,\"503\":4,\"531\":1,\"533\":3,\"662\":3,\"679\":1,\"708\":1,\"709\":1,\"712\":2,\"725\":2,\"735\":2,\"743\":1,\"748\":1,\"755\":1,\"757\":1,\"758\":2,\"776\":4,\"806\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"879\":1,\"880\":1,\"886\":1,\"916\":1,\"924\":1,\"985\":2,\"992\":1,\"1024\":1,\"1030\":1,\"1033\":2,\"1207\":1,\"1225\":2,\"1274\":4,\"1275\":2,\"1282\":2,\"1286\":1,\"1292\":1,\"1303\":2,\"1309\":1,\"1329\":1,\"1341\":1,\"1366\":13,\"1385\":1,\"1395\":2,\"1400\":2}}],[\"1\",{\"0\":{\"2\":1,\"23\":1,\"39\":1,\"42\":1,\"51\":1,\"54\":1,\"63\":1,\"66\":1,\"105\":1,\"130\":2,\"131\":1,\"132\":1,\"166\":2,\"167\":1,\"168\":1,\"171\":1,\"186\":1,\"189\":1,\"196\":1,\"200\":1,\"216\":1,\"260\":1,\"268\":1,\"276\":1,\"281\":1,\"313\":1,\"330\":1,\"393\":1,\"400\":1,\"418\":1,\"430\":1,\"433\":1,\"468\":1,\"485\":1,\"506\":1,\"520\":1,\"548\":1,\"565\":1,\"569\":1,\"590\":1,\"594\":1,\"603\":1,\"605\":1,\"609\":1,\"615\":1,\"625\":1,\"630\":1,\"634\":1,\"640\":1,\"647\":1,\"651\":1,\"656\":1,\"664\":1,\"675\":1,\"678\":1,\"688\":1,\"693\":1,\"704\":2,\"705\":1,\"706\":1,\"708\":1,\"712\":1,\"716\":1,\"720\":1,\"731\":1,\"761\":1,\"765\":1,\"782\":1,\"790\":1,\"812\":1,\"824\":1,\"836\":1,\"837\":2,\"838\":1,\"839\":1,\"845\":1,\"865\":1,\"891\":1,\"892\":1,\"908\":2,\"909\":1,\"911\":1,\"914\":1,\"918\":1,\"923\":1,\"941\":1,\"975\":2,\"981\":1,\"1000\":1,\"1001\":2,\"1002\":1,\"1003\":1,\"1044\":1,\"1051\":1,\"1071\":1,\"1076\":1,\"1081\":1,\"1084\":1,\"1087\":1,\"1100\":1,\"1110\":1,\"1126\":1,\"1142\":2,\"1143\":1,\"1144\":1,\"1146\":1,\"1149\":1,\"1154\":1,\"1161\":1,\"1169\":1,\"1197\":1,\"1213\":1,\"1216\":1,\"1224\":1,\"1245\":1,\"1248\":1,\"1269\":1,\"1320\":1,\"1329\":1,\"1344\":1,\"1347\":1,\"1348\":1,\"1363\":1,\"1388\":1,\"1392\":1},\"1\":{\"73\":6,\"107\":1,\"108\":12,\"118\":1,\"125\":1,\"147\":11,\"181\":10,\"198\":1,\"202\":1,\"203\":1,\"218\":2,\"227\":8,\"242\":1,\"256\":1,\"260\":1,\"270\":1,\"283\":3,\"287\":1,\"314\":1,\"324\":6,\"332\":1,\"356\":1,\"361\":2,\"388\":1,\"390\":1,\"405\":1,\"408\":4,\"416\":1,\"420\":1,\"425\":1,\"455\":1,\"460\":1,\"469\":1,\"478\":1,\"482\":17,\"485\":1,\"486\":1,\"487\":4,\"498\":3,\"499\":3,\"503\":1,\"506\":1,\"507\":3,\"513\":3,\"525\":2,\"529\":2,\"532\":1,\"552\":1,\"578\":1,\"662\":2,\"680\":1,\"706\":3,\"713\":1,\"717\":1,\"732\":3,\"733\":1,\"735\":1,\"736\":1,\"756\":1,\"762\":1,\"765\":1,\"776\":5,\"783\":1,\"799\":1,\"806\":1,\"834\":1,\"844\":3,\"848\":1,\"849\":1,\"855\":6,\"856\":4,\"861\":1,\"862\":1,\"872\":1,\"882\":7,\"903\":1,\"911\":1,\"912\":1,\"916\":1,\"919\":3,\"921\":1,\"929\":3,\"941\":7,\"943\":1,\"947\":2,\"951\":4,\"952\":1,\"953\":2,\"959\":1,\"975\":1,\"977\":2,\"998\":1,\"1009\":1,\"1010\":1,\"1015\":2,\"1023\":1,\"1024\":1,\"1033\":3,\"1049\":6,\"1050\":5,\"1057\":1,\"1064\":2,\"1094\":2,\"1098\":1,\"1100\":3,\"1102\":2,\"1104\":3,\"1112\":3,\"1147\":1,\"1162\":4,\"1172\":2,\"1178\":1,\"1179\":1,\"1180\":2,\"1193\":1,\"1194\":3,\"1198\":37,\"1202\":38,\"1203\":6,\"1207\":12,\"1208\":13,\"1209\":14,\"1217\":1,\"1218\":2,\"1221\":12,\"1225\":5,\"1226\":3,\"1227\":1,\"1229\":10,\"1230\":9,\"1236\":9,\"1237\":15,\"1241\":12,\"1242\":19,\"1257\":37,\"1258\":5,\"1259\":5,\"1265\":6,\"1266\":11,\"1270\":1,\"1271\":5,\"1272\":9,\"1273\":10,\"1274\":93,\"1275\":34,\"1276\":16,\"1280\":37,\"1281\":19,\"1282\":11,\"1286\":8,\"1287\":14,\"1288\":11,\"1289\":6,\"1292\":138,\"1297\":8,\"1298\":5,\"1299\":35,\"1300\":1,\"1303\":110,\"1307\":28,\"1308\":12,\"1309\":13,\"1313\":11,\"1314\":12,\"1326\":1,\"1329\":3,\"1330\":1,\"1331\":1,\"1332\":4,\"1335\":3,\"1336\":8,\"1338\":3,\"1339\":12,\"1340\":8,\"1341\":15,\"1352\":28,\"1353\":40,\"1354\":40,\"1364\":9,\"1365\":14,\"1366\":6,\"1376\":26,\"1377\":9,\"1378\":12,\"1379\":8,\"1380\":6,\"1384\":13,\"1385\":4,\"1390\":16,\"1391\":2,\"1393\":5,\"1394\":5,\"1395\":33,\"1399\":9,\"1400\":16,\"1403\":14}}],[\"dp公式\",{\"1\":{\"1303\":1}}],[\"dp公式都是\",{\"1\":{\"1276\":1}}],[\"dp长度为max\",{\"1\":{\"1281\":1}}],[\"dp数组长度应为dp\",{\"1\":{\"1307\":1}}],[\"dp数组长度有问题\",{\"1\":{\"1307\":1}}],[\"dp数组长度都是背包大小\",{\"1\":{\"1276\":1}}],[\"dp数组在推导的时候一定是取价值最大的数\",{\"1\":{\"1273\":1}}],[\"dp数组的遍历顺序\",{\"1\":{\"1271\":1}}],[\"dp数组初始化\",{\"1\":{\"1271\":1}}],[\"dp数组含义\",{\"1\":{\"1202\":1,\"1273\":1,\"1292\":1,\"1313\":1}}],[\"dp\",{\"1\":{\"1198\":8,\"1202\":14,\"1207\":10,\"1208\":17,\"1271\":7,\"1272\":9,\"1273\":16,\"1274\":24,\"1275\":16,\"1276\":18,\"1280\":27,\"1281\":6,\"1286\":10,\"1287\":6,\"1288\":9,\"1289\":5,\"1292\":118,\"1299\":23,\"1303\":65,\"1307\":21,\"1308\":16,\"1309\":8,\"1313\":18,\"1314\":10}}],[\"django\",{\"1\":{\"1164\":1,\"1169\":2,\"1170\":2,\"1172\":2,\"1173\":1}}],[\"dtype\",{\"1\":{\"716\":1}}],[\"dtype=arr\",{\"1\":{\"716\":1}}],[\"dfs或者bfs\",{\"1\":{\"1354\":1}}],[\"dfs和回溯\",{\"0\":{\"1348\":1}}],[\"dfs和递归\",{\"0\":{\"1347\":1}}],[\"dfs把递归更加具象化\",{\"1\":{\"1347\":1}}],[\"dfs其他\",{\"0\":{\"1346\":1}}],[\"dfs是可一个方向去搜\",{\"1\":{\"1345\":1}}],[\"dfs思路\",{\"1\":{\"1229\":1}}],[\"dfs\",{\"1\":{\"1217\":1,\"1220\":2,\"1229\":3,\"1235\":4,\"1236\":3,\"1237\":3,\"1241\":4,\"1242\":3,\"1348\":1,\"1352\":3,\"1353\":3,\"1354\":6},\"2\":{\"1349\":1,\"1350\":1}}],[\"df\",{\"1\":{\"529\":1}}],[\"dm\",{\"1\":{\"529\":1}}],[\"dml\",{\"1\":{\"383\":1}}],[\"dname\",{\"1\":{\"504\":2}}],[\"dnsname\",{\"1\":{\"191\":1}}],[\"draw\",{\"1\":{\"567\":1}}],[\"drain\",{\"1\":{\"124\":1}}],[\"drop\",{\"1\":{\"494\":1}}],[\"dungeon\",{\"1\":{\"1303\":15}}],[\"duplicates\",{\"1\":{\"1187\":1}}],[\"due\",{\"1\":{\"776\":3}}],[\"durability\",{\"1\":{\"425\":1}}],[\"dumps\",{\"1\":{\"894\":1}}],[\"dump\",{\"1\":{\"278\":1,\"494\":1,\"862\":2,\"881\":3,\"887\":2}}],[\"ddl语句已变得原子性和崩溃安全\",{\"1\":{\"430\":1}}],[\"ddl\",{\"1\":{\"332\":1}}],[\"dynamically\",{\"1\":{\"1189\":1}}],[\"dynamiclibrary\",{\"1\":{\"1188\":2}}],[\"dynamickeyword\",{\"1\":{\"1188\":1}}],[\"dynamickeyword作为librarykeyword的子类其中一个重要的属性method\",{\"1\":{\"1187\":1}}],[\"dynamicmethod\",{\"1\":{\"1188\":3}}],[\"dynamic\",{\"1\":{\"225\":1,\"321\":3,\"1188\":3,\"1189\":4}}],[\"dirs\",{\"1\":{\"1352\":3,\"1353\":2}}],[\"dir\",{\"1\":{\"986\":1,\"1061\":1,\"1352\":4,\"1353\":4}}],[\"dir3\",{\"1\":{\"935\":1,\"936\":1}}],[\"dir2\",{\"1\":{\"935\":1,\"936\":1}}],[\"dir1\",{\"1\":{\"935\":1,\"936\":1}}],[\"dirname\",{\"1\":{\"662\":2}}],[\"dijkstra算法中的最短路径计算\",{\"1\":{\"918\":1}}],[\"dip\",{\"1\":{\"762\":1}}],[\"division\",{\"1\":{\"755\":2}}],[\"divide\",{\"1\":{\"755\":3,\"757\":2}}],[\"dictionary\",{\"1\":{\"1380\":14}}],[\"dict方法可以自定义字典的key\",{\"1\":{\"824\":1}}],[\"dict\",{\"0\":{\"824\":2,\"825\":1},\"1\":{\"531\":1,\"824\":2,\"825\":2,\"827\":1,\"839\":1,\"849\":2,\"861\":3,\"862\":5,\"863\":1,\"872\":2,\"873\":1,\"879\":2,\"880\":2,\"986\":1,\"1003\":1,\"1010\":2,\"1050\":9,\"1059\":5,\"1061\":1,\"1103\":1,\"1189\":2,\"1385\":1}}],[\"diff\",{\"1\":{\"124\":1}}],[\"distance\",{\"1\":{\"1385\":3}}],[\"distinct\",{\"1\":{\"776\":2}}],[\"dislikes\",{\"1\":{\"1237\":13}}],[\"disjointset\",{\"1\":{\"1227\":1}}],[\"disk\",{\"1\":{\"969\":1}}],[\"discount\",{\"1\":{\"776\":6}}],[\"disconnected\",{\"1\":{\"679\":2,\"681\":1}}],[\"disconnect\",{\"1\":{\"679\":2,\"681\":1}}],[\"discovery\",{\"1\":{\"108\":1}}],[\"dispatch\",{\"1\":{\"270\":1,\"1084\":1,\"1098\":2,\"1100\":1,\"1103\":4,\"1104\":1,\"1111\":2,\"1112\":2}}],[\"dispatcher\",{\"1\":{\"270\":1}}],[\"disable\",{\"1\":{\"108\":3}}],[\"disabled\",{\"1\":{\"108\":1}}],[\"dw5sf\",{\"1\":{\"108\":1}}],[\"dog\",{\"1\":{\"806\":1,\"1276\":1}}],[\"doghandler\",{\"1\":{\"806\":1}}],[\"don\",{\"1\":{\"799\":1,\"1102\":1}}],[\"done\",{\"1\":{\"108\":1,\"924\":1}}],[\"doe\",{\"1\":{\"776\":1,\"1147\":1}}],[\"domain=domain\",{\"1\":{\"689\":1}}],[\"down是一个信号\",{\"1\":{\"1119\":1,\"1120\":1,\"1132\":1,\"1133\":1}}],[\"downloaded\",{\"1\":{\"925\":1}}],[\"download\",{\"1\":{\"925\":2}}],[\"down\",{\"0\":{\"1119\":1,\"1120\":1,\"1132\":1,\"1133\":1},\"1\":{\"569\":3,\"1110\":4}}],[\"dotenv\",{\"1\":{\"1064\":4}}],[\"dot\",{\"1\":{\"567\":1}}],[\"double\",{\"1\":{\"320\":2,\"469\":10,\"911\":1}}],[\"doublewrite设置为\",{\"1\":{\"469\":1}}],[\"doublewrite\",{\"0\":{\"469\":1},\"1\":{\"312\":1,\"460\":1,\"469\":4}}],[\"do\",{\"1\":{\"108\":1,\"533\":3,\"776\":8,\"844\":1,\"1050\":2,\"1088\":1,\"1102\":1,\"1258\":1}}],[\"doc=doc\",{\"1\":{\"1187\":1}}],[\"doc=\",{\"1\":{\"1147\":1}}],[\"doc\",{\"1\":{\"108\":2,\"932\":3,\"933\":1,\"1147\":1,\"1151\":1,\"1187\":5,\"1188\":2}}],[\"dockerfile\",{\"1\":{\"555\":1}}],[\"docker容器\",{\"1\":{\"140\":1}}],[\"docker\",{\"1\":{\"81\":5,\"108\":12,\"117\":2,\"555\":4,\"725\":1},\"2\":{\"15\":1,\"16\":1}}],[\"docker基础使用\",{\"0\":{\"14\":1}}],[\"docstring\",{\"1\":{\"549\":1}}],[\"docs\",{\"1\":{\"1\":1,\"87\":1,\"108\":1,\"1147\":1,\"1151\":1}}],[\"d\",{\"1\":{\"108\":9,\"405\":2,\"706\":1,\"776\":1,\"941\":1,\"945\":1,\"947\":5}}],[\"d$zdsb=\",{\"1\":{\"79\":1}}],[\"dburi\",{\"1\":{\"662\":1}}],[\"db+sqlite\",{\"1\":{\"657\":1}}],[\"dba\",{\"1\":{\"506\":1}}],[\"dbeac79e\",{\"1\":{\"125\":2}}],[\"db\",{\"1\":{\"79\":3,\"334\":1,\"369\":3,\"662\":3,\"843\":3,\"849\":4,\"861\":6,\"862\":11,\"865\":5,\"879\":6,\"886\":11,\"1010\":4}}],[\"dag\",{\"1\":{\"1221\":2}}],[\"dag定义需避免非序列化对象\",{\"1\":{\"714\":1}}],[\"daphne\",{\"1\":{\"1164\":1,\"1171\":1}}],[\"day\",{\"1\":{\"776\":3,\"806\":9}}],[\"datetime\",{\"1\":{\"662\":1,\"827\":1,\"849\":5,\"872\":4,\"986\":1,\"1010\":5}}],[\"date\",{\"1\":{\"125\":1,\"203\":1,\"531\":1,\"827\":4}}],[\"datasources\",{\"1\":{\"1194\":2}}],[\"dataerror\",{\"1\":{\"1187\":2,\"1194\":1}}],[\"dataclass\",{\"1\":{\"827\":1,\"872\":2}}],[\"dataclasses\",{\"1\":{\"827\":4,\"872\":1}}],[\"dataclasses数据类\",{\"1\":{\"533\":1}}],[\"dataframe对象进行处理\",{\"1\":{\"797\":1}}],[\"dataframe\",{\"1\":{\"797\":1}}],[\"data3\",{\"1\":{\"716\":1}}],[\"data2\",{\"1\":{\"716\":1}}],[\"data1\",{\"1\":{\"716\":1}}],[\"database\",{\"1\":{\"861\":1,\"879\":1}}],[\"databasename\",{\"1\":{\"579\":1}}],[\"databaseconnectionerror\",{\"1\":{\"550\":1}}],[\"data=data\",{\"1\":{\"863\":1,\"873\":1}}],[\"data=none\",{\"1\":{\"863\":1}}],[\"data=self\",{\"1\":{\"862\":3}}],[\"data=\",{\"1\":{\"552\":1}}],[\"data域保存数据记录的地址\",{\"1\":{\"413\":1}}],[\"data为一行记录中除主键外的数据\",{\"1\":{\"340\":1}}],[\"data三部分组成\",{\"1\":{\"219\":1}}],[\"data\",{\"1\":{\"63\":6,\"64\":1,\"67\":6,\"73\":2,\"80\":1,\"334\":1,\"340\":1,\"529\":1,\"533\":2,\"542\":1,\"548\":13,\"662\":4,\"681\":9,\"713\":1,\"720\":2,\"751\":4,\"758\":2,\"776\":6,\"861\":2,\"862\":33,\"863\":1,\"873\":5,\"882\":1,\"924\":5,\"1079\":2,\"1147\":2,\"1150\":1,\"1189\":3,\"1227\":2,\"1366\":12,\"1384\":3}}],[\"dashboard\",{\"1\":{\"120\":1}}],[\"dast\",{\"1\":{\"45\":1}}],[\"dao\",{\"1\":{\"118\":1}}],[\"daemonset和statefulset\",{\"0\":{\"184\":1}}],[\"daemonset\",{\"0\":{\"185\":1},\"1\":{\"176\":1,\"186\":2}}],[\"daemon\",{\"1\":{\"108\":2}}],[\"degree\",{\"1\":{\"1218\":1}}],[\"deque通过使用双向链表实现\",{\"1\":{\"911\":1}}],[\"deque提供了更优的性能和灵活性\",{\"1\":{\"911\":1}}],[\"deque\",{\"0\":{\"910\":1,\"911\":1},\"1\":{\"911\":2,\"912\":13}}],[\"dequeue\",{\"1\":{\"908\":1}}],[\"deep\",{\"1\":{\"894\":1}}],[\"deepcopy函数的本质其实就是对象的一次序列化和一次返回序列化\",{\"1\":{\"894\":1}}],[\"deepequal\",{\"1\":{\"681\":1}}],[\"device\",{\"1\":{\"881\":2}}],[\"devops系统能够提供的支持\",{\"0\":{\"641\":1}}],[\"devops告警模块的设计\",{\"0\":{\"622\":1}}],[\"devops自动化部署\",{\"0\":{\"554\":1}}],[\"devops\",{\"0\":{\"1409\":1},\"2\":{\"3\":1,\"6\":1,\"9\":1,\"12\":1,\"15\":1,\"27\":1,\"28\":1,\"35\":1,\"36\":1,\"47\":1,\"48\":1,\"59\":1,\"60\":1,\"83\":1,\"104\":1,\"110\":1,\"122\":1,\"127\":1,\"138\":1,\"150\":1,\"174\":1,\"183\":1,\"193\":1,\"205\":1}}],[\"devops才是我的最终目标\",{\"1\":{\"0\":1}}],[\"decode\",{\"1\":{\"872\":2}}],[\"decodeerror\",{\"1\":{\"872\":3}}],[\"decoratee\",{\"1\":{\"771\":1}}],[\"decorator\",{\"0\":{\"770\":1},\"1\":{\"757\":2,\"771\":1,\"834\":2,\"998\":2,\"1063\":4}}],[\"decimal\",{\"1\":{\"827\":3}}],[\"dependencies\",{\"1\":{\"1102\":1}}],[\"dependence\",{\"1\":{\"762\":1}}],[\"deploy\",{\"1\":{\"67\":4,\"96\":3,\"117\":2,\"124\":1,\"125\":3,\"555\":2}}],[\"deployment等属于无状态的应用部署\",{\"1\":{\"189\":1}}],[\"deployment更新机制\",{\"0\":{\"165\":1}}],[\"deployment控制rs\",{\"1\":{\"164\":1}}],[\"deployment资源名\",{\"1\":{\"165\":1}}],[\"deployment资源\",{\"1\":{\"164\":1}}],[\"deployment规约\",{\"0\":{\"154\":1}}],[\"deployment的特点\",{\"0\":{\"153\":1}}],[\"deployment为pod是和replicasets提供声明式更新的能力\",{\"1\":{\"152\":1}}],[\"deployments\",{\"1\":{\"125\":4}}],[\"deployment\",{\"0\":{\"117\":1,\"158\":1,\"159\":1,\"164\":1},\"1\":{\"64\":1,\"67\":1,\"115\":1,\"117\":8,\"125\":16,\"153\":1,\"155\":5,\"156\":1,\"159\":1,\"160\":6,\"162\":3,\"163\":5,\"165\":23,\"176\":1,\"177\":2,\"181\":4,\"555\":1}}],[\"details\",{\"1\":{\"1194\":3}}],[\"detail=\",{\"1\":{\"751\":1}}],[\"detail=none\",{\"1\":{\"751\":1}}],[\"detail\",{\"1\":{\"751\":3}}],[\"defegde\",{\"1\":{\"1385\":1}}],[\"defined\",{\"1\":{\"1063\":1,\"1094\":1,\"1103\":1}}],[\"def\",{\"1\":{\"531\":2,\"532\":1,\"533\":6,\"534\":5,\"542\":2,\"545\":3,\"548\":4,\"549\":1,\"552\":2,\"563\":2,\"565\":1,\"566\":3,\"567\":1,\"569\":1,\"570\":1,\"597\":1,\"651\":1,\"658\":1,\"660\":1,\"662\":6,\"679\":9,\"706\":1,\"708\":1,\"709\":1,\"712\":1,\"713\":3,\"717\":2,\"720\":1,\"722\":1,\"725\":1,\"732\":3,\"733\":1,\"735\":2,\"736\":2,\"746\":3,\"751\":2,\"753\":1,\"754\":2,\"755\":1,\"756\":1,\"757\":4,\"758\":4,\"776\":20,\"782\":1,\"783\":3,\"784\":2,\"790\":1,\"791\":3,\"792\":6,\"799\":4,\"806\":12,\"822\":1,\"824\":6,\"825\":3,\"827\":1,\"828\":2,\"831\":1,\"832\":3,\"833\":3,\"834\":3,\"839\":6,\"844\":5,\"847\":6,\"849\":11,\"854\":7,\"855\":2,\"856\":9,\"861\":6,\"862\":11,\"863\":2,\"867\":1,\"872\":3,\"873\":2,\"879\":4,\"880\":1,\"887\":1,\"888\":2,\"900\":2,\"902\":7,\"916\":2,\"919\":3,\"920\":2,\"924\":3,\"925\":2,\"929\":1,\"930\":2,\"932\":4,\"933\":3,\"983\":1,\"984\":2,\"985\":2,\"992\":2,\"996\":3,\"997\":3,\"998\":3,\"1003\":6,\"1009\":6,\"1010\":11,\"1015\":2,\"1017\":2,\"1024\":1,\"1030\":3,\"1033\":2,\"1049\":20,\"1050\":19,\"1057\":6,\"1059\":7,\"1061\":1,\"1062\":3,\"1063\":5,\"1064\":2,\"1073\":2,\"1074\":2,\"1077\":1,\"1079\":1,\"1084\":1,\"1085\":2,\"1088\":2,\"1094\":4,\"1098\":1,\"1100\":4,\"1102\":1,\"1103\":5,\"1104\":1,\"1111\":1,\"1112\":4,\"1124\":8,\"1147\":2,\"1149\":4,\"1150\":1,\"1151\":1,\"1166\":1,\"1167\":1,\"1180\":11,\"1182\":3,\"1183\":3,\"1187\":5,\"1188\":8,\"1189\":1,\"1193\":2,\"1194\":7,\"1198\":3,\"1202\":1,\"1207\":2,\"1208\":1,\"1209\":1,\"1220\":5,\"1221\":6,\"1225\":3,\"1226\":1,\"1227\":8,\"1229\":9,\"1230\":5,\"1235\":2,\"1236\":3,\"1237\":4,\"1241\":4,\"1242\":4,\"1257\":1,\"1258\":1,\"1259\":2,\"1265\":1,\"1266\":1,\"1272\":1,\"1273\":1,\"1274\":4,\"1275\":2,\"1276\":2,\"1280\":3,\"1281\":1,\"1282\":2,\"1286\":1,\"1287\":1,\"1288\":1,\"1289\":2,\"1292\":6,\"1297\":1,\"1298\":1,\"1299\":3,\"1300\":1,\"1303\":4,\"1307\":3,\"1308\":3,\"1309\":1,\"1313\":1,\"1314\":1,\"1329\":1,\"1331\":1,\"1335\":1,\"1337\":1,\"1338\":1,\"1339\":2,\"1340\":1,\"1341\":1,\"1348\":3,\"1352\":3,\"1353\":3,\"1354\":3,\"1364\":1,\"1365\":1,\"1366\":1,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":4,\"1380\":1,\"1384\":1,\"1385\":1,\"1390\":1,\"1395\":5,\"1399\":1,\"1400\":3,\"1403\":2}}],[\"defaultlogger\",{\"1\":{\"1193\":1}}],[\"defaultdict\",{\"1\":{\"1059\":16,\"1198\":2,\"1281\":1,\"1384\":2}}],[\"default=1\",{\"1\":{\"828\":1,\"849\":1,\"861\":1,\"879\":1,\"1010\":1}}],[\"defaults\",{\"1\":{\"133\":1,\"202\":3,\"1094\":1,\"1124\":1,\"1137\":1}}],[\"default\",{\"1\":{\"108\":1,\"118\":1,\"125\":2,\"147\":1,\"202\":1,\"210\":1,\"799\":1,\"827\":1,\"1050\":7,\"1059\":7,\"1060\":1,\"1094\":1,\"1103\":1}}],[\"defaultbackend\",{\"1\":{\"98\":4}}],[\"derived\",{\"1\":{\"349\":2}}],[\"design\",{\"0\":{\"769\":1}}],[\"description=\",{\"1\":{\"1147\":4,\"1151\":1,\"1152\":1}}],[\"description=none\",{\"1\":{\"849\":2,\"1010\":2}}],[\"description\",{\"1\":{\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"description必写\",{\"1\":{\"531\":1}}],[\"describe显示有关资源的详细信息\",{\"1\":{\"125\":1}}],[\"describe\",{\"1\":{\"79\":1,\"118\":1,\"124\":1,\"125\":3}}],[\"destination\",{\"1\":{\"1229\":13}}],[\"dest\",{\"1\":{\"227\":1,\"563\":3,\"565\":3,\"566\":2,\"567\":3,\"569\":4,\"570\":2,\"573\":1,\"935\":3,\"936\":5}}],[\"del\",{\"1\":{\"854\":1,\"856\":1,\"944\":1,\"1049\":1,\"1050\":1}}],[\"delattr\",{\"1\":{\"854\":1,\"1049\":1,\"1050\":1}}],[\"delay\",{\"1\":{\"597\":1,\"652\":2}}],[\"deliver\",{\"1\":{\"565\":1}}],[\"delivered\",{\"1\":{\"565\":2}}],[\"delpoyment就是将实际状态变为期望状态的能力\",{\"1\":{\"152\":1}}],[\"deleteandearn\",{\"1\":{\"1281\":1}}],[\"deletesuccess\",{\"1\":{\"849\":1,\"1010\":1}}],[\"delete\",{\"1\":{\"79\":1,\"108\":1,\"124\":1,\"125\":1,\"324\":2,\"373\":1,\"404\":1,\"405\":1,\"494\":2,\"849\":4,\"861\":1,\"862\":2,\"879\":1,\"1010\":4,\"1144\":1,\"1149\":2}}],[\"debug=true\",{\"1\":{\"1147\":1}}],[\"debug=flaskconfig\",{\"1\":{\"680\":1}}],[\"debugger\",{\"1\":{\"1064\":1}}],[\"debugging\",{\"1\":{\"124\":1}}],[\"debug功能\",{\"0\":{\"729\":1}}],[\"debugmessage\",{\"1\":{\"681\":2}}],[\"debugsignmanager\",{\"1\":{\"679\":2}}],[\"debug\",{\"1\":{\"124\":1,\"679\":1,\"680\":2,\"681\":1,\"729\":1,\"1064\":10,\"1098\":3,\"1100\":3,\"1104\":3,\"1187\":1}}],[\"debug的命令\",{\"1\":{\"124\":1}}],[\"demo2\",{\"1\":{\"992\":2}}],[\"demo存了外函数的返回值\",{\"1\":{\"992\":1}}],[\"demo\",{\"1\":{\"1\":1,\"64\":4,\"135\":2,\"136\":2,\"533\":4,\"755\":1,\"846\":1,\"992\":2,\"1008\":1,\"1030\":4,\"1057\":2}}],[\"fee\",{\"1\":{\"1292\":5}}],[\"fetch\",{\"1\":{\"548\":1,\"597\":1,\"924\":2}}],[\"ft\",{\"1\":{\"1059\":2,\"1063\":1,\"1094\":2,\"1103\":3}}],[\"ftp\",{\"1\":{\"962\":1}}],[\"fmt\",{\"1\":{\"776\":2}}],[\"fnf\",{\"1\":{\"744\":2}}],[\"fulltime\",{\"1\":{\"1180\":8}}],[\"fulltimeemployee\",{\"1\":{\"1180\":2}}],[\"fulltext\",{\"1\":{\"349\":2}}],[\"fullltime\",{\"1\":{\"1180\":4}}],[\"full\",{\"1\":{\"1098\":2,\"1100\":1,\"1103\":1,\"1104\":1,\"1111\":1,\"1112\":1,\"1180\":4,\"1187\":1}}],[\"furlough\",{\"1\":{\"806\":6}}],[\"func是在这里进行的\",{\"1\":{\"1112\":1}}],[\"func为值放入到view\",{\"1\":{\"1063\":1}}],[\"func=lambda\",{\"1\":{\"1059\":2}}],[\"funcs也有endpoint\",{\"1\":{\"1094\":1}}],[\"funcs\",{\"1\":{\"1059\":7,\"1060\":2,\"1062\":2,\"1063\":1,\"1094\":2,\"1103\":6}}],[\"functools\",{\"0\":{\"930\":1},\"1\":{\"833\":1,\"929\":1,\"930\":1,\"933\":1,\"936\":1,\"997\":1},\"2\":{\"938\":1}}],[\"functions中都是存住endpoint的\",{\"1\":{\"1094\":1}}],[\"functions\",{\"1\":{\"1059\":2,\"1060\":2,\"1063\":5,\"1094\":4,\"1103\":3}}],[\"functions=\",{\"1\":{\"1059\":2,\"1100\":1}}],[\"function\",{\"1\":{\"754\":4,\"843\":1,\"881\":1,\"887\":1,\"923\":1,\"985\":2,\"1040\":1,\"1063\":2,\"1094\":4,\"1142\":1}}],[\"func\",{\"1\":{\"735\":4,\"757\":2,\"776\":2,\"832\":2,\"833\":2,\"834\":4,\"839\":3,\"854\":6,\"856\":9,\"932\":3,\"933\":5,\"996\":2,\"997\":2,\"998\":4,\"1003\":3,\"1049\":6,\"1059\":2,\"1060\":1,\"1063\":13,\"1064\":2,\"1088\":1,\"1094\":20,\"1103\":8,\"1112\":3,\"1124\":7}}],[\"future\",{\"1\":{\"709\":2,\"776\":1,\"806\":1}}],[\"futures\",{\"0\":{\"709\":1},\"1\":{\"709\":3}}],[\"flash\",{\"1\":{\"1123\":1,\"1136\":1}}],[\"flashed是一个信号\",{\"1\":{\"1123\":1,\"1136\":1}}],[\"flashed\",{\"0\":{\"1123\":1,\"1136\":1},\"1\":{\"1110\":2}}],[\"flashes\",{\"1\":{\"1100\":1}}],[\"flask源码分析\",{\"0\":{\"1422\":1}}],[\"flask学习\",{\"0\":{\"1417\":1}}],[\"flask请求处理函数\",{\"0\":{\"1124\":1}}],[\"flask信号\",{\"0\":{\"1109\":1,\"1126\":1}}],[\"flask是一个极其自由的框架\",{\"1\":{\"1108\":1}}],[\"flask是不是不再使用localstock来处理上下文了\",{\"0\":{\"1050\":1}}],[\"flask是不是不再使用栈的方式进行处理应用上下文了\",{\"0\":{\"1048\":1}}],[\"flask如何利用endpoint实现请求分发\",{\"0\":{\"1095\":1}}],[\"flask上下文contextvars\",{\"0\":{\"1068\":1}}],[\"flaskclirunner\",{\"1\":{\"1059\":1}}],[\"flaskclient\",{\"1\":{\"1059\":1}}],[\"flaskconfig\",{\"1\":{\"662\":1,\"680\":2,\"861\":2,\"862\":3,\"879\":2}}],[\"flask类的构造\",{\"0\":{\"1059\":1}}],[\"flask实例化过程\",{\"0\":{\"1058\":1}}],[\"flask的启动过程大致可以分为以下四步\",{\"1\":{\"1065\":1}}],[\"flask的启动过程\",{\"0\":{\"1056\":1}}],[\"flask之前为什么为什么放弃使用栈\",{\"1\":{\"1051\":1}}],[\"flask视图基类\",{\"1\":{\"862\":1}}],[\"flask内部线程隔离就是通过操作local对象实现的\",{\"1\":{\"853\":1}}],[\"flask内部引入了一个werkzeug的库\",{\"1\":{\"853\":1}}],[\"flask内部\",{\"1\":{\"853\":1}}],[\"flask中其他的处理函数\",{\"1\":{\"1124\":1}}],[\"flask中是使用blinker进行定义的\",{\"1\":{\"1111\":1}}],[\"flask中已经率先使用contextvar来做数据隔离\",{\"1\":{\"1051\":1}}],[\"flask中实现的是\",{\"1\":{\"1049\":1}}],[\"flask中使用jwt\",{\"0\":{\"870\":1}}],[\"flask中使用socket\",{\"0\":{\"677\":1}}],[\"flask中会接收多个请求\",{\"0\":{\"853\":1}}],[\"flask中的线程隔离\",{\"0\":{\"852\":1}}],[\"flask装饰器\",{\"0\":{\"831\":1}}],[\"flask序列化\",{\"0\":{\"821\":1}}],[\"flask和celery结合\",{\"0\":{\"662\":1}}],[\"flask等多种web框架良好集成\",{\"1\":{\"607\":1}}],[\"flask\",{\"0\":{\"673\":1,\"842\":1,\"859\":1,\"1070\":1,\"1082\":1,\"1083\":1,\"1140\":1,\"1145\":1,\"1146\":1,\"1148\":1,\"1153\":1,\"1156\":1},\"1\":{\"530\":2,\"542\":3,\"662\":5,\"673\":3,\"678\":2,\"679\":2,\"680\":1,\"827\":6,\"849\":1,\"860\":3,\"861\":1,\"862\":2,\"863\":1,\"872\":1,\"873\":1,\"879\":1,\"1010\":1,\"1045\":3,\"1050\":1,\"1052\":3,\"1057\":5,\"1059\":6,\"1060\":1,\"1064\":2,\"1069\":1,\"1071\":1,\"1073\":1,\"1074\":1,\"1077\":3,\"1082\":1,\"1088\":1,\"1089\":1,\"1094\":4,\"1100\":2,\"1104\":1,\"1111\":2,\"1112\":5,\"1124\":12,\"1142\":1,\"1143\":1,\"1146\":1,\"1147\":7,\"1152\":1,\"1155\":1,\"1156\":2,\"1164\":1,\"1169\":1,\"1172\":1},\"2\":{\"683\":1,\"684\":1,\"699\":1,\"829\":1,\"840\":1,\"850\":1,\"857\":1,\"868\":1,\"869\":1,\"874\":1,\"883\":1,\"884\":1,\"889\":1,\"1054\":1,\"1055\":1,\"1066\":1,\"1067\":1,\"1090\":1,\"1091\":1,\"1096\":1,\"1097\":1,\"1105\":1,\"1106\":1,\"1138\":1,\"1139\":1,\"1157\":1,\"1158\":1,\"1174\":1,\"1175\":1}}],[\"flag\",{\"1\":{\"1064\":1,\"1236\":4,\"1237\":4,\"1241\":4,\"1242\":5}}],[\"float\",{\"1\":{\"986\":1,\"1207\":2,\"1209\":2,\"1276\":1,\"1289\":2,\"1338\":1,\"1339\":1}}],[\"flowerbed\",{\"1\":{\"1376\":27}}],[\"flower\",{\"1\":{\"660\":2}}],[\"flow\",{\"1\":{\"552\":1}}],[\"flyingpigeonwheel\",{\"1\":{\"792\":1}}],[\"flyingpigeonframe\",{\"1\":{\"792\":1}}],[\"flyingpigeonfactory\",{\"1\":{\"792\":2}}],[\"flush\",{\"1\":{\"388\":1,\"879\":1}}],[\"fsm\",{\"1\":{\"561\":1,\"567\":1}}],[\"fsync\",{\"1\":{\"260\":3,\"388\":4}}],[\"fstab\",{\"1\":{\"108\":1}}],[\"fd\",{\"1\":{\"260\":1}}],[\"frequently\",{\"1\":{\"838\":1,\"1002\":1}}],[\"free\",{\"1\":{\"226\":1,\"227\":3}}],[\"frame\",{\"1\":{\"792\":3}}],[\"fruit2\",{\"1\":{\"902\":2}}],[\"fruit1\",{\"1\":{\"902\":2}}],[\"fruitfactory\",{\"1\":{\"902\":3}}],[\"fruit\",{\"1\":{\"731\":2,\"902\":4}}],[\"fruits\",{\"1\":{\"731\":2,\"902\":3}}],[\"frm\",{\"1\":{\"334\":1}}],[\"frm表结构文件\",{\"1\":{\"308\":2}}],[\"frozenset\",{\"1\":{\"986\":1}}],[\"fromtimestamp\",{\"1\":{\"849\":1,\"1010\":1}}],[\"from语法可以达到这一目的\",{\"1\":{\"744\":1}}],[\"from\",{\"1\":{\"70\":6,\"79\":2,\"203\":1,\"314\":1,\"332\":1,\"349\":1,\"404\":2,\"405\":3,\"415\":1,\"420\":1,\"455\":1,\"460\":1,\"482\":2,\"485\":3,\"498\":11,\"499\":4,\"504\":1,\"513\":1,\"530\":6,\"533\":1,\"542\":1,\"545\":1,\"555\":1,\"563\":1,\"565\":1,\"567\":2,\"569\":1,\"570\":1,\"579\":3,\"648\":1,\"651\":1,\"653\":1,\"661\":1,\"662\":15,\"669\":1,\"679\":5,\"680\":5,\"681\":1,\"682\":1,\"706\":1,\"708\":1,\"709\":1,\"712\":1,\"713\":2,\"716\":1,\"717\":2,\"720\":1,\"722\":1,\"744\":1,\"776\":4,\"791\":1,\"806\":4,\"827\":5,\"833\":1,\"839\":1,\"843\":2,\"849\":6,\"855\":1,\"856\":2,\"861\":6,\"862\":6,\"863\":1,\"865\":1,\"872\":4,\"873\":7,\"879\":7,\"880\":1,\"886\":1,\"887\":4,\"888\":3,\"912\":2,\"916\":1,\"929\":1,\"930\":1,\"933\":1,\"935\":1,\"936\":2,\"941\":1,\"942\":1,\"943\":2,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"969\":1,\"997\":1,\"1003\":1,\"1010\":6,\"1049\":3,\"1050\":2,\"1051\":2,\"1057\":1,\"1059\":2,\"1061\":1,\"1063\":1,\"1064\":6,\"1073\":1,\"1077\":1,\"1094\":5,\"1103\":2,\"1111\":1,\"1112\":2,\"1124\":6,\"1147\":2,\"1152\":1,\"1187\":1,\"1189\":1,\"1194\":3,\"1221\":3,\"1229\":5,\"1237\":3,\"1241\":2,\"1242\":2,\"1300\":1,\"1384\":1}}],[\"front\",{\"1\":{\"1\":1}}],[\"fast指的是要遍历的元素\",{\"1\":{\"1266\":1}}],[\"fast指的是我们需要遍历的元素\",{\"1\":{\"1265\":1}}],[\"fast\",{\"1\":{\"1265\":4,\"1266\":4}}],[\"fastapi\",{\"1\":{\"1170\":1,\"1172\":1,\"1173\":1}}],[\"father\",{\"1\":{\"1229\":4,\"1230\":8}}],[\"factory\",{\"1\":{\"767\":1,\"788\":1,\"879\":2}}],[\"failure\",{\"1\":{\"863\":1}}],[\"failurethreshold\",{\"1\":{\"147\":6}}],[\"failed\",{\"1\":{\"202\":1,\"1103\":1,\"1187\":6}}],[\"failedjobshistorylimit\",{\"1\":{\"202\":1}}],[\"false代表着出现异常会将错误信息返回出来可以被try\",{\"1\":{\"848\":1,\"1009\":1}}],[\"false\",{\"1\":{\"160\":1,\"202\":1,\"349\":1,\"565\":1,\"863\":1,\"986\":1,\"1017\":1,\"1059\":7,\"1063\":1,\"1064\":2,\"1094\":1,\"1103\":2,\"1182\":3,\"1194\":1,\"1198\":3,\"1220\":1,\"1225\":1,\"1229\":4,\"1236\":5,\"1237\":6,\"1241\":6,\"1242\":4,\"1274\":2,\"1276\":2,\"1289\":8,\"1297\":5,\"1298\":1,\"1299\":2,\"1300\":4,\"1313\":1,\"1348\":1,\"1352\":1,\"1353\":1,\"1354\":2,\"1366\":7,\"1376\":2}}],[\"folder=static\",{\"1\":{\"1059\":2}}],[\"folder=template\",{\"1\":{\"662\":1,\"1059\":2}}],[\"folder\",{\"1\":{\"1059\":17}}],[\"fobidden\",{\"1\":{\"967\":1}}],[\"found\",{\"1\":{\"843\":1,\"1144\":1}}],[\"fo\",{\"1\":{\"799\":1}}],[\"fowler\",{\"1\":{\"557\":2}}],[\"food\",{\"1\":{\"806\":4}}],[\"foo\",{\"1\":{\"93\":1,\"97\":1,\"530\":4,\"782\":1}}],[\"force\",{\"1\":{\"1094\":1}}],[\"for函数可以使用endpoint来进行调用视图函数\",{\"1\":{\"1094\":1}}],[\"foreignkey\",{\"1\":{\"886\":1}}],[\"foreverwheel\",{\"1\":{\"792\":1}}],[\"foreverframe\",{\"1\":{\"792\":1}}],[\"foreverfactory\",{\"1\":{\"792\":2}}],[\"form\",{\"1\":{\"862\":14,\"873\":8}}],[\"format\",{\"1\":{\"532\":1,\"755\":1,\"776\":1,\"1220\":2,\"1348\":2}}],[\"for循环嵌套层数过多\",{\"1\":{\"533\":1}}],[\"fork不可用\",{\"1\":{\"718\":1}}],[\"forkserver\",{\"1\":{\"705\":2}}],[\"fork\",{\"1\":{\"705\":2}}],[\"fork子进程属于重量级操作\",{\"1\":{\"258\":1}}],[\"fork操作完成后会发消息给主进程\",{\"1\":{\"257\":1}}],[\"fork操作会对主进程造成阻塞\",{\"1\":{\"257\":1}}],[\"forbids\",{\"1\":{\"202\":1}}],[\"forbid\",{\"1\":{\"202\":1}}],[\"forwarding\",{\"1\":{\"108\":1}}],[\"forward\",{\"1\":{\"108\":1,\"124\":1}}],[\"for\",{\"1\":{\"1\":1,\"108\":1,\"285\":1,\"373\":1,\"404\":1,\"405\":1,\"482\":4,\"507\":2,\"513\":3,\"520\":2,\"533\":3,\"579\":1,\"709\":2,\"712\":2,\"713\":2,\"731\":1,\"732\":1,\"733\":1,\"735\":1,\"736\":2,\"776\":7,\"806\":1,\"822\":1,\"831\":1,\"832\":1,\"833\":1,\"849\":4,\"854\":1,\"861\":2,\"862\":3,\"873\":1,\"879\":1,\"880\":1,\"916\":1,\"924\":1,\"925\":1,\"996\":1,\"997\":1,\"1010\":4,\"1023\":3,\"1030\":1,\"1033\":2,\"1040\":7,\"1049\":3,\"1061\":1,\"1063\":2,\"1094\":4,\"1103\":7,\"1111\":1,\"1187\":1,\"1188\":1,\"1189\":2,\"1194\":1,\"1198\":5,\"1202\":6,\"1207\":4,\"1208\":3,\"1209\":2,\"1220\":6,\"1221\":3,\"1227\":2,\"1229\":5,\"1230\":2,\"1235\":2,\"1236\":2,\"1237\":4,\"1241\":4,\"1242\":4,\"1257\":1,\"1259\":1,\"1265\":1,\"1266\":2,\"1272\":4,\"1273\":2,\"1274\":10,\"1275\":4,\"1276\":4,\"1280\":2,\"1281\":2,\"1286\":2,\"1287\":1,\"1288\":3,\"1289\":3,\"1292\":16,\"1298\":1,\"1299\":11,\"1300\":1,\"1303\":22,\"1307\":11,\"1308\":6,\"1309\":3,\"1313\":3,\"1314\":5,\"1329\":1,\"1331\":2,\"1335\":2,\"1337\":1,\"1338\":2,\"1339\":4,\"1340\":2,\"1348\":3,\"1352\":4,\"1353\":4,\"1354\":7,\"1364\":1,\"1365\":1,\"1366\":1,\"1379\":3,\"1380\":1,\"1384\":2,\"1385\":2,\"1403\":1}}],[\"fib\",{\"1\":{\"929\":4}}],[\"fibonacci\",{\"1\":{\"733\":2,\"1024\":5}}],[\"field\",{\"1\":{\"881\":6,\"887\":2}}],[\"fields\",{\"1\":{\"87\":1,\"133\":1,\"153\":1,\"880\":1,\"881\":1,\"887\":4,\"1147\":3,\"1150\":2}}],[\"first\",{\"1\":{\"822\":1,\"831\":1,\"837\":2,\"849\":3,\"862\":2,\"887\":1,\"1001\":2,\"1010\":3,\"1059\":1,\"1064\":2,\"1103\":1,\"1111\":1,\"1112\":1,\"1289\":3}}],[\"firewall\",{\"1\":{\"769\":1}}],[\"fidelity\",{\"1\":{\"776\":6}}],[\"fifo队列\",{\"1\":{\"915\":1}}],[\"fifo算法是一种比较简单的算法\",{\"1\":{\"837\":1,\"1001\":1}}],[\"fifo算法\",{\"0\":{\"837\":1,\"1001\":1},\"1\":{\"836\":1,\"1000\":1}}],[\"fifo\",{\"1\":{\"579\":1,\"837\":1,\"839\":4,\"915\":1,\"1001\":1,\"1003\":4}}],[\"finish\",{\"1\":{\"1040\":1,\"1303\":2}}],[\"finished是一个信号\",{\"1\":{\"1115\":1,\"1128\":1}}],[\"finished\",{\"0\":{\"1115\":1,\"1128\":1},\"1\":{\"198\":1,\"597\":1,\"1040\":1,\"1103\":1,\"1110\":2}}],[\"fin\",{\"1\":{\"953\":7,\"954\":4}}],[\"fine\",{\"1\":{\"799\":1}}],[\"finalizing\",{\"1\":{\"1103\":1}}],[\"finalize\",{\"1\":{\"1103\":3,\"1111\":1,\"1112\":1}}],[\"final\",{\"1\":{\"770\":1}}],[\"finally\",{\"1\":{\"749\":1,\"844\":1,\"849\":1,\"1010\":1,\"1050\":2,\"1064\":2,\"1084\":1,\"1088\":1,\"1098\":1,\"1100\":1,\"1102\":1,\"1104\":1,\"1194\":1}}],[\"finally确保代码执行\",{\"0\":{\"749\":1}}],[\"finally块无论是否发生异常\",{\"1\":{\"749\":1}}],[\"finally块\",{\"0\":{\"747\":1}}],[\"findlongestword\",{\"1\":{\"1380\":1}}],[\"findlength\",{\"1\":{\"1307\":3}}],[\"findlengthoflcis\",{\"1\":{\"1287\":1}}],[\"findcontentchildren\",{\"1\":{\"1364\":1}}],[\"findmaxform\",{\"1\":{\"1274\":1}}],[\"findtargetsumways\",{\"1\":{\"1274\":1}}],[\"findorder\",{\"1\":{\"1242\":1}}],[\"findredundantconnection\",{\"1\":{\"1230\":1}}],[\"find就能以\",{\"1\":{\"1226\":1}}],[\"find主要功能就是从某个节点向上遍历到树根\",{\"1\":{\"1225\":1}}],[\"findnumberoflis\",{\"1\":{\"1208\":1,\"1288\":1}}],[\"finder\",{\"1\":{\"1187\":1}}],[\"find\",{\"1\":{\"545\":1,\"681\":1,\"856\":1,\"1045\":1,\"1225\":1,\"1226\":2,\"1227\":12,\"1229\":6,\"1230\":6,\"1395\":6,\"1400\":4}}],[\"filters\",{\"1\":{\"861\":3}}],[\"filter\",{\"1\":{\"822\":1,\"831\":1,\"849\":3,\"861\":5,\"862\":13,\"887\":1,\"1010\":3}}],[\"filtered\",{\"1\":{\"349\":2}}],[\"filename>\",{\"1\":{\"1059\":2}}],[\"filename=\",{\"1\":{\"757\":1}}],[\"filename\",{\"1\":{\"746\":4,\"758\":5}}],[\"filenotfounderror\",{\"1\":{\"742\":1,\"744\":1,\"758\":1}}],[\"file中的数据\",{\"1\":{\"425\":1}}],[\"file中\",{\"1\":{\"388\":2,\"425\":1}}],[\"files=settings\",{\"1\":{\"1194\":1}}],[\"filesort\",{\"1\":{\"351\":1}}],[\"filesort在排序时使用了外部的索引排序\",{\"1\":{\"349\":1}}],[\"files\",{\"1\":{\"320\":1,\"469\":1}}],[\"file=true\",{\"1\":{\"757\":1}}],[\"file=false\",{\"1\":{\"757\":1}}],[\"file=\",{\"1\":{\"503\":1}}],[\"file=game\",{\"1\":{\"70\":1}}],[\"file=<我的键名>=<文件路径>\",{\"1\":{\"70\":1}}],[\"file\",{\"0\":{\"259\":1,\"334\":1},\"1\":{\"70\":1,\"382\":1,\"383\":1,\"388\":2,\"425\":1,\"503\":6,\"531\":1,\"662\":7,\"679\":1,\"680\":1,\"742\":2,\"746\":6,\"755\":1,\"757\":1,\"758\":6,\"827\":1,\"849\":3,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1,\"1010\":3,\"1059\":2,\"1189\":1}}],[\"f\",{\"1\":{\"73\":2,\"80\":1,\"108\":1,\"125\":3,\"155\":1,\"405\":1,\"532\":1,\"542\":1,\"555\":1,\"563\":1,\"597\":2,\"712\":2,\"735\":2,\"736\":1,\"743\":1,\"751\":1,\"757\":2,\"758\":2,\"799\":2,\"806\":6,\"832\":1,\"833\":1,\"846\":2,\"847\":3,\"848\":1,\"849\":6,\"862\":1,\"916\":3,\"921\":1,\"924\":1,\"925\":1,\"929\":1,\"996\":1,\"997\":1,\"1008\":2,\"1009\":4,\"1010\":6,\"1049\":1,\"1050\":2,\"1059\":2,\"1062\":3,\"1063\":11,\"1094\":3,\"1102\":1,\"1147\":1,\"1180\":2,\"1187\":1,\"1188\":4,\"1189\":2,\"1194\":1}}],[\"ij\",{\"1\":{\"1303\":1}}],[\"i<=1\",{\"1\":{\"1299\":1}}],[\"i>1\",{\"1\":{\"1299\":1}}],[\"i+1+2\",{\"1\":{\"1376\":1}}],[\"i+1\",{\"1\":{\"1299\":2,\"1307\":4,\"1308\":4,\"1309\":4,\"1313\":6,\"1376\":2}}],[\"i++\",{\"1\":{\"507\":2,\"520\":2,\"1266\":1}}],[\"i和j距离大于1\",{\"1\":{\"1299\":1}}],[\"iv\",{\"1\":{\"1292\":2}}],[\"i指的是物品\",{\"1\":{\"1271\":1}}],[\"i件物品任取\",{\"1\":{\"1271\":1}}],[\"iii\",{\"0\":{\"1340\":1}}],[\"ii\",{\"0\":{\"1242\":1,\"1339\":1,\"1403\":1},\"1\":{\"1274\":1,\"1275\":1,\"1280\":1,\"1292\":1,\"1297\":1,\"1303\":1}}],[\"i之间的所有数\",{\"1\":{\"1207\":1}}],[\"iat\",{\"1\":{\"696\":1}}],[\"ignore=\",{\"1\":{\"1187\":1}}],[\"ignore\",{\"1\":{\"658\":1,\"1050\":1,\"1059\":3,\"1063\":2,\"1094\":4,\"1098\":1,\"1100\":1,\"1102\":1,\"1103\":4,\"1104\":1}}],[\"if\",{\"1\":{\"513\":1,\"533\":6,\"653\":1,\"662\":1,\"680\":1,\"681\":4,\"706\":1,\"717\":1,\"732\":1,\"733\":1,\"735\":1,\"746\":1,\"751\":1,\"753\":1,\"757\":1,\"758\":4,\"776\":8,\"783\":1,\"784\":2,\"790\":1,\"799\":1,\"806\":8,\"827\":5,\"839\":3,\"844\":5,\"849\":6,\"856\":5,\"861\":2,\"862\":9,\"863\":1,\"872\":2,\"879\":1,\"880\":2,\"900\":1,\"902\":1,\"916\":1,\"924\":1,\"929\":2,\"992\":1,\"1003\":3,\"1010\":6,\"1033\":1,\"1049\":5,\"1050\":10,\"1057\":1,\"1059\":4,\"1061\":2,\"1063\":8,\"1064\":10,\"1094\":21,\"1098\":2,\"1100\":7,\"1102\":6,\"1103\":9,\"1104\":2,\"1111\":1,\"1112\":2,\"1124\":3,\"1147\":1,\"1167\":1,\"1182\":5,\"1183\":1,\"1187\":4,\"1188\":4,\"1189\":2,\"1194\":10,\"1198\":6,\"1202\":5,\"1207\":2,\"1208\":3,\"1209\":1,\"1220\":5,\"1221\":3,\"1226\":1,\"1227\":5,\"1229\":3,\"1230\":2,\"1235\":2,\"1236\":4,\"1237\":4,\"1241\":2,\"1242\":3,\"1257\":3,\"1259\":2,\"1265\":1,\"1266\":1,\"1272\":1,\"1274\":5,\"1275\":1,\"1276\":3,\"1280\":3,\"1282\":2,\"1286\":2,\"1287\":2,\"1288\":4,\"1289\":7,\"1292\":2,\"1297\":3,\"1298\":2,\"1299\":5,\"1300\":2,\"1303\":5,\"1307\":3,\"1308\":2,\"1309\":2,\"1313\":1,\"1314\":1,\"1329\":1,\"1338\":1,\"1339\":3,\"1340\":1,\"1348\":3,\"1352\":3,\"1353\":3,\"1354\":7,\"1364\":1,\"1365\":2,\"1366\":4,\"1376\":6,\"1377\":1,\"1378\":1,\"1379\":3,\"1380\":2,\"1384\":1,\"1385\":1,\"1390\":1,\"1393\":1,\"1395\":9,\"1399\":1,\"1400\":5,\"1403\":2}}],[\"ifnotpresent\",{\"1\":{\"73\":2,\"133\":1}}],[\"icp\",{\"1\":{\"455\":1,\"456\":2}}],[\"ib\",{\"1\":{\"334\":2}}],[\"ibdbata\",{\"1\":{\"469\":1}}],[\"ibdata1\",{\"1\":{\"334\":1}}],[\"ibdata\",{\"1\":{\"334\":3}}],[\"ibd文件和\",{\"1\":{\"334\":1}}],[\"ibd\",{\"1\":{\"320\":1,\"334\":2,\"469\":1}}],[\"ibd数据文件\",{\"1\":{\"308\":1}}],[\"itself\",{\"1\":{\"1111\":1}}],[\"iterable\",{\"1\":{\"1017\":2,\"1057\":1,\"1098\":1,\"1100\":1,\"1104\":1}}],[\"iterator\",{\"1\":{\"732\":4,\"893\":1,\"1017\":1,\"1050\":1}}],[\"iter\",{\"1\":{\"731\":2,\"732\":4,\"854\":2,\"893\":1,\"1014\":1,\"1015\":3,\"1017\":2,\"1049\":2,\"1050\":2}}],[\"item2\",{\"1\":{\"1257\":4}}],[\"item1\",{\"1\":{\"1257\":4}}],[\"item\",{\"1\":{\"533\":2,\"681\":2,\"776\":12,\"824\":4,\"825\":2,\"856\":3,\"861\":2,\"880\":3,\"916\":6,\"919\":2,\"1049\":2,\"1050\":2,\"1063\":2,\"1094\":2,\"1257\":4,\"1292\":2,\"1307\":2,\"1384\":4}}],[\"items\",{\"1\":{\"533\":3,\"776\":2,\"849\":1,\"854\":1,\"861\":2,\"862\":7,\"879\":1,\"882\":1,\"1010\":1,\"1049\":1,\"1198\":1,\"1300\":1,\"1384\":4}}],[\"it\",{\"1\":{\"125\":1,\"732\":2,\"776\":2,\"799\":2,\"1040\":1}}],[\"id>\",{\"1\":{\"1147\":1}}],[\"id>=\",{\"1\":{\"499\":1}}],[\"identity\",{\"1\":{\"873\":3}}],[\"identifier\",{\"1\":{\"696\":1}}],[\"ident\",{\"1\":{\"849\":2,\"854\":10,\"856\":9,\"1010\":2,\"1049\":22,\"1051\":2}}],[\"idle\",{\"1\":{\"570\":3}}],[\"id不同\",{\"1\":{\"493\":1}}],[\"id=uid\",{\"1\":{\"822\":1,\"831\":1,\"849\":1,\"1010\":1}}],[\"id=0\",{\"1\":{\"482\":1}}],[\"id=10\",{\"1\":{\"405\":1}}],[\"id与快照readview的若干个信息进行对比\",{\"1\":{\"374\":1}}],[\"id之间\",{\"1\":{\"371\":1}}],[\"id和max\",{\"1\":{\"371\":1}}],[\"id值\",{\"1\":{\"371\":2}}],[\"id值相同\",{\"1\":{\"371\":1}}],[\"ids列表中\",{\"1\":{\"371\":1}}],[\"ids里最小的值\",{\"1\":{\"371\":1}}],[\"ids\",{\"1\":{\"371\":1,\"477\":2}}],[\"id中\",{\"1\":{\"369\":1}}],[\"id的隐藏列作为主键\",{\"1\":{\"369\":1}}],[\"id的属性处\",{\"1\":{\"325\":1}}],[\"id属性值是不是在m\",{\"1\":{\"371\":1}}],[\"id属性值\",{\"1\":{\"325\":1}}],[\"id属性加载到内存中\",{\"1\":{\"325\":1}}],[\"id列的值\",{\"1\":{\"325\":1}}],[\"id列的表中插入一条记录时\",{\"1\":{\"325\":1}}],[\"id\",{\"1\":{\"108\":2,\"325\":2,\"334\":1,\"349\":5,\"369\":2,\"371\":17,\"394\":1,\"443\":2,\"476\":3,\"477\":6,\"478\":12,\"482\":1,\"499\":8,\"504\":2,\"513\":7,\"542\":2,\"545\":6,\"550\":2,\"552\":1,\"653\":3,\"681\":4,\"828\":2,\"849\":1,\"861\":2,\"862\":21,\"879\":2,\"881\":3,\"882\":6,\"886\":2,\"887\":5,\"1010\":1,\"1049\":10,\"1088\":3,\"1101\":1,\"1144\":1,\"1147\":8,\"1151\":3}}],[\"i\",{\"1\":{\"108\":2,\"268\":4,\"269\":3,\"270\":4,\"507\":4,\"520\":4,\"588\":1,\"590\":2,\"592\":2,\"600\":2,\"664\":1,\"665\":1,\"668\":1,\"682\":1,\"706\":1,\"712\":2,\"717\":1,\"732\":2,\"736\":4,\"799\":3,\"806\":3,\"832\":1,\"833\":1,\"916\":2,\"996\":1,\"997\":1,\"1024\":5,\"1030\":2,\"1033\":2,\"1049\":2,\"1198\":7,\"1202\":20,\"1203\":1,\"1207\":18,\"1208\":26,\"1209\":6,\"1221\":8,\"1227\":4,\"1229\":4,\"1230\":4,\"1236\":4,\"1237\":6,\"1241\":5,\"1242\":4,\"1257\":11,\"1259\":5,\"1266\":4,\"1270\":2,\"1271\":16,\"1272\":9,\"1273\":23,\"1274\":18,\"1275\":12,\"1276\":8,\"1280\":31,\"1281\":13,\"1282\":1,\"1286\":8,\"1287\":9,\"1288\":13,\"1289\":10,\"1292\":133,\"1298\":7,\"1299\":53,\"1303\":81,\"1307\":22,\"1308\":13,\"1309\":7,\"1313\":16,\"1314\":9,\"1329\":2,\"1331\":2,\"1335\":2,\"1336\":1,\"1338\":4,\"1339\":14,\"1340\":1,\"1341\":3,\"1352\":7,\"1353\":6,\"1354\":2,\"1364\":6,\"1365\":8,\"1366\":5,\"1376\":4,\"1377\":4,\"1378\":2,\"1379\":4,\"1380\":2,\"1384\":3,\"1385\":6,\"1395\":1,\"1399\":1,\"1400\":1,\"1403\":5}}],[\"im\",{\"1\":{\"1303\":1}}],[\"implemented\",{\"1\":{\"967\":1}}],[\"implementationspecific\",{\"1\":{\"100\":1}}],[\"implicitly\",{\"1\":{\"844\":2}}],[\"importer\",{\"1\":{\"1194\":2}}],[\"importerror\",{\"1\":{\"1049\":2}}],[\"importlib\",{\"1\":{\"1189\":2}}],[\"imports\",{\"1\":{\"662\":1}}],[\"import\",{\"1\":{\"530\":9,\"532\":1,\"533\":1,\"542\":1,\"545\":1,\"550\":1,\"563\":1,\"565\":1,\"567\":2,\"569\":1,\"570\":1,\"579\":2,\"591\":2,\"594\":3,\"597\":2,\"648\":1,\"651\":1,\"653\":1,\"660\":1,\"661\":1,\"662\":14,\"669\":1,\"679\":5,\"680\":5,\"681\":1,\"682\":1,\"705\":1,\"706\":1,\"708\":1,\"709\":1,\"712\":2,\"713\":3,\"716\":1,\"717\":3,\"720\":2,\"722\":1,\"735\":1,\"736\":1,\"755\":1,\"757\":1,\"758\":2,\"776\":6,\"784\":1,\"791\":1,\"806\":4,\"827\":9,\"832\":1,\"833\":2,\"834\":1,\"839\":1,\"843\":2,\"849\":6,\"855\":5,\"856\":1,\"861\":6,\"862\":6,\"863\":1,\"865\":1,\"872\":7,\"873\":7,\"879\":7,\"880\":2,\"886\":1,\"887\":4,\"888\":3,\"894\":1,\"912\":2,\"916\":3,\"919\":1,\"921\":1,\"924\":2,\"925\":2,\"929\":2,\"930\":1,\"932\":1,\"933\":2,\"935\":2,\"936\":3,\"941\":1,\"942\":1,\"943\":2,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"996\":1,\"997\":2,\"998\":1,\"1003\":1,\"1010\":6,\"1033\":1,\"1049\":6,\"1051\":3,\"1057\":1,\"1059\":9,\"1061\":1,\"1064\":4,\"1073\":1,\"1074\":1,\"1077\":1,\"1081\":1,\"1094\":1,\"1111\":1,\"1112\":2,\"1124\":6,\"1147\":2,\"1152\":1,\"1189\":10,\"1194\":3,\"1207\":1,\"1221\":3,\"1281\":1,\"1300\":1,\"1384\":1}}],[\"impossible\",{\"1\":{\"349\":1}}],[\"img\",{\"1\":{\"224\":1,\"256\":1,\"355\":1,\"357\":1,\"358\":1,\"361\":1,\"363\":1,\"413\":2,\"414\":2,\"439\":1,\"611\":1,\"957\":1,\"959\":1,\"962\":1,\"969\":1,\"978\":1,\"1029\":1,\"1202\":2,\"1203\":1,\"1217\":3,\"1218\":1,\"1221\":2,\"1229\":2,\"1230\":2,\"1236\":2,\"1303\":5,\"1353\":1,\"1354\":2,\"1377\":1}}],[\"image=nginx\",{\"1\":{\"125\":5}}],[\"image=应用的镜像\",{\"1\":{\"125\":1}}],[\"imagename\",{\"1\":{\"108\":1}}],[\"images=\",{\"1\":{\"108\":1}}],[\"images\",{\"1\":{\"96\":1,\"108\":8}}],[\"imagepullsecrets\",{\"1\":{\"81\":1}}],[\"imagepullpolicy\",{\"1\":{\"73\":2,\"133\":1}}],[\"image\",{\"1\":{\"19\":1,\"64\":1,\"67\":1,\"73\":2,\"81\":1,\"95\":1,\"108\":1,\"117\":1,\"125\":2,\"133\":1,\"135\":1,\"136\":1,\"147\":1,\"165\":3,\"197\":1,\"203\":1,\"217\":1,\"232\":1,\"251\":1,\"270\":1,\"285\":1,\"299\":1,\"300\":1,\"301\":1,\"302\":1,\"303\":1,\"308\":1,\"311\":1,\"319\":1,\"320\":1,\"322\":1,\"325\":1,\"327\":1,\"338\":1,\"340\":1,\"344\":1,\"348\":1,\"369\":1,\"370\":1,\"377\":1,\"388\":1,\"390\":1,\"394\":1,\"405\":4,\"408\":2,\"415\":1,\"425\":5,\"455\":1,\"460\":2,\"461\":1,\"468\":1,\"469\":1,\"476\":1,\"477\":1,\"478\":1,\"482\":2,\"494\":1,\"513\":1,\"555\":1,\"856\":1}}],[\"ip做传输层协议将它发到网络上\",{\"1\":{\"962\":1}}],[\"ip协议\",{\"1\":{\"962\":1}}],[\"ip和http协议的关系\",{\"1\":{\"962\":1}}],[\"ip地址过滤以及缓存检查等\",{\"1\":{\"804\":1}}],[\"ipc性能瓶颈\",{\"1\":{\"713\":1}}],[\"ipc开销\",{\"1\":{\"710\":1}}],[\"ipc\",{\"0\":{\"706\":1}}],[\"ipset\",{\"1\":{\"108\":1}}],[\"iptables\",{\"1\":{\"108\":1}}],[\"ip6tables\",{\"1\":{\"108\":1}}],[\"ipvsadm\",{\"1\":{\"108\":1}}],[\"ipvs\",{\"1\":{\"108\":4}}],[\"ipv6\",{\"1\":{\"108\":7}}],[\"ipv6流量桥接\",{\"1\":{\"108\":1}}],[\"ipv4流量桥接\",{\"1\":{\"108\":1}}],[\"ipv4\",{\"1\":{\"108\":2}}],[\"ip\",{\"1\":{\"92\":2,\"93\":5,\"108\":5,\"115\":3,\"262\":1,\"334\":1,\"676\":1}}],[\"io操作是相对于cpu执行的计算操作而言的\",{\"1\":{\"898\":1}}],[\"io操作\",{\"1\":{\"898\":1}}],[\"io连接\",{\"1\":{\"681\":1}}],[\"io绑定工作负载和高争用\",{\"1\":{\"430\":1}}],[\"io的性能较差\",{\"1\":{\"388\":1}}],[\"io多路复用程序\",{\"1\":{\"268\":1}}],[\"io多路复用\",{\"0\":{\"267\":1},\"2\":{\"208\":1,\"272\":1}}],[\"ios\",{\"1\":{\"118\":1}}],[\"io\",{\"0\":{\"680\":1},\"1\":{\"87\":1,\"88\":1,\"90\":1,\"93\":2,\"101\":2,\"108\":1,\"260\":1,\"270\":1,\"361\":5,\"441\":1,\"507\":1,\"664\":1,\"665\":1,\"666\":1,\"668\":1,\"670\":1,\"680\":1,\"681\":4,\"898\":2,\"899\":1,\"1161\":1}}],[\"increasingtriplet\",{\"1\":{\"1289\":2}}],[\"increment\",{\"1\":{\"717\":1,\"756\":1}}],[\"include\",{\"1\":{\"1194\":1}}],[\"included\",{\"1\":{\"1194\":2}}],[\"inject\",{\"1\":{\"1094\":1}}],[\"inas\",{\"1\":{\"1040\":1}}],[\"indegree\",{\"1\":{\"1218\":1}}],[\"index>\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"indexerror\",{\"1\":{\"856\":1,\"986\":1,\"1049\":1}}],[\"indexes=1\",{\"1\":{\"503\":1}}],[\"indexes\",{\"1\":{\"503\":5}}],[\"index查询遍历了整棵索引树\",{\"1\":{\"349\":1}}],[\"index\",{\"1\":{\"312\":1,\"314\":1,\"349\":7,\"350\":1,\"351\":2,\"412\":1,\"415\":1,\"420\":1,\"447\":3,\"448\":2,\"450\":3,\"455\":1,\"460\":7,\"504\":1,\"513\":3,\"681\":1,\"919\":3,\"1057\":2,\"1059\":2,\"1063\":3,\"1077\":1,\"1094\":5,\"1112\":3,\"1124\":11,\"1207\":2,\"1209\":2,\"1282\":9,\"1364\":5,\"1379\":2,\"1380\":9}}],[\"individual\",{\"1\":{\"844\":1}}],[\"inversion\",{\"1\":{\"762\":1}}],[\"invalidate\",{\"1\":{\"1187\":1}}],[\"invalid\",{\"1\":{\"758\":1}}],[\"inner是内函数\",{\"1\":{\"992\":1}}],[\"inner\",{\"1\":{\"754\":2,\"833\":2,\"839\":2,\"992\":2,\"997\":2,\"1003\":2,\"1049\":5}}],[\"innodb已同样的方式处理count\",{\"1\":{\"487\":1}}],[\"innodb通过遍历最小的可用二级索引来处理select\",{\"1\":{\"487\":1}}],[\"innodb在读\",{\"1\":{\"430\":1}}],[\"innodb的基于回滚段实现的mvcc机制\",{\"1\":{\"434\":1}}],[\"innodb的所有辅助索引都引用主键作为data域\",{\"1\":{\"414\":1}}],[\"innodb的三大特征\",{\"0\":{\"312\":1}}],[\"innodb也使用b+tree作为索引结构\",{\"0\":{\"414\":1}}],[\"innodb不仅会修改buffer\",{\"1\":{\"425\":1}}],[\"innodb不加锁\",{\"1\":{\"405\":1}}],[\"innodb不会立即删除undo\",{\"1\":{\"389\":1}}],[\"innodb对于记录加锁行为都是先采用next\",{\"1\":{\"405\":1}}],[\"innodb将使用表锁\",{\"1\":{\"405\":1}}],[\"innodb才使用行级锁\",{\"1\":{\"405\":1}}],[\"innodb这种行锁实现特点意味着\",{\"1\":{\"405\":1}}],[\"innodb行锁是通过对索引数据页上的记录加锁实现的\",{\"1\":{\"405\":1}}],[\"innodb行锁的类型\",{\"1\":{\"404\":1}}],[\"innodb引擎\",{\"1\":{\"487\":1}}],[\"innodb引擎采用mvcc机制实现非阻塞读\",{\"1\":{\"405\":1}}],[\"innodb引擎默认更新语句\",{\"1\":{\"404\":1}}],[\"innodb引擎对数据的更新\",{\"1\":{\"382\":1}}],[\"innodb会在将要插入的那一行设置一个排他的recordlock锁\",{\"1\":{\"405\":1}}],[\"innodb会在重启时\",{\"1\":{\"383\":1}}],[\"innodb会使用next\",{\"1\":{\"405\":4}}],[\"innodb会对next\",{\"1\":{\"405\":1}}],[\"innodb会自动为表添加一个row\",{\"1\":{\"369\":1}}],[\"innodb存储引擎提供了两种事务日志\",{\"1\":{\"425\":1}}],[\"innodb存储引擎提供mvcc\",{\"1\":{\"374\":1}}],[\"innodb存储引擎既支持行级锁\",{\"1\":{\"400\":1}}],[\"innodb存储引擎就是用b+tree实现其索引结构\",{\"1\":{\"343\":1}}],[\"innodb存储引擎会自动将行数据存放到溢出页中\",{\"1\":{\"327\":1}}],[\"innodb存储引擎支持四种行格式\",{\"0\":{\"321\":1},\"1\":{\"321\":1}}],[\"innodb实现了double\",{\"1\":{\"320\":1}}],[\"innodb\",{\"0\":{\"310\":1},\"1\":{\"311\":2,\"327\":1,\"334\":3,\"371\":1,\"388\":1,\"404\":1,\"405\":1,\"425\":2,\"439\":3,\"455\":2,\"460\":7,\"468\":3,\"469\":5,\"477\":1,\"482\":1},\"2\":{\"329\":1}}],[\"innodb表最大支持64tb\",{\"1\":{\"308\":1}}],[\"innodb表对应两个文件\",{\"1\":{\"308\":1}}],[\"innodb读写阻塞可以与隔离级别有关\",{\"1\":{\"308\":1}}],[\"innodb使用聚集索引\",{\"1\":{\"308\":1}}],[\"innodb支持行级锁\",{\"1\":{\"308\":1}}],[\"innodb支持事务和外键\",{\"1\":{\"308\":1}}],[\"innodb和myisam是使用mysql时最常用的两种引擎类型\",{\"1\":{\"308\":1}}],[\"innodb和myisam\",{\"0\":{\"307\":1}}],[\"input\",{\"1\":{\"735\":1,\"749\":1}}],[\"inl\",{\"1\":{\"513\":1}}],[\"ini\",{\"1\":{\"1057\":1}}],[\"ini等\",{\"1\":{\"334\":1}}],[\"init实例级别\",{\"1\":{\"903\":1}}],[\"initial\",{\"1\":{\"570\":2}}],[\"initial=\",{\"1\":{\"563\":1,\"565\":1,\"566\":1,\"567\":1,\"569\":1,\"570\":1}}],[\"initialdelayseconds\",{\"1\":{\"147\":5}}],[\"init\",{\"0\":{\"901\":1,\"903\":1},\"1\":{\"108\":1,\"534\":6,\"545\":1,\"563\":1,\"565\":1,\"566\":1,\"567\":2,\"569\":2,\"570\":2,\"662\":1,\"679\":4,\"681\":2,\"732\":1,\"746\":1,\"751\":2,\"776\":3,\"783\":1,\"824\":2,\"825\":1,\"827\":1,\"834\":1,\"844\":1,\"849\":1,\"854\":1,\"856\":1,\"862\":1,\"867\":2,\"888\":4,\"900\":5,\"901\":7,\"902\":3,\"903\":1,\"919\":1,\"920\":1,\"998\":1,\"1010\":1,\"1030\":2,\"1049\":3,\"1050\":2,\"1057\":3,\"1059\":6,\"1094\":1,\"1100\":1,\"1180\":2,\"1187\":2,\"1188\":5,\"1193\":3,\"1227\":2,\"1229\":2,\"1230\":1,\"1236\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1352\":1,\"1353\":1,\"1354\":1}}],[\"int|none\",{\"1\":{\"1188\":1}}],[\"int\",{\"1\":{\"218\":1,\"226\":2,\"260\":1,\"416\":1,\"507\":2,\"520\":2,\"531\":1,\"533\":6,\"725\":1,\"749\":1,\"849\":1,\"872\":2,\"929\":2,\"986\":1,\"1010\":1,\"1064\":3,\"1198\":5,\"1202\":1,\"1207\":4,\"1208\":2,\"1209\":2,\"1217\":1,\"1221\":15,\"1225\":5,\"1227\":5,\"1229\":12,\"1230\":5,\"1236\":1,\"1237\":2,\"1241\":2,\"1242\":3,\"1257\":2,\"1265\":3,\"1266\":6,\"1272\":2,\"1273\":1,\"1274\":9,\"1275\":6,\"1276\":2,\"1280\":4,\"1281\":3,\"1282\":2,\"1286\":2,\"1287\":2,\"1288\":2,\"1289\":2,\"1292\":14,\"1299\":2,\"1300\":1,\"1303\":9,\"1307\":9,\"1308\":2,\"1309\":3,\"1314\":1,\"1331\":2,\"1335\":2,\"1337\":2,\"1338\":2,\"1339\":4,\"1340\":2,\"1341\":2,\"1352\":1,\"1353\":2,\"1354\":5,\"1364\":3,\"1365\":3,\"1366\":1,\"1376\":4,\"1377\":2,\"1378\":3,\"1379\":5,\"1384\":6,\"1385\":1,\"1390\":3,\"1395\":3,\"1399\":3,\"1400\":3,\"1403\":4}}],[\"integer\",{\"1\":{\"828\":1,\"849\":2,\"861\":1,\"879\":1,\"886\":1,\"1010\":2,\"1147\":1,\"1150\":1}}],[\"integration\",{\"1\":{\"49\":1}}],[\"internal\",{\"1\":{\"1094\":1}}],[\"interpreter\",{\"1\":{\"897\":1}}],[\"interface\",{\"1\":{\"332\":1,\"799\":2,\"1059\":2,\"1100\":4,\"1103\":2,\"1161\":2,\"1183\":2,\"1194\":1}}],[\"intermediate\",{\"1\":{\"124\":1}}],[\"ingressclassname\",{\"1\":{\"101\":1}}],[\"ingressclass\",{\"1\":{\"100\":1}}],[\"ingress资源\",{\"0\":{\"97\":1}}],[\"ingress\",{\"0\":{\"94\":1},\"1\":{\"93\":2,\"95\":4,\"96\":3,\"97\":1,\"98\":4,\"99\":1,\"100\":1,\"101\":3,\"169\":2}}],[\"inf\",{\"1\":{\"1207\":2,\"1209\":2,\"1276\":1,\"1289\":2,\"1338\":1,\"1339\":1}}],[\"information\",{\"1\":{\"844\":1,\"1050\":1}}],[\"info=true\",{\"1\":{\"757\":1}}],[\"info\",{\"1\":{\"73\":1,\"124\":1,\"210\":1,\"550\":2,\"660\":1,\"662\":4,\"679\":4,\"844\":1,\"862\":2,\"1050\":2,\"1098\":1,\"1100\":1,\"1102\":1,\"1104\":1,\"1187\":1,\"1188\":2,\"1194\":3}}],[\"infrastructure\",{\"1\":{\"44\":1}}],[\"instead\",{\"1\":{\"844\":1,\"1050\":2,\"1102\":1,\"1258\":1}}],[\"instance\",{\"1\":{\"681\":4,\"783\":4,\"784\":9,\"900\":4,\"1057\":5,\"1059\":9,\"1187\":5,\"1188\":12}}],[\"install\",{\"1\":{\"63\":1,\"108\":4,\"555\":1,\"562\":1,\"647\":1,\"678\":2,\"871\":1,\"1147\":1}}],[\"inside\",{\"1\":{\"843\":1}}],[\"inspect\",{\"1\":{\"662\":1,\"776\":3,\"839\":1,\"1003\":1,\"1189\":3}}],[\"insert语句\",{\"1\":{\"405\":1}}],[\"insert\",{\"1\":{\"373\":1,\"394\":1,\"404\":1,\"494\":2}}],[\"insecure\",{\"1\":{\"63\":1}}],[\"in\",{\"0\":{\"893\":1},\"1\":{\"1\":1,\"108\":1,\"349\":2,\"350\":1,\"373\":1,\"404\":1,\"405\":1,\"416\":1,\"469\":1,\"533\":3,\"552\":1,\"579\":1,\"709\":2,\"712\":2,\"713\":2,\"731\":1,\"732\":1,\"733\":1,\"735\":1,\"736\":2,\"755\":1,\"758\":1,\"776\":7,\"783\":1,\"806\":1,\"832\":1,\"833\":1,\"837\":1,\"839\":1,\"849\":2,\"855\":4,\"861\":2,\"862\":3,\"879\":1,\"880\":1,\"902\":3,\"916\":1,\"924\":1,\"925\":1,\"996\":1,\"997\":1,\"1001\":1,\"1003\":1,\"1010\":2,\"1023\":3,\"1030\":1,\"1033\":2,\"1040\":2,\"1049\":4,\"1050\":1,\"1061\":1,\"1063\":2,\"1064\":1,\"1094\":2,\"1098\":1,\"1100\":1,\"1103\":10,\"1104\":1,\"1187\":1,\"1188\":2,\"1189\":3,\"1198\":5,\"1202\":6,\"1207\":4,\"1208\":3,\"1209\":2,\"1220\":5,\"1221\":3,\"1227\":2,\"1229\":5,\"1230\":2,\"1235\":2,\"1236\":2,\"1237\":4,\"1241\":4,\"1242\":4,\"1257\":1,\"1258\":1,\"1259\":1,\"1265\":1,\"1266\":1,\"1272\":4,\"1273\":2,\"1274\":10,\"1275\":4,\"1276\":5,\"1280\":2,\"1281\":2,\"1282\":1,\"1286\":2,\"1287\":1,\"1288\":3,\"1289\":3,\"1292\":16,\"1298\":1,\"1299\":11,\"1300\":1,\"1303\":22,\"1307\":11,\"1308\":6,\"1309\":3,\"1313\":3,\"1314\":5,\"1329\":1,\"1331\":2,\"1335\":2,\"1337\":1,\"1338\":2,\"1339\":4,\"1340\":2,\"1348\":2,\"1352\":4,\"1353\":4,\"1354\":7,\"1364\":1,\"1365\":1,\"1366\":1,\"1379\":3,\"1380\":1,\"1384\":2,\"1385\":2,\"1403\":1}}],[\"isalpha\",{\"1\":{\"1297\":2}}],[\"isdigit\",{\"1\":{\"1297\":2}}],[\"ispalindrome\",{\"1\":{\"1297\":1}}],[\"ispossible\",{\"1\":{\"1198\":3}}],[\"isvaild\",{\"1\":{\"1259\":3}}],[\"isbipartite\",{\"1\":{\"1236\":1}}],[\"isclass\",{\"1\":{\"1189\":1}}],[\"iscomplete\",{\"1\":{\"681\":2}}],[\"isupper\",{\"1\":{\"1061\":1}}],[\"isn\",{\"1\":{\"951\":4}}],[\"isinstance\",{\"1\":{\"827\":2,\"880\":2,\"986\":1,\"1061\":1,\"1063\":1,\"1094\":1}}],[\"isfunction\",{\"1\":{\"776\":1}}],[\"issubsequence\",{\"1\":{\"1313\":1}}],[\"iss提供的终端用户的标识\",{\"1\":{\"696\":1}}],[\"iss\",{\"1\":{\"696\":1}}],[\"isolation\",{\"1\":{\"425\":1}}],[\"is\",{\"1\":{\"1\":1,\"416\":2,\"565\":3,\"573\":2,\"653\":1,\"662\":2,\"717\":1,\"776\":3,\"784\":1,\"827\":1,\"844\":7,\"849\":2,\"855\":4,\"856\":5,\"900\":2,\"902\":2,\"916\":1,\"924\":1,\"1010\":2,\"1017\":4,\"1035\":1,\"1040\":1,\"1049\":3,\"1050\":11,\"1059\":1,\"1063\":7,\"1064\":2,\"1094\":21,\"1098\":1,\"1100\":7,\"1102\":4,\"1103\":4,\"1104\":1,\"1111\":2,\"1112\":1,\"1182\":3,\"1187\":2,\"1188\":3,\"1194\":2,\"1220\":4,\"1229\":2,\"1230\":2,\"1242\":1,\"1348\":1}}],[\"b个黑球\",{\"1\":{\"1328\":1}}],[\"bbbb\",{\"1\":{\"1299\":1}}],[\"bbbab\",{\"1\":{\"1299\":1}}],[\"bb\",{\"1\":{\"1259\":1,\"1299\":2}}],[\"bfs\",{\"1\":{\"1217\":1,\"1345\":1},\"2\":{\"1356\":1}}],[\"b001\",{\"1\":{\"1098\":1,\"1100\":1,\"1104\":1}}],[\"b950\",{\"1\":{\"1059\":2}}],[\"b是10\",{\"1\":{\"992\":1}}],[\"b=2\",{\"1\":{\"947\":1}}],[\"b=3\",{\"1\":{\"947\":1}}],[\"b=4\",{\"1\":{\"941\":1}}],[\"bob\",{\"1\":{\"1282\":3}}],[\"bonussalaryvisitor\",{\"1\":{\"1180\":2}}],[\"bonus\",{\"1\":{\"1180\":14}}],[\"bottle\",{\"1\":{\"1169\":1}}],[\"both\",{\"1\":{\"1\":1}}],[\"bodyitemparent|none\",{\"1\":{\"1188\":1}}],[\"bodyitem\",{\"1\":{\"1183\":2}}],[\"body\",{\"1\":{\"1167\":2,\"1182\":2}}],[\"bool|none\",{\"1\":{\"1188\":1}}],[\"bool\",{\"1\":{\"986\":1,\"1050\":1,\"1059\":6,\"1063\":1,\"1064\":3,\"1094\":2,\"1103\":1,\"1188\":1,\"1198\":1,\"1217\":1,\"1229\":2,\"1236\":1,\"1237\":1,\"1241\":1,\"1274\":1,\"1276\":1,\"1289\":2,\"1297\":1,\"1298\":1,\"1300\":1,\"1313\":1,\"1354\":1,\"1366\":1,\"1376\":3}}],[\"books\",{\"1\":{\"1155\":1}}],[\"book\",{\"1\":{\"790\":2,\"791\":4}}],[\"bound=\",{\"1\":{\"1187\":1}}],[\"bound\",{\"1\":{\"839\":2,\"1003\":2}}],[\"blinker\",{\"1\":{\"1111\":1}}],[\"blueprint\",{\"1\":{\"1059\":1,\"1094\":6}}],[\"blueprints\",{\"1\":{\"1059\":1,\"1103\":2}}],[\"blue\",{\"1\":{\"758\":1,\"824\":4,\"825\":1,\"872\":1,\"1112\":1,\"1124\":1}}],[\"blocking=true\",{\"1\":{\"1033\":1}}],[\"block\",{\"1\":{\"349\":2,\"513\":1,\"898\":1}}],[\"bloghome\",{\"1\":{\"1\":1}}],[\"blog\",{\"1\":{\"1\":2}}],[\"bp\",{\"1\":{\"460\":1}}],[\"bpi\",{\"1\":{\"197\":1}}],[\"b表\",{\"1\":{\"407\":2}}],[\"bdb采用的是页面锁\",{\"1\":{\"400\":1}}],[\"beginning\",{\"1\":{\"1050\":1}}],[\"beginner\",{\"1\":{\"124\":1}}],[\"begin\",{\"1\":{\"847\":7,\"848\":2,\"1009\":9}}],[\"behavior\",{\"1\":{\"799\":1}}],[\"best\",{\"1\":{\"776\":4}}],[\"be\",{\"1\":{\"756\":1,\"844\":1,\"1050\":1,\"1057\":1,\"1063\":1,\"1094\":3,\"1102\":1,\"1188\":2}}],[\"beat\",{\"1\":{\"661\":2,\"662\":4}}],[\"before\",{\"0\":{\"1116\":1,\"1129\":1},\"1\":{\"566\":1,\"1059\":7,\"1060\":1,\"1062\":7,\"1103\":5,\"1110\":2,\"1112\":8,\"1116\":1,\"1124\":5,\"1129\":1,\"1137\":1}}],[\"between\",{\"1\":{\"350\":1}}],[\"by\",{\"1\":{\"349\":2,\"507\":1,\"521\":1,\"545\":1,\"755\":2,\"822\":1,\"831\":1,\"847\":1,\"848\":3,\"849\":3,\"862\":1,\"1009\":4,\"1010\":3,\"1111\":1,\"1147\":1,\"1194\":2}}],[\"bytearray\",{\"1\":{\"986\":1}}],[\"bytes\",{\"1\":{\"925\":1,\"986\":1,\"1057\":1,\"1059\":1,\"1098\":1,\"1100\":1,\"1104\":1}}],[\"byte\",{\"1\":{\"227\":1,\"278\":1}}],[\"b+tree查询效率更加稳定\",{\"1\":{\"345\":1}}],[\"b+tree天然具有排序功能\",{\"1\":{\"345\":1}}],[\"b+tree排序能力更强\",{\"1\":{\"345\":1}}],[\"b+tree读写一次磁盘加载的关键字比b\",{\"1\":{\"345\":1}}],[\"b+tree磁盘读写能力更强\",{\"1\":{\"345\":1}}],[\"b+tree扫库和扫表能力更强\",{\"1\":{\"345\":1}}],[\"b+tree也能够解决\",{\"1\":{\"345\":1}}],[\"b+tree是b\",{\"1\":{\"345\":1}}],[\"b+tree是在b\",{\"1\":{\"343\":1}}],[\"b+tree的优势\",{\"0\":{\"345\":1}}],[\"b+tree的特征\",{\"0\":{\"344\":1}}],[\"b+tree\",{\"0\":{\"343\":1},\"1\":{\"461\":1}}],[\"b+树从\",{\"1\":{\"460\":2}}],[\"b+树\",{\"1\":{\"460\":3}}],[\"b+树的叶子节点都使用一个地址指向真正的表数据\",{\"1\":{\"440\":1}}],[\"b+树的每层非叶子节点中的最小记录都会添加该标记\",{\"1\":{\"324\":1}}],[\"b+树特点\",{\"1\":{\"327\":1}}],[\"b树主要应用于文件系统以及部分数据库索引\",{\"1\":{\"342\":1}}],[\"b树中每个节点不仅包含数据的key值\",{\"1\":{\"342\":1}}],[\"b树可以在内部节点存储键值和相关记录数据\",{\"1\":{\"342\":1}}],[\"b树允许一个节点存放多个数据\",{\"1\":{\"338\":1}}],[\"b树和b加树的区别\",{\"0\":{\"337\":1}}],[\"b线程查询缓存没有查到\",{\"1\":{\"283\":1}}],[\"bgsave\",{\"1\":{\"261\":1}}],[\"bgrewriteaof\",{\"1\":{\"261\":1,\"262\":1}}],[\"bills\",{\"1\":{\"1366\":10}}],[\"bi的人归入同一组\",{\"1\":{\"1237\":1}}],[\"bi\",{\"1\":{\"1230\":4,\"1237\":2,\"1241\":3,\"1242\":5}}],[\"bisect\",{\"1\":{\"1207\":4,\"1209\":2}}],[\"bit\",{\"1\":{\"242\":2,\"324\":1}}],[\"bin函数可以把十进制转化为二进制数\",{\"1\":{\"1321\":1}}],[\"bind=engine\",{\"1\":{\"879\":1}}],[\"bind=true\",{\"1\":{\"658\":1}}],[\"binds\",{\"1\":{\"844\":3,\"1050\":2}}],[\"bind\",{\"1\":{\"839\":1,\"1003\":1}}],[\"bin参数\",{\"1\":{\"493\":1}}],[\"binlog没有自动crash\",{\"1\":{\"390\":1}}],[\"binlog可以作为主从复制和数据恢复使用\",{\"1\":{\"390\":1}}],[\"binlog是追加写\",{\"1\":{\"390\":1}}],[\"binlog是逻辑日志\",{\"1\":{\"390\":1}}],[\"binlog是mysql的server层实现的\",{\"1\":{\"390\":1}}],[\"binlog是一个二进制格式的文件\",{\"1\":{\"385\":1}}],[\"binlog日志是二进制格式的\",{\"1\":{\"385\":1}}],[\"binlog日志的增量订阅和消费的组件\",{\"1\":{\"276\":1}}],[\"binlog不限制大小\",{\"1\":{\"385\":1}}],[\"binlog为逻辑日志\",{\"1\":{\"385\":1}}],[\"binlog在mysql的server层实现\",{\"1\":{\"385\":1}}],[\"binlog\",{\"1\":{\"334\":1}}],[\"binary\",{\"1\":{\"278\":2,\"334\":2,\"1329\":2}}],[\"bin\",{\"0\":{\"384\":1,\"390\":1},\"1\":{\"73\":5,\"108\":3,\"125\":1,\"134\":1,\"135\":3,\"147\":3,\"203\":1,\"334\":1,\"494\":2,\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"builtin\",{\"1\":{\"1189\":7}}],[\"builder\",{\"1\":{\"1194\":2}}],[\"builderror\",{\"1\":{\"1094\":1}}],[\"build\",{\"1\":{\"555\":4,\"1059\":1,\"1094\":2,\"1194\":1,\"1229\":2,\"1237\":2,\"1241\":2,\"1242\":2}}],[\"but\",{\"1\":{\"799\":1,\"844\":2,\"1050\":1}}],[\"bulk\",{\"1\":{\"776\":3}}],[\"business\",{\"1\":{\"776\":3}}],[\"busybox\",{\"1\":{\"73\":4,\"203\":1}}],[\"buffer=shm\",{\"1\":{\"716\":1}}],[\"bufferpool\",{\"1\":{\"469\":1}}],[\"buffer进行刷盘\",{\"1\":{\"425\":1}}],[\"buffer记录这次操作\",{\"1\":{\"425\":1}}],[\"buffer并\",{\"1\":{\"388\":1}}],[\"buffer并调用\",{\"1\":{\"388\":1}}],[\"buffer中的日志写入到\",{\"1\":{\"388\":1}}],[\"buffer中的日志写入\",{\"1\":{\"388\":1}}],[\"buffer中的页写入各个表的独立表空间文件中\",{\"1\":{\"320\":1}}],[\"buffer中日志写入到\",{\"1\":{\"388\":1}}],[\"buffer再分两次\",{\"1\":{\"320\":1}}],[\"buffer\",{\"0\":{\"317\":1,\"469\":1},\"1\":{\"227\":1,\"312\":2,\"318\":3,\"320\":2,\"332\":1,\"349\":4,\"351\":1,\"382\":1,\"383\":1,\"388\":6,\"425\":1,\"460\":2,\"469\":4,\"513\":10,\"514\":2}}],[\"buf\",{\"1\":{\"226\":3,\"227\":3,\"716\":1}}],[\"b测试\",{\"1\":{\"171\":1}}],[\"bc59\",{\"1\":{\"125\":2}}],[\"broken\",{\"1\":{\"844\":1,\"1050\":1}}],[\"broker和backend配置\",{\"1\":{\"662\":1}}],[\"broker和worker是否运行\",{\"1\":{\"656\":1}}],[\"broker=\",{\"1\":{\"648\":1,\"722\":1}}],[\"broker\",{\"1\":{\"647\":1,\"662\":5}}],[\"break等改变控制流的语句\",{\"1\":{\"749\":1}}],[\"break\",{\"1\":{\"733\":1,\"735\":1,\"916\":1,\"924\":1,\"1207\":1,\"1209\":1,\"1257\":1,\"1276\":1,\"1303\":2}}],[\"bridge\",{\"1\":{\"108\":4}}],[\"br\",{\"1\":{\"108\":2}}],[\"bag\",{\"1\":{\"1272\":4,\"1273\":3,\"1314\":2}}],[\"bag01\",{\"1\":{\"1272\":1,\"1273\":2}}],[\"babgbag\",{\"1\":{\"1314\":6}}],[\"bab\",{\"1\":{\"1259\":1,\"1299\":1}}],[\"babad\",{\"1\":{\"1259\":1,\"1299\":1}}],[\"banner\",{\"1\":{\"1064\":1}}],[\"banana\",{\"1\":{\"731\":1,\"776\":5,\"806\":2}}],[\"bad\",{\"1\":{\"967\":1}}],[\"baidu\",{\"1\":{\"924\":1}}],[\"bayschema\",{\"1\":{\"881\":2}}],[\"bay\",{\"1\":{\"881\":3}}],[\"baz\",{\"1\":{\"530\":2}}],[\"backtracking\",{\"1\":{\"1348\":2}}],[\"backtrack\",{\"1\":{\"1220\":2}}],[\"backref=\",{\"1\":{\"886\":1}}],[\"backref\",{\"1\":{\"886\":1}}],[\"back\",{\"1\":{\"886\":3,\"1379\":3}}],[\"backofflimit\",{\"1\":{\"197\":1,\"198\":2}}],[\"backend=\",{\"1\":{\"648\":1}}],[\"backend\",{\"1\":{\"97\":2,\"101\":1,\"118\":1,\"657\":2,\"661\":1,\"662\":1}}],[\"batched\",{\"1\":{\"349\":1}}],[\"batch\",{\"1\":{\"197\":1,\"198\":1,\"203\":1}}],[\"basicconfig\",{\"1\":{\"757\":1}}],[\"basic\",{\"1\":{\"124\":2,\"844\":1,\"1050\":1}}],[\"bash或zsh\",{\"1\":{\"124\":1}}],[\"bash\",{\"1\":{\"108\":2,\"125\":1}}],[\"basetask\",{\"1\":{\"1189\":1}}],[\"baseexception\",{\"1\":{\"1050\":2,\"1098\":1,\"1100\":1,\"1102\":1,\"1104\":1}}],[\"baseview\",{\"1\":{\"862\":1,\"867\":1,\"888\":3}}],[\"basemodel\",{\"0\":{\"861\":1}}],[\"basequery\",{\"1\":{\"849\":2,\"1010\":2}}],[\"based\",{\"0\":{\"393\":1,\"394\":1,\"395\":1,\"1141\":1,\"1143\":1},\"1\":{\"1142\":1,\"1143\":1}}],[\"baseurl=http\",{\"1\":{\"108\":1}}],[\"base\",{\"0\":{\"862\":1},\"1\":{\"73\":9,\"262\":4,\"662\":1,\"805\":1,\"828\":1,\"843\":1,\"849\":2,\"861\":3,\"862\":3,\"863\":1,\"865\":3,\"879\":2,\"886\":4,\"887\":1,\"888\":1,\"1010\":2,\"1180\":4,\"1189\":1}}],[\"baremetal\",{\"1\":{\"96\":1}}],[\"bar\",{\"1\":{\"93\":1,\"97\":1,\"530\":4}}],[\"b\",{\"0\":{\"338\":1,\"340\":1,\"341\":1,\"342\":1},\"1\":{\"79\":1,\"338\":2,\"341\":1,\"345\":1,\"405\":2,\"482\":1,\"513\":2,\"733\":4,\"735\":7,\"755\":3,\"776\":1,\"855\":12,\"941\":1,\"947\":4,\"992\":1,\"1166\":1,\"1167\":3,\"1236\":2,\"1299\":1,\"1300\":1,\"1324\":2,\"1330\":12,\"1332\":2,\"1380\":1}}],[\"sk\",{\"1\":{\"1313\":1}}],[\"skiplist是一种以空间换取时间的结构\",{\"1\":{\"231\":1}}],[\"skip\",{\"0\":{\"230\":1},\"1\":{\"1282\":2},\"2\":{\"236\":1}}],[\"s2\",{\"1\":{\"1259\":3,\"1313\":1}}],[\"s1\",{\"1\":{\"1259\":3,\"1298\":5,\"1313\":1}}],[\"swagger\",{\"1\":{\"1146\":1,\"1151\":1,\"1156\":1}}],[\"swap\",{\"1\":{\"108\":1}}],[\"swapoff\",{\"1\":{\"108\":1}}],[\"smallinteger\",{\"1\":{\"828\":1,\"849\":2,\"861\":2,\"879\":2,\"1010\":2}}],[\"smith\",{\"1\":{\"776\":1}}],[\"split\",{\"1\":{\"1187\":1}}],[\"spawn\",{\"1\":{\"705\":3}}],[\"specifying\",{\"1\":{\"1094\":1}}],[\"specific\",{\"1\":{\"799\":3,\"1050\":1}}],[\"special\",{\"1\":{\"70\":2}}],[\"spec的字段\",{\"1\":{\"153\":1}}],[\"spec\",{\"1\":{\"64\":2,\"67\":6,\"72\":2,\"73\":2,\"81\":1,\"88\":1,\"90\":1,\"92\":1,\"93\":2,\"98\":3,\"101\":1,\"113\":1,\"135\":1,\"136\":1,\"143\":1,\"147\":1,\"148\":1,\"154\":3,\"155\":1,\"156\":3,\"158\":1,\"159\":4,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"165\":1,\"197\":2,\"198\":2,\"202\":2,\"203\":3,\"1059\":2,\"1060\":1,\"1188\":2}}],[\"srp\",{\"1\":{\"543\":1}}],[\"srs\",{\"1\":{\"430\":1}}],[\"src\",{\"1\":{\"227\":1,\"662\":2,\"679\":1,\"680\":1,\"681\":1}}],[\"sbr\",{\"0\":{\"394\":1}}],[\"sbin\",{\"1\":{\"73\":3}}],[\"sand\",{\"1\":{\"1276\":1}}],[\"same\",{\"1\":{\"1229\":2,\"1230\":2}}],[\"sample\",{\"1\":{\"1147\":1}}],[\"salary\",{\"1\":{\"1180\":4}}],[\"salaryvisitor\",{\"1\":{\"1180\":3}}],[\"safe=\",{\"1\":{\"1094\":1}}],[\"safe能力\",{\"1\":{\"390\":1}}],[\"save\",{\"1\":{\"256\":5,\"545\":1,\"548\":2,\"1103\":1}}],[\"save命令\",{\"1\":{\"256\":2}}],[\"sn\",{\"1\":{\"1064\":8}}],[\"snl\",{\"1\":{\"513\":3}}],[\"snlr4\",{\"1\":{\"125\":2}}],[\"snapshot\",{\"0\":{\"373\":1},\"1\":{\"373\":1,\"482\":1}}],[\"squirrel\",{\"1\":{\"806\":1}}],[\"squirrelhandler\",{\"1\":{\"806\":1}}],[\"squared\",{\"1\":{\"712\":3}}],[\"square\",{\"1\":{\"708\":2,\"753\":2}}],[\"squash\",{\"1\":{\"63\":1}}],[\"sql数据库等\",{\"1\":{\"797\":1}}],[\"sqlite\",{\"1\":{\"579\":1,\"657\":1}}],[\"sqlalchemy一对多\",{\"1\":{\"886\":1}}],[\"sqlalchemyautoschema\",{\"1\":{\"866\":1,\"881\":4,\"887\":4}}],[\"sqlalchemy等\",{\"1\":{\"607\":1}}],[\"sqlalchemy\",{\"0\":{\"885\":1},\"1\":{\"579\":4,\"662\":1,\"849\":7,\"861\":10,\"879\":11,\"887\":1,\"1010\":7,\"1155\":1},\"2\":{\"585\":1,\"890\":1}}],[\"sqlalchemy默认所使用的连接池为sqlalchemy\",{\"1\":{\"578\":1}}],[\"sqlalchemy连接数据库所使用的engine对象默认采用一个连接池来管理连接\",{\"1\":{\"578\":1}}],[\"sqlalchemy线程池\",{\"0\":{\"577\":1}}],[\"sql2更难优化\",{\"1\":{\"507\":1}}],[\"sql2\",{\"1\":{\"507\":1}}],[\"sql1更好优化\",{\"1\":{\"507\":1}}],[\"sql1\",{\"1\":{\"507\":1}}],[\"sql必须完全一致才会导致cache命中\",{\"1\":{\"431\":1}}],[\"sql角色\",{\"1\":{\"430\":1}}],[\"sql语句中不要使用太复杂的关联多表的查询\",{\"1\":{\"408\":1}}],[\"sql解析为mysql可以识别的语言\",{\"1\":{\"356\":1}}],[\"sql的执行过程\",{\"0\":{\"354\":1}}],[\"sql\",{\"0\":{\"359\":1,\"505\":1,\"506\":1},\"1\":{\"332\":1,\"359\":2,\"360\":3,\"361\":2,\"362\":2,\"363\":1,\"477\":1,\"503\":1,\"504\":3,\"506\":4,\"507\":2,\"513\":1,\"518\":1}}],[\"sql接口\",{\"1\":{\"332\":2}}],[\"solution12\",{\"1\":{\"1236\":1}}],[\"solution\",{\"1\":{\"1198\":3,\"1202\":1,\"1207\":2,\"1208\":1,\"1209\":1,\"1221\":3,\"1229\":2,\"1230\":1,\"1237\":1,\"1241\":1,\"1242\":1,\"1257\":1,\"1258\":1,\"1259\":1,\"1265\":1,\"1266\":1,\"1274\":4,\"1275\":2,\"1276\":2,\"1280\":2,\"1281\":1,\"1282\":1,\"1286\":1,\"1287\":1,\"1288\":1,\"1289\":2,\"1292\":6,\"1297\":1,\"1298\":1,\"1299\":3,\"1300\":1,\"1303\":4,\"1307\":3,\"1308\":2,\"1309\":1,\"1313\":1,\"1314\":1,\"1331\":1,\"1335\":1,\"1337\":1,\"1338\":1,\"1339\":2,\"1340\":1,\"1341\":1,\"1352\":1,\"1353\":1,\"1354\":1,\"1364\":1,\"1365\":1,\"1366\":1,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":2,\"1380\":1,\"1384\":1,\"1385\":1,\"1390\":1,\"1395\":1,\"1399\":1,\"1400\":1,\"1403\":1}}],[\"solo\",{\"0\":{\"667\":1},\"1\":{\"667\":1,\"668\":1,\"670\":1}}],[\"so\",{\"1\":{\"1102\":1}}],[\"sort\",{\"1\":{\"1198\":1,\"1257\":1,\"1338\":1,\"1339\":1,\"1364\":2,\"1365\":1,\"1378\":1,\"1379\":1,\"1380\":3,\"1384\":1}}],[\"sorted\",{\"1\":{\"776\":2,\"1209\":1}}],[\"sorting\",{\"1\":{\"776\":3}}],[\"some\",{\"1\":{\"776\":3,\"1079\":1,\"1088\":1}}],[\"something\",{\"1\":{\"533\":3,\"1088\":1}}],[\"source\",{\"1\":{\"563\":3,\"565\":3,\"566\":2,\"567\":3,\"569\":4,\"570\":2,\"573\":1,\"1188\":2,\"1229\":10}}],[\"socket的方式可能和有些网上的使用方式有差别\",{\"1\":{\"677\":1}}],[\"socket的使用\",{\"0\":{\"673\":1}}],[\"socketio\",{\"1\":{\"673\":1,\"678\":1,\"679\":20,\"680\":4,\"681\":5}}],[\"socket中不添加monkey\",{\"1\":{\"587\":1}}],[\"socket\",{\"0\":{\"675\":1,\"676\":1,\"678\":1},\"1\":{\"269\":1,\"334\":4,\"588\":1,\"590\":3,\"591\":5,\"594\":3,\"595\":2,\"597\":1,\"674\":2,\"676\":3,\"679\":2,\"680\":1,\"681\":5},\"2\":{\"683\":1,\"684\":1}}],[\"sonar\",{\"0\":{\"2\":1},\"2\":{\"3\":1,\"4\":1}}],[\"slices\",{\"1\":{\"1282\":12}}],[\"slim\",{\"1\":{\"555\":1}}],[\"slots\",{\"1\":{\"854\":1,\"1049\":1,\"1188\":1}}],[\"slow指的是我们要维护的元素的末尾元素\",{\"1\":{\"1266\":1}}],[\"slow指的是我们要维护的元素\",{\"1\":{\"1265\":1}}],[\"slow\",{\"1\":{\"334\":2,\"503\":16,\"1265\":5,\"1266\":6}}],[\"slack频道\",{\"1\":{\"617\":1}}],[\"slave在复制的时候sql进程会解析成和原来master端执行过的相同的sql再次执行\",{\"1\":{\"394\":1}}],[\"slave\",{\"1\":{\"278\":3}}],[\"slave提供只读服务或仅作为备机\",{\"1\":{\"264\":1}}],[\"slave使用rdb快照\",{\"1\":{\"264\":1}}],[\"slave和master建立同步机制\",{\"1\":{\"256\":1}}],[\"sleep=1\",{\"1\":{\"833\":1,\"997\":1}}],[\"sleep\",{\"1\":{\"147\":1,\"736\":1,\"833\":2,\"834\":1,\"855\":2,\"916\":2,\"932\":9,\"933\":4,\"997\":2,\"998\":1,\"1040\":1}}],[\"singlenumber\",{\"1\":{\"1337\":1,\"1338\":1,\"1339\":2,\"1340\":1}}],[\"single\",{\"1\":{\"862\":5}}],[\"singleton2\",{\"1\":{\"900\":2}}],[\"singleton1\",{\"1\":{\"900\":2}}],[\"singleton\",{\"1\":{\"780\":1,\"782\":5,\"783\":4,\"784\":5,\"900\":4}}],[\"singletonthreadpool\",{\"1\":{\"579\":1}}],[\"simplifies\",{\"1\":{\"1040\":1}}],[\"simplefactory\",{\"1\":{\"790\":2}}],[\"simplesingle\",{\"1\":{\"784\":1}}],[\"simpleiterator\",{\"1\":{\"732\":2}}],[\"simple\",{\"1\":{\"225\":1,\"349\":1,\"513\":1,\"1064\":6,\"1147\":1}}],[\"similar\",{\"1\":{\"844\":1}}],[\"sig\",{\"1\":{\"839\":2,\"1003\":2}}],[\"signalhandler\",{\"1\":{\"1194\":1}}],[\"signals\",{\"1\":{\"1110\":10,\"1111\":3,\"1112\":2,\"1124\":3}}],[\"signal\",{\"1\":{\"717\":1,\"1110\":10,\"1111\":1,\"1112\":3,\"1194\":2}}],[\"signature\",{\"0\":{\"697\":1},\"1\":{\"693\":1,\"839\":2,\"1003\":2}}],[\"sign\",{\"1\":{\"679\":1,\"681\":4,\"735\":2}}],[\"size和max\",{\"1\":{\"580\":1}}],[\"size和aof\",{\"1\":{\"262\":1}}],[\"size和auto\",{\"1\":{\"262\":1}}],[\"size=arr\",{\"1\":{\"716\":1}}],[\"size=5\",{\"1\":{\"579\":1}}],[\"size=262144\",{\"1\":{\"513\":1}}],[\"size可以在info\",{\"1\":{\"262\":1}}],[\"size\",{\"1\":{\"245\":1,\"260\":1,\"262\":8,\"513\":1,\"514\":1,\"578\":1,\"580\":1,\"969\":1,\"1208\":2,\"1227\":3,\"1274\":6}}],[\"sdshdr\",{\"1\":{\"226\":1}}],[\"sds定义\",{\"0\":{\"225\":1}}],[\"sds\",{\"0\":{\"226\":1,\"227\":1},\"1\":{\"218\":1,\"225\":2,\"226\":1,\"227\":24},\"2\":{\"229\":1}}],[\"suiterunner\",{\"1\":{\"1194\":3}}],[\"suite=settings\",{\"1\":{\"1194\":1}}],[\"suites\",{\"1\":{\"1182\":1,\"1194\":1}}],[\"suite\",{\"1\":{\"1182\":12,\"1183\":1,\"1194\":22}}],[\"suitevisitor\",{\"1\":{\"1182\":1,\"1183\":3,\"1194\":2}}],[\"suitable\",{\"1\":{\"1040\":1}}],[\"sure\",{\"1\":{\"776\":1}}],[\"sum\",{\"1\":{\"712\":4,\"776\":1,\"1274\":3,\"1365\":1}}],[\"subsequence\",{\"1\":{\"1198\":1}}],[\"subdomain\",{\"1\":{\"1059\":5}}],[\"subthread02\",{\"1\":{\"1033\":3}}],[\"subthread01\",{\"1\":{\"1033\":3}}],[\"subtract\",{\"1\":{\"943\":2}}],[\"subtract方法用来减少计数\",{\"1\":{\"943\":1}}],[\"submit\",{\"1\":{\"709\":1}}],[\"subject\",{\"1\":{\"696\":1}}],[\"sub\",{\"1\":{\"696\":1,\"1033\":1,\"1189\":3}}],[\"subquery替代了\",{\"1\":{\"349\":1}}],[\"subquery\",{\"1\":{\"349\":5}}],[\"support\",{\"1\":{\"1188\":2}}],[\"supports\",{\"1\":{\"662\":1,\"1188\":10}}],[\"super\",{\"1\":{\"567\":1,\"569\":1,\"570\":1,\"679\":2,\"751\":1,\"806\":3,\"843\":2,\"849\":1,\"867\":1,\"880\":1,\"888\":2,\"900\":1,\"1010\":1,\"1030\":1,\"1059\":2,\"1188\":2,\"1193\":1}}],[\"suspend\",{\"1\":{\"202\":1}}],[\"success=\",{\"1\":{\"863\":1}}],[\"success=success\",{\"1\":{\"863\":1}}],[\"success\",{\"1\":{\"681\":1,\"758\":1,\"863\":4,\"873\":3,\"882\":2}}],[\"successfuljobshistorylimit\",{\"1\":{\"202\":1}}],[\"successthreshold\",{\"1\":{\"147\":6}}],[\"sudo\",{\"1\":{\"108\":13}}],[\"scaffold\",{\"1\":{\"1059\":3}}],[\"scale\",{\"1\":{\"124\":1,\"155\":1}}],[\"scip等\",{\"1\":{\"897\":1}}],[\"scipy\",{\"1\":{\"720\":1}}],[\"scoped\",{\"1\":{\"879\":2}}],[\"scope=scope\",{\"1\":{\"873\":1}}],[\"scope=none\",{\"1\":{\"872\":1,\"873\":1}}],[\"scope\",{\"1\":{\"662\":1,\"872\":2,\"873\":1,\"1167\":2}}],[\"schemas\",{\"1\":{\"888\":1}}],[\"schema\",{\"1\":{\"862\":5,\"867\":1,\"880\":1,\"887\":1,\"888\":3}}],[\"scheme=\",{\"1\":{\"1094\":2}}],[\"scheme\",{\"1\":{\"147\":2,\"1094\":6}}],[\"schedules\",{\"1\":{\"661\":1}}],[\"schedule\",{\"1\":{\"200\":2,\"202\":1,\"203\":1,\"261\":1,\"661\":2,\"662\":2,\"680\":1}}],[\"scheduler\",{\"0\":{\"606\":1},\"1\":{\"108\":1,\"680\":2}}],[\"sctp\",{\"1\":{\"87\":1}}],[\"svc\",{\"1\":{\"96\":1}}],[\"ssl\",{\"1\":{\"95\":1,\"971\":1}}],[\"stderr\",{\"1\":{\"1194\":1}}],[\"stderr=options\",{\"1\":{\"1194\":1}}],[\"stdout\",{\"1\":{\"1194\":1}}],[\"stdout=options\",{\"1\":{\"1194\":1}}],[\"stdinonce\",{\"1\":{\"133\":1}}],[\"stdin\",{\"1\":{\"124\":1,\"133\":2}}],[\"style=true\",{\"1\":{\"1188\":1}}],[\"still\",{\"1\":{\"653\":1}}],[\"stones\",{\"1\":{\"1274\":10}}],[\"stock来作为context\",{\"1\":{\"1050\":1}}],[\"stopiteration\",{\"0\":{\"1016\":1},\"1\":{\"732\":1,\"1016\":1,\"1025\":2}}],[\"stop\",{\"1\":{\"569\":2,\"570\":1,\"1194\":2}}],[\"stopped\",{\"1\":{\"569\":5,\"1194\":1}}],[\"storageclassname\",{\"1\":{\"67\":4}}],[\"storage\",{\"0\":{\"333\":1},\"1\":{\"67\":4,\"190\":1,\"854\":11,\"1049\":17}}],[\"stu\",{\"1\":{\"533\":2}}],[\"studentview\",{\"1\":{\"888\":2}}],[\"studentschema\",{\"1\":{\"887\":2,\"888\":2}}],[\"student\",{\"1\":{\"533\":9,\"886\":9,\"887\":4,\"888\":6}}],[\"steps\",{\"1\":{\"555\":2}}],[\"step4\",{\"1\":{\"320\":1,\"469\":1}}],[\"step3\",{\"1\":{\"320\":1,\"469\":1}}],[\"step2\",{\"1\":{\"320\":1,\"469\":1}}],[\"step1\",{\"1\":{\"320\":1,\"469\":1}}],[\"strs\",{\"1\":{\"1274\":6}}],[\"str|none\",{\"1\":{\"1188\":2}}],[\"stream\",{\"1\":{\"976\":2}}],[\"strategies\",{\"1\":{\"776\":1}}],[\"strategy\",{\"0\":{\"157\":1},\"1\":{\"153\":1,\"158\":1,\"159\":4,\"775\":1,\"776\":22}}],[\"strip\",{\"1\":{\"548\":1}}],[\"strings\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"string\",{\"1\":{\"87\":1,\"225\":1,\"681\":2,\"828\":3,\"865\":2,\"886\":2,\"1061\":1,\"1147\":1,\"1150\":1}}],[\"string>运行命令\",{\"1\":{\"133\":1}}],[\"string>给command进行运行的参数\",{\"1\":{\"133\":1}}],[\"string>\",{\"1\":{\"87\":2}}],[\"str\",{\"1\":{\"531\":1,\"533\":1,\"534\":2,\"549\":3,\"550\":1,\"776\":1,\"799\":3,\"806\":4,\"827\":2,\"834\":1,\"839\":1,\"872\":3,\"880\":1,\"892\":1,\"900\":1,\"902\":1,\"932\":1,\"933\":1,\"986\":1,\"998\":1,\"1003\":1,\"1050\":9,\"1059\":32,\"1061\":2,\"1063\":5,\"1064\":3,\"1094\":9,\"1100\":2,\"1103\":1,\"1187\":2,\"1188\":3,\"1189\":4,\"1202\":1,\"1258\":1,\"1259\":2,\"1274\":1,\"1276\":2,\"1297\":1,\"1298\":1,\"1299\":4,\"1300\":1,\"1308\":4,\"1313\":2,\"1314\":2,\"1329\":1,\"1352\":1,\"1380\":3,\"1385\":1}}],[\"strcat\",{\"1\":{\"227\":1}}],[\"struct\",{\"1\":{\"226\":1}}],[\"standard\",{\"1\":{\"1189\":1}}],[\"starlette\",{\"1\":{\"1172\":1}}],[\"starts\",{\"1\":{\"1094\":1}}],[\"startresponse\",{\"1\":{\"1057\":1,\"1098\":1,\"1100\":1,\"1104\":1}}],[\"startup\",{\"1\":{\"662\":2}}],[\"startupprobe\",{\"1\":{\"133\":1,\"147\":1}}],[\"started是一个信号\",{\"1\":{\"1114\":1,\"1127\":1}}],[\"started是早于before\",{\"1\":{\"1112\":1}}],[\"started\",{\"0\":{\"1114\":1,\"1127\":1},\"1\":{\"660\":1,\"1103\":1,\"1110\":2,\"1111\":4,\"1112\":2}}],[\"starting\",{\"1\":{\"597\":1}}],[\"startingdeadlineseconds的值没有设置\",{\"1\":{\"202\":1}}],[\"startingdeadlineseconds时间之内没有启动成功\",{\"1\":{\"202\":1}}],[\"startingdeadlineseconds时间段之内\",{\"1\":{\"202\":1}}],[\"startingdeadlineseconds\",{\"1\":{\"201\":1,\"202\":1}}],[\"start完成以后\",{\"1\":{\"148\":1}}],[\"start\",{\"1\":{\"108\":2,\"147\":2,\"569\":2,\"570\":5,\"680\":1,\"705\":1,\"706\":1,\"712\":4,\"717\":3,\"735\":3,\"832\":2,\"855\":2,\"916\":2,\"929\":2,\"996\":2,\"1030\":1,\"1033\":2,\"1040\":1,\"1049\":1,\"1057\":2,\"1064\":2,\"1098\":2,\"1100\":2,\"1104\":2,\"1166\":2,\"1167\":1,\"1182\":3,\"1189\":1,\"1194\":1,\"1299\":4,\"1303\":2,\"1385\":3,\"1395\":3,\"1400\":2}}],[\"stack封装了local对象\",{\"1\":{\"856\":1}}],[\"stack实际上是指向了localstack\",{\"1\":{\"856\":1}}],[\"stack和\",{\"1\":{\"856\":1}}],[\"stack\",{\"1\":{\"844\":2,\"856\":17,\"1045\":2,\"1049\":9,\"1050\":3,\"1073\":4}}],[\"stat\",{\"1\":{\"1194\":1}}],[\"statistics\",{\"1\":{\"1194\":1}}],[\"static>\",{\"1\":{\"1094\":1}}],[\"staticmethod\",{\"1\":{\"790\":1}}],[\"staticpool\",{\"1\":{\"579\":1}}],[\"static\",{\"1\":{\"96\":1,\"1059\":29,\"1094\":2}}],[\"statment\",{\"0\":{\"394\":1}}],[\"states=states\",{\"1\":{\"567\":1,\"569\":1,\"570\":1}}],[\"states=self\",{\"1\":{\"563\":1,\"565\":1,\"566\":1}}],[\"states\",{\"1\":{\"561\":1,\"563\":2,\"565\":2,\"566\":2,\"567\":1,\"569\":1,\"570\":1}}],[\"state\",{\"1\":{\"560\":1,\"563\":11,\"566\":4,\"569\":1}}],[\"statement\",{\"0\":{\"394\":1},\"1\":{\"395\":1}}],[\"stateless\",{\"1\":{\"189\":1}}],[\"statefulset通过与其相关的无头服务为每个pod提供dns解析条目\",{\"1\":{\"191\":1}}],[\"statefulsets\",{\"1\":{\"190\":1}}],[\"statefulset\",{\"0\":{\"188\":1},\"1\":{\"176\":1,\"190\":5}}],[\"statefulset或replicationcontroller\",{\"1\":{\"124\":1}}],[\"status\",{\"1\":{\"93\":1,\"113\":1,\"160\":1,\"165\":1,\"198\":1,\"552\":1,\"597\":1,\"849\":4,\"863\":1,\"1010\":4,\"1017\":3,\"1166\":2,\"1167\":1}}],[\"s\",{\"1\":{\"79\":1,\"108\":2,\"404\":2,\"533\":1,\"542\":1,\"550\":3,\"591\":2,\"662\":1,\"696\":1,\"712\":2,\"799\":1,\"856\":7,\"929\":1,\"1033\":1,\"1194\":4,\"1207\":1,\"1220\":6,\"1221\":12,\"1258\":10,\"1259\":11,\"1274\":3,\"1276\":10,\"1297\":20,\"1298\":7,\"1299\":37,\"1300\":14,\"1313\":11,\"1314\":10,\"1348\":9,\"1364\":8,\"1380\":15,\"1384\":4,\"1385\":10}}],[\"syn\",{\"1\":{\"951\":6,\"952\":5}}],[\"synchronous\",{\"1\":{\"898\":1}}],[\"sync工作模式\",{\"1\":{\"721\":1}}],[\"sync\",{\"1\":{\"63\":1,\"1050\":2,\"1103\":6,\"1111\":1,\"1112\":1}}],[\"sys\",{\"1\":{\"844\":3,\"986\":1,\"1023\":2,\"1050\":4,\"1098\":1,\"1100\":1,\"1102\":1,\"1104\":1,\"1194\":3}}],[\"sysconfig\",{\"1\":{\"108\":3}}],[\"sysctl\",{\"1\":{\"108\":8}}],[\"systemexit\",{\"1\":{\"1194\":1}}],[\"system\",{\"0\":{\"334\":1},\"1\":{\"108\":4,\"118\":1,\"125\":2,\"349\":3,\"350\":1}}],[\"systemctl\",{\"1\":{\"63\":2,\"108\":6}}],[\"shellcontextprocessorcallable\",{\"1\":{\"1059\":1}}],[\"shell\",{\"1\":{\"1059\":1}}],[\"shm\",{\"1\":{\"716\":3}}],[\"shmctl系统调用\",{\"1\":{\"706\":1}}],[\"ship\",{\"1\":{\"565\":3}}],[\"shipped\",{\"1\":{\"565\":4}}],[\"shift\",{\"1\":{\"43\":2}}],[\"shape\",{\"1\":{\"716\":1}}],[\"sha256\",{\"1\":{\"108\":1}}],[\"sharedmemory\",{\"1\":{\"716\":1}}],[\"shared\",{\"1\":{\"716\":3,\"717\":3}}],[\"share\",{\"1\":{\"64\":1,\"67\":1,\"147\":2,\"373\":1,\"404\":1,\"405\":1}}],[\"sh并运行\",{\"1\":{\"108\":1}}],[\"shlvl=1\",{\"1\":{\"73\":1}}],[\"sh\",{\"1\":{\"73\":2,\"108\":6,\"135\":3,\"147\":3,\"203\":1}}],[\"show等不修改数据库的sql\",{\"1\":{\"334\":1}}],[\"show\",{\"1\":{\"334\":7,\"469\":1,\"503\":8,\"513\":1,\"1064\":1}}],[\"showmount\",{\"1\":{\"63\":1}}],[\"should\",{\"1\":{\"1\":1,\"756\":1,\"1094\":1,\"1098\":1,\"1100\":1,\"1104\":1,\"1188\":4}}],[\"semaphore\",{\"1\":{\"704\":1,\"1032\":1}}],[\"sensing\",{\"1\":{\"570\":5}}],[\"send方法可以把参数发给生成器\",{\"1\":{\"735\":1}}],[\"send\",{\"1\":{\"548\":2,\"681\":1,\"735\":1,\"844\":2,\"1050\":4,\"1059\":2,\"1103\":2,\"1111\":1,\"1112\":1,\"1167\":3}}],[\"sentinel\",{\"1\":{\"844\":2,\"1050\":6,\"1102\":2}}],[\"sentry\",{\"1\":{\"555\":1}}],[\"sent\",{\"1\":{\"504\":2,\"951\":1}}],[\"sex\",{\"1\":{\"533\":2,\"534\":11,\"865\":1}}],[\"session等\",{\"1\":{\"1100\":2}}],[\"session对象\",{\"1\":{\"1060\":1}}],[\"sessioninterface\",{\"1\":{\"1059\":2}}],[\"sessionmixin\",{\"1\":{\"1045\":1,\"1100\":2}}],[\"sessionmaker\",{\"1\":{\"861\":2,\"879\":2}}],[\"session和cookie出现了\",{\"1\":{\"689\":1}}],[\"session\",{\"1\":{\"482\":4,\"513\":1,\"552\":1,\"582\":1,\"662\":1,\"698\":1,\"843\":1,\"849\":2,\"856\":2,\"861\":3,\"862\":7,\"879\":8,\"887\":4,\"924\":4,\"925\":2,\"1010\":2,\"1045\":4,\"1059\":2,\"1100\":13,\"1101\":3,\"1103\":6}}],[\"searchinsert\",{\"1\":{\"1399\":1}}],[\"searchrange\",{\"1\":{\"1395\":1,\"1400\":1}}],[\"search方法会扫描整个字符串来找寻匹配的模式\",{\"1\":{\"895\":1}}],[\"search\",{\"1\":{\"460\":4,\"529\":1,\"1390\":1}}],[\"series和\",{\"1\":{\"797\":1}}],[\"serialize=lambda\",{\"1\":{\"881\":1,\"887\":1}}],[\"serialize\",{\"1\":{\"827\":1,\"880\":2}}],[\"serializer=\",{\"1\":{\"648\":2}}],[\"serializable\",{\"1\":{\"425\":1}}],[\"serving\",{\"1\":{\"1064\":3}}],[\"service的创建\",{\"0\":{\"88\":1}}],[\"services\",{\"1\":{\"87\":2,\"332\":1,\"542\":2,\"545\":1}}],[\"service重要字段\",{\"0\":{\"87\":1}}],[\"service\",{\"0\":{\"85\":1,\"116\":1},\"1\":{\"73\":7,\"86\":7,\"87\":3,\"88\":2,\"90\":3,\"92\":2,\"93\":4,\"97\":4,\"99\":1,\"101\":1,\"108\":1,\"116\":4,\"124\":1,\"503\":1,\"542\":1,\"545\":2,\"552\":3,\"799\":1}}],[\"server的核心\",{\"1\":{\"332\":1}}],[\"server存储在\",{\"1\":{\"112\":1}}],[\"server等核心镜像\",{\"1\":{\"108\":1}}],[\"server=<你的镜像仓库服务器>\",{\"1\":{\"81\":1}}],[\"server\",{\"0\":{\"332\":1},\"1\":{\"63\":2,\"64\":1,\"67\":3,\"198\":1,\"951\":1,\"1057\":1,\"1064\":5,\"1161\":2}}],[\"secho\",{\"1\":{\"1064\":1}}],[\"securecookiesessioninterface\",{\"1\":{\"1059\":2}}],[\"secure\",{\"1\":{\"689\":1}}],[\"securitycontext\",{\"1\":{\"133\":1}}],[\"second\",{\"1\":{\"1289\":3}}],[\"seconds=expiry\",{\"1\":{\"872\":1}}],[\"seconds\",{\"1\":{\"661\":1}}],[\"secondary\",{\"1\":{\"413\":1}}],[\"sec\",{\"1\":{\"469\":1,\"503\":2,\"513\":1}}],[\"secret=none\",{\"1\":{\"872\":2}}],[\"secrets\",{\"1\":{\"79\":2}}],[\"secret基本操作\",{\"0\":{\"78\":1}}],[\"secret\",{\"0\":{\"75\":1},\"1\":{\"76\":5,\"79\":4,\"80\":2,\"81\":3,\"872\":8,\"873\":1,\"1059\":3,\"1094\":1}}],[\"self\",{\"1\":{\"534\":15,\"545\":5,\"563\":5,\"565\":7,\"566\":6,\"567\":2,\"569\":2,\"570\":2,\"573\":2,\"658\":2,\"679\":14,\"732\":10,\"746\":9,\"751\":2,\"776\":35,\"782\":1,\"783\":2,\"791\":3,\"792\":6,\"799\":4,\"806\":14,\"824\":10,\"825\":5,\"827\":1,\"828\":3,\"834\":4,\"844\":21,\"847\":8,\"849\":20,\"854\":19,\"856\":18,\"861\":9,\"862\":74,\"867\":4,\"879\":8,\"880\":2,\"888\":8,\"900\":1,\"902\":6,\"919\":9,\"920\":5,\"998\":4,\"1009\":8,\"1010\":20,\"1015\":6,\"1030\":3,\"1049\":40,\"1050\":61,\"1057\":5,\"1059\":60,\"1061\":2,\"1062\":2,\"1063\":9,\"1064\":12,\"1073\":3,\"1074\":5,\"1084\":3,\"1085\":5,\"1094\":12,\"1098\":8,\"1100\":34,\"1102\":7,\"1103\":31,\"1104\":5,\"1111\":7,\"1112\":7,\"1147\":2,\"1149\":4,\"1150\":1,\"1151\":1,\"1180\":17,\"1182\":17,\"1183\":7,\"1187\":24,\"1188\":35,\"1193\":5,\"1194\":25,\"1198\":2,\"1202\":1,\"1207\":2,\"1208\":1,\"1209\":1,\"1221\":12,\"1225\":3,\"1227\":39,\"1229\":27,\"1230\":16,\"1236\":20,\"1237\":22,\"1241\":20,\"1242\":23,\"1257\":1,\"1258\":1,\"1259\":4,\"1265\":1,\"1266\":1,\"1274\":4,\"1275\":2,\"1276\":2,\"1280\":5,\"1281\":1,\"1282\":6,\"1286\":1,\"1287\":1,\"1288\":1,\"1289\":2,\"1292\":6,\"1297\":1,\"1298\":1,\"1299\":3,\"1300\":1,\"1303\":4,\"1307\":3,\"1308\":2,\"1309\":1,\"1313\":1,\"1314\":1,\"1331\":1,\"1335\":1,\"1337\":1,\"1338\":1,\"1339\":2,\"1340\":1,\"1341\":1,\"1352\":25,\"1353\":15,\"1354\":10,\"1364\":1,\"1365\":1,\"1366\":1,\"1376\":3,\"1377\":1,\"1378\":1,\"1379\":7,\"1380\":1,\"1384\":1,\"1385\":1,\"1390\":1,\"1395\":1,\"1399\":1,\"1400\":1,\"1403\":1}}],[\"select语句默认不会加任何锁类型\",{\"1\":{\"404\":1}}],[\"select查询根据uid和name进行属性投影\",{\"1\":{\"332\":1}}],[\"select先根据where语句进行选取\",{\"1\":{\"332\":1}}],[\"select\",{\"1\":{\"268\":1,\"269\":1,\"332\":1,\"349\":6,\"373\":2,\"404\":2,\"405\":3,\"415\":1,\"455\":1,\"460\":1,\"478\":3,\"482\":4,\"485\":3,\"498\":11,\"499\":4,\"504\":1,\"507\":1,\"513\":1,\"522\":1,\"579\":1,\"588\":1}}],[\"selector\",{\"0\":{\"156\":1},\"1\":{\"64\":1,\"67\":1,\"87\":1,\"88\":1,\"90\":1,\"93\":2,\"116\":1,\"124\":1,\"153\":1,\"154\":1,\"156\":2}}],[\"selinux\",{\"1\":{\"108\":1}}],[\"sed\",{\"1\":{\"108\":2}}],[\"seen\",{\"1\":{\"1187\":2,\"1282\":6}}],[\"see\",{\"1\":{\"1\":1,\"799\":1}}],[\"setup\",{\"1\":{\"1182\":3,\"1194\":2}}],[\"setupmethod\",{\"1\":{\"1062\":1,\"1063\":3,\"1094\":1}}],[\"setattr\",{\"1\":{\"849\":1,\"854\":3,\"856\":1,\"861\":1,\"879\":1,\"1010\":1,\"1049\":5,\"1050\":1}}],[\"setdefault\",{\"1\":{\"839\":1,\"862\":2,\"863\":2,\"1003\":1,\"1050\":2,\"1062\":1,\"1064\":3}}],[\"setter\",{\"1\":{\"776\":1}}],[\"settings=none\",{\"1\":{\"1194\":1}}],[\"settings\",{\"1\":{\"124\":1,\"1194\":28}}],[\"setstorage\",{\"1\":{\"681\":1}}],[\"setlevel\",{\"1\":{\"550\":1}}],[\"set不会被cache\",{\"1\":{\"431\":1}}],[\"setenforce\",{\"1\":{\"108\":1}}],[\"set\",{\"1\":{\"1\":1,\"107\":1,\"124\":1,\"165\":4,\"405\":1,\"469\":1,\"503\":4,\"504\":2,\"513\":1,\"534\":2,\"689\":2,\"705\":1,\"776\":2,\"806\":2,\"849\":1,\"856\":3,\"861\":1,\"879\":1,\"986\":1,\"1010\":1,\"1035\":2,\"1049\":1,\"1050\":1,\"1063\":1,\"1074\":1,\"1076\":1,\"1081\":1,\"1085\":1,\"1088\":2,\"1094\":1,\"1100\":1,\"1229\":3,\"1230\":3,\"1289\":2}}],[\"uvicorn\",{\"1\":{\"1164\":1,\"1171\":1}}],[\"uwsgi\",{\"1\":{\"1164\":1,\"1171\":1}}],[\"upper\",{\"1\":{\"1063\":1,\"1094\":1}}],[\"up\",{\"1\":{\"569\":5}}],[\"updated\",{\"1\":{\"1147\":1}}],[\"update方法用来新增计数\",{\"1\":{\"943\":1}}],[\"update语句\",{\"1\":{\"405\":1}}],[\"update\",{\"1\":{\"285\":1,\"373\":2,\"404\":2,\"405\":2,\"482\":4,\"494\":2,\"648\":1,\"654\":1,\"862\":2,\"872\":1,\"943\":2,\"1094\":1}}],[\"ubuntu\",{\"1\":{\"555\":2}}],[\"utc\",{\"1\":{\"662\":2}}],[\"utf\",{\"1\":{\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"utilities\",{\"1\":{\"332\":1}}],[\"utils\",{\"0\":{\"63\":1},\"1\":{\"63\":2,\"108\":1,\"529\":1,\"662\":3,\"679\":2,\"680\":2}}],[\"uri\",{\"1\":{\"662\":1,\"861\":3,\"879\":3}}],[\"urow\",{\"1\":{\"513\":3}}],[\"url解析\",{\"1\":{\"1103\":1,\"1104\":1}}],[\"url默认处理函数\",{\"1\":{\"1060\":1}}],[\"url=db\",{\"1\":{\"879\":1}}],[\"urllib3\",{\"1\":{\"669\":1}}],[\"urls\",{\"1\":{\"597\":1,\"924\":4,\"925\":4}}],[\"url\",{\"1\":{\"100\":2,\"597\":4,\"662\":3,\"844\":2,\"867\":1,\"888\":2,\"924\":4,\"925\":6,\"967\":2,\"1050\":4,\"1059\":32,\"1060\":1,\"1063\":6,\"1094\":22,\"1100\":4,\"1103\":6,\"1124\":7,\"1137\":2,\"1144\":1}}],[\"uuid\",{\"1\":{\"442\":1,\"827\":3}}],[\"unexpected\",{\"1\":{\"1194\":1}}],[\"until\",{\"1\":{\"1187\":3,\"1188\":2}}],[\"untouched\",{\"1\":{\"806\":1}}],[\"unbound\",{\"1\":{\"856\":1,\"1045\":6,\"1049\":1}}],[\"underscore\",{\"1\":{\"1188\":3}}],[\"understand\",{\"1\":{\"799\":1}}],[\"undo日志\",{\"1\":{\"425\":1}}],[\"undo日志等\",{\"1\":{\"334\":1}}],[\"undo的page也像数据一样缓存在buffer\",{\"1\":{\"389\":1}}],[\"undo的磁盘结构并不是顺序的\",{\"1\":{\"389\":1}}],[\"undo写入时\",{\"1\":{\"389\":1}}],[\"undo\",{\"0\":{\"370\":1,\"378\":1,\"387\":1,\"389\":1,\"476\":1},\"1\":{\"125\":2,\"165\":1,\"368\":2,\"379\":2,\"380\":3,\"389\":1,\"425\":1,\"475\":2,\"476\":2,\"477\":1,\"482\":1},\"2\":{\"480\":1}}],[\"unreliable\",{\"1\":{\"658\":1}}],[\"unless\",{\"1\":{\"573\":1}}],[\"uncommitted\",{\"1\":{\"425\":1}}],[\"uncordon\",{\"1\":{\"124\":1}}],[\"uniquepathswithobstacles\",{\"1\":{\"1303\":1}}],[\"uniquepaths\",{\"1\":{\"1303\":1}}],[\"unique=true\",{\"1\":{\"828\":2}}],[\"unique\",{\"1\":{\"349\":3,\"448\":3}}],[\"unionset\",{\"1\":{\"1229\":2,\"1230\":2}}],[\"unionfind\",{\"1\":{\"1225\":1,\"1227\":1}}],[\"union\",{\"1\":{\"349\":6,\"880\":1,\"1059\":1,\"1094\":1,\"1225\":1,\"1227\":2,\"1229\":5,\"1230\":5}}],[\"unix\",{\"1\":{\"334\":5,\"705\":1,\"706\":1}}],[\"u\",{\"1\":{\"108\":1,\"513\":1,\"1236\":17}}],[\"uzp8w2vr\",{\"1\":{\"108\":1}}],[\"udp\",{\"1\":{\"87\":1,\"674\":1,\"675\":1,\"676\":1,\"977\":1}}],[\"usage\",{\"1\":{\"1193\":3}}],[\"using\",{\"1\":{\"349\":7,\"351\":6,\"374\":1,\"415\":1,\"503\":6,\"776\":1}}],[\"usr\",{\"1\":{\"64\":1,\"67\":1,\"73\":4,\"147\":2,\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"uselimit\",{\"1\":{\"1384\":7}}],[\"useful\",{\"1\":{\"1040\":1}}],[\"used\",{\"1\":{\"838\":1,\"839\":1,\"1002\":1,\"1003\":1,\"1188\":2}}],[\"uses\",{\"1\":{\"555\":1}}],[\"userlistresource\",{\"1\":{\"1152\":1}}],[\"userresource\",{\"1\":{\"1147\":1,\"1149\":1}}],[\"usernotfounderror\",{\"1\":{\"550\":1}}],[\"username=<你的用户名>\",{\"1\":{\"81\":1}}],[\"username\",{\"1\":{\"80\":1,\"549\":2,\"550\":1,\"552\":1,\"579\":1}}],[\"user表\",{\"1\":{\"513\":1}}],[\"user表行\",{\"1\":{\"513\":1}}],[\"user表为驱动表\",{\"1\":{\"513\":1}}],[\"userservice\",{\"1\":{\"545\":1,\"550\":1,\"552\":1}}],[\"users\",{\"1\":{\"415\":1,\"455\":1,\"548\":1,\"1144\":1,\"1147\":1,\"1152\":1,\"1155\":1}}],[\"user\",{\"1\":{\"79\":3,\"332\":1,\"415\":5,\"455\":2,\"485\":3,\"498\":10,\"499\":4,\"504\":2,\"513\":7,\"542\":6,\"545\":11,\"548\":1,\"550\":4,\"552\":7,\"822\":5,\"828\":1,\"831\":5,\"843\":9,\"849\":6,\"873\":4,\"1010\":6,\"1088\":3,\"1101\":3,\"1103\":1,\"1111\":1,\"1112\":1,\"1147\":13,\"1150\":3,\"1151\":4,\"1152\":1,\"1194\":2}}],[\"use\",{\"1\":{\"1\":1,\"832\":2,\"996\":2,\"1064\":2}}],[\"uia\",{\"1\":{\"679\":5}}],[\"uianamespace\",{\"1\":{\"679\":2}}],[\"uiainfomessagemanager\",{\"1\":{\"679\":2}}],[\"uid=uid\",{\"1\":{\"873\":1}}],[\"uid\",{\"1\":{\"332\":1,\"822\":2,\"831\":2,\"849\":2,\"872\":3,\"873\":2,\"1010\":2}}],[\"ui\",{\"1\":{\"0\":1,\"1146\":1,\"1151\":1,\"1156\":1,\"1229\":4}}],[\"tc\",{\"1\":{\"1183\":1}}],[\"tcp协议是传输层协议\",{\"1\":{\"962\":1}}],[\"tcp协议\",{\"0\":{\"962\":1}}],[\"tcp如何保证连接的可靠\",{\"0\":{\"957\":1}}],[\"tcp的四次挥手\",{\"0\":{\"953\":1}}],[\"tcp三次握手和四次挥手过程\",{\"0\":{\"951\":1}}],[\"tcp网络协议\",{\"0\":{\"950\":1}}],[\"tcp=tcp\",{\"1\":{\"73\":3}}],[\"tcp\",{\"1\":{\"73\":9,\"87\":1,\"88\":1,\"90\":2,\"93\":1,\"269\":1,\"334\":1,\"674\":1,\"675\":1,\"676\":1,\"951\":4,\"952\":1,\"953\":2,\"958\":2,\"959\":1,\"962\":2,\"971\":1,\"976\":1,\"977\":4},\"2\":{\"963\":1,\"964\":1}}],[\"tls\",{\"1\":{\"971\":1}}],[\"tuple\",{\"1\":{\"902\":1,\"986\":1,\"1100\":1}}],[\"tuple等\",{\"1\":{\"900\":1}}],[\"turned\",{\"1\":{\"563\":1}}],[\"typing\",{\"1\":{\"776\":1,\"806\":1,\"827\":1,\"872\":1,\"880\":4,\"1189\":1,\"1221\":3}}],[\"typevar\",{\"1\":{\"1187\":1}}],[\"typed=false\",{\"1\":{\"930\":2}}],[\"typeerror\",{\"1\":{\"743\":1,\"986\":1,\"1017\":1,\"1063\":1,\"1094\":1}}],[\"type类型\",{\"1\":{\"350\":1}}],[\"type字段\",{\"0\":{\"350\":1}}],[\"type=ac\",{\"1\":{\"873\":1}}],[\"type=\",{\"1\":{\"872\":1}}],[\"type==<class\",{\"1\":{\"847\":1,\"848\":2,\"1009\":3}}],[\"type==\",{\"1\":{\"847\":1,\"1009\":1}}],[\"type==rollingupdate时\",{\"1\":{\"159\":1}}],[\"type==recreate\",{\"1\":{\"158\":1}}],[\"type=nodeport\",{\"1\":{\"125\":1}}],[\"type=charm\",{\"1\":{\"70\":1}}],[\"types\",{\"1\":{\"87\":1,\"662\":1}}],[\"type\",{\"1\":{\"80\":1,\"87\":1,\"93\":5,\"100\":1,\"160\":1,\"324\":2,\"349\":2,\"529\":2,\"746\":1,\"844\":3,\"847\":4,\"872\":2,\"873\":4,\"986\":1,\"1009\":4,\"1050\":6,\"1059\":10,\"1063\":2,\"1094\":4,\"1102\":1,\"1103\":4,\"1166\":1,\"1167\":4,\"1187\":1}}],[\"tb==<traceback\",{\"1\":{\"847\":1,\"848\":2,\"1009\":3}}],[\"tb==\",{\"1\":{\"847\":1,\"1009\":1}}],[\"tb是代表着什么\",{\"1\":{\"847\":1,\"1009\":1}}],[\"tb\",{\"1\":{\"746\":1,\"844\":2,\"847\":3,\"1009\":3,\"1050\":3}}],[\"tdd\",{\"0\":{\"551\":1},\"1\":{\"553\":1}}],[\"t6\",{\"1\":{\"482\":1}}],[\"t5\",{\"1\":{\"482\":1}}],[\"t4\",{\"1\":{\"482\":1}}],[\"t3\",{\"1\":{\"283\":1,\"482\":1}}],[\"t2\",{\"1\":{\"283\":1,\"482\":1,\"513\":2,\"834\":2,\"932\":2,\"933\":2,\"998\":2}}],[\"t1\",{\"1\":{\"283\":1,\"405\":1,\"482\":1,\"513\":2,\"834\":2,\"932\":2,\"933\":2,\"998\":2,\"1030\":2}}],[\"tick\",{\"1\":{\"611\":1}}],[\"title=\",{\"1\":{\"567\":1,\"1147\":1}}],[\"times\",{\"1\":{\"844\":1,\"1050\":1}}],[\"timestamp\",{\"1\":{\"504\":1,\"849\":1,\"1010\":1}}],[\"timestamp=1645624245\",{\"1\":{\"504\":1}}],[\"timeit\",{\"1\":{\"758\":5}}],[\"timezone\",{\"1\":{\"662\":2}}],[\"timedelta\",{\"1\":{\"662\":2,\"872\":1}}],[\"timed\",{\"1\":{\"580\":1}}],[\"timeout=none\",{\"1\":{\"1035\":1}}],[\"timeout=1\",{\"1\":{\"717\":1,\"1033\":1}}],[\"timeout=30\",{\"1\":{\"579\":1}}],[\"timeout\",{\"1\":{\"580\":1,\"1040\":2}}],[\"timeoutseconds\",{\"1\":{\"147\":5}}],[\"time=1\",{\"1\":{\"503\":2}}],[\"time控制\",{\"1\":{\"503\":1}}],[\"time\",{\"1\":{\"334\":1,\"503\":9,\"504\":6,\"531\":2,\"654\":1,\"662\":4,\"679\":1,\"680\":1,\"696\":1,\"712\":9,\"758\":4,\"827\":1,\"832\":7,\"833\":2,\"834\":6,\"849\":4,\"855\":4,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1,\"916\":3,\"929\":5,\"932\":14,\"933\":9,\"953\":1,\"955\":1,\"996\":7,\"997\":2,\"998\":6,\"1010\":4}}],[\"tip\",{\"1\":{\"115\":1}}],[\"tty\",{\"1\":{\"133\":1}}],[\"ttlsecondsafterfinished\",{\"1\":{\"198\":3}}],[\"ttl\",{\"1\":{\"74\":2,\"198\":5,\"212\":1}}],[\"trianglenumber\",{\"1\":{\"1379\":2}}],[\"trigger\",{\"1\":{\"563\":3,\"565\":3,\"566\":2,\"567\":3,\"569\":4,\"570\":2,\"573\":1}}],[\"trim\",{\"1\":{\"227\":1}}],[\"try\",{\"0\":{\"741\":1},\"1\":{\"532\":1,\"550\":1,\"572\":1,\"658\":1,\"661\":1,\"742\":1,\"743\":1,\"744\":1,\"748\":1,\"749\":1,\"751\":1,\"753\":1,\"754\":1,\"755\":1,\"757\":1,\"758\":2,\"833\":1,\"844\":1,\"848\":1,\"849\":2,\"854\":3,\"856\":1,\"861\":1,\"872\":1,\"879\":1,\"997\":1,\"1009\":1,\"1010\":2,\"1017\":1,\"1049\":6,\"1050\":4,\"1064\":2,\"1084\":1,\"1088\":1,\"1094\":1,\"1098\":2,\"1100\":3,\"1102\":1,\"1103\":2,\"1104\":2,\"1111\":1,\"1112\":1,\"1187\":2,\"1194\":4}}],[\"traver\",{\"1\":{\"1220\":1}}],[\"traverse\",{\"1\":{\"1220\":7,\"1221\":9,\"1348\":4}}],[\"traces=false\",{\"1\":{\"1194\":1}}],[\"tracebacktype\",{\"1\":{\"1050\":1}}],[\"traceback\",{\"1\":{\"532\":2,\"755\":3}}],[\"tracking\",{\"1\":{\"1379\":3}}],[\"track\",{\"1\":{\"844\":1,\"1050\":1}}],[\"traffic\",{\"1\":{\"567\":2}}],[\"trafficlight\",{\"1\":{\"563\":2,\"566\":2,\"567\":2,\"572\":1}}],[\"transfer\",{\"1\":{\"966\":1}}],[\"translated\",{\"1\":{\"799\":1}}],[\"transitions=false\",{\"1\":{\"567\":1,\"570\":1}}],[\"transitions=transitions\",{\"1\":{\"567\":1,\"569\":1,\"570\":1}}],[\"transitions=self\",{\"1\":{\"563\":1,\"565\":1,\"566\":1}}],[\"transitions\",{\"1\":{\"560\":1,\"561\":1,\"562\":2,\"563\":4,\"565\":3,\"566\":2,\"567\":3,\"569\":2,\"570\":3,\"574\":1},\"2\":{\"575\":1,\"576\":1}}],[\"transaction\",{\"0\":{\"583\":1},\"1\":{\"325\":1}}],[\"trx\",{\"1\":{\"369\":1,\"371\":18,\"388\":1,\"476\":1,\"477\":3,\"478\":3}}],[\"treenode\",{\"1\":{\"1220\":2}}],[\"tree如果根节点命中直接返回\",{\"1\":{\"345\":1}}],[\"tree更多\",{\"1\":{\"345\":1}}],[\"tree要多\",{\"1\":{\"345\":1}}],[\"tree进行扫描\",{\"1\":{\"345\":1}}],[\"tree能解决的问题\",{\"1\":{\"345\":1}}],[\"tree基础上的一种优化\",{\"1\":{\"343\":1}}],[\"tree总结\",{\"0\":{\"342\":1}}],[\"tree的变种\",{\"1\":{\"345\":1}}],[\"tree的每个节点的元素可以视为一次i\",{\"1\":{\"341\":1}}],[\"tree的查找操作\",{\"0\":{\"341\":1}}],[\"tree的阶\",{\"0\":{\"339\":1},\"1\":{\"338\":1}}],[\"tree首先定义一条记录为一个键值对\",{\"1\":{\"340\":1}}],[\"tree结构存储索引的特点\",{\"0\":{\"340\":1}}],[\"tree为4阶b树\",{\"1\":{\"339\":1}}],[\"tree满足以下条件\",{\"1\":{\"338\":1}}],[\"tree中所有节点的子树个数的最大值称为b\",{\"1\":{\"338\":1}}],[\"tree是一种平衡的多路查找树\",{\"1\":{\"338\":1}}],[\"tree介绍\",{\"0\":{\"338\":1}}],[\"troubleshooting\",{\"1\":{\"124\":1}}],[\"true代表着出现异常\",{\"1\":{\"848\":1,\"1009\":1}}],[\"true\",{\"1\":{\"1\":1,\"565\":1,\"662\":2,\"681\":2,\"717\":1,\"733\":1,\"849\":1,\"861\":1,\"863\":1,\"879\":1,\"882\":1,\"892\":1,\"900\":1,\"916\":1,\"924\":1,\"986\":1,\"1010\":1,\"1017\":1,\"1063\":1,\"1064\":3,\"1094\":3,\"1103\":1,\"1111\":1,\"1112\":1,\"1198\":4,\"1217\":2,\"1220\":4,\"1225\":1,\"1229\":5,\"1235\":2,\"1236\":4,\"1237\":4,\"1241\":5,\"1242\":4,\"1274\":1,\"1276\":7,\"1289\":5,\"1297\":7,\"1298\":1,\"1300\":5,\"1313\":1,\"1348\":2,\"1352\":2,\"1353\":1,\"1354\":7,\"1366\":4,\"1376\":2}}],[\"take\",{\"1\":{\"1282\":2}}],[\"tails\",{\"1\":{\"1209\":4}}],[\"tail\",{\"1\":{\"1207\":8}}],[\"taint\",{\"1\":{\"124\":1}}],[\"tax\",{\"1\":{\"1180\":11}}],[\"taxsalaryvisitor\",{\"1\":{\"1180\":2}}],[\"taskgroup\",{\"1\":{\"1040\":1}}],[\"task对象\",{\"1\":{\"1040\":1}}],[\"task2参数a\",{\"1\":{\"735\":1}}],[\"task2\",{\"1\":{\"735\":2}}],[\"task1参数a\",{\"1\":{\"735\":1}}],[\"task1\",{\"1\":{\"735\":2}}],[\"taskprogress\",{\"1\":{\"681\":1}}],[\"tasks\",{\"1\":{\"651\":1,\"654\":1,\"656\":1,\"661\":1,\"662\":5,\"722\":2,\"924\":2,\"925\":2,\"1040\":4,\"1049\":3}}],[\"task\",{\"1\":{\"648\":1,\"651\":1,\"653\":4,\"654\":3,\"658\":3,\"660\":3,\"661\":1,\"662\":2,\"679\":1,\"681\":1,\"722\":1,\"862\":2,\"908\":2,\"912\":2,\"916\":4,\"920\":3,\"924\":2,\"1040\":4,\"1049\":2}}],[\"tabbar\",{\"1\":{\"681\":1}}],[\"tab四个宫格\",{\"1\":{\"536\":1}}],[\"tablename\",{\"1\":{\"447\":3,\"448\":3,\"449\":2,\"450\":3,\"865\":1,\"886\":2}}],[\"table会让日志量暴涨\",{\"1\":{\"393\":1}}],[\"table\",{\"1\":{\"200\":1,\"314\":1,\"349\":1,\"404\":2,\"420\":1,\"447\":2,\"448\":2,\"449\":2,\"450\":2,\"460\":1,\"494\":1,\"503\":2,\"579\":1,\"861\":3,\"862\":36,\"867\":2,\"888\":4}}],[\"tags|sequence\",{\"1\":{\"1188\":1}}],[\"tags=tags\",{\"1\":{\"1187\":1}}],[\"tags\",{\"1\":{\"1187\":5,\"1188\":2}}],[\"tag\",{\"1\":{\"108\":1}}],[\"target时\",{\"1\":{\"1395\":3}}],[\"target=task\",{\"1\":{\"1049\":1}}],[\"target=sub\",{\"1\":{\"1033\":1}}],[\"target=add\",{\"1\":{\"1033\":1}}],[\"target=demo\",{\"1\":{\"1030\":1}}],[\"target=increment\",{\"1\":{\"717\":2}}],[\"target=consumer\",{\"1\":{\"713\":1,\"916\":1}}],[\"target=producer\",{\"1\":{\"713\":1,\"916\":1}}],[\"target=worker\",{\"1\":{\"706\":1,\"713\":1,\"717\":1,\"855\":2}}],[\"target\",{\"1\":{\"101\":1,\"125\":2,\"799\":11,\"1274\":16,\"1275\":7,\"1390\":11,\"1393\":2,\"1395\":16,\"1399\":7,\"1400\":11}}],[\"targetport\",{\"1\":{\"87\":1,\"88\":1,\"90\":2,\"93\":2}}],[\"telnet\",{\"1\":{\"962\":1}}],[\"text2\",{\"1\":{\"1308\":13}}],[\"text1\",{\"1\":{\"1308\":12}}],[\"text\",{\"1\":{\"924\":1,\"925\":1,\"1166\":1,\"1167\":1,\"1194\":6}}],[\"tearing\",{\"0\":{\"1119\":1,\"1120\":1,\"1132\":1,\"1133\":1},\"1\":{\"1110\":4,\"1119\":1,\"1120\":1,\"1132\":1,\"1133\":1}}],[\"teardowncallable\",{\"1\":{\"1059\":1}}],[\"teardown\",{\"1\":{\"844\":1,\"1050\":2,\"1059\":3,\"1060\":1,\"1102\":1,\"1124\":1,\"1137\":1,\"1182\":3,\"1194\":2}}],[\"teacherstudentschema\",{\"1\":{\"887\":2}}],[\"teacherschema\",{\"1\":{\"866\":1,\"867\":1,\"887\":1,\"888\":2}}],[\"teacherview\",{\"1\":{\"867\":2,\"888\":2}}],[\"teacher\",{\"1\":{\"865\":2,\"866\":1,\"867\":3,\"886\":8,\"887\":13,\"888\":6}}],[\"technicalfactory\",{\"1\":{\"791\":2}}],[\"technicalbooks\",{\"1\":{\"790\":1,\"791\":1}}],[\"technical\",{\"1\":{\"790\":1}}],[\"temp2\",{\"1\":{\"1335\":3}}],[\"temp1\",{\"1\":{\"1335\":3}}],[\"temp\",{\"1\":{\"533\":2,\"881\":4,\"882\":5,\"1198\":5,\"1209\":2,\"1242\":2,\"1303\":2}}],[\"temporary\",{\"1\":{\"349\":1,\"351\":1}}],[\"template是一个信号\",{\"1\":{\"1116\":1,\"1129\":1}}],[\"templates\",{\"1\":{\"662\":1,\"1059\":2}}],[\"template\",{\"0\":{\"1116\":1,\"1117\":1,\"1129\":1,\"1130\":1},\"1\":{\"64\":1,\"67\":1,\"153\":1,\"154\":2,\"156\":1,\"165\":1,\"197\":1,\"203\":1,\"662\":2,\"1059\":11,\"1110\":4,\"1112\":4,\"1117\":1,\"1124\":7,\"1130\":1}}],[\"terminationgraceperiodseconds\",{\"1\":{\"148\":1}}],[\"terminationmessagepolicy\",{\"1\":{\"133\":1}}],[\"terminationmessagepath\",{\"1\":{\"133\":1}}],[\"terminate\",{\"1\":{\"135\":1,\"717\":1}}],[\"tee\",{\"1\":{\"108\":4}}],[\"testcase\",{\"1\":{\"1194\":1}}],[\"testlibrary|none\",{\"1\":{\"1187\":1}}],[\"testlibrary\",{\"1\":{\"1187\":1}}],[\"test是函数的名字\",{\"1\":{\"932\":1}}],[\"testing\",{\"1\":{\"849\":1,\"1010\":1}}],[\"test3\",{\"1\":{\"839\":2,\"1003\":2}}],[\"test2\",{\"1\":{\"839\":3,\"1003\":3}}],[\"test1\",{\"1\":{\"839\":3,\"1003\":3}}],[\"test=false\",{\"1\":{\"662\":1}}],[\"testsuitebuilder\",{\"1\":{\"1194\":1}}],[\"testsuite\",{\"1\":{\"1182\":1,\"1183\":1,\"1194\":3}}],[\"tests\",{\"1\":{\"552\":1,\"1182\":1,\"1194\":2}}],[\"testpath\",{\"1\":{\"101\":1}}],[\"test\",{\"1\":{\"63\":1,\"101\":1,\"118\":2,\"503\":1,\"504\":1,\"531\":1,\"532\":2,\"552\":4,\"662\":1,\"832\":2,\"834\":2,\"849\":1,\"865\":1,\"886\":4,\"887\":1,\"888\":2,\"932\":7,\"933\":3,\"983\":1,\"984\":4,\"985\":2,\"996\":2,\"998\":2,\"1010\":1,\"1049\":2,\"1059\":2,\"1194\":1}}],[\"txt\",{\"1\":{\"63\":1,\"555\":2,\"742\":1,\"744\":1,\"746\":1,\"846\":1,\"849\":1,\"1008\":1,\"1010\":1}}],[\"t\",{\"1\":{\"63\":1,\"482\":2,\"555\":1,\"799\":1,\"827\":3,\"872\":1,\"1049\":2,\"1050\":9,\"1059\":3,\"1062\":2,\"1063\":8,\"1064\":3,\"1094\":2,\"1102\":1,\"1103\":1,\"1313\":9,\"1314\":8,\"1393\":1}}],[\"threesum\",{\"1\":{\"1257\":1}}],[\"three\",{\"1\":{\"921\":2,\"1289\":5}}],[\"threaded\",{\"1\":{\"1064\":1}}],[\"threadsafe\",{\"1\":{\"1040\":1}}],[\"threads\",{\"1\":{\"665\":1,\"666\":1}}],[\"threading\",{\"1\":{\"588\":1,\"784\":2,\"855\":4,\"916\":3,\"1030\":2,\"1033\":5,\"1035\":1,\"1049\":5}}],[\"thread\",{\"1\":{\"494\":1,\"844\":1,\"853\":2,\"855\":12,\"916\":8,\"1030\":2,\"1033\":2,\"1040\":1,\"1049\":3,\"1051\":1}}],[\"that\",{\"1\":{\"125\":2,\"1040\":3,\"1094\":2,\"1102\":1}}],[\"then\",{\"1\":{\"1040\":1}}],[\"them\",{\"1\":{\"844\":1,\"1050\":1}}],[\"there\",{\"1\":{\"844\":1,\"1050\":1}}],[\"the\",{\"1\":{\"1\":1,\"125\":2,\"203\":1,\"776\":1,\"799\":4,\"806\":3,\"844\":9,\"856\":8,\"1040\":1,\"1050\":8,\"1057\":3,\"1063\":1,\"1094\":7,\"1102\":3,\"1189\":4}}],[\"this\",{\"1\":{\"1\":2,\"1057\":1,\"1094\":1,\"1111\":1,\"1188\":2}}],[\"toke\",{\"1\":{\"692\":1}}],[\"tokens\",{\"1\":{\"1050\":4,\"1100\":2,\"1102\":2}}],[\"token定义\",{\"0\":{\"690\":1}}],[\"token之间的区别了\",{\"1\":{\"687\":1}}],[\"token认证流程\",{\"0\":{\"691\":1}}],[\"token认证\",{\"0\":{\"685\":1}}],[\"token\",{\"1\":{\"108\":2,\"536\":2,\"690\":2,\"691\":1,\"698\":2,\"872\":5,\"873\":8,\"1050\":1,\"1069\":1,\"1074\":2,\"1076\":1,\"1081\":3,\"1085\":2,\"1087\":1,\"1088\":2,\"1089\":1,\"1101\":1,\"1102\":2,\"1104\":1}}],[\"tornado等\",{\"1\":{\"607\":1}}],[\"total\",{\"1\":{\"548\":1,\"549\":2,\"776\":12,\"862\":4,\"882\":1,\"1180\":4,\"1274\":18,\"1353\":3}}],[\"todo\",{\"1\":{\"531\":1}}],[\"tom\",{\"1\":{\"415\":1}}],[\"tomcat\",{\"1\":{\"198\":1}}],[\"tomcat6\",{\"1\":{\"125\":5}}],[\"top只取栈顶元素\",{\"1\":{\"856\":1}}],[\"top是属性\",{\"1\":{\"856\":1}}],[\"topmost\",{\"1\":{\"856\":2}}],[\"topic\",{\"1\":{\"681\":4}}],[\"top\",{\"1\":{\"124\":1,\"844\":1,\"856\":5,\"921\":8,\"1049\":2}}],[\"to\",{\"1\":{\"1\":1,\"125\":2,\"133\":1,\"165\":1,\"202\":3,\"542\":1,\"555\":2,\"681\":2,\"757\":3,\"776\":2,\"844\":4,\"856\":1,\"1040\":3,\"1050\":3,\"1057\":1,\"1094\":1,\"1102\":1,\"1187\":1,\"1189\":1,\"1229\":5,\"1237\":3,\"1241\":2,\"1242\":2}}],[\"pq\",{\"1\":{\"919\":6,\"920\":5}}],[\"pm\",{\"1\":{\"806\":2}}],[\"p2\",{\"1\":{\"713\":1,\"717\":3,\"1282\":2}}],[\"p1\",{\"1\":{\"713\":1,\"717\":3,\"1282\":2}}],[\"psycopg2\",{\"1\":{\"599\":2}}],[\"people\",{\"1\":{\"1378\":10}}],[\"pen\",{\"1\":{\"1276\":2}}],[\"pending\",{\"1\":{\"565\":3,\"573\":1}}],[\"per\",{\"1\":{\"862\":1}}],[\"permissionauth\",{\"1\":{\"662\":1}}],[\"permission\",{\"1\":{\"662\":1}}],[\"person\",{\"1\":{\"529\":1,\"534\":4,\"824\":8,\"825\":4}}],[\"persistence统计信息中查看\",{\"1\":{\"262\":1}}],[\"persistentvolumeclaim\",{\"1\":{\"67\":2}}],[\"persistentvolume\",{\"1\":{\"67\":3,\"190\":1}}],[\"persistent\",{\"1\":{\"66\":2}}],[\"persistantvolumeclaimtemplate\",{\"1\":{\"191\":1}}],[\"percentage参数确定自动触发时机\",{\"1\":{\"262\":1}}],[\"percentage\",{\"1\":{\"260\":1,\"262\":2}}],[\"perl\",{\"1\":{\"197\":2}}],[\"periodseconds\",{\"1\":{\"147\":6}}],[\"period\",{\"1\":{\"135\":1}}],[\"pyloggingconf\",{\"1\":{\"1194\":2}}],[\"pyjwt==2\",{\"1\":{\"871\":1}}],[\"pypy\",{\"1\":{\"844\":1,\"1050\":1}}],[\"pyamqp\",{\"1\":{\"722\":1}}],[\"pycharm格式化为准\",{\"1\":{\"536\":2}}],[\"py文件中尽量少写或者是不写功能类方法\",{\"1\":{\"534\":1}}],[\"pydantic类型提示类\",{\"1\":{\"533\":1}}],[\"py\",{\"1\":{\"531\":1,\"542\":7,\"545\":2,\"552\":1,\"648\":1,\"651\":1,\"662\":6,\"679\":2,\"680\":2,\"755\":1,\"782\":2,\"827\":2,\"849\":2,\"856\":1,\"861\":1,\"862\":1,\"863\":1,\"872\":1,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1,\"1010\":2,\"1045\":2}}],[\"pythonpath\",{\"1\":{\"1194\":2}}],[\"pythonargumentparser\",{\"1\":{\"1188\":1}}],[\"python原生支持所以使用\",{\"1\":{\"1049\":1}}],[\"python多线程的实现\",{\"0\":{\"1030\":1}}],[\"python多线程\",{\"0\":{\"1028\":1}}],[\"python多进程使用\",{\"0\":{\"701\":1}}],[\"python装饰器\",{\"0\":{\"995\":1}}],[\"python闭包\",{\"0\":{\"989\":1}}],[\"python变量的作用域取决于变量被赋值的位置\",{\"1\":{\"982\":1}}],[\"python基础队列\",{\"0\":{\"907\":1}}],[\"python面试\",{\"2\":{\"905\":1}}],[\"python会提供一个默认的\",{\"1\":{\"901\":1}}],[\"python会自动调用\",{\"1\":{\"901\":1}}],[\"python引入gil是为了简化解释器的设计和实现\",{\"1\":{\"897\":1}}],[\"python引入全局解释器锁\",{\"1\":{\"897\":1}}],[\"python社区已经提出了一些解决方案\",{\"1\":{\"897\":1}}],[\"python解释器不需要在共享数据上实现复杂的同步机制\",{\"1\":{\"897\":1}}],[\"python通过copy模块中的copy和deepcopy函数来实现浅拷贝和深拷贝操作\",{\"1\":{\"894\":1}}],[\"python2\",{\"0\":{\"893\":1}}],[\"python3\",{\"0\":{\"893\":1},\"1\":{\"1049\":1}}],[\"python对象如何转为\",{\"0\":{\"824\":1}}],[\"pythonic\",{\"1\":{\"776\":1}}],[\"python中一共有六中位运算的操作符\",{\"1\":{\"1321\":1}}],[\"python中\",{\"1\":{\"982\":1}}],[\"python中5种队列数据结构\",{\"0\":{\"906\":1}}],[\"python中为什么要引入全局解释器锁\",{\"0\":{\"897\":1}}],[\"python中为什么没有函数重载\",{\"0\":{\"896\":1}}],[\"python中的深浅拷贝\",{\"0\":{\"894\":1}}],[\"python中的鸭子对象\",{\"0\":{\"892\":1}}],[\"python中的一个例子\",{\"1\":{\"758\":1}}],[\"python中不建议使用\",{\"1\":{\"748\":1}}],[\"python中定时任务模块\",{\"0\":{\"604\":1}}],[\"python异常处理技巧\",{\"0\":{\"739\":1}}],[\"python还支持带状态的生成器\",{\"1\":{\"736\":1}}],[\"python的heapq模块提供了堆队列算法的实现\",{\"1\":{\"919\":1}}],[\"python的queue模块为此提供了线程安全的队列类\",{\"1\":{\"914\":1}}],[\"python的多线程程序可能无法充分利用硬件资源\",{\"1\":{\"897\":1}}],[\"python的多线程程序也不能同时利用它们\",{\"1\":{\"897\":1}}],[\"python的多线程在cpu密集型任务上并不能提供真正的并行性\",{\"1\":{\"897\":1}}],[\"python的生成器支持send方法\",{\"1\":{\"735\":1}}],[\"python的迭代机制依赖于两个特殊方法\",{\"1\":{\"731\":1}}],[\"python的multiprocessing模块通过以下方式实现跨平台进程管理\",{\"1\":{\"705\":1}}],[\"python提供以下ipc原语\",{\"1\":{\"706\":1}}],[\"python状态机的使用\",{\"0\":{\"560\":1}}],[\"python\",{\"0\":{\"528\":1,\"606\":1,\"705\":1,\"1418\":1},\"1\":{\"331\":1,\"531\":2,\"555\":1,\"560\":1,\"590\":1,\"599\":1,\"662\":8,\"664\":2,\"679\":2,\"680\":2,\"776\":1,\"782\":2,\"784\":1,\"827\":2,\"861\":2,\"862\":2,\"863\":2,\"872\":2,\"879\":2,\"880\":2,\"886\":2,\"887\":2,\"888\":2,\"893\":1,\"899\":2,\"1021\":1,\"1069\":1,\"1164\":1,\"1173\":1,\"1393\":1},\"2\":{\"584\":1,\"601\":1,\"699\":1,\"726\":1,\"737\":1,\"759\":1,\"772\":1,\"777\":1,\"785\":1,\"794\":1,\"801\":1,\"810\":1,\"819\":1,\"829\":1,\"840\":1,\"850\":1,\"857\":1,\"868\":1,\"874\":1,\"889\":1,\"904\":1,\"926\":1,\"937\":1,\"948\":1,\"987\":1,\"993\":1,\"1004\":1,\"1011\":1,\"1018\":1,\"1026\":1,\"1037\":1,\"1042\":1}}],[\"python工程师\",{\"1\":{\"0\":1}}],[\"pg的主备复制属于物理复制\",{\"1\":{\"433\":1}}],[\"pg主表采用堆表存放\",{\"1\":{\"433\":1}}],[\"pg\",{\"0\":{\"432\":1,\"433\":1},\"2\":{\"436\":1}}],[\"ptr\",{\"1\":{\"369\":1}}],[\"png\",{\"1\":{\"217\":1,\"219\":1,\"299\":1,\"300\":1,\"301\":1,\"302\":1,\"303\":1,\"308\":1,\"311\":1,\"319\":1,\"320\":1,\"322\":1,\"325\":1,\"327\":1,\"338\":1,\"340\":1,\"344\":1,\"348\":1,\"369\":1,\"370\":1,\"377\":1,\"388\":1,\"390\":1,\"394\":1,\"405\":4,\"408\":2,\"415\":1,\"425\":5,\"455\":1,\"460\":2,\"461\":1,\"468\":1,\"469\":1,\"476\":1,\"477\":1,\"478\":1,\"482\":2,\"494\":1,\"513\":1,\"567\":2,\"856\":1}}],[\"pickle\",{\"1\":{\"656\":1,\"894\":3}}],[\"pipe\",{\"1\":{\"706\":3}}],[\"pipeline\",{\"0\":{\"8\":1},\"1\":{\"555\":1,\"975\":1,\"977\":1}}],[\"pip\",{\"1\":{\"555\":1,\"562\":1,\"647\":1,\"678\":2,\"871\":1,\"1147\":1}}],[\"pid\",{\"1\":{\"334\":3}}],[\"pi\",{\"1\":{\"197\":2}}],[\"plea\",{\"1\":{\"1380\":3}}],[\"please\",{\"1\":{\"1\":1}}],[\"plan\",{\"1\":{\"1297\":1}}],[\"place\",{\"1\":{\"1258\":1}}],[\"plain\",{\"1\":{\"1166\":1,\"1167\":1}}],[\"pl\",{\"1\":{\"806\":1}}],[\"pluggable\",{\"0\":{\"333\":1}}],[\"plugin\",{\"1\":{\"124\":1,\"662\":2}}],[\"put\",{\"1\":{\"713\":1,\"716\":1,\"862\":1,\"916\":2,\"924\":2,\"925\":1,\"1143\":1,\"1144\":1,\"1147\":1,\"1149\":2}}],[\"pushes\",{\"1\":{\"856\":1}}],[\"pushed是一个信号\",{\"1\":{\"1121\":1,\"1134\":1}}],[\"pushed\",{\"0\":{\"1121\":1,\"1134\":1},\"1\":{\"844\":2,\"1050\":5,\"1110\":2}}],[\"push\",{\"0\":{\"1085\":1},\"1\":{\"555\":3,\"662\":1,\"681\":1,\"843\":1,\"844\":3,\"856\":3,\"919\":4,\"1049\":1,\"1050\":5,\"1073\":2,\"1074\":1,\"1084\":1,\"1085\":1,\"1098\":1,\"1100\":4,\"1104\":1}}],[\"pushdown\",{\"1\":{\"455\":1}}],[\"publish\",{\"1\":{\"790\":2,\"791\":4}}],[\"publishing\",{\"1\":{\"87\":1}}],[\"public\",{\"1\":{\"118\":1,\"662\":4,\"679\":3,\"680\":2,\"865\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"pull\",{\"1\":{\"108\":1}}],[\"prerequisites\",{\"1\":{\"1241\":11,\"1242\":11}}],[\"preprocessor\",{\"1\":{\"1124\":4}}],[\"preprocessor需要传入endpoint\",{\"1\":{\"1124\":1}}],[\"preprocessors\",{\"1\":{\"1103\":3}}],[\"preprocessors=\",{\"1\":{\"1059\":2}}],[\"preprocess\",{\"1\":{\"1103\":3,\"1111\":1,\"1112\":1}}],[\"preserve\",{\"1\":{\"1098\":3,\"1100\":3,\"1104\":3}}],[\"prestop\",{\"1\":{\"135\":5}}],[\"pre\",{\"1\":{\"862\":4,\"1194\":2}}],[\"prefork\",{\"0\":{\"664\":1},\"1\":{\"664\":2,\"668\":1,\"669\":1,\"670\":1}}],[\"prefix\",{\"1\":{\"100\":2,\"101\":1}}],[\"prev\",{\"1\":{\"218\":1,\"219\":2}}],[\"principle\",{\"1\":{\"762\":1,\"790\":1}}],[\"printable\",{\"1\":{\"1188\":1}}],[\"print\",{\"1\":{\"197\":1,\"532\":1,\"533\":6,\"534\":1,\"550\":1,\"563\":5,\"566\":2,\"572\":1,\"579\":1,\"597\":2,\"653\":2,\"706\":1,\"709\":1,\"712\":2,\"717\":1,\"731\":1,\"732\":4,\"733\":1,\"735\":2,\"736\":1,\"742\":1,\"743\":1,\"746\":1,\"748\":2,\"749\":3,\"751\":1,\"753\":2,\"754\":1,\"755\":2,\"757\":2,\"758\":3,\"776\":16,\"799\":6,\"806\":7,\"824\":2,\"825\":1,\"832\":1,\"833\":1,\"834\":1,\"839\":6,\"847\":9,\"848\":1,\"849\":2,\"855\":3,\"856\":1,\"873\":1,\"900\":1,\"902\":7,\"908\":3,\"912\":4,\"916\":3,\"919\":2,\"920\":1,\"921\":1,\"924\":1,\"925\":1,\"929\":2,\"930\":3,\"932\":5,\"933\":3,\"941\":4,\"942\":1,\"943\":4,\"944\":1,\"945\":1,\"946\":1,\"947\":4,\"983\":2,\"984\":1,\"985\":2,\"986\":1,\"992\":1,\"996\":1,\"997\":1,\"998\":1,\"1003\":6,\"1009\":10,\"1010\":2,\"1015\":5,\"1023\":4,\"1024\":1,\"1030\":1,\"1033\":1,\"1049\":3,\"1057\":4,\"1059\":5,\"1062\":2,\"1064\":1,\"1077\":1,\"1081\":2,\"1094\":2,\"1112\":2,\"1124\":7,\"1180\":2,\"1189\":1,\"1198\":2,\"1202\":1,\"1207\":1,\"1220\":6,\"1241\":1,\"1242\":1,\"1266\":1,\"1272\":1,\"1273\":1,\"1274\":4,\"1275\":2,\"1276\":2,\"1280\":1,\"1286\":1,\"1287\":1,\"1292\":4,\"1303\":3,\"1307\":3,\"1308\":2,\"1309\":1,\"1313\":1,\"1314\":1,\"1329\":3,\"1330\":1,\"1340\":1,\"1348\":2,\"1379\":1,\"1380\":1,\"1403\":2}}],[\"printf\",{\"1\":{\"108\":9}}],[\"priority=0\",{\"1\":{\"919\":1}}],[\"priorityqueue\",{\"0\":{\"917\":1},\"1\":{\"915\":1,\"919\":2}}],[\"priority\",{\"1\":{\"654\":1,\"919\":1,\"920\":5}}],[\"prices\",{\"1\":{\"1292\":73}}],[\"price\",{\"1\":{\"549\":2,\"776\":4}}],[\"primary\",{\"1\":{\"349\":2,\"413\":1,\"449\":2,\"828\":1,\"861\":1,\"879\":1}}],[\"private\",{\"1\":{\"81\":2}}],[\"provided\",{\"1\":{\"1094\":1,\"1111\":1}}],[\"provide\",{\"1\":{\"1063\":9,\"1094\":9,\"1103\":1}}],[\"provides\",{\"1\":{\"1040\":1}}],[\"provider\",{\"1\":{\"96\":1,\"1059\":1}}],[\"promise\",{\"1\":{\"873\":2}}],[\"promos\",{\"1\":{\"776\":4}}],[\"promo\",{\"1\":{\"776\":18}}],[\"promotion\",{\"1\":{\"776\":4}}],[\"promotion=none\",{\"1\":{\"776\":1}}],[\"promotions\",{\"1\":{\"776\":2}}],[\"prometheus\",{\"1\":{\"555\":1}}],[\"property\",{\"1\":{\"776\":1,\"849\":1,\"856\":3,\"1010\":1,\"1049\":1,\"1187\":1,\"1188\":2}}],[\"properties\",{\"1\":{\"70\":1}}],[\"protect\",{\"1\":{\"769\":1}}],[\"protocol\",{\"1\":{\"87\":1,\"88\":1,\"90\":2,\"93\":1,\"966\":1}}],[\"proto=tcp\",{\"1\":{\"73\":3}}],[\"prog=\",{\"1\":{\"567\":1}}],[\"progress\",{\"1\":{\"681\":1}}],[\"progressdeadlineexceeded\",{\"1\":{\"160\":1}}],[\"progressdeadlineseconds\",{\"0\":{\"160\":1},\"1\":{\"153\":1,\"160\":1}}],[\"progressing\",{\"1\":{\"160\":1}}],[\"processors\",{\"1\":{\"1059\":1}}],[\"processors=\",{\"1\":{\"1059\":2}}],[\"processor\",{\"1\":{\"1059\":2,\"1124\":2,\"1137\":2}}],[\"processes\",{\"1\":{\"725\":1}}],[\"processpoolexecutor\",{\"0\":{\"709\":1},\"1\":{\"709\":2,\"710\":1}}],[\"processing\",{\"1\":{\"565\":4}}],[\"process\",{\"1\":{\"548\":1,\"565\":2,\"681\":4,\"706\":2,\"708\":1,\"710\":1,\"713\":5,\"717\":5,\"725\":2,\"751\":2,\"924\":2,\"1103\":2,\"1187\":1,\"1282\":5}}],[\"project\",{\"1\":{\"542\":1}}],[\"projectcalico\",{\"1\":{\"108\":1}}],[\"probe02\",{\"1\":{\"147\":2}}],[\"proxy默认的配置\",{\"1\":{\"108\":1}}],[\"proxy的ipvs模式\",{\"1\":{\"108\":1}}],[\"proxy\",{\"0\":{\"769\":1},\"1\":{\"108\":8,\"114\":1,\"124\":1,\"706\":1,\"771\":1,\"854\":3,\"1049\":3,\"1101\":1}}],[\"product\",{\"1\":{\"776\":4}}],[\"producer线程不断向队列中添加\",{\"1\":{\"916\":1}}],[\"producer\",{\"1\":{\"713\":1,\"916\":4}}],[\"prode配置\",{\"0\":{\"147\":1}}],[\"prode探针机制\",{\"0\":{\"145\":1}}],[\"prod\",{\"1\":{\"73\":1,\"118\":2}}],[\"pwd=\",{\"1\":{\"73\":1}}],[\"php\",{\"1\":{\"73\":7,\"165\":2}}],[\"popleft\",{\"1\":{\"911\":1,\"912\":1}}],[\"populates\",{\"1\":{\"886\":1}}],[\"populates=\",{\"1\":{\"886\":2}}],[\"pop的栈方法来操作对象\",{\"1\":{\"856\":1}}],[\"pop方法\",{\"1\":{\"856\":1}}],[\"popped是一个信号\",{\"1\":{\"1122\":1,\"1135\":1}}],[\"popped\",{\"0\":{\"1122\":1,\"1135\":1},\"1\":{\"844\":2,\"1050\":4,\"1102\":1,\"1110\":2}}],[\"pops\",{\"1\":{\"844\":1,\"1050\":2}}],[\"pop\",{\"0\":{\"1085\":1},\"1\":{\"839\":2,\"844\":3,\"854\":1,\"856\":4,\"908\":2,\"909\":1,\"911\":1,\"919\":3,\"1003\":2,\"1049\":3,\"1050\":9,\"1063\":2,\"1073\":2,\"1074\":1,\"1084\":1,\"1085\":1,\"1094\":1,\"1098\":1,\"1100\":1,\"1102\":3,\"1104\":1,\"1198\":1,\"1221\":4,\"1379\":1}}],[\"point\",{\"1\":{\"390\":1,\"680\":1,\"881\":1,\"1183\":2,\"1194\":1,\"1282\":6}}],[\"point搭配\",{\"1\":{\"390\":1}}],[\"pointer\",{\"1\":{\"325\":1,\"476\":1}}],[\"position\",{\"1\":{\"1354\":2}}],[\"positional\",{\"1\":{\"1188\":7}}],[\"pos\",{\"1\":{\"390\":4}}],[\"pos和check\",{\"1\":{\"390\":1}}],[\"possiblebipartition\",{\"1\":{\"1237\":1}}],[\"possible\",{\"1\":{\"349\":1,\"1182\":4}}],[\"posts\",{\"0\":{\"1410\":1}}],[\"poststart\",{\"1\":{\"135\":6}}],[\"post\",{\"1\":{\"552\":1,\"862\":1,\"873\":1,\"1063\":1,\"1094\":1,\"1143\":1,\"1144\":1,\"1149\":2,\"1150\":1,\"1151\":1}}],[\"postman\",{\"1\":{\"165\":1}}],[\"poolclass=nullpool\",{\"1\":{\"879\":1}}],[\"poolclass=queuepool\",{\"1\":{\"579\":1}}],[\"pool并行计算\",{\"1\":{\"720\":1}}],[\"pool=gevent\",{\"1\":{\"666\":1}}],[\"pool=eventlet\",{\"1\":{\"665\":1}}],[\"pool=prefork\",{\"1\":{\"664\":1}}],[\"pool=solo\",{\"1\":{\"662\":1,\"667\":1}}],[\"pooling\",{\"1\":{\"578\":1}}],[\"pool中的数据\",{\"1\":{\"425\":1}}],[\"pool中的地址等信息\",{\"1\":{\"318\":1}}],[\"pool中\",{\"1\":{\"389\":1}}],[\"pool默认大小是128m\",{\"1\":{\"318\":1}}],[\"pool由缓存数据页\",{\"1\":{\"318\":1}}],[\"pool\",{\"0\":{\"317\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1},\"1\":{\"318\":1,\"332\":1,\"425\":1,\"460\":1,\"578\":2,\"579\":3,\"580\":1,\"599\":1,\"659\":1,\"662\":1,\"664\":2,\"665\":1,\"666\":1,\"667\":1,\"708\":3,\"710\":1,\"712\":2,\"720\":2,\"879\":1}}],[\"pool简称bp\",{\"1\":{\"312\":1}}],[\"poll\",{\"1\":{\"268\":1,\"269\":1}}],[\"port由选择器决定\",{\"1\":{\"87\":1}}],[\"ports\",{\"1\":{\"87\":1,\"88\":1,\"90\":1,\"93\":2,\"133\":1,\"147\":1}}],[\"port\",{\"1\":{\"73\":13,\"87\":1,\"88\":1,\"90\":2,\"93\":2,\"97\":2,\"101\":1,\"124\":1,\"125\":3,\"147\":2,\"262\":1,\"680\":1,\"1064\":13}}],[\"port=flaskconfig\",{\"1\":{\"680\":1}}],[\"port=5555\",{\"1\":{\"660\":1}}],[\"port=8912\",{\"1\":{\"125\":1}}],[\"port=8080\",{\"1\":{\"125\":1}}],[\"port=80\",{\"1\":{\"73\":2,\"125\":1}}],[\"port=8848\",{\"1\":{\"73\":2}}],[\"port=443\",{\"1\":{\"73\":2}}],[\"port=tcp\",{\"1\":{\"73\":3}}],[\"pod成功运行\",{\"1\":{\"198\":1}}],[\"pod资源\",{\"1\":{\"164\":1}}],[\"podtemplatespec\",{\"1\":{\"163\":1}}],[\"pod的重启策略\",{\"0\":{\"143\":1}}],[\"pod就不对外提供服务了\",{\"1\":{\"142\":1}}],[\"pod只要是notready\",{\"1\":{\"142\":1}}],[\"pod开始正式工作\",{\"1\":{\"142\":1}}],[\"pod启动\",{\"1\":{\"142\":1}}],[\"pod为其成员容器提供两种共享资源\",{\"1\":{\"141\":1}}],[\"pod分为单容器和多容器\",{\"1\":{\"141\":1}}],[\"pod不能恢复自己\",{\"1\":{\"141\":1}}],[\"pod自动重启失败的容器\",{\"1\":{\"141\":1}}],[\"pod对于容器有自律能力\",{\"1\":{\"141\":1}}],[\"pod对象\",{\"0\":{\"115\":1}}],[\"pod特点\",{\"0\":{\"141\":1}}],[\"pod是一组\",{\"1\":{\"140\":1}}],[\"pod概念\",{\"0\":{\"140\":1}}],[\"pod容器的端口\",{\"1\":{\"125\":1}}],[\"pod名称\",{\"1\":{\"125\":1}}],[\"pod名\",{\"1\":{\"125\":1}}],[\"pods\",{\"1\":{\"125\":2,\"181\":2}}],[\"pod中使用secret\",{\"0\":{\"81\":1}}],[\"pod\",{\"1\":{\"69\":4,\"70\":1,\"73\":2,\"74\":3,\"76\":3,\"81\":1,\"86\":5,\"96\":1,\"108\":3,\"114\":4,\"115\":8,\"116\":4,\"117\":4,\"125\":6,\"130\":2,\"135\":3,\"136\":1,\"143\":2,\"147\":2,\"148\":1,\"154\":1,\"155\":1,\"156\":1,\"158\":2,\"159\":15,\"161\":3,\"165\":1,\"177\":1,\"186\":4,\"190\":5,\"196\":2,\"197\":4,\"198\":3}}],[\"panama\",{\"1\":{\"1297\":1}}],[\"pandas\",{\"1\":{\"806\":1}}],[\"pandas也起到了适配器的作用\",{\"1\":{\"797\":1}}],[\"pandas是基于numpy构建的\",{\"1\":{\"797\":1}}],[\"pandas可以读取多种不同格式的数据文件\",{\"1\":{\"797\":1}}],[\"pandas确实体现了适配器模式的核心思想\",{\"1\":{\"797\":1}}],[\"paginate\",{\"1\":{\"862\":1}}],[\"page=self\",{\"1\":{\"862\":2}}],[\"page的刷脏也像数据一样要等到对应的redo\",{\"1\":{\"389\":1}}],[\"page页默认大小16k\",{\"1\":{\"318\":1}}],[\"page\",{\"1\":{\"1\":2,\"318\":1,\"468\":1,\"469\":1,\"862\":7}}],[\"payload\",{\"0\":{\"696\":1},\"1\":{\"693\":1,\"872\":8,\"873\":4,\"1147\":1,\"1150\":1}}],[\"paid\",{\"1\":{\"573\":1}}],[\"parent\",{\"1\":{\"1188\":2,\"1226\":4,\"1227\":21,\"1229\":6,\"1230\":6}}],[\"parse\",{\"1\":{\"1188\":1,\"1194\":2}}],[\"parsers\",{\"1\":{\"1194\":1}}],[\"parsers=settings\",{\"1\":{\"1194\":1}}],[\"parser\",{\"1\":{\"332\":1}}],[\"parallelmachine\",{\"1\":{\"570\":2}}],[\"parallel\",{\"1\":{\"570\":1}}],[\"parallel=true\",{\"1\":{\"570\":2}}],[\"parallelism\",{\"1\":{\"198\":1}}],[\"params=\",{\"1\":{\"1151\":1}}],[\"params\",{\"1\":{\"862\":4}}],[\"param\",{\"1\":{\"531\":2,\"533\":6,\"863\":3,\"932\":3,\"933\":1,\"1189\":2}}],[\"part\",{\"1\":{\"1180\":4}}],[\"parttimeemployee\",{\"1\":{\"1180\":2}}],[\"parttime\",{\"1\":{\"1180\":11}}],[\"partitionlabels\",{\"1\":{\"1385\":1}}],[\"partition\",{\"1\":{\"1064\":1}}],[\"partitions\",{\"1\":{\"349\":1}}],[\"partial\",{\"1\":{\"468\":1,\"856\":3,\"936\":2,\"1045\":3}}],[\"parts\",{\"1\":{\"460\":1}}],[\"patrol\",{\"1\":{\"881\":1}}],[\"pattern\",{\"0\":{\"769\":1,\"770\":1},\"1\":{\"767\":1,\"775\":1,\"780\":1,\"788\":1,\"1177\":1}}],[\"patcher\",{\"1\":{\"665\":1}}],[\"patch资源的更新字段\",{\"1\":{\"124\":1}}],[\"patch\",{\"0\":{\"586\":1,\"588\":1,\"589\":1,\"593\":1},\"1\":{\"124\":1,\"587\":2,\"588\":1,\"590\":1,\"591\":1,\"594\":2,\"595\":2,\"597\":1,\"600\":1,\"669\":2,\"680\":1,\"682\":1}}],[\"path数组相当于绿色的数组\",{\"1\":{\"1220\":1}}],[\"pathlike\",{\"1\":{\"1059\":6}}],[\"paths\",{\"1\":{\"101\":1}}],[\"pathtype\",{\"1\":{\"100\":2,\"101\":1}}],[\"path=instance\",{\"1\":{\"1059\":1}}],[\"path=root\",{\"1\":{\"1059\":2}}],[\"path=static\",{\"1\":{\"1059\":2}}],[\"path=path\",{\"1\":{\"689\":1}}],[\"path=\",{\"1\":{\"73\":1}}],[\"path\",{\"1\":{\"64\":1,\"67\":3,\"97\":1,\"100\":1,\"101\":1,\"147\":4,\"460\":4,\"662\":7,\"681\":1,\"758\":1,\"849\":2,\"935\":3,\"936\":1,\"1010\":2,\"1052\":1,\"1059\":25,\"1194\":2,\"1220\":3,\"1221\":22,\"1241\":5,\"1242\":5,\"1379\":9}}],[\"paused\",{\"0\":{\"163\":1},\"1\":{\"153\":1,\"163\":1}}],[\"pause\",{\"1\":{\"108\":1,\"165\":1}}],[\"package\",{\"1\":{\"108\":1}}],[\"password=<你的密码>\",{\"1\":{\"81\":1}}],[\"password\",{\"1\":{\"80\":1,\"549\":2,\"552\":1,\"579\":1,\"828\":2,\"843\":1}}],[\"pass\",{\"1\":{\"79\":3,\"531\":2,\"533\":2,\"545\":1,\"548\":2,\"549\":1,\"658\":1,\"662\":5,\"679\":2,\"713\":1,\"717\":1,\"751\":3,\"758\":1,\"776\":1,\"782\":1,\"791\":1,\"792\":2,\"806\":3,\"832\":1,\"862\":3,\"900\":1,\"902\":4,\"930\":1,\"996\":1,\"1088\":1,\"1149\":4,\"1151\":1,\"1180\":3,\"1225\":3}}],[\"pv03\",{\"1\":{\"67\":1}}],[\"pv02\",{\"1\":{\"67\":1}}],[\"pv01\",{\"1\":{\"67\":1}}],[\"pvc创建和绑定\",{\"1\":{\"67\":1}}],[\"pvc\",{\"1\":{\"66\":1,\"67\":6}}],[\"pv和pvc\",{\"0\":{\"65\":1}}],[\"pv\",{\"1\":{\"64\":5,\"66\":1}}],[\"p\",{\"1\":{\"63\":2,\"67\":3,\"100\":3,\"108\":2,\"260\":1,\"262\":1,\"706\":3,\"708\":2,\"712\":2,\"713\":1,\"717\":6,\"720\":2,\"1225\":2,\"1226\":1,\"1227\":17,\"1229\":12,\"1230\":12}}],[\"a需要不等于b\",{\"0\":{\"1330\":1}}],[\"a+1\",{\"1\":{\"1325\":1}}],[\"a+b\",{\"1\":{\"992\":1}}],[\"axc\",{\"1\":{\"1313\":1}}],[\"aec\",{\"1\":{\"1308\":1,\"1313\":1}}],[\"aa\",{\"1\":{\"1299\":2}}],[\"aaa\",{\"1\":{\"1299\":2}}],[\"amanaplanacanalpanama\",{\"1\":{\"1297\":1}}],[\"amount\",{\"1\":{\"1275\":6}}],[\"a的所有子节点直接挂到a上\",{\"1\":{\"1225\":1}}],[\"a是5\",{\"1\":{\"992\":1}}],[\"a和b都是外函数的临时变量\",{\"1\":{\"992\":1}}],[\"a=~a+1\",{\"1\":{\"1325\":1}}],[\"a=2\",{\"1\":{\"947\":1}}],[\"a=1\",{\"1\":{\"947\":1}}],[\"a=3\",{\"1\":{\"941\":1}}],[\"ai\",{\"1\":{\"1230\":4,\"1237\":3,\"1241\":3,\"1242\":5}}],[\"aiohttp\",{\"1\":{\"924\":2,\"925\":2,\"1169\":1}}],[\"airflow\",{\"0\":{\"714\":1},\"1\":{\"714\":2}}],[\"airflow中大量使用多进程来实现任务的运行\",{\"1\":{\"702\":1}}],[\"a2\",{\"1\":{\"783\":1}}],[\"a1\",{\"1\":{\"783\":1}}],[\"argv\",{\"1\":{\"1194\":1}}],[\"arguments\",{\"1\":{\"1194\":10}}],[\"arguments=none\",{\"1\":{\"1194\":1}}],[\"argumentspec|none\",{\"1\":{\"1188\":1}}],[\"argumentparser\",{\"1\":{\"1193\":1}}],[\"argument\",{\"1\":{\"1188\":2}}],[\"arg\",{\"1\":{\"1049\":2,\"1193\":3}}],[\"args=self\",{\"1\":{\"1187\":1}}],[\"args=\",{\"1\":{\"706\":1,\"713\":3,\"916\":2,\"1049\":1}}],[\"args\",{\"1\":{\"133\":1,\"134\":1,\"203\":1,\"549\":1,\"661\":1,\"757\":2,\"783\":2,\"784\":3,\"833\":2,\"834\":2,\"839\":4,\"862\":1,\"900\":1,\"932\":2,\"933\":2,\"997\":2,\"998\":2,\"1003\":4,\"1057\":1,\"1088\":1,\"1101\":1,\"1103\":4,\"1112\":1,\"1124\":1,\"1187\":4,\"1188\":20}}],[\"are\",{\"1\":{\"1040\":1}}],[\"areaschema\",{\"1\":{\"881\":1}}],[\"area\",{\"1\":{\"881\":3,\"882\":2,\"1377\":2}}],[\"arr\",{\"1\":{\"706\":5,\"713\":3,\"716\":5}}],[\"arraylist的实现\",{\"1\":{\"762\":1}}],[\"arraylist\",{\"1\":{\"762\":1}}],[\"array\",{\"1\":{\"706\":2}}],[\"array通过shmget\",{\"1\":{\"706\":1}}],[\"audience\",{\"1\":{\"696\":1}}],[\"aud\",{\"1\":{\"696\":1}}],[\"automatic\",{\"1\":{\"1063\":9,\"1094\":9,\"1103\":1}}],[\"autoincrement=true\",{\"1\":{\"861\":1,\"879\":1}}],[\"auto\",{\"1\":{\"260\":2,\"262\":4,\"567\":1,\"570\":1,\"843\":1,\"849\":2,\"861\":1,\"862\":3,\"879\":1,\"881\":6,\"887\":2,\"1010\":2,\"1193\":2}}],[\"autoselector设置为true\",{\"1\":{\"198\":1}}],[\"autoselector默认为false\",{\"1\":{\"198\":1}}],[\"autoscale\",{\"1\":{\"124\":1}}],[\"auth=none\",{\"1\":{\"872\":1}}],[\"author\",{\"1\":{\"531\":1,\"662\":4,\"679\":1,\"680\":1,\"827\":2,\"861\":1,\"862\":1,\"863\":1,\"872\":2,\"879\":1,\"880\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"auth\",{\"1\":{\"124\":1,\"822\":1,\"828\":2,\"831\":1,\"843\":1,\"849\":1,\"872\":2,\"873\":2,\"1010\":1}}],[\"awaitshield\",{\"1\":{\"1040\":1}}],[\"awaitsleep\",{\"1\":{\"1040\":1}}],[\"awaitwait\",{\"1\":{\"1040\":2}}],[\"awaitgather\",{\"1\":{\"1040\":1}}],[\"await语法\",{\"1\":{\"923\":1}}],[\"await\",{\"0\":{\"923\":1},\"1\":{\"681\":4,\"736\":1,\"924\":5,\"925\":5,\"1049\":2,\"1071\":1,\"1079\":1,\"1087\":1,\"1088\":1,\"1161\":1,\"1167\":2,\"1172\":1}}],[\"abpcplea\",{\"1\":{\"1380\":2}}],[\"ababcbacadefegde\",{\"1\":{\"1385\":1}}],[\"ababcbacadefegdehijhklij\",{\"1\":{\"1385\":1}}],[\"ababcbaca\",{\"1\":{\"1385\":1}}],[\"aba\",{\"1\":{\"1259\":1,\"1297\":1,\"1299\":1}}],[\"aborter\",{\"1\":{\"1059\":4}}],[\"abort\",{\"1\":{\"863\":3}}],[\"abs\",{\"1\":{\"1365\":1}}],[\"abstracthandler\",{\"1\":{\"806\":4}}],[\"abstractbikefactory\",{\"1\":{\"792\":4}}],[\"abstractfactory\",{\"1\":{\"791\":4}}],[\"abstractmethod\",{\"1\":{\"776\":2,\"791\":2,\"792\":2,\"806\":6}}],[\"abstract\",{\"1\":{\"767\":1,\"849\":1,\"861\":1,\"879\":1,\"1010\":1}}],[\"abspath\",{\"1\":{\"662\":1}}],[\"abcde\",{\"1\":{\"1308\":3,\"1313\":1}}],[\"abca\",{\"1\":{\"1297\":1}}],[\"abc\",{\"1\":{\"147\":6,\"416\":2,\"776\":3,\"791\":3,\"792\":1,\"806\":6,\"1297\":1,\"1299\":1,\"1308\":4,\"1313\":1}}],[\"aong\",{\"1\":{\"662\":4,\"679\":1,\"680\":1,\"861\":1,\"862\":1,\"863\":1,\"886\":1,\"887\":1,\"888\":1}}],[\"aof重演命令式的恢复数据\",{\"1\":{\"263\":1}}],[\"aof重写\",{\"1\":{\"260\":1,\"261\":1}}],[\"aof方式生成的日志文件太大\",{\"1\":{\"263\":1}}],[\"aof只是追加写日志文件\",{\"1\":{\"263\":1}}],[\"aof的优缺点\",{\"0\":{\"263\":1}}],[\"aof触发机制也分为\",{\"1\":{\"262\":1}}],[\"aof是文件操作\",{\"1\":{\"260\":1}}],[\"aof文件的过程\",{\"1\":{\"261\":1}}],[\"aof文件增长到a\",{\"1\":{\"260\":1}}],[\"aof文件rewrite触发的最小文件尺寸\",{\"1\":{\"260\":1}}],[\"aof默认是关闭的\",{\"1\":{\"260\":1}}],[\"aof日志会在持续运行中持续增大\",{\"1\":{\"259\":1,\"261\":1}}],[\"aof日志是持续增量的备份\",{\"1\":{\"259\":1}}],[\"aof持久化任务\",{\"1\":{\"257\":1}}],[\"aof\",{\"0\":{\"259\":1},\"1\":{\"255\":3,\"260\":4,\"261\":2,\"262\":12,\"264\":6}}],[\"after\",{\"1\":{\"566\":1,\"1059\":7,\"1060\":1,\"1062\":3,\"1098\":1,\"1100\":1,\"1103\":4,\"1108\":1,\"1124\":5,\"1137\":1}}],[\"affected\",{\"1\":{\"503\":2,\"513\":1}}],[\"ahbgdc\",{\"1\":{\"1313\":2}}],[\"ahi\",{\"1\":{\"460\":1}}],[\"ahead\",{\"1\":{\"382\":1}}],[\"ages\",{\"1\":{\"529\":1}}],[\"age\",{\"1\":{\"415\":2,\"416\":2,\"455\":7,\"531\":2,\"533\":3,\"534\":9,\"758\":1,\"824\":6,\"825\":2,\"1150\":1}}],[\"a表\",{\"1\":{\"407\":2}}],[\"attr\",{\"1\":{\"880\":2,\"1063\":1,\"1094\":2,\"1103\":1}}],[\"attributeerror\",{\"1\":{\"854\":2,\"856\":1,\"1049\":3,\"1050\":2}}],[\"attrs\",{\"1\":{\"849\":3,\"861\":3,\"879\":3,\"1010\":3}}],[\"attach\",{\"1\":{\"124\":1}}],[\"atomicity\",{\"1\":{\"425\":1}}],[\"at\",{\"1\":{\"388\":1,\"847\":1,\"848\":2,\"1009\":3,\"1023\":1,\"1050\":1,\"1063\":1,\"1094\":2,\"1102\":1}}],[\"a白干了\",{\"1\":{\"283\":1}}],[\"a还更新完mysql\",{\"1\":{\"283\":1}}],[\"a还么有彻底更新完\",{\"1\":{\"283\":1}}],[\"a线程先删除缓存数据\",{\"1\":{\"283\":1}}],[\"adaptee\",{\"1\":{\"799\":7}}],[\"adapter\",{\"1\":{\"799\":7,\"844\":2,\"1050\":4,\"1094\":8,\"1100\":4}}],[\"adaptive\",{\"1\":{\"460\":3}}],[\"adatptive\",{\"1\":{\"312\":1,\"460\":1}}],[\"advanced\",{\"0\":{\"606\":1},\"1\":{\"124\":1}}],[\"advertise\",{\"1\":{\"108\":2}}],[\"admin\",{\"1\":{\"108\":2}}],[\"adding\",{\"1\":{\"1187\":2}}],[\"added\",{\"1\":{\"1094\":1}}],[\"address=0\",{\"1\":{\"660\":1}}],[\"address=192\",{\"1\":{\"108\":1}}],[\"address\",{\"1\":{\"108\":1}}],[\"addr=10\",{\"1\":{\"73\":3}}],[\"add\",{\"1\":{\"108\":1,\"245\":1,\"447\":1,\"448\":1,\"449\":1,\"450\":1,\"651\":1,\"652\":2,\"654\":1,\"656\":1,\"661\":1,\"722\":1,\"843\":1,\"862\":1,\"930\":4,\"1033\":1,\"1059\":2,\"1063\":5,\"1094\":5}}],[\"anellena\",{\"1\":{\"1300\":1}}],[\"anbna\",{\"1\":{\"1300\":1}}],[\"answer\",{\"1\":{\"1341\":2}}],[\"ans\",{\"1\":{\"1207\":3,\"1208\":3,\"1209\":3,\"1282\":3,\"1341\":3,\"1354\":3}}],[\"anchor=\",{\"1\":{\"1094\":1}}],[\"anchor\",{\"1\":{\"1094\":6}}],[\"an\",{\"1\":{\"843\":1,\"844\":1,\"849\":1,\"1010\":1,\"1040\":2,\"1050\":2,\"1063\":1,\"1094\":1,\"1103\":2}}],[\"anna\",{\"1\":{\"1300\":1}}],[\"annabelle\",{\"1\":{\"1300\":1}}],[\"ann\",{\"1\":{\"776\":4}}],[\"annotate\",{\"1\":{\"124\":1}}],[\"annotation\",{\"1\":{\"119\":1,\"120\":1}}],[\"annotation注解\",{\"0\":{\"119\":1}}],[\"annotations\",{\"1\":{\"101\":1,\"119\":2,\"776\":1,\"806\":1}}],[\"anything\",{\"1\":{\"1258\":1}}],[\"any\",{\"1\":{\"681\":1,\"806\":5,\"827\":2,\"880\":2,\"1050\":8,\"1059\":2,\"1063\":2,\"1064\":1,\"1094\":2,\"1103\":2,\"1187\":1,\"1188\":1}}],[\"android\",{\"1\":{\"118\":1}}],[\"and\",{\"1\":{\"1\":1,\"87\":1,\"124\":1,\"125\":1,\"415\":1,\"455\":1,\"827\":2,\"844\":1,\"849\":1,\"861\":1,\"879\":1,\"880\":1,\"1010\":1,\"1017\":1,\"1040\":1,\"1050\":2,\"1063\":1,\"1094\":3,\"1098\":1,\"1100\":1,\"1103\":1,\"1104\":1,\"1187\":1,\"1198\":4,\"1229\":1,\"1257\":5,\"1259\":2,\"1276\":2,\"1297\":2,\"1299\":4,\"1339\":1,\"1352\":2,\"1353\":2,\"1354\":1,\"1364\":1,\"1365\":1,\"1366\":1,\"1376\":1,\"1379\":3,\"1380\":1,\"1384\":1}}],[\"ale\",{\"1\":{\"1380\":3}}],[\"already\",{\"1\":{\"856\":1,\"1050\":1,\"1189\":1}}],[\"also\",{\"1\":{\"844\":1,\"1050\":1}}],[\"algorithms=\",{\"1\":{\"872\":1}}],[\"algorithm=\",{\"1\":{\"872\":1}}],[\"algorithm\",{\"1\":{\"776\":4}}],[\"alarm\",{\"1\":{\"662\":1}}],[\"alive\",{\"1\":{\"717\":1}}],[\"alice\",{\"1\":{\"552\":1,\"1282\":3}}],[\"aliyun\",{\"1\":{\"108\":4}}],[\"aliyuncs\",{\"1\":{\"96\":1,\"108\":5}}],[\"alter\",{\"1\":{\"447\":1,\"448\":1,\"449\":1,\"450\":1,\"494\":1}}],[\"alpine\",{\"1\":{\"135\":1}}],[\"always\",{\"1\":{\"133\":2,\"143\":2,\"260\":2,\"654\":1,\"1094\":2}}],[\"allpathssourcetarget\",{\"1\":{\"1221\":3}}],[\"all查询遍历全表\",{\"1\":{\"349\":1}}],[\"allkeys\",{\"1\":{\"212\":3}}],[\"allowed\",{\"1\":{\"679\":1,\"1063\":1,\"1094\":1}}],[\"allow\",{\"1\":{\"201\":1,\"202\":1,\"1194\":1}}],[\"allocateloadbalancernodeports\",{\"1\":{\"87\":1}}],[\"all\",{\"0\":{\"586\":1,\"588\":1,\"589\":1,\"593\":1},\"1\":{\"108\":2,\"125\":1,\"349\":2,\"350\":1,\"587\":2,\"588\":1,\"590\":1,\"591\":1,\"594\":2,\"600\":1,\"680\":1,\"682\":1,\"1040\":3,\"1331\":3}}],[\"ace\",{\"1\":{\"1308\":3,\"1313\":1}}],[\"acquire\",{\"1\":{\"1033\":3}}],[\"ack确认机制\",{\"0\":{\"961\":1}}],[\"ack确认的数据\",{\"1\":{\"959\":2}}],[\"ack\",{\"1\":{\"951\":1,\"952\":3,\"953\":6,\"954\":2}}],[\"account\",{\"1\":{\"873\":1}}],[\"accept\",{\"1\":{\"648\":1,\"1180\":7}}],[\"accessor\",{\"1\":{\"880\":2}}],[\"access\",{\"1\":{\"349\":1,\"769\":1}}],[\"accessmodes\",{\"1\":{\"67\":4}}],[\"ac\",{\"1\":{\"872\":3,\"873\":2}}],[\"acid总结\",{\"1\":{\"425\":1}}],[\"acid\",{\"1\":{\"425\":1}}],[\"active\",{\"1\":{\"861\":2,\"862\":3,\"879\":3,\"880\":2,\"882\":5,\"887\":1,\"1050\":1,\"1102\":1}}],[\"activedeadlineseconds\",{\"1\":{\"197\":1,\"198\":2}}],[\"actions\",{\"1\":{\"553\":1,\"555\":2}}],[\"actions等\",{\"1\":{\"52\":1}}],[\"actions等工具就完成了流水线部署\",{\"1\":{\"42\":1}}],[\"ap\",{\"1\":{\"1193\":1,\"1194\":2}}],[\"apscheduler\",{\"0\":{\"606\":1,\"607\":1},\"1\":{\"606\":1,\"607\":3,\"680\":1}}],[\"apiconnected和union中的复杂度都是find函数造成的\",{\"1\":{\"1225\":1}}],[\"apiexception\",{\"1\":{\"827\":2}}],[\"apiurl\",{\"1\":{\"681\":1}}],[\"apis\",{\"1\":{\"662\":3,\"680\":1,\"887\":1,\"888\":2}}],[\"apiserver\",{\"1\":{\"108\":3}}],[\"api服务器运行代理\",{\"1\":{\"124\":1}}],[\"api\",{\"0\":{\"1140\":1,\"1141\":1,\"1144\":1,\"1145\":1},\"1\":{\"86\":1,\"93\":1,\"95\":1,\"112\":1,\"124\":2,\"156\":1,\"227\":2,\"591\":1,\"662\":1,\"679\":2,\"680\":1,\"690\":1,\"770\":1,\"822\":2,\"827\":2,\"831\":2,\"849\":5,\"862\":6,\"872\":1,\"873\":3,\"1010\":5,\"1142\":1,\"1144\":1,\"1146\":3,\"1147\":11,\"1150\":3,\"1151\":2,\"1152\":3,\"1154\":1,\"1155\":2,\"1156\":1}}],[\"apiversion\",{\"1\":{\"64\":1,\"67\":5,\"73\":3,\"80\":1,\"81\":1,\"88\":1,\"90\":1,\"93\":2,\"101\":1,\"135\":1,\"136\":1,\"147\":1,\"197\":1,\"203\":1}}],[\"apache\",{\"1\":{\"73\":7,\"714\":1}}],[\"app`\",{\"1\":{\"1057\":1}}],[\"appctxglobals\",{\"1\":{\"1045\":1,\"1050\":2,\"1059\":2}}],[\"appcontext原来是个上下文\",{\"1\":{\"844\":1}}],[\"appcontext\",{\"0\":{\"1085\":1,\"1120\":1,\"1121\":1,\"1122\":1,\"1133\":1,\"1134\":1,\"1135\":1},\"1\":{\"844\":4,\"1045\":2,\"1050\":10,\"1059\":1,\"1076\":1,\"1085\":1,\"1110\":6,\"1120\":1,\"1121\":1,\"1122\":1,\"1133\":1,\"1134\":1,\"1135\":1}}],[\"application\",{\"1\":{\"843\":2,\"844\":5,\"1050\":1,\"1057\":2,\"1166\":1,\"1167\":1,\"1193\":2}}],[\"applepenapple\",{\"1\":{\"1276\":2}}],[\"apple\",{\"1\":{\"731\":1,\"776\":2,\"902\":5,\"942\":1,\"1276\":3,\"1380\":4}}],[\"apply\",{\"1\":{\"80\":1,\"108\":1,\"124\":1,\"125\":1,\"155\":1,\"555\":1,\"708\":1,\"1057\":1}}],[\"app=app\",{\"1\":{\"653\":1}}],[\"approved\",{\"1\":{\"573\":1}}],[\"approve\",{\"1\":{\"573\":1}}],[\"appendleft和popleft\",{\"1\":{\"912\":1}}],[\"appendleft\",{\"1\":{\"911\":1}}],[\"appendfsync是否暂缓文件同步\",{\"1\":{\"260\":1}}],[\"appendfsync\",{\"1\":{\"260\":2}}],[\"appendfilename\",{\"1\":{\"260\":1}}],[\"appendonly\",{\"1\":{\"260\":2}}],[\"append\",{\"0\":{\"259\":1},\"1\":{\"227\":1,\"839\":1,\"856\":1,\"861\":1,\"862\":2,\"908\":3,\"911\":1,\"912\":6,\"1003\":1,\"1024\":1,\"1049\":2,\"1050\":1,\"1062\":1,\"1100\":1,\"1187\":1,\"1198\":1,\"1221\":7,\"1229\":2,\"1237\":2,\"1241\":1,\"1242\":2,\"1257\":1,\"1338\":1,\"1339\":1,\"1379\":2,\"1384\":1,\"1385\":1}}],[\"appprotocol\",{\"1\":{\"87\":1}}],[\"appversion\",{\"1\":{\"73\":2}}],[\"app\",{\"0\":{\"1064\":1,\"1076\":1},\"1\":{\"64\":3,\"67\":3,\"73\":2,\"88\":1,\"90\":1,\"93\":2,\"135\":1,\"147\":4,\"542\":4,\"555\":5,\"648\":3,\"649\":1,\"651\":3,\"654\":1,\"657\":1,\"658\":1,\"660\":1,\"661\":1,\"662\":18,\"664\":3,\"665\":2,\"666\":2,\"667\":2,\"679\":2,\"680\":8,\"721\":1,\"722\":2,\"757\":1,\"827\":1,\"843\":2,\"844\":15,\"849\":1,\"856\":5,\"872\":4,\"873\":6,\"1010\":1,\"1045\":15,\"1050\":38,\"1057\":5,\"1059\":14,\"1062\":2,\"1063\":1,\"1071\":2,\"1073\":1,\"1074\":2,\"1076\":2,\"1077\":6,\"1078\":1,\"1079\":1,\"1082\":2,\"1084\":1,\"1085\":2,\"1088\":1,\"1094\":11,\"1098\":2,\"1100\":24,\"1101\":1,\"1102\":5,\"1104\":3,\"1112\":4,\"1124\":14,\"1147\":3,\"1194\":2}}],[\"apps\",{\"1\":{\"64\":1,\"67\":1,\"125\":2,\"165\":10}}],[\"apt\",{\"1\":{\"63\":1}}],[\"asgiref\",{\"1\":{\"1164\":1}}],[\"asgi\",{\"0\":{\"1159\":1,\"1160\":1,\"1167\":1,\"1170\":1},\"1\":{\"1161\":1,\"1162\":1,\"1163\":1,\"1164\":3,\"1169\":1,\"1170\":1,\"1171\":1,\"1172\":1,\"1173\":3}}],[\"assign\",{\"1\":{\"1194\":6}}],[\"assignment\",{\"1\":{\"1103\":2}}],[\"assertionerror\",{\"1\":{\"1050\":1,\"1063\":1,\"1094\":1,\"1102\":1}}],[\"assert失败时\",{\"1\":{\"756\":1}}],[\"assert主要用于自我检查\",{\"1\":{\"756\":1}}],[\"assert语句是一种强大的工具\",{\"1\":{\"756\":1}}],[\"assert\",{\"0\":{\"756\":1},\"1\":{\"552\":3,\"756\":1,\"844\":1,\"1050\":1,\"1094\":1,\"1266\":2}}],[\"asdict\",{\"1\":{\"827\":1}}],[\"askleave\",{\"1\":{\"806\":4}}],[\"async关键字用于声明一个协程函数\",{\"1\":{\"923\":1}}],[\"asynchronous\",{\"1\":{\"898\":2,\"899\":1,\"1161\":1}}],[\"async等接口\",{\"1\":{\"708\":1}}],[\"async\",{\"1\":{\"679\":1,\"681\":1,\"736\":5,\"924\":5,\"925\":4,\"1040\":1,\"1049\":3,\"1050\":2,\"1071\":1,\"1079\":4,\"1087\":1,\"1088\":2,\"1103\":2,\"1111\":1,\"1112\":1,\"1161\":1,\"1167\":1,\"1172\":1}}],[\"asyncresult\",{\"1\":{\"653\":3}}],[\"asyncpg\",{\"1\":{\"599\":1}}],[\"asyncio\",{\"1\":{\"599\":1,\"736\":3,\"898\":1,\"899\":3,\"924\":6,\"925\":5,\"1040\":4,\"1049\":4,\"1069\":1}}],[\"ascii\",{\"1\":{\"227\":1}}],[\"aservice\",{\"1\":{\"165\":1}}],[\"as\",{\"1\":{\"44\":1,\"532\":1,\"550\":1,\"572\":1,\"658\":1,\"705\":1,\"708\":1,\"709\":3,\"712\":1,\"713\":1,\"720\":2,\"742\":1,\"743\":1,\"744\":1,\"746\":1,\"751\":1,\"753\":1,\"754\":1,\"755\":1,\"757\":1,\"758\":2,\"827\":3,\"833\":1,\"846\":1,\"847\":2,\"848\":2,\"849\":3,\"861\":2,\"872\":1,\"879\":2,\"924\":2,\"925\":2,\"997\":1,\"1008\":1,\"1009\":4,\"1010\":3,\"1049\":1,\"1051\":1,\"1057\":1,\"1094\":1,\"1098\":1,\"1100\":2,\"1103\":1,\"1104\":1,\"1111\":1,\"1112\":1,\"1187\":2,\"1194\":1}}],[\"a\",{\"1\":{\"1\":1,\"108\":2,\"125\":4,\"482\":2,\"513\":2,\"529\":1,\"649\":1,\"662\":2,\"664\":2,\"665\":1,\"666\":1,\"667\":1,\"722\":1,\"733\":4,\"735\":4,\"755\":3,\"776\":1,\"783\":4,\"799\":1,\"806\":1,\"843\":1,\"844\":2,\"854\":2,\"855\":3,\"856\":1,\"941\":1,\"947\":3,\"984\":2,\"992\":1,\"1015\":3,\"1040\":5,\"1049\":2,\"1050\":1,\"1063\":1,\"1094\":3,\"1147\":2,\"1151\":1,\"1188\":2,\"1236\":2,\"1258\":4,\"1297\":4,\"1299\":4,\"1321\":1,\"1324\":6,\"1326\":2,\"1330\":11,\"1332\":2,\"1380\":2}}],[\"博客\",{\"0\":{\"1\":1}}],[\"朋友们一起加油\",{\"1\":{\"0\":1}}],[\"桌面基本自动化操作\",{\"1\":{\"0\":1}}],[\"愿望是让业务流程尽可能自动化\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
