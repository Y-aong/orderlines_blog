import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,e as t}from"./app-2d0f66e1.js";const i={},h=t('<h1 id="_0、贪心算法概述" tabindex="-1"><a class="header-anchor" href="#_0、贪心算法概述" aria-hidden="true">#</a> 0、贪心算法概述</h1><h3 id="一、什么是贪心" tabindex="-1"><a class="header-anchor" href="#一、什么是贪心" aria-hidden="true">#</a> 一、什么是贪心</h3><p><strong>贪心就是每一阶段选择最优解，从而达到全局最优。</strong></p><p>贪心是我觉得最难也是最简单的算法，可能我们就发现不了我们使用的贪心，但是我们实际却使用到了贪心，也有可能我们觉得思路就该是这样的但是我们就是写不出来。</p><p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？</p><p>指定每次拿最大的，最终结果就是拿走最大数额的钱。</p><p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p><h3 id="二、什么时候使用贪心" tabindex="-1"><a class="header-anchor" href="#二、什么时候使用贪心" aria-hidden="true">#</a> 二、什么时候使用贪心</h3><p>我也不知道什么时候使用贪心，当我们发现<strong>手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心</strong>。</p><p>有些问题中可能会有一些答案比如。问题中有设计最大值，最小值，或者是能不能到达某个目标这个有可能是使用贪心。但是也是需要具体分析。</p><p>贪心能解决什么类型的问题，大体可以总结为以下方面但是绝对不全面</p><ul><li>最值问题</li><li>区间问题</li><li>能否问题</li></ul><h3 id="三、贪心的一般解题步骤" tabindex="-1"><a class="header-anchor" href="#三、贪心的一般解题步骤" aria-hidden="true">#</a> 三、贪心的一般解题步骤</h3><p>找到局部最优是什么，如果推导出全局最优，其实就够了</p><p>贪心如果不做个50题，可能感觉很难培养。</p>',15),n=[h];function d(o,s){return a(),r("div",null,n)}const p=e(i,[["render",d],["__file","0、贪心算法概述.html.vue"]]);export{p as default};
