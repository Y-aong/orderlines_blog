import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e}from"./app-2d0f66e1.js";const r={},h=e('<h1 id="http网络协议" tabindex="-1"><a class="header-anchor" href="#http网络协议" aria-hidden="true">#</a> http网络协议</h1><h3 id="一、http是什么" tabindex="-1"><a class="header-anchor" href="#一、http是什么" aria-hidden="true">#</a> 一、http是什么</h3><p>HTTP 是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol。</p><p>我们先来理解「文本」，在互联网早期的时候只是简单的字符文字，但现在「文本」的涵义已经可以扩展为图片、视频、压缩包等，在 HTTP 眼里这些都算作「文本」。</p><h3 id="二、http常见的状态码" tabindex="-1"><a class="header-anchor" href="#二、http常见的状态码" aria-hidden="true">#</a> 二、http常见的状态码</h3><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/计算机网络/HTTP/6-五大类HTTP状态码.png" alt=" 五大类 HTTP 状态码 " tabindex="0" loading="lazy"><figcaption> 五大类 HTTP 状态码 </figcaption></figure><p>301 永久重定向。说明请求的资源已经不存在了，需改用新的 URL 再次访问。</p><p>302表示临时重定向。表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。</p><p>403 Fobidden。表示禁止访问资源。并不是客户端的请求错误</p><p><strong>501 Not Implemented</strong> 表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</p><p><strong>502 Bad Gateway</strong>通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</p><h3 id="三、http缓存技术" tabindex="-1"><a class="header-anchor" href="#三、http缓存技术" aria-hidden="true">#</a> 三、http缓存技术</h3><h4 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存" aria-hidden="true">#</a> 强制缓存</h4><p>指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在于浏览器这边。</p><p>如下图中，返回的是 200 状态码，但在 size 项中标识的是 from disk cache，就是使用了强制缓存。</p><figure><img src="https://cdn.xiaolincoding.com//mysql/other/1cb6bc37597e4af8adfef412bfc57a42.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h4><p>当我们在浏览器使用开发者工具的时候，你可能会看到过某些请求的响应码是 <code>304</code>，这个是告诉浏览器可以使用本地缓存的资源，通常这种通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存。</p><h3 id="四、http和https区别" tabindex="-1"><a class="header-anchor" href="#四、http和https区别" aria-hidden="true">#</a> 四、http和https区别</h3><p>HTTP 由于是明文传输，所以安全上存在以下三个风险：</p><ul><li><strong>窃听风险</strong>，比如通信链路上可以获取通信内容，用户号容易没。</li><li><strong>篡改风险</strong>，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。</li><li><strong>冒充风险</strong>，比如冒充淘宝网站，用户钱容易没。</li></ul><p>HTTP<strong>S</strong> 在 HTTP 与 TCP 层之间加入了 <code>SSL/TLS</code> 协议，可以很好的解决了上述的风险：</p><ul><li><p><strong>信息加密</strong>：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。</p></li><li><p><strong>校验机制</strong>：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。</p></li><li><p><strong>身份证书</strong>：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。</p></li></ul><h4 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决" aria-hidden="true">#</a> 如何解决</h4><ul><li><p><strong>混合加密</strong>的方式实现信息的<strong>机密性</strong>，解决了窃听的风险。</p></li><li><p><strong>摘要算法</strong>的方式来实现<strong>完整性</strong>，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。</p></li><li><p>将服务器公钥放入到<strong>数字证书</strong>中，解决了冒充的风险。</p></li></ul><h4 id="http和https区别" tabindex="-1"><a class="header-anchor" href="#http和https区别" aria-hidden="true">#</a> http和https区别</h4><p>端口和ssl加密</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/计算机网络/HTTP/22-数字证书工作流程.png" alt="数子证书工作流程" tabindex="0" loading="lazy"><figcaption>数子证书工作流程</figcaption></figure><h3 id="五、http1-0-http2-0-http3-0之间的区别" tabindex="-1"><a class="header-anchor" href="#五、http1-0-http2-0-http3-0之间的区别" aria-hidden="true">#</a> 五、http1.0,http2.0,http3.0之间的区别</h3><h4 id="http-1-1-改进" tabindex="-1"><a class="header-anchor" href="#http-1-1-改进" aria-hidden="true">#</a> HTTP/1.1 改进：</h4><ul><li>使用长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。</li><li>支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。</li></ul><h4 id="http-2改进" tabindex="-1"><a class="header-anchor" href="#http-2改进" aria-hidden="true">#</a> HTTP/2改进：</h4><ul><li>头部压缩</li><li>二进制格式</li><li>并发传输，引出了 Stream 概念，多个 Stream 复用在一条 TCP 连接。</li><li>服务器主动推送资源，服务端不再是被动地响应，可以<strong>主动</strong>向客户端发送消息。</li></ul><h4 id="http3-0改进" tabindex="-1"><a class="header-anchor" href="#http3-0改进" aria-hidden="true">#</a> http3.0改进：</h4><ul><li>HTTP/1.1 中的管道（ pipeline）虽然解决了请求的队头阻塞，但是<strong>没有解决响应的队头阻塞</strong>，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等响应完这个请求后， 才能处理下一个请求，这属于 HTTP 层队头阻塞。</li><li>HTTP/2 虽然通过多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞 ，但是<strong>一旦发生丢包，就会阻塞住所有的 HTTP 请求</strong>，这属于 TCP 层队头阻塞。</li></ul><p>HTTP/2 队头阻塞的问题是因为 TCP，所以 <strong>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！</strong></p><h3 id="六、队头阻塞" tabindex="-1"><a class="header-anchor" href="#六、队头阻塞" aria-hidden="true">#</a> 六、队头阻塞</h3><p>采用HTTP/2时，浏览器一般会在单个TCP连接中创建并行的几十个乃至上百个传输。</p><p>如果HTTP/2连接双方的网络中有一个数据包丢失，或者任何一方的网络出现中断，整个TCP连接就会暂停，丢失的数据包需要被重新传输。因为TCP是一个按序传输的链条，因此如果其中一个点丢失了，链路上之后的内容就都需要等待。</p><p>如下图所示，我们一个用链条来表现一个连接上发送的两个流（传输），红色的与绿色的数据流：</p><figure><img src="https://151822838-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-LvW30M9uwlSh6noqzxa%2F-LvW31Pn1JTBepfnVcl_%2F-LvW36RnZxzFY7KrlZth%2Ftcp-chain-streams.png?generation=1575733990706732&amp;alt=media" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',41),n=[h];function o(p,s){return a(),i("div",null,n)}const g=t(r,[["render",o],["__file","2、http协议.html.vue"]]);export{g as default};
