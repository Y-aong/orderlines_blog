import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as d,e as a}from"./app-2d0f66e1.js";const c={},o=a(`<h1 id="tcp网络协议" tabindex="-1"><a class="header-anchor" href="#tcp网络协议" aria-hidden="true">#</a> tcp网络协议</h1><h3 id="一、tcp三次握手和四次挥手过程" tabindex="-1"><a class="header-anchor" href="#一、tcp三次握手和四次挥手过程" aria-hidden="true">#</a> 一、tcp三次握手和四次挥手过程</h3><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4/网络/TCP三次握手.drawio.png" alt="TCP 三次握手" tabindex="0" loading="lazy"><figcaption>TCP 三次握手</figcaption></figure><p>第一次为syn报文，客户端会随机初始化序号（<code>client_isn</code>），将此序号置于 TCP 首部的「序号」字段中，同时把 <code>SYN</code> 标志位置为 <code>1</code>，表示 <code>SYN</code> 报文。表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 <code>SYN-SENT</code> 状态</p><p>第二次为服务端收到客户端的 <code>SYN</code> 报文后，首先服务端也随机初始化自己的序号（<code>server_isn</code>），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 <code>client_isn + 1</code>, 接着把 <code>SYN</code> 和 <code>ACK</code> 标志位置为 <code>1</code>。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 <code>SYN-RCVD</code> 状态</p><p>第三次客户端收到服务端的ack确认消息后，将ack的标志设置为1，确认应答号，字段填入为serven_isn + 1, 客户端处于 <code>ESTABLISHED</code> 状态;服务端收到ack确认之后服务端也处于<code>ESTABLISHED</code></p><p>一旦完成三次握手，双方都处于 <code>ESTABLISHED</code> 状态，此时连接就已建立完成，客户端和服务端就可以相互发送数据了。</p><h3 id="二、为什么是三次握手不是两次" tabindex="-1"><a class="header-anchor" href="#二、为什么是三次握手不是两次" aria-hidden="true">#</a> 二、为什么是三次握手不是两次</h3><p>1、确认服务端和客户端的通信能力</p><p>2、同步双方初始序列号</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TCP 协议的通信双方， 都必须维护一个「序列号」， 序列号是可靠传输的一个关键因素，它的作用：

接收方可以去除重复的数据；
接收方可以根据数据包的序列号按序接收；
可以标识发送出去的数据包中， 哪些是已经被对方收到的（通过 ACK 报文中的序列号知道）；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、避免资源浪费</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果只有「两次握手」，当客户端发生的 SYN 报文在网络中阻塞，客户端没有接收到 ACK 报文，就会重新发送 SYN ，由于没有第三次握手，服务端不清楚客户端是否收到了自己回复的 ACK 报文，所以服务端每收到一个 SYN 就只能先主动建立一个连接，这会造成什么情况呢？

如果客户端发送的 SYN 报文在网络中阻塞了，重复发送多次 SYN 报文，那么服务端在收到请求后就会建立多个冗余的无效链接，造成不必要的资源浪费。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看作为两个人的沟通，检查双方的语言表达能力和语言接受能力，第二有效沟通，避免重发，第三共同维护一个话题</p><h3 id="三、tcp的四次挥手" tabindex="-1"><a class="header-anchor" href="#三、tcp的四次挥手" aria-hidden="true">#</a> 三、tcp的四次挥手</h3><figure><img src="https://cdn.xiaolincoding.com//mysql/other/format,png-20230309230614791.png" alt="客户端主动关闭连接 —— TCP 四次挥手" tabindex="0" loading="lazy"><figcaption>客户端主动关闭连接 —— TCP 四次挥手</figcaption></figure><ul><li>客户端打算关闭连接，此时会发送一个 TCP 首部 <code>FIN</code> 标志位被置为 <code>1</code> 的报文，也即 <code>FIN</code> 报文，之后客户端进入 <code>FIN_WAIT_1</code> 状态。</li><li>服务端收到该报文后，就向客户端发送 <code>ACK</code> 应答报文，接着服务端进入 <code>CLOSE_WAIT</code> 状态。</li><li>客户端收到服务端的 <code>ACK</code> 应答报文后，之后进入 <code>FIN_WAIT_2</code> 状态。</li><li>等待服务端处理完数据后，也向客户端发送 <code>FIN</code> 报文，之后服务端进入 <code>LAST_ACK</code> 状态。</li><li>客户端收到服务端的 <code>FIN</code> 报文后，回一个 <code>ACK</code> 应答报文，之后进入 <code>TIME_WAIT</code> 状态</li><li>服务端收到了 <code>ACK</code> 应答报文后，就进入了 <code>CLOSE</code> 状态，至此服务端已经完成连接的关闭。</li><li>客户端在经过 <code>2MSL</code> 一段时间后，自动进入 <code>CLOSE</code> 状态，至此客户端也完成连接的关闭。</li></ul><p>你可以看到，每个方向都需要<strong>一个 FIN 和一个 ACK</strong>，因此通常被称为<strong>四次挥手</strong>。</p><h3 id="四、为什么需要四次挥手" tabindex="-1"><a class="header-anchor" href="#四、为什么需要四次挥手" aria-hidden="true">#</a> 四、为什么需要四次挥手</h3><ul><li>关闭连接时，客户端向服务端发送 <code>FIN</code> 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li><li>服务端收到客户端的 <code>FIN</code> 报文时，先回一个 <code>ACK</code> 应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 <code>FIN</code> 报文给客户端来表示同意现在关闭连接。</li></ul><p>从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送，因此是需要四次挥手。</p><h3 id="五、关于time-wait等待时间" tabindex="-1"><a class="header-anchor" href="#五、关于time-wait等待时间" aria-hidden="true">#</a> 五、关于TIME_WAIT等待时间</h3><p><strong>报文最大生存时间</strong>，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。</p><p>主动发起关闭连接的一方，才会有 <code>TIME-WAIT</code> 状态。</p><h3 id="为什么需要这个状态" tabindex="-1"><a class="header-anchor" href="#为什么需要这个状态" aria-hidden="true">#</a> 为什么需要这个状态：</h3><ul><li><p>防止历史连接中的数据，被后面相同四元组的连接错误的接收；</p></li><li><p>保证「被动关闭连接」的一方，能被正确的关闭；</p></li></ul><h3 id="六、tcp如何保证连接的可靠" tabindex="-1"><a class="header-anchor" href="#六、tcp如何保证连接的可靠" aria-hidden="true">#</a> 六、tcp如何保证连接的可靠</h3><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/3.jpg?image_process=watermark,text_5YWs5LyX5Y-377ya5bCP5p6XY29kaW5n,type_ZnpsdHpoaw,x_10,y_10,g_se,size_20,color_0000CD,t_70,fill_0" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="重传机制" tabindex="-1"><a class="header-anchor" href="#重传机制" aria-hidden="true">#</a> 重传机制</h4><p>TCP 实现可靠传输的方式之一，是通过序列号与确认应答。</p><p>在 TCP 中，当发送端的数据到达接收主机时，接收端主机会返回一个确认应答消息，表示已收到消息。</p><h4 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口" aria-hidden="true">#</a> 滑动窗口</h4><ul><li></li></ul><p>如果你说完一句话，我在处理其他事情，没有及时回复你，那你不是要干等着我做完其他事情后，我回复你，你才能说下一句话，很显然这不现实。</p><p>所以，这样的传输方式有一个缺点：数据包的<strong>往返时间越长，通信的效率就越低</strong>。</p><p>为解决这个问题，TCP 引入了<strong>窗口</strong>这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。</p><p>那么有了窗口，就可以指定窗口大小，窗口大小就是指<strong>无需等待确认应答，而可以继续发送数据的最大值</strong>。</p><p>窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。</p><p>我们先来看看发送方的窗口，下图就是发送方缓存的数据，根据处理的情况分成四个部分，其中深蓝色方框是发送窗口，紫色方框是可用窗口：</p><figure><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/计算机网络/TCP-可靠特性/16.jpg?" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>#1 是已发送并收到 ACK确认的数据：1~31 字节</li><li>#2 是已发送但未收到 ACK确认的数据：32~45 字节</li><li>#3 是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节</li><li>#4 是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后</li></ul><h4 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制" aria-hidden="true">#</a> 流量控制</h4><p>流量控制是结合滑动窗口两个进行控制流量的</p><h4 id="ack确认机制" tabindex="-1"><a class="header-anchor" href="#ack确认机制" aria-hidden="true">#</a> ack确认机制</h4><h3 id="七、http协议-与-tcp协议-的区别" tabindex="-1"><a class="header-anchor" href="#七、http协议-与-tcp协议-的区别" aria-hidden="true">#</a> 七、HTTP协议 与 TCP协议 的区别</h3><p><strong>TCP协议是传输层协议</strong>，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。</p><p>TCP/IP和HTTP协议的关系，从本质上来说，二者没有可比性，我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET 等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP 文本信息，然后使用TCP/IP做传输层协议将它发到网络上。</p><p><strong>Http协议是建立在TCP协议基础之上的</strong>，当浏览器需要从服务器获取网页数据的时候，会发出一次Http请求。Http会通过TCP建立起一个到服务器的连接通道，当本次请求需要的数据完毕后，Http会立即将TCP连接断开，这个过程是很短的，所以Http连接是一种短连接，是一种无状态的连接。</p><p>所谓的无状态，是指浏览器每次向服务器发起请求的时候，不是通过一个连接，而是每次都建立一个新的连接。如果是一个连接的话，服务器进程中就能保持住这个连接并且在内存中记住一些信息状态。</p><p>而每次请求结束后，连接就关闭，相关的内容就释放了，所以记不住任何状态，称为无状态连接。而我们直接通过Socket编程使用TCP协议的时候，因为我们自己可以通过代码区控制什么时候打开连接什么时候关闭连接，只要我们不通过代码把连接关闭，这个连接就会在客户端和服务端的进程中一直存在，相关状态数据会一直保存着。</p><figure><img src="https://pic3.zhimg.com/v2-3d95a75bfd7b5810761035fb7cca87c6_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,51),t=[o];function n(r,l){return i(),d("div",null,t)}const h=e(c,[["render",n],["__file","1、tcp协议.html.vue"]]);export{h as default};
