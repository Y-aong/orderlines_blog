const t=JSON.parse('{"key":"v-5ee7e953","path":"/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/8%E3%80%81%E5%8D%8F%E7%A8%8B%E2%80%94%E2%80%94asyncio.html","title":"8、协程","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["协程"],"description":"8、协程 详情还是要看文档 run() 创建事件循环，运行一个协程，关闭事件循环。 Runner A context manager that simplifies multiple async function calls. Task Task对象 TaskGroup A context manager that holds a group of tasks. Provides a convenient and reliable way to wait for all tasks in the group to finish. create_task() Start an asyncio Task, then returns it. current_task() 返回当前Task对象 all_tasks() Return all tasks that are not yet finished for an event loop. await sleep() 休眠几秒。 await gather() 并发执行所有事件的调度和等待。 await wait_for() 有超时控制的运行。 await shield() 屏蔽取消操作 await wait() 完成情况的监控器 timeout() Run with a timeout. Useful in cases when wait_for is not suitable. to_thread() 在不同的 OS 线程中异步地运行一个函数。 run_coroutine_threadsafe() 从其他OS线程中调度一个协程。 for in as_completed() 用 for 循环监控完成情况。","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/8%E3%80%81%E5%8D%8F%E7%A8%8B%E2%80%94%E2%80%94asyncio.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"8、协程"}],["meta",{"property":"og:description","content":"8、协程 详情还是要看文档 run() 创建事件循环，运行一个协程，关闭事件循环。 Runner A context manager that simplifies multiple async function calls. Task Task对象 TaskGroup A context manager that holds a group of tasks. Provides a convenient and reliable way to wait for all tasks in the group to finish. create_task() Start an asyncio Task, then returns it. current_task() 返回当前Task对象 all_tasks() Return all tasks that are not yet finished for an event loop. await sleep() 休眠几秒。 await gather() 并发执行所有事件的调度和等待。 await wait_for() 有超时控制的运行。 await shield() 屏蔽取消操作 await wait() 完成情况的监控器 timeout() Run with a timeout. Useful in cases when wait_for is not suitable. to_thread() 在不同的 OS 线程中异步地运行一个函数。 run_coroutine_threadsafe() 从其他OS线程中调度一个协程。 for in as_completed() 用 for 循环监控完成情况。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"协程"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8、协程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"详情还是要看文档","slug":"详情还是要看文档","link":"#详情还是要看文档","children":[]},{"level":3,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.37,"words":411},"filePathRelative":"posts/Python/进阶知识/8、协程——asyncio.md","localizedDate":"July 15, 2023","excerpt":"<h1> 8、协程</h1>\\n<h3> 详情还是要看文档</h3>\\n<table>\\n<thead>\\n<tr>\\n<th><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-runner.html#asyncio.run\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>run()</code></a></th>\\n<th>创建事件循环，运行一个协程，关闭事件循环。</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-runner.html#asyncio.Runner\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Runner</code></a></td>\\n<td>A context manager that simplifies multiple async function calls.</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>Task</code></a></td>\\n<td>Task对象</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.TaskGroup\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>TaskGroup</code></a></td>\\n<td>A context manager that holds a group of tasks. Provides a convenient and reliable way to wait for all tasks in the group to finish.</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.create_task\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>create_task()</code></a></td>\\n<td>Start an asyncio Task, then returns it.</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.current_task\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>current_task()</code></a></td>\\n<td>返回当前Task对象</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.all_tasks\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>all_tasks()</code></a></td>\\n<td>Return all tasks that are not yet finished for an event loop.</td>\\n</tr>\\n<tr>\\n<td><code>await</code> <a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.sleep\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>sleep()</code></a></td>\\n<td>休眠几秒。</td>\\n</tr>\\n<tr>\\n<td><code>await</code> <a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.gather\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>gather()</code></a></td>\\n<td>并发执行所有事件的调度和等待。</td>\\n</tr>\\n<tr>\\n<td><code>await</code> <a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.wait_for\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>wait_for()</code></a></td>\\n<td>有超时控制的运行。</td>\\n</tr>\\n<tr>\\n<td><code>await</code> <a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.shield\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>shield()</code></a></td>\\n<td>屏蔽取消操作</td>\\n</tr>\\n<tr>\\n<td><code>await</code> <a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.wait\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>wait()</code></a></td>\\n<td>完成情况的监控器</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.timeout\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>timeout()</code></a></td>\\n<td>Run with a timeout. Useful in cases when <code>wait_for</code> is not suitable.</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.to_thread\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>to_thread()</code></a></td>\\n<td>在不同的 OS 线程中异步地运行一个函数。</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>run_coroutine_threadsafe()</code></a></td>\\n<td>从其他OS线程中调度一个协程。</td>\\n</tr>\\n<tr>\\n<td><code>for in</code> <a href=\\"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.as_completed\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>as_completed()</code></a></td>\\n<td>用 <code>for</code> 循环监控完成情况。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
