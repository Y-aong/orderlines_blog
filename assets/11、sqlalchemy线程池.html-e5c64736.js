import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as t,c as i,a as n,b as e,d as a,e as c}from"./app-2d0f66e1.js";const r={},p=n("h1",{id:"_11、sqlalchemy线程池",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11、sqlalchemy线程池","aria-hidden":"true"},"#"),e(" 11、sqlalchemy线程池")],-1),u=n("h3",{id:"一、连接池特点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、连接池特点","aria-hidden":"true"},"#"),e(" 一、连接池特点")],-1),d=n("li",null,[n("p",null,[n("strong",null,"SQLAlchemy连接数据库所使用的Engine对象默认采用一个连接池来管理连接")]),n("p",null,"当我们使用Engine对象所对应的SQL数据库连接的资源时，这些对数据库的连接是通过一个连接池（Connection pooling）来管理的。当我们释放（release）一个连接资源时，这个连接并不是被销毁了，而是仍然连接着数据库，只不过其将会被重新存储如一个用于管理连接的连接池（默认为QueuePool）中。放入连接池中的连接可以被复用。事实上总有一定数目的数据库连接被保存在这个连接池中，即使在我们的代码中看起来像是连接被释放了一样。这些连接会在我们的程序结束运行之后自动被销毁，或者当我们显式地调用销毁连接池的代码时被销毁。")],-1),h=n("li",null,[n("p",null,[n("strong",null,"连接复用")]),n("p",null,"由于这个连接池的存在，每当我们在代码中调用Engine.connect()方法或者调用ORM对应的Session的时候，往往会得到一个已存在与连接池中的数据库连接，而不是得到了一个全新的连接对象。然而当连接池中没有现成可用的连接对象的时候，在不超过配置所允许的连接上限的条件下，新的连接对象会被创建并返回给调用这些方法的程序。")],-1),m=n("strong",null,"默认使用的QueuePool",-1),_=n("br",null,null,-1),k={href:"http://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine.params.max_overflow",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"create_engine.pool_size",-1),g={href:"http://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine.params.max_overflow",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"create_engine.max_overflow",-1),f=n("li",null,[n("p",null,[n("strong",null,"可上溢的连接池")]),n("p",null,[e("如果我们将参数"),n("code",null,"create_engine.max_overflow"),e("设置为”-1”，那么连接池会允许“上溢”无限多的新连接。在这种情况下，连接池永远不会阻塞一个新的数据库连接请求。相反，每当有新的连接请求且无当前可用的连接对象，连接池就会无条件地创建新的连接对象来返回给这个请求。")]),n("p",null,"然而，即使我们在程序端不限制并发的数据库连接的数目，如果程序无限制的创建新的数据库连接对象，连接的数目最终会到达数据库端的连接数目上限，并且耗尽所有数据库允许的连接，最终同样会造成程序异常。")],-1),y=c(`<h3 id="二、不同类型的连接池" tabindex="-1"><a class="header-anchor" href="#二、不同类型的连接池" aria-hidden="true">#</a> 二、不同类型的连接池</h3><p>SQLAlchemy 提供了几种不同类型的连接池，每种类型都有不同的行为和特点。</p><ol><li><p><strong>QueuePool</strong>：</p><ul><li>这是 SQLAlchemy 默认的连接池类型。</li><li>使用 FIFO（先进先出）策略管理连接。</li><li>当连接被释放时，将其放入队列尾部，下一个请求获取连接时会从队列头部取出连接。</li><li>适用于大多数情况，对于大部分应用都是合适的选择。</li></ul></li><li><p><strong>SingletonThreadPool</strong>：</p><ul><li>此连接池类型只保持一个数据库连接。</li><li>在多线程环境中，所有线程共享同一个数据库连接。</li><li>不适合多线程应用，但在某些情况下可能会提供性能优势，例如在使用 SQLite 等轻量级数据库时。</li></ul></li><li><p><strong>NullPool</strong>：</p><ul><li>不维护连接池，每次请求都会创建一个新的连接，用完后立即关闭。</li><li>不适合长期持有连接，适用于一次性操作或者每次操作都需要不同连接的场景。</li></ul></li><li><p><strong>StaticPool</strong>：</p><ul><li>类似于 QueuePool，但是在连接被释放后不会被重新放入队列中。</li><li>在固定连接数的情况下，比 QueuePool 更快地获取连接，因为不需要管理连接的队列。</li></ul></li></ol><p>举个例子</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>pool <span class="token keyword">import</span> QueuePool

<span class="token comment"># 创建数据库引擎，并配置连接池</span>
engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;mysql://username:password@localhost/databasename&#39;</span><span class="token punctuation">,</span> 
                       poolclass<span class="token operator">=</span>QueuePool<span class="token punctuation">,</span> 
                       pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment"># 最大连接数</span>
                       max_overflow<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment"># 允许额外的连接数</span>
                       pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment"># 获取连接的超时时间</span>

<span class="token comment"># 获取数据库连接</span>
connection <span class="token operator">=</span> engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 使用连接进行操作</span>
result <span class="token operator">=</span> connection<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM my_table&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>

<span class="token comment"># 关闭连接</span>
connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每种连接池类型都有其适用的场景，选择合适的连接池类型取决于应用的特性和需求。一般来说，对于大多数情况，使用默认的 QueuePool 就足够了，因为它在大多数情况下能够提供良好的性能和稳定性。</p><h3 id="三、可用连接被用尽的可能原因" tabindex="-1"><a class="header-anchor" href="#三、可用连接被用尽的可能原因" aria-hidden="true">#</a> 三、可用连接被用尽的可能原因</h3><p>但是我们在实际开发中经常会遇到一些类似这样的问题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>QueuePool limit of size <span class="token operator">&lt;</span>x<span class="token operator">&gt;</span> overflow <span class="token operator">&lt;</span>y<span class="token operator">&gt;</span> reached, connection timed out, <span class="token function">timeout</span> <span class="token operator">&lt;</span>z<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当前系统所需并发数据库连接，超过了当前使用的<code>engine</code>所配置的并发连接数目上限。该上限由两个值组成：<code>pool_size</code>和<code>max_overflow</code></p>`,10),x=n("li",null,[n("h4",{id:"连接池的上限小于程序中需要并发使用连接的请求的数目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#连接池的上限小于程序中需要并发使用连接的请求的数目","aria-hidden":"true"},"#"),e(" 连接池的上限小于程序中需要并发使用连接的请求的数目")]),n("p",null,"这是导致连接被用尽问题最直接的一种原因。如果我们的程序使用一个大小为20的线程池来进行并发处理且每个线程都需要一个单独的数据库连接，而我们定义的连接池大小只有10，那么显然将会出现连接被用尽的问题。这种情况下，就应该通过增加连接池大小或减少并发线程数目的方法来解决问题。一般来说，我们应当保证连接池的大小不小于线程池的数目。")],-1),q=n("h4",{id:"连接没有被释放",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#连接没有被释放","aria-hidden":"true"},"#"),e(" 连接没有被释放")],-1),w=n("p",null,"另一个常见的导致连接用尽的原因是连接在被使用之后没有被释放，或说没有被归还给连接池。虽然当连接对象由于没有引用而被垃圾收集之后其对应的连接资源仍将被释放还给连接池，但由于垃圾收集的不确定性，这一机制不应当被用来作为释放连接资源的手段。",-1),Q=n("code",null,"Session",-1),S={href:"http://docs.sqlalchemy.org/en/latest/orm/session_api.html#sqlalchemy.orm.session.Session.close",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"Session.close()",-1),L=n("code",null,"Session",-1),E=n("li",null,[n("h4",{id:"程序试图执行一个运行时间很长的数据库事务-transaction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#程序试图执行一个运行时间很长的数据库事务-transaction","aria-hidden":"true"},"#"),e(" 程序试图执行一个运行时间很长的数据库事务（transaction）")]),n("p",null,"数据库的事务是一种非常昂贵的操作，因此不应该用来闲置着等待某些事件发生。例如等待用户点击某个按钮，或者等待一个长时间运行的任务返回结果。对于事务，切记不要一直维持着一个事务而不去结束。")],-1);function z(N,A){const s=l("ExternalLinkIcon");return t(),i("div",null,[p,u,n("ul",null,[d,h,n("li",null,[n("p",null,[m,_,e(" SQLAlchemy默认所使用的连接池为sqlalchemy.pool.QueuePool。当目前总连接数没有超过配置的上限且池中没有现成可用的连接的情况下，一个新的连接会被建立并返回给调用创建新连接的方法的程序。这个上限等于"),n("a",k,[v,a(s)]),e(" 与"),n("a",g,[b,a(s)]),e("之和。")])]),f]),y,n("ul",null,[x,n("li",null,[q,w,n("p",null,[e("连接没有被释放一般是因为程序中没有显式地调用相应方法导致的。所以当我们使用完连接对象之后，应当显式地调用连接的释放方法。例如如果我们在使用ORM "),Q,e("，则应当在合适的地方调用"),n("a",S,[P,a(s)]),e("方法释放"),L,e("对象。")])]),E])])}const B=o(r,[["render",z],["__file","11、sqlalchemy线程池.html.vue"]]);export{B as default};
