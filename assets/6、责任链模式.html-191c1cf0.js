import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as l,a as s,b as n,d as c,e as a}from"./app-2d0f66e1.js";const i={},u=a('<h1 id="_6、责任链模式" tabindex="-1"><a class="header-anchor" href="#_6、责任链模式" aria-hidden="true">#</a> 6、责任链模式</h1><h3 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义" aria-hidden="true">#</a> 一、定义</h3><p><strong>责任链模式</strong>是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。这种模式特别适用于那些需要通过多个步骤来处理请求的情况，并且这些步骤可以动态地添加、移除或重新排序。</p><p>在某些系统中，可能存在一系列连续的检查或者处理步骤，例如在线订购系统的权限验证、数据清理、IP地址过滤以及缓存检查等。随着新功能的不断加入，代码可能会变得越来越复杂和难以维护。责任链模式提供了一种解决方案，它可以将这些处理步骤抽象为独立的对象，并将它们连接成一条链，从而简化了代码结构并提高了其可读性和可维护性。</p><h3 id="二、责任链模式结构" tabindex="-1"><a class="header-anchor" href="#二、责任链模式结构" aria-hidden="true">#</a> 二、责任链模式结构</h3><ol><li><p><strong>处理者</strong> （Handler） 声明了所有具体处理者的通用接口。 该接口通常仅包含单个方法用于请求处理， 但有时其还会包含一个设置链上下个处理者的方法。</p></li><li><p><strong>基础处理者</strong> （Base Handler） 是一个可选的类， 你可以将所有处理者共用的样本代码放置在其中。</p><p>通常情况下， 该类中定义了一个保存对于下个处理者引用的成员变量。 客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。 该类还可以实现默认的处理行为： 确定下个处理者存在后再将请求传递给它。</p></li><li><p><strong>具体处理者</strong> （Concrete Handlers） 包含处理请求的实际代码。 每个处理者接收到请求后， 都必须决定是否进行处理， 以及是否沿着链传递请求。</p></li></ol><h3 id="三、实现方式" tabindex="-1"><a class="header-anchor" href="#三、实现方式" aria-hidden="true">#</a> 三、实现方式</h3>',7),r={href:"https://refactoringguru.cn/design-patterns/chain-of-responsibility",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> annotations
<span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Any<span class="token punctuation">,</span> Optional


<span class="token keyword">class</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">set_next</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> handler<span class="token punctuation">:</span> Handler<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Handler<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">AbstractHandler</span><span class="token punctuation">(</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _next_handler<span class="token punctuation">:</span> Handler <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">set_next</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> handler<span class="token punctuation">:</span> Handler<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Handler<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_next_handler <span class="token operator">=</span> handler
        <span class="token keyword">return</span> handler

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Any<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_next_handler<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>_next_handler<span class="token punctuation">.</span>handle<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>


<span class="token keyword">class</span> <span class="token class-name">MonkeyHandler</span><span class="token punctuation">(</span>AbstractHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> request <span class="token operator">==</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Monkey: I&#39;ll eat the </span><span class="token interpolation"><span class="token punctuation">{</span>request<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>handle<span class="token punctuation">(</span>request<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">SquirrelHandler</span><span class="token punctuation">(</span>AbstractHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> request <span class="token operator">==</span> <span class="token string">&quot;Nut&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Squirrel: I&#39;ll eat the </span><span class="token interpolation"><span class="token punctuation">{</span>request<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>handle<span class="token punctuation">(</span>request<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">DogHandler</span><span class="token punctuation">(</span>AbstractHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> request <span class="token operator">==</span> <span class="token string">&quot;MeatBall&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Dog: I&#39;ll eat the </span><span class="token interpolation"><span class="token punctuation">{</span>request<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>handle<span class="token punctuation">(</span>request<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">client_code</span><span class="token punctuation">(</span>handler<span class="token punctuation">:</span> Handler<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> food <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&quot;Nut&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cup of coffee&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\\nClient: Who wants a </span><span class="token interpolation"><span class="token punctuation">{</span>food<span class="token punctuation">}</span></span><span class="token string">?&quot;</span></span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> handler<span class="token punctuation">.</span>handle<span class="token punctuation">(</span>food<span class="token punctuation">)</span>
        <span class="token keyword">if</span> result<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;  </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;  </span><span class="token interpolation"><span class="token punctuation">{</span>food<span class="token punctuation">}</span></span><span class="token string"> was left untouched.&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二</strong>，这种方式是在B站中学习的，它是已经确定了责任链的next，但是个人感觉缺少了代码的灵活性，适合比较固定模式的方式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> abstractmethod


<span class="token keyword">class</span> <span class="token class-name">AskLeave</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">furlough</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">PL</span><span class="token punctuation">(</span>AskLeave<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">furlough</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;准假&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            PM<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>furlough<span class="token punctuation">(</span>day<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">PM</span><span class="token punctuation">(</span>AskLeave<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">furlough</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;准假&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            Manger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>furlough<span class="token punctuation">(</span>day<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Manger</span><span class="token punctuation">(</span>AskLeave<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">furlough</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;准假&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;离职吧&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、优缺点" tabindex="-1"><a class="header-anchor" href="#四、优缺点" aria-hidden="true">#</a> 四、优缺点</h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>**解耦：**降低了请求发送者与接收者之间的耦合度，使两者不必直接相互依赖。</li><li>**灵活性：**可以方便地添加或删除处理者，甚至改变它们的顺序，而无需修改其他部分的代码。</li><li>**可扩展性：**支持轻松地引入新的处理逻辑，符合开闭原则。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><p>当然，责任链模式也有一些潜在的缺点：</p><ul><li>如果责任链太长或处理时间过长，可能会影响性能。</li><li>当责任链未正确配置时，存在请求未被任何处理器处理的风险。</li><li>对于较长的责任链，调试可能会变得较为困难。</li></ul>`,9);function d(v,m){const t=p("ExternalLinkIcon");return o(),l("div",null,[u,s("p",null,[n("**方式一：**其中第一种方式是在"),s("a",r,[n("设计模式"),c(t)]),n("这本书中学习的，这种模式是先指定具体的处理者。例如处理数据（pandas）先fillna->sum->count,类似于pandas中的pipeline。")]),k])}const f=e(i,[["render",d],["__file","6、责任链模式.html.vue"]]);export{f as default};
