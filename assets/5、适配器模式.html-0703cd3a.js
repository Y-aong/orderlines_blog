const e=JSON.parse('{"key":"v-aeb5fd80","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5%E3%80%81%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"5、适配器模式","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["适配器模式","设计模式"],"description":"5、适配器模式 一、定义 适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。它通过引入一个中间件——适配器，将一个类的接口转换成客户期望的另一个接口，从而使原本因接口不兼容而不能一起工作的类能够协同工作。适配器模式的核心思想在于创建一个新的类或对象，作为现有类和目标接口之间的桥梁，使得它们可以相互协作。 在python的pandas是大名鼎鼎的数据处理模块，提供了强大的数据结构如 Series和 DataFrame，同时支持excel,csv等数据格式的相互转换，明确地以“适配器模式”的名义实现其功能，然而，在某些方面，Pandas确实体现了适配器模式的核心思想——即通过某种机制使不同的接口或数据源能够协同工作。","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5%E3%80%81%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"5、适配器模式"}],["meta",{"property":"og:description","content":"5、适配器模式 一、定义 适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。它通过引入一个中间件——适配器，将一个类的接口转换成客户期望的另一个接口，从而使原本因接口不兼容而不能一起工作的类能够协同工作。适配器模式的核心思想在于创建一个新的类或对象，作为现有类和目标接口之间的桥梁，使得它们可以相互协作。 在python的pandas是大名鼎鼎的数据处理模块，提供了强大的数据结构如 Series和 DataFrame，同时支持excel,csv等数据格式的相互转换，明确地以“适配器模式”的名义实现其功能，然而，在某些方面，Pandas确实体现了适配器模式的核心思想——即通过某种机制使不同的接口或数据源能够协同工作。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T09:50:53.000Z"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"适配器模式"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T09:50:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5、适配器模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T09:50:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、定义","slug":"一、定义","link":"#一、定义","children":[]},{"level":3,"title":"二、解决的问题","slug":"二、解决的问题","link":"#二、解决的问题","children":[]},{"level":3,"title":"三、适配器模式结构","slug":"三、适配器模式结构","link":"#三、适配器模式结构","children":[]},{"level":3,"title":"四、和其他模式的关系","slug":"四、和其他模式的关系","link":"#四、和其他模式的关系","children":[]}],"git":{"createdTime":1736258707000,"updatedTime":1742205053000,"contributors":[{"name":"Y-aong","email":"1627469727@qq.com","commits":2}]},"readingTime":{"minutes":3.36,"words":1007},"filePathRelative":"posts/设计模式/5、适配器模式.md","localizedDate":"July 15, 2023","excerpt":"<h1> 5、适配器模式</h1>\\n<h3> 一、定义</h3>\\n<p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。它通过引入一个中间件——适配器，将一个类的接口转换成客户期望的另一个接口，从而使原本因接口不兼容而不能一起工作的类能够协同工作。适配器模式的核心思想在于创建一个新的类或对象，作为现有类和目标接口之间的桥梁，使得它们可以相互协作。</p>\\n<p>在python的pandas是大名鼎鼎的数据处理模块，提供了强大的数据结构如 <code>Series</code>和 <code>DataFrame</code>，同时支持excel,csv等数据格式的相互转换，明确地以“适配器模式”的名义实现其功能，然而，在某些方面，Pandas确实体现了适配器模式的核心思想——即通过某种机制使不同的接口或数据源能够协同工作。</p>","autoDesc":true}');export{e as data};
