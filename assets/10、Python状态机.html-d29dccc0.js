import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const p={},e=t(`<h1 id="_10、python状态机的使用" tabindex="-1"><a class="header-anchor" href="#_10、python状态机的使用" aria-hidden="true">#</a> 10、python状态机的使用</h1><p>我在自己的工作流中之前使用到队列作为状态的转换，后面使用状态机来实现流程的状态控制。</p><p>状态机（State Machine）是一种用于描述系统行为的数学模型，它通过状态、事件和转换规则来定义系统的逻辑流程。在实际开发中，状态机常用于游戏开发、工作流引擎、自动化控制等场景。本文将介绍如何使用 <strong><code>transitions</code></strong> 这个 Python 库快速构建和管理状态机，并通过示例展示其核心功能。</p><h3 id="一-什么是状态机" tabindex="-1"><a class="header-anchor" href="#一-什么是状态机" aria-hidden="true">#</a> <strong>一. 什么是状态机？</strong></h3><p>状态机由以下核心元素组成：</p><ul><li><strong>状态（States）</strong>：系统可能处于的不同模式（如“启动”、“运行”、“停止”）。</li><li><strong>事件（Events）</strong>：触发状态转换的外部输入（如“按下按钮”、“收到消息”）。</li><li><strong>转换（Transitions）</strong>：根据事件从一个状态转移到另一个状态的规则。</li></ul><p>有限状态机（FSM）是状态机的一种，其状态和转换规则是有限且预先定义的。</p><h3 id="二-安装与快速入门" tabindex="-1"><a class="header-anchor" href="#二-安装与快速入门" aria-hidden="true">#</a> <strong>二. 安装与快速入门</strong></h3><p>安装 <code>transitions</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> transitions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="三-基础示例-交通灯状态机" tabindex="-1"><a class="header-anchor" href="#三-基础示例-交通灯状态机" aria-hidden="true">#</a> <strong>三. 基础示例：交通灯状态机</strong></h3><p>我们以交通灯为例，演示如何用 <code>transitions</code> 定义一个简单的状态机。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transitions <span class="token keyword">import</span> Machine

<span class="token comment"># 定义状态和事件</span>
<span class="token keyword">class</span> <span class="token class-name">TrafficLight</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 状态列表</span>
        self<span class="token punctuation">.</span>states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">]</span>
        
        <span class="token comment"># 事件与转换规则</span>
        self<span class="token punctuation">.</span>transitions <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>   <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
        
        <span class="token comment"># 初始化状态机</span>
        self<span class="token punctuation">.</span>machine <span class="token operator">=</span> Machine<span class="token punctuation">(</span>model<span class="token operator">=</span>self<span class="token punctuation">,</span> states<span class="token operator">=</span>self<span class="token punctuation">.</span>states<span class="token punctuation">,</span> transitions<span class="token operator">=</span>self<span class="token punctuation">.</span>transitions<span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_enter_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Light turned </span><span class="token interpolation"><span class="token punctuation">{</span>state<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 创建实例并测试</span>
light <span class="token operator">=</span> TrafficLight<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Current state:&quot;</span><span class="token punctuation">,</span> light<span class="token punctuation">.</span>state<span class="token punctuation">)</span>  <span class="token comment"># 输出：red</span>

light<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 触发事件</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Current state:&quot;</span><span class="token punctuation">,</span> light<span class="token punctuation">.</span>state<span class="token punctuation">)</span>  <span class="token comment"># 输出：green</span>

light<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Current state:&quot;</span><span class="token punctuation">,</span> light<span class="token punctuation">.</span>state<span class="token punctuation">)</span>  <span class="token comment"># 输出：yellow</span>

light<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Current state:&quot;</span><span class="token punctuation">,</span> light<span class="token punctuation">.</span>state<span class="token punctuation">)</span>  <span class="token comment"># 输出：red</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-核心功能详解" tabindex="-1"><a class="header-anchor" href="#四-核心功能详解" aria-hidden="true">#</a> <strong>四. 核心功能详解</strong></h3><h4 id="_4-1-状态转换的条件判断" tabindex="-1"><a class="header-anchor" href="#_4-1-状态转换的条件判断" aria-hidden="true">#</a> <strong>4.1 状态转换的条件判断</strong></h4><p>通过 <code>conditions</code> 参数添加条件，只有满足条件时才允许转换：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transitions <span class="token keyword">import</span> Machine

<span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;pending&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;processing&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shipped&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;delivered&#39;</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>transitions <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;process&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;processing&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ship&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;processing&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;shipped&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;conditions&#39;</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> self<span class="token punctuation">:</span> self<span class="token punctuation">.</span>is_ready  <span class="token comment"># 自定义条件</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;deliver&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;shipped&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;delivered&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>machine <span class="token operator">=</span> Machine<span class="token punctuation">(</span>model<span class="token operator">=</span>self<span class="token punctuation">,</span> states<span class="token operator">=</span>self<span class="token punctuation">.</span>states<span class="token punctuation">,</span> transitions<span class="token operator">=</span>self<span class="token punctuation">.</span>transitions<span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>is_ready <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 假设订单未准备好</span>

order <span class="token operator">=</span> Order<span class="token punctuation">(</span><span class="token punctuation">)</span>
order<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转到 processing</span>
order<span class="token punctuation">.</span>ship<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 未满足条件，不转换</span>
order<span class="token punctuation">.</span>is_ready <span class="token operator">=</span> <span class="token boolean">True</span>
order<span class="token punctuation">.</span>ship<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 现在可以转换到 shipped</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-回调函数" tabindex="-1"><a class="header-anchor" href="#_4-2-回调函数" aria-hidden="true">#</a> <strong>4.2 回调函数</strong></h4><p>在状态转换时执行自定义逻辑：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TrafficLight</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>transitions <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;before&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;on_leave_red&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;after&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;on_enter_yellow&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>machine <span class="token operator">=</span> Machine<span class="token punctuation">(</span>model<span class="token operator">=</span>self<span class="token punctuation">,</span> states<span class="token operator">=</span>self<span class="token punctuation">.</span>states<span class="token punctuation">,</span> transitions<span class="token operator">=</span>self<span class="token punctuation">.</span>transitions<span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_leave_red</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Leaving red state...&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_enter_yellow</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Entered yellow state!&quot;</span><span class="token punctuation">)</span>

light <span class="token operator">=</span> TrafficLight<span class="token punctuation">(</span><span class="token punctuation">)</span>
light<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：Leaving red state...</span>
light<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：Entered yellow state!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五-可视化状态机" tabindex="-1"><a class="header-anchor" href="#五-可视化状态机" aria-hidden="true">#</a> <strong>五. 可视化状态机</strong></h3><p>通过 <code>Machine.get_graph()</code> 生成状态图（需安装 <code>graphviz</code>）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transitions <span class="token keyword">import</span> Machine
<span class="token keyword">from</span> transitions<span class="token punctuation">.</span>extensions <span class="token keyword">import</span> GraphMachine

<span class="token keyword">class</span> <span class="token class-name">TrafficLight</span><span class="token punctuation">(</span>GraphMachine<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">]</span>
        transitions <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> states<span class="token operator">=</span>states<span class="token punctuation">,</span> transitions<span class="token operator">=</span>transitions<span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> 
                        graph<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> auto_transitions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&quot;Traffic Light FSM&quot;</span><span class="token punctuation">)</span>

light <span class="token operator">=</span> TrafficLight<span class="token punctuation">(</span><span class="token punctuation">)</span>
light<span class="token punctuation">.</span>get_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token string">&#39;traffic_light.png&#39;</span><span class="token punctuation">,</span> prog<span class="token operator">=</span><span class="token string">&#39;dot&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 生成 PNG 图片</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六-进阶用法" tabindex="-1"><a class="header-anchor" href="#六-进阶用法" aria-hidden="true">#</a> <strong>六. 进阶用法</strong></h3><h4 id="_6-1-分层状态机" tabindex="-1"><a class="header-anchor" href="#_6-1-分层状态机" aria-hidden="true">#</a> <strong>6.1 分层状态机</strong></h4><p>支持嵌套状态（Hierarchical State Machines）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transitions<span class="token punctuation">.</span>extensions <span class="token keyword">import</span> HierarchicalMachine

<span class="token keyword">class</span> <span class="token class-name">Elevator</span><span class="token punctuation">(</span>HierarchicalMachine<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        states <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">&#39;stopped&#39;</span><span class="token punctuation">,</span> 
            <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;children&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token comment"># 子状态</span>
        <span class="token punctuation">]</span>
        transitions <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;stopped&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;stop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;stopped&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;go_up&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving.up&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;go_down&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving.down&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> states<span class="token operator">=</span>states<span class="token punctuation">,</span> transitions<span class="token operator">=</span>transitions<span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token string">&#39;stopped&#39;</span><span class="token punctuation">)</span>

elevator <span class="token operator">=</span> Elevator<span class="token punctuation">(</span><span class="token punctuation">)</span>
elevator<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 进入 moving 状态</span>
elevator<span class="token punctuation">.</span>go_up<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 进入 moving.up</span>
elevator<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 返回 stopped</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-并发状态机" tabindex="-1"><a class="header-anchor" href="#_6-2-并发状态机" aria-hidden="true">#</a> <strong>6.2 并发状态机</strong></h4><p>通过 <code>parallel=True</code> 支持多状态并发（需安装 <code>transitions-parallel</code>）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transitions<span class="token punctuation">.</span>extensions <span class="token keyword">import</span> ParallelMachine

<span class="token keyword">class</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span>ParallelMachine<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        states <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;on_enter&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;start_idle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;moving&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;on_enter&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;start_moving&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;sensing&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;on_enter&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;start_sensing&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
        transitions <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;moving&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sensing&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;stop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;moving&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sensing&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;idle&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> states<span class="token operator">=</span>states<span class="token punctuation">,</span> transitions<span class="token operator">=</span>transitions<span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span> 
                        parallel<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> auto_transitions<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

robot <span class="token operator">=</span> Robot<span class="token punctuation">(</span><span class="token punctuation">)</span>
robot<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 并发进入 moving 和 sensing 状态</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="七-常见问题" tabindex="-1"><a class="header-anchor" href="#七-常见问题" aria-hidden="true">#</a> <strong>七. 常见问题</strong></h3><h4 id="q1-如何处理无效的事件" tabindex="-1"><a class="header-anchor" href="#q1-如何处理无效的事件" aria-hidden="true">#</a> <strong>Q1: 如何处理无效的事件？</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>light <span class="token operator">=</span> TrafficLight<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    light<span class="token punctuation">.</span>change<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 如果当前状态不允许 change 事件，会抛出 MachineError</span>
<span class="token keyword">except</span> MachineError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="q2-如何自定义状态转换逻辑" tabindex="-1"><a class="header-anchor" href="#q2-如何自定义状态转换逻辑" aria-hidden="true">#</a> <strong>Q2: 如何自定义状态转换逻辑？</strong></h4><p>通过 <code>conditions</code> 或 <code>unless</code> 参数添加条件判断：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&#39;trigger&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;approve&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dest&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;approved&#39;</span><span class="token punctuation">,</span> 
 <span class="token string">&#39;conditions&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>is_valid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>is_paid<span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="八-总结" tabindex="-1"><a class="header-anchor" href="#八-总结" aria-hidden="true">#</a> <strong>八. 总结</strong></h3><p><code>transitions</code> 是一个功能强大且易用的状态机库，适合快速构建和管理复杂的业务逻辑。通过以下步骤，你可以轻松上手：</p><ol><li>定义状态和事件。</li><li>使用 <code>Machine</code> 初始化状态机。</li><li>添加条件和回调函数增强功能。</li><li>可视化状态图辅助调试。</li></ol>`,42),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","10、Python状态机.html.vue"]]);export{k as default};
