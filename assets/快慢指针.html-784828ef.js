import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as p,a as s,b as n,d as e,e as t}from"./app-2d0f66e1.js";const c={},u=t('<h1 id="快慢指针" tabindex="-1"><a class="header-anchor" href="#快慢指针" aria-hidden="true">#</a> 快慢指针</h1><h3 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念" aria-hidden="true">#</a> 一、概念</h3><p>什么叫做快慢指针呢？就是两指针都是从头开始，一起向某个方向移动，这个在链表中使用更加多，但是在数组中用到的也是非常多的，这一类题目基本上有个比较明显的特征，就是原地修改数组，比如<strong>原地去重，原地修改</strong>，当我们遇到这些关键字就需要注意了我们需要用到快慢指针。</p><p>关于使用快慢指针还有一点比较重要，就是快指针代表着什么，慢指针表示着什么，当它们相遇时我们需要做什么。</p><p>基本上就是统一的思路</p><ul><li>快指针：表示我们要遍历的元素信息</li><li>慢指针：表示我们要维护元素</li></ul><h3 id="二、经典例题" tabindex="-1"><a class="header-anchor" href="#二、经典例题" aria-hidden="true">#</a> 二、经典例题</h3>',7),d={id:"_27-移除元素",tabindex:"-1"},r=s("a",{class:"header-anchor",href:"#_27-移除元素","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.cn/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"nums",-1),v=s("code",null,"val",-1),b={href:"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"val",-1),_=s("code",null,"O(1)",-1),g={href:"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [0,1,2,2,3,0,4,2], val = 2
输出：5, nums = [0,1,3,0,4]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        slow <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> fast <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># fast指的是我们需要遍历的元素，slow指的是我们要维护的元素</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
                slow <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> slow

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),x={id:"_26-删除有序数组中的重复项",tabindex:"-1"},w=s("a",{class:"header-anchor",href:"#_26-删除有序数组中的重复项","aria-hidden":"true"},"#",-1),E={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"},y=s("strong",null,"非严格递增排列",-1),B=s("code",null,"nums",-1),N={href:"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},C=s("strong",null,"只出现一次",-1),L=s("strong",null,"相对顺序",-1),V=s("strong",null,"一致",-1),A=s("code",null,"nums",-1),F=t(`<p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int[] nums = [...]; // 输入数组
int[] expectedNums = [...]; // 长度正确的期望答案

int k = removeDuplicates(nums); // 调用

assert k == expectedNums.length;
for (int i = 0; i &lt; k; i++) {
    assert nums[i] == expectedNums[i];
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [1,1,2]
输出：2, nums = [1,2,_]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        slow <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment"># fast指的是要遍历的元素，slow指的是我们要维护的元素的末尾元素</span>
        <span class="token keyword">for</span> fast <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">:</span>
                slow <span class="token operator">+=</span> <span class="token number">1</span>
                nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
     
        <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">return</span> slow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function S(D,I){const a=i("ExternalLinkIcon");return l(),p("div",null,[u,s("h4",d,[r,n(),s("a",m,[n("27. 移除元素"),e(a)])]),s("p",null,[n("给你一个数组 "),k,n(" 和一个值 "),v,n("，你需要 "),s("strong",null,[s("a",b,[n("原地"),e(a)])]),n(" 移除所有数值等于 "),h,n(" 的元素，并返回移除后数组的新长度。")]),s("p",null,[n("不要使用额外的数组空间，你必须仅使用 "),_,n(" 额外空间并 "),s("strong",null,[s("a",g,[n("原地 "),e(a)]),n("修改输入数组")]),n("。")]),f,s("h4",x,[w,n(),s("a",E,[n("26. 删除有序数组中的重复项"),e(a)])]),s("p",null,[n("给你一个 "),y,n(" 的数组 "),B,n(" ，请你**"),s("a",N,[n(" 原地"),e(a)]),n("** 删除重复出现的元素，使每个元素 "),C,n(" ，返回删除后数组的新长度。元素的 "),L,n(" 应该保持 "),V,n(" 。然后返回 "),A,n(" 中唯一元素的个数。")]),F])}const j=o(c,[["render",S],["__file","快慢指针.html.vue"]]);export{j as default};
