import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,a as n,b as s,d as e,e as t}from"./app-2d0f66e1.js";const c={},u=n("h1",{id:"_5、字典问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5、字典问题","aria-hidden":"true"},"#"),s(" 5、字典问题")],-1),d={id:"_1090-受标签影响的最大值",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#_1090-受标签影响的最大值","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/largest-values-from-labels/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>我们有一个 <code>n</code> 项的集合。给出两个整数数组 <code>values</code> 和 <code>labels</code> ，第 <code>i</code> 个元素的值和标签分别是 <code>values[i]</code> 和 <code>labels[i]</code>。还会给出两个整数 <code>numWanted</code> 和 <code>useLimit</code> 。</p><p>从 <code>n</code> 个元素中选择一个子集 <code>s</code> :</p><ul><li>子集 <code>s</code> 的大小 <strong>小于或等于</strong> <code>numWanted</code> 。</li><li><code>s</code> 中 <strong>最多</strong> 有相同标签的 <code>useLimit</code> 项。</li></ul><p>一个子集的 <strong>分数</strong> 是该子集的值之和。</p><p>返回子集 <code>s</code> 的最大 <strong>分数</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1
输出：9
解释：选出的子集是第一项，第三项和第五项。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2
输出：12
解释：选出的子集是第一项，第二项和第三项。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1
输出：16
解释：选出的子集是第一项和第四项。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路：</p><p>我们需要对组合后的集合进行排序，然后找到最多numWanted，每个标签最多useLimit的子集</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">largestValsFromLabels</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span> values<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> numWanted<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> useLimit<span class="token punctuation">:</span> <span class="token builtin">int</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict

        result <span class="token operator">=</span> <span class="token number">0</span>
        items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>labels<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>
            items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

        hash_data <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>
            lable<span class="token punctuation">,</span> val <span class="token operator">=</span> item
            <span class="token keyword">if</span> hash_data<span class="token punctuation">[</span>lable<span class="token punctuation">]</span> <span class="token operator">&lt;</span> useLimit <span class="token keyword">and</span> numWanted <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                result <span class="token operator">+=</span> val
                numWanted <span class="token operator">-=</span> <span class="token number">1</span>
                hash_data<span class="token punctuation">[</span>lable<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
        <span class="token keyword">return</span> result

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),b={id:"_763-划分字母区间",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_763-划分字母区间","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/partition-labels/",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>给你一个字符串 <code>s</code> 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。</p><p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 <code>s</code> 。</p><p>返回一个表示每个字符串片段的长度的列表。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;ababcbacadefegdehijhklij&quot;
输出：[9,7,8]
解释：
划分结果为 &quot;ababcbaca&quot;、&quot;defegde&quot;、&quot;hijhklij&quot; 。
每个字母最多出现在一个片段中。
像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 这样的划分是错误的，因为划分的片段数较少。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;eccbbbbdec&quot;
输出：[10]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><p>思路：</p><ul><li>存储每个字符最后出现的位置</li><li>找到当前字符出现的最远位置</li><li>如果当前位置是最远位置，表示可以分割出一个区间</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        last_distance <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            last_distance<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> i

        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        start <span class="token operator">=</span> <span class="token number">0</span>
        end <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> last_distance<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> end <span class="token operator">==</span> i<span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> result

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function _(f,x){const a=p("ExternalLinkIcon");return i(),l("div",null,[u,n("h3",d,[r,s(),n("a",k,[s("1090. 受标签影响的最大值"),e(a)])]),v,n("h3",b,[m,s(),n("a",g,[s("763. 划分字母区间"),e(a)])]),h])}const L=o(c,[["render",_],["__file","5、贪心字典.html.vue"]]);export{L as default};
