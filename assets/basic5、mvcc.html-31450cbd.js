const e=JSON.parse('{"key":"v-04842045","path":"/posts/Mysql/basic5%E3%80%81mvcc.html","title":"5、MVCC","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["mysql"],"tag":["explain","mysql调优"],"description":"5、MVCC 一、mvcc 概念 被称为多版本并发控制，在数据库中为了实现高并发的数据访问，对于数据进行多版本的处理，通过事务的可见性保证事务 最大的好处就是不加锁，读写不冲突，极大提升系统的并发性。目前mvcc只可以在rc和rr两种级别下工作 * MVCC，多版本并发控制, 用于实现**读已提交**和**可重复读**隔离级别。 * MVCC的核心就是 Undo log多版本链 + Read view， “MV”就是通过 Undo log来保存数据的历史版本，实现多版本的管理， “CC”是通过 Read-view来实现管理， 通过 Read-view原则来决定数据是否显示。同时针对不同的隔离级别， Read view的生成策略不同，也就实现了不同的隔离级别。","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/Mysql/basic5%E3%80%81mvcc.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"5、MVCC"}],["meta",{"property":"og:description","content":"5、MVCC 一、mvcc 概念 被称为多版本并发控制，在数据库中为了实现高并发的数据访问，对于数据进行多版本的处理，通过事务的可见性保证事务 最大的好处就是不加锁，读写不冲突，极大提升系统的并发性。目前mvcc只可以在rc和rr两种级别下工作 * MVCC，多版本并发控制, 用于实现**读已提交**和**可重复读**隔离级别。 * MVCC的核心就是 Undo log多版本链 + Read view， “MV”就是通过 Undo log来保存数据的历史版本，实现多版本的管理， “CC”是通过 Read-view来实现管理， 通过 Read-view原则来决定数据是否显示。同时针对不同的隔离级别， Read view的生成策略不同，也就实现了不同的隔离级别。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T09:50:53.000Z"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"explain"}],["meta",{"property":"article:tag","content":"mysql调优"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T09:50:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5、MVCC\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T09:50:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、mvcc","slug":"一、mvcc","link":"#一、mvcc","children":[]},{"level":3,"title":"二、ReadView","slug":"二、readview","link":"#二、readview","children":[]},{"level":3,"title":"三、总结","slug":"三、总结","link":"#三、总结","children":[]}],"git":{"createdTime":1736258707000,"updatedTime":1742205053000,"contributors":[{"name":"Y-aong","email":"1627469727@qq.com","commits":2}]},"readingTime":{"minutes":4.6,"words":1379},"filePathRelative":"posts/Mysql/basic5、mvcc.md","localizedDate":"July 15, 2023","excerpt":"<h1> 5、MVCC</h1>\\n<h3> 一、mvcc</h3>\\n<h4> 概念</h4>\\n<p>被称为多版本并发控制，在数据库中为了实现高并发的数据访问，对于数据进行多版本的处理，通过事务的可见性保证事务</p>\\n<p>最大的好处就是不加锁，读写不冲突，极大提升系统的并发性。目前mvcc只可以在rc和rr两种级别下工作</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>* MVCC，多版本并发控制, 用于实现**读已提交**和**可重复读**隔离级别。\\n* MVCC的核心就是 Undo log多版本链 + Read view，\\n“MV”就是通过 Undo log来保存数据的历史版本，实现多版本的管理，\\n“CC”是通过 Read-view来实现管理，\\n通过 Read-view原则来决定数据是否显示。同时针对不同的隔离级别， Read view的生成策略不同，也就实现了不同的隔离级别。\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
