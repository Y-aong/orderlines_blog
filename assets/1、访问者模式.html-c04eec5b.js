const t=JSON.parse('{"key":"v-f573c820","path":"/posts/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Robot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1%E3%80%81%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"robot中访问者模式","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-03-09T00:00:00.000Z","category":["源码分析","设计模式","robotframework"],"tag":["源码分析","robotframework","访问者模式"],"description":"robot中访问者模式 一、访问者模式 在看robotframework源码中总是发现有visit这个单词，而且在整个运行中都是反复出现，所以自己就看了下关于这个访问者的设计模式。其实这个设计模式是非常少见的，我们平时使用中也并不常见，但是既然robot中出现了这个我们就来看一下这个设计模式。因为懂了这个设计模式也会更加方便我们看源码。 访问者模式（Visitor Pattern）是一种行为型设计模式，它能够将算法与对象结构分离，使得算法可以独立于对象结构而变化。 该模式的核心概念是，定义一个访问者对象，它是对某个对象结构中各个元素的操作，这种操作可以改变元素的类或状态。 其工作原理是，访问者模式通过定义访问者接口和被访问者接口，将遍历和操作分离开来，从而提高代码的可维护性和可扩展性。","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Robot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1%E3%80%81%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"robot中访问者模式"}],["meta",{"property":"og:description","content":"robot中访问者模式 一、访问者模式 在看robotframework源码中总是发现有visit这个单词，而且在整个运行中都是反复出现，所以自己就看了下关于这个访问者的设计模式。其实这个设计模式是非常少见的，我们平时使用中也并不常见，但是既然robot中出现了这个我们就来看一下这个设计模式。因为懂了这个设计模式也会更加方便我们看源码。 访问者模式（Visitor Pattern）是一种行为型设计模式，它能够将算法与对象结构分离，使得算法可以独立于对象结构而变化。 该模式的核心概念是，定义一个访问者对象，它是对某个对象结构中各个元素的操作，这种操作可以改变元素的类或状态。 其工作原理是，访问者模式通过定义访问者接口和被访问者接口，将遍历和操作分离开来，从而提高代码的可维护性和可扩展性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T09:50:53.000Z"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"源码分析"}],["meta",{"property":"article:tag","content":"robotframework"}],["meta",{"property":"article:tag","content":"访问者模式"}],["meta",{"property":"article:published_time","content":"2024-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T09:50:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"robot中访问者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T09:50:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、访问者模式","slug":"一、访问者模式","link":"#一、访问者模式","children":[]},{"level":3,"title":"二、定义访问者","slug":"二、定义访问者","link":"#二、定义访问者","children":[]},{"level":3,"title":"三、robot如何使用访问者模式","slug":"三、robot如何使用访问者模式","link":"#三、robot如何使用访问者模式","children":[]}],"git":{"createdTime":1742205053000,"updatedTime":1742205053000,"contributors":[{"name":"Y-aong","email":"1627469727@qq.com","commits":1}]},"readingTime":{"minutes":2.74,"words":821},"filePathRelative":"posts/源码分析/Robot源码分析/1、访问者模式.md","localizedDate":"March 9, 2024","excerpt":"<h1> robot中访问者模式</h1>\\n<h3> 一、访问者模式</h3>\\n<p>在看<code>robotframework</code>源码中总是发现有<code>visit</code>这个单词，而且在整个运行中都是反复出现，所以自己就看了下关于这个访问者的设计模式。其实这个设计模式是非常少见的，我们平时使用中也并不常见，但是既然robot中出现了这个我们就来看一下这个设计模式。因为懂了这个设计模式也会更加方便我们看源码。</p>\\n<p><strong>访问者模式（Visitor Pattern）是一种行为型设计模式</strong>，它能够将<strong>算法与对象结构分离，使得算法可以独立于对象结构而变化</strong>。<br>\\n该模式的核心概念是，定义一个访问者对象，它是对某个对象结构中各个元素的操作，这种操作可以改变元素的类或状态。<br>\\n其工作原理是，访问者模式通过定义访问者接口和被访问者接口，将遍历和操作分离开来，从而提高代码的可维护性和可扩展性。</p>","autoDesc":true}');export{t as data};
