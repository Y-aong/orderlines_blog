import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const e={},p=t(`<h1 id="_4、flask-socket的使用" tabindex="-1"><a class="header-anchor" href="#_4、flask-socket的使用" aria-hidden="true">#</a> 4、Flask Socket的使用</h1><p>Flask-SocketIO 是一个扩展 Flask 应用以支持 WebSocket 通信的库。它使得在 Flask 应用中实现实时双向通信变得简单，非常适合用于需要实时更新的应用场景。我在自己的项目中也应用到socket连接这个功能，这里简单总结一下。由于网上使用的方式都是前端使用html的方法来实现，现在很多都不直接使用html加js的实现方式了。所以我这里提供的是前端使用vue来实现socket。</p><h3 id="一、什么是socket" tabindex="-1"><a class="header-anchor" href="#一、什么是socket" aria-hidden="true">#</a> 一、什么是socket</h3><p><strong>Socket（套接字）</strong> 是计算机网络编程中的一个核心概念，它提供了一种在不同设备或同一设备上的进程之间进行<strong>网络通信</strong>的机制。简单来说，<strong>Socket 是网络通信的端点</strong>，允许应用程序通过网络协议（如 TCP、UDP）发送和接收数据。</p><h4 id="_1、socket-的关键特性" tabindex="-1"><a class="header-anchor" href="#_1、socket-的关键特性" aria-hidden="true">#</a> 1、<strong>Socket 的关键特性</strong></h4><ol><li><strong>协议支持</strong>： <ul><li>TCP（传输控制协议）： <ul><li>提供<strong>可靠、有序、无重复</strong>的字节流传输。</li><li>适用于需要数据完整性的场景（如网页浏览、文件传输）。</li></ul></li><li>UDP（用户数据报协议）： <ul><li>提供<strong>无连接、不可靠</strong>的数据包传输。</li><li>适用于对实时性要求高、可容忍少量数据丢失的场景（如视频通话、在线游戏）。</li></ul></li></ul></li></ol><h4 id="_2、socket-的比喻理解" tabindex="-1"><a class="header-anchor" href="#_2、socket-的比喻理解" aria-hidden="true">#</a> 2、<strong>Socket 的比喻理解</strong></h4><ul><li>插座与插头的类比： <ul><li>Socket 就像墙上的<strong>插座</strong>，应用程序如同插入插座的<strong>插头</strong>。</li><li>当两台设备通过插座（Socket）连接电源（网络），即可传输电力（数据）。</li></ul></li><li>电话系统的类比： <ul><li>Socket 是电话的<strong>接口</strong>，IP 地址是电话号码，端口是分机号。</li><li>TCP 像是固定电话（可靠通话），UDP 像是短信（快速但可能丢失）。</li></ul></li></ul><h3 id="二、flask中使用socket" tabindex="-1"><a class="header-anchor" href="#二、flask中使用socket" aria-hidden="true">#</a> 二、flask中使用socket</h3><p>注意这里我使用flask-socket的方式可能和有些网上的使用方式有差别，是通过自定义namespace的方式来定义的。</p><h4 id="_1、安装flask-socket" tabindex="-1"><a class="header-anchor" href="#_1、安装flask-socket" aria-hidden="true">#</a> 1、安装flask-socket</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> flask flask-socketio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要支持 WebSocket（而非仅长轮询），还需安装异步框架（如 <code>eventlet</code> 或 <code>gevent</code>）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> eventlet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、创建falsk-namespace" tabindex="-1"><a class="header-anchor" href="#_2、创建falsk-namespace" aria-hidden="true">#</a> 2、创建falsk NameSpace</h4><p><strong>src/public/api_utils/socket_namespace.py</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># !/usr/bin/env python</span>
<span class="token comment"># -*-coding:utf-8 -*-</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
# File       : socket_namespace.py
# Time       ：2024/9/11 20:45
# Author     ：Y-aong
# version    ：python 3.10
# Description：socketio 命名空间
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> flask_socketio <span class="token keyword">import</span> SocketIO
<span class="token keyword">from</span> flask_socketio<span class="token punctuation">.</span>namespace <span class="token keyword">import</span> Namespace

<span class="token keyword">from</span> conf<span class="token punctuation">.</span>config <span class="token keyword">import</span> OrderLinesConfig<span class="token punctuation">,</span> Redis
<span class="token keyword">from</span> public<span class="token punctuation">.</span>logger <span class="token keyword">import</span> logger
<span class="token keyword">from</span> public<span class="token punctuation">.</span>api_utils<span class="token punctuation">.</span>message_manager <span class="token keyword">import</span> RunningTaskMessageManager<span class="token punctuation">,</span> DebugSignManager<span class="token punctuation">,</span> RunningLoggerMessageManager<span class="token punctuation">,</span> \\
    UIAInfoMessageManager


<span class="token keyword">class</span> <span class="token class-name">RunningLoggerNamespace</span><span class="token punctuation">(</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;运行日志处理&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> socketio<span class="token punctuation">:</span> SocketIO<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>namespace<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>socketio <span class="token operator">=</span> socketio
        self<span class="token punctuation">.</span>running_task_message_manager <span class="token operator">=</span> RunningTaskMessageManager<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>running_logger_manager <span class="token operator">=</span> RunningLoggerMessageManager<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>debug_sign_manager <span class="token operator">=</span> DebugSignManager<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 当socket 连接完成时</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;running logger client connected&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_disconnect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 当socket 中断连接时</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;running logger client disconnected&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_running_logger</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 自定义连接操作</span>
        <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">UiaNamespace</span><span class="token punctuation">(</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> socketio<span class="token punctuation">:</span> SocketIO<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>namespace<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>socketio <span class="token operator">=</span> socketio
        self<span class="token punctuation">.</span>uia_manager <span class="token operator">=</span> UIAInfoMessageManager<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;uia client connected&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_disconnect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;uia client disconnected&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">on_uia</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">register_socketio</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 注册socket，这里使用genvent</span>
    socketio <span class="token operator">=</span> SocketIO<span class="token punctuation">(</span>app<span class="token punctuation">,</span> async_mode<span class="token operator">=</span><span class="token string">&#39;gevent&#39;</span><span class="token punctuation">,</span> cors_allowed_origins<span class="token operator">=</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
    socketio<span class="token punctuation">.</span>on_namespace<span class="token punctuation">(</span>RunningLoggerNamespace<span class="token punctuation">(</span><span class="token string">&#39;/running_logger&#39;</span><span class="token punctuation">,</span> socketio<span class="token punctuation">)</span><span class="token punctuation">)</span>
    socketio<span class="token punctuation">.</span>on_namespace<span class="token punctuation">(</span>UiaNamespace<span class="token punctuation">(</span><span class="token string">&#39;/uia&#39;</span><span class="token punctuation">,</span> socketio<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> socketio

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、运行socket-io" tabindex="-1"><a class="header-anchor" href="#_2、运行socket-io" aria-hidden="true">#</a> 2、运行socket-io</h4><p><strong>src/app.py</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># !/usr/bin/env python</span>
<span class="token comment"># -*-coding:utf-8 -*-</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
# File       : app.py
# Time       ：2023/1/14 22:34
# Author     ：Y-aong
# version    ：python 3.7
# Description：flask enter point
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkey

monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 必须在任何其他导入之前调用</span>
<span class="token keyword">from</span> apis <span class="token keyword">import</span> create_app
<span class="token keyword">from</span> conf<span class="token punctuation">.</span>config <span class="token keyword">import</span> FlaskConfig
<span class="token keyword">from</span> public<span class="token punctuation">.</span>api_utils<span class="token punctuation">.</span>socket_namespace <span class="token keyword">import</span> register_socketio
<span class="token keyword">from</span> public<span class="token punctuation">.</span>schedule_utils<span class="token punctuation">.</span>apscheduler_config <span class="token keyword">import</span> scheduler

<span class="token comment"># 这里返回falsk_app</span>
app <span class="token operator">=</span> create_app<span class="token punctuation">(</span>FlaskConfig<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>

socketio <span class="token operator">=</span> register_socketio<span class="token punctuation">(</span>app<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    scheduler<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 运行socket-io</span>
    socketio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token punctuation">,</span> host<span class="token operator">=</span>FlaskConfig<span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> port<span class="token operator">=</span>FlaskConfig<span class="token punctuation">.</span>PORT<span class="token punctuation">,</span> debug<span class="token operator">=</span>FlaskConfig<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、前端使用socket" tabindex="-1"><a class="header-anchor" href="#三、前端使用socket" aria-hidden="true">#</a> 三、前端使用socket</h3><p><strong>orderlines-web\\src\\views\\graph\\components\\tabbar\\index.vue</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> io<span class="token punctuation">,</span> Socket <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;socket.io-client&quot;</span><span class="token punctuation">;</span>

<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">getProcessVersionOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">getProcessNamespaceOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">getProcessVersionByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">getProcessInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token string">&quot;running_logger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// socket io连接</span>
<span class="token keyword">const</span> <span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">namespace</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  socketIo <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/socket.io&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听连接事件</span>
  socketIo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">websocket:: connected to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> namespace</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听关闭事件</span>
  socketIo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;disconnect&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">websocket:: disconnected to namespace </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 监听接受信息</span>
  socketIo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> topic <span class="token operator">=</span> data<span class="token punctuation">.</span>topic<span class="token punctuation">;</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> data<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
    <span class="token keyword">const</span> receive_process_instance_id <span class="token operator">=</span> data<span class="token punctuation">.</span>process_instance_id<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>topic <span class="token operator">===</span> <span class="token string">&quot;running_logger&quot;</span> <span class="token operator">&amp;&amp;</span> receive_process_instance_id <span class="token operator">===</span> process_instance_id<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      running_edge<span class="token punctuation">.</span>value <span class="token operator">=</span> message<span class="token punctuation">.</span>running_edge<span class="token punctuation">;</span>
      taskProgress<span class="token punctuation">.</span>value <span class="token operator">=</span> message<span class="token punctuation">.</span>task_progress<span class="token punctuation">;</span>
      graph_data<span class="token punctuation">.</span>value <span class="token operator">=</span> message<span class="token punctuation">.</span>graph_data<span class="token punctuation">.</span>graphData<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>topic <span class="token operator">===</span> <span class="token string">&quot;debug_message&quot;</span> <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>debugMessage<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token function">deepEqual</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> sign <span class="token operator">=</span> message<span class="token punctuation">.</span>sign<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          isComplete<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isComplete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          ElMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        debugMessage<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// socket 发送消息</span>
<span class="token keyword">const</span> <span class="token function-variable function">send</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">namespace</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  socketIo<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">websocket:: namespace </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>namespace<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">发送消息:</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、注意事项" tabindex="-1"><a class="header-anchor" href="#四、注意事项" aria-hidden="true">#</a> 四、注意事项</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkey

monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 必须在任何其他导入之前调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用了gevent就必须要加这行，不然有可能会对代码有影响。</p><p>简单来说就是Python 的全局解释器锁（GIL）使得多线程在 CPU 密集型任务中无法充分利用多核 CPU。而 <strong>gevent 的协程（Greenlet）</strong> 通过 <strong>协作式调度</strong> 实现轻量级的并发，但需要依赖 <strong>非阻塞的 I/O 操作</strong>。</p>`,27),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","4、Flask socket.html.vue"]]);export{r as default};
