const t=JSON.parse('{"key":"v-0af57c16","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"3、单例模式","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["单例模式","设计模式"],"description":"3、单例模式 一、定义 单例模式（Singleton Pattern）是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。当时我在学习这个模式时老师讲到一个经典的例子就是购物车，每个人可能会有多个商品但是只可以有一个购物车。 二、实现方式 在Python中实现单例模式有多种方法，每种方法都有其特点和适用场景。 1、使用模块 Python 的模块本身就是天然的单例模式。当第一次导入模块时，Python 解释器会执行模块中的代码并将其加载到内存中；之后再次导入该模块时，解释器只会返回已经加载好的模块对象，而不会重新执行模块代码","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"3、单例模式"}],["meta",{"property":"og:description","content":"3、单例模式 一、定义 单例模式（Singleton Pattern）是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。当时我在学习这个模式时老师讲到一个经典的例子就是购物车，每个人可能会有多个商品但是只可以有一个购物车。 二、实现方式 在Python中实现单例模式有多种方法，每种方法都有其特点和适用场景。 1、使用模块 Python 的模块本身就是天然的单例模式。当第一次导入模块时，Python 解释器会执行模块中的代码并将其加载到内存中；之后再次导入该模块时，解释器只会返回已经加载好的模块对象，而不会重新执行模块代码"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T09:50:53.000Z"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"单例模式"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T09:50:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3、单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T09:50:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、定义","slug":"一、定义","link":"#一、定义","children":[]},{"level":3,"title":"二、实现方式","slug":"二、实现方式","link":"#二、实现方式","children":[]}],"git":{"createdTime":1736258707000,"updatedTime":1742205053000,"contributors":[{"name":"Y-aong","email":"1627469727@qq.com","commits":2}]},"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"posts/设计模式/3、单例模式.md","localizedDate":"July 15, 2023","excerpt":"<h1> 3、单例模式</h1>\\n<h3> 一、定义</h3>\\n<p>单例模式（Singleton Pattern）是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。当时我在学习这个模式时老师讲到一个经典的例子就是购物车，每个人可能会有多个商品但是只可以有一个购物车。</p>\\n<h3> 二、实现方式</h3>\\n<p>在Python中实现单例模式有多种方法，每种方法都有其特点和适用场景。</p>\\n<h4> 1、使用模块</h4>\\n<p>Python 的模块本身就是天然的单例模式。当第一次导入模块时，Python 解释器会执行模块中的代码并将其加载到内存中；之后再次导入该模块时，解释器只会返回已经加载好的模块对象，而不会重新执行模块代码</p>","autoDesc":true}');export{t as data};
