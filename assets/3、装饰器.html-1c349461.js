const n=JSON.parse(`{"key":"v-2ed7bacb","path":"/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/3%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8.html","title":"3、python装饰器","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["装饰器"],"description":"3、python装饰器 定义：装饰器可以在不改变原有代码的基础上，引用源代码的变量和返回值从而可以改变源代码的行为。 一、简单示例 import time def time_use(func): def wrapper(): start = time.time() res = func() end = time.time() print(f'执行用时::{end - start}') return res return wrapper @time_use def test(): for i in range(100000000): pass test()","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/3%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"3、python装饰器"}],["meta",{"property":"og:description","content":"3、python装饰器 定义：装饰器可以在不改变原有代码的基础上，引用源代码的变量和返回值从而可以改变源代码的行为。 一、简单示例 import time def time_use(func): def wrapper(): start = time.time() res = func() end = time.time() print(f'执行用时::{end - start}') return res return wrapper @time_use def test(): for i in range(100000000): pass test()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"装饰器"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3、python装饰器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、简单示例","slug":"一、简单示例","link":"#一、简单示例","children":[]},{"level":3,"title":"二、带有参数","slug":"二、带有参数","link":"#二、带有参数","children":[]},{"level":3,"title":"三、基于类的装饰器","slug":"三、基于类的装饰器","link":"#三、基于类的装饰器","children":[]},{"level":3,"title":"四、使用装饰器实现缓存","slug":"四、使用装饰器实现缓存","link":"#四、使用装饰器实现缓存","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.48,"words":743},"filePathRelative":"posts/Python/进阶知识/3、装饰器.md","localizedDate":"July 15, 2023","excerpt":"<h1> 3、python装饰器</h1>\\n<p>定义：装饰器可以在不改变原有代码的基础上，引用源代码的变量和返回值从而可以改变源代码的行为。</p>\\n<h3> 一、简单示例</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> time\\n\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">time_use</span><span class=\\"token punctuation\\">(</span>func<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">wrapper</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        start <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        res <span class=\\"token operator\\">=</span> func<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        end <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f'执行用时::</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>end <span class=\\"token operator\\">-</span> start<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">'</span></span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> res\\n\\n    <span class=\\"token keyword\\">return</span> wrapper\\n\\n\\n<span class=\\"token decorator annotation punctuation\\">@time_use</span>\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100000000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">pass</span>\\n\\ntest<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
