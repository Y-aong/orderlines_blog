import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-2d0f66e1.js";const t={},p=e(`<h1 id="_9、python异常处理技巧" tabindex="-1"><a class="header-anchor" href="#_9、python异常处理技巧" aria-hidden="true">#</a> 9、Python异常处理技巧</h1><h3 id="一、异常处理" tabindex="-1"><a class="header-anchor" href="#一、异常处理" aria-hidden="true">#</a> 一、异常处理</h3><p>关于异常处理是我们在开发中经常会遇到的，每个开发者都避免不了遇到异常处理，想要开发出来健壮的程序必须要做好异常处理。我也在几年的开发中也总结出来一些异常处理的技巧，在这里也分享一下。</p><h3 id="二、基础捕获-try-except块" tabindex="-1"><a class="header-anchor" href="#二、基础捕获-try-except块" aria-hidden="true">#</a> 二、基础捕获：try-except块</h3><ul><li><h4 id="简单异常捕获" tabindex="-1"><a class="header-anchor" href="#简单异常捕获" aria-hidden="true">#</a> 简单异常捕获</h4><p>当预期某段代码可能引发异常时，将其包裹在<code>try</code>块内 ，然后使用一个或多个<code>except</code>子句来捕获并处理这些异常。例如，处理文件读取错误：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;example.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件未找到 ，请检查路径是否正确。&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h4 id="多异常处理" tabindex="-1"><a class="header-anchor" href="#多异常处理" aria-hidden="true">#</a> 多异常处理</h4><p>有时 ，一段代码可能会抛出多种类型的异常 ，这时可以使用一个<code>except</code>块来同时捕获多个异常类型 ，或者使用多个<code>except</code>块分别处理不同异常：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># 假设这里执行的代码可能抛出多种类型的异常</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>
<span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span> TypeError<span class="token punctuation">)</span> <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;发生错误: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h4 id="异常链抛出" tabindex="-1"><a class="header-anchor" href="#异常链抛出" aria-hidden="true">#</a> 异常链抛出</h4><p>在处理异常时，可能需要保留原始异常信息的同时，添加额外的上下文或重新抛出异常。使用<code>raise from</code>语法可以达到这一目的：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;nonexistent.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> fnf_error<span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;配置文件缺失&quot;</span><span class="token punctuation">)</span> <span class="token keyword">from</span> fnf_error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="三、with上下文管理" tabindex="-1"><a class="header-anchor" href="#三、with上下文管理" aria-hidden="true">#</a> 三、with上下文管理</h3><p>在Python中，<code>with</code>语句结合上下文管理器提供了自动资源管理和代码块执行控制的强大能力，显著提升了代码的整洁度和健壮性。</p><ul><li><h4 id="自动资源管理" tabindex="-1"><a class="header-anchor" href="#自动资源管理" aria-hidden="true">#</a> 自动资源管理</h4></li></ul><p>上下文管理器通过定义<code>__enter__</code>和<code>__exit__</code>方法，使得在<code>with</code>语句块中操作资源时，无论是否发生异常，都能确保资源被正确地初始化和清理。以下是一个简单的文件操作示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ManagedFile</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">file</span>

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 使用自定义上下文管理器</span>
<span class="token keyword">with</span> ManagedFile<span class="token punctuation">(</span><span class="token string">&#39;example.txt&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、捕获特定异常-else-finally块" tabindex="-1"><a class="header-anchor" href="#四、捕获特定异常-else-finally块" aria-hidden="true">#</a> 四、捕获特定异常：else &amp; finally块</h3><ul><li><h4 id="使用else语句" tabindex="-1"><a class="header-anchor" href="#使用else语句" aria-hidden="true">#</a> 使用else语句</h4><p><code>else</code>子句与<code>try-except</code>结构配合使用，用于在没有异常发生的情况下执行代码块。这意味着，如果<code>try</code>部分的代码成功执行（即没有触发任何异常），则直接跳过所有<code>except</code>子句，执行<code>else</code>块内的代码。但是这种方式在<strong>effective python</strong>中不建议使用，else语义不明确</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span>
<span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;发生了除以零的错误&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;运算成功，结果是:&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="finally确保代码执行" tabindex="-1"><a class="header-anchor" href="#finally确保代码执行" aria-hidden="true">#</a> finally确保代码执行</h4><p><code>finally</code>块无论是否发生异常 ，甚至是<code>try</code>块中有<code>return</code>、<code>break</code>等改变控制流的语句，都会保证其内部的代码被执行。这对于释放资源、关闭文件或数据库连接等清理工作尤为重要。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数字是:&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
<span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输入错误，请输入一个整数。&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;这是finally块 ，总是会被执行。&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="五、自定义异常" tabindex="-1"><a class="header-anchor" href="#五、自定义异常" aria-hidden="true">#</a> 五、自定义异常</h3><ul><li><h4 id="继承exception基类" tabindex="-1"><a class="header-anchor" href="#继承exception基类" aria-hidden="true">#</a> 继承Exception基类</h4></li></ul><p>这种方式非常常见，在我们开发中常常会针对于某个异常封装一个特定的异常类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">OrderLineRunningException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">OrderLineStopException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>


<span class="token keyword">class</span> <span class="token class-name">OrderLineTimeoutException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也可以自定义一些属性，这样在处理异常时 ，可以获得更多的上下文信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomErrorWithDetails</span><span class="token punctuation">(</span>CustomError<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>detail <span class="token operator">=</span> detail

<span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> CustomErrorWithDetails<span class="token punctuation">(</span><span class="token string">&quot;数据为空&quot;</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">&quot;缺少必要的输入数据&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    process_data<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> CustomErrorWithDetails <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;错误信息: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">, 详细信息: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、主动抛出异常" tabindex="-1"><a class="header-anchor" href="#六、主动抛出异常" aria-hidden="true">#</a> 六、主动抛出异常</h3><ul><li><h4 id="主动抛出异常" tabindex="-1"><a class="header-anchor" href="#主动抛出异常" aria-hidden="true">#</a> 主动抛出异常</h4><p>这个是非常常见的一个技巧，当条件不满足预期我们主动抛出异常。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">calculate_square_root</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;负数没有平方根&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> n <span class="token operator">**</span> <span class="token number">0.5</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>calculate_square_root<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 输出: 负数没有平方根</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><h4 id="函数调用栈中的异常" tabindex="-1"><a class="header-anchor" href="#函数调用栈中的异常" aria-hidden="true">#</a> 函数调用栈中的异常</h4><p>当函数内部抛出异常而未被捕获时 ，异常会向上传递至调用该函数的上一层，这一过程会沿着调用栈逐级回溯 ，直至遇到合适的<code>except</code>块捕获该异常，或最终未被捕获导致程序终止。理解这一过程对于调试和设计异常处理逻辑非常重要。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">inner_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;内部错误&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">outer_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    inner_function<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    outer_function<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;捕获到异常:&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token comment"># 输出: 捕获到异常: 内部错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="七、异常的绝杀——日志" tabindex="-1"><a class="header-anchor" href="#七、异常的绝杀——日志" aria-hidden="true">#</a> 七、异常的绝杀——日志</h3><p>我相信每个开发都对于日志都是无比的熟悉，合理利用<code>logging</code>模块记录日志信息是监控程序运行状态、诊断问题的关键实践。通过精细的日志管理，可以大幅提升系统的可维护性和故障排查效率。</p><p>这里要注意两点</p><ul><li>日志的级别设置</li><li>异常时记录日志信息</li></ul><p>结合异常处理与日志记录，可以在异常发生时自动记录详细的错误信息 ，这对于追踪和分析问题原因至关重要。通过在<code>except</code>块内使用<code>logging.error</code>或更高级别的方法记录异常，可以确保异常情况被完整记录。想打印出异常的详细信息还要记住这个模块<strong>traceback</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> traceback


<span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> a <span class="token operator">/</span> b
    <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># division by zero</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

        <span class="token comment"># Traceback (most recent call last):</span>
        <span class="token comment">#   File &quot;E:\\code\\orderlines\\orderlines\\demo.py&quot;, line 6, in divide</span>
        <span class="token comment">#     result = a / b</span>
        <span class="token comment"># ZeroDivisionError: division by zero</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


divide<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="八、调试中的异常检查——assert" tabindex="-1"><a class="header-anchor" href="#八、调试中的异常检查——assert" aria-hidden="true">#</a> 八、调试中的异常检查——assert</h3><p>在Python程序开发和调试阶段，<code>assert</code>语句是一种强大的工具 ，用于在代码中插入检查点，确保变量或表达式的预期状态。但是<strong>华为python开发规范中不建议在正式代码使用这种方式</strong>，但是我这里说的是<strong>调试中使用</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">increment_counter</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> counter <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Counter should not be negative&quot;</span>
    counter <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> counter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管<code>assert</code>在遇到失败时会引发<code>AssertionError</code>，但它与直接使用<code>if</code>语句抛出异常有本质区别：</p><ul><li><strong>启用与禁用</strong>：通过 <code>-O</code> 或 <code>-OO</code> 命令行选项运行Python程序时，所有<code>assert</code>语句将被忽略，这使得生产环境中的性能影响最小。而显式抛出的异常不会受此影响。</li><li><strong>意图表达</strong>：<code>assert</code>主要用于自我检查，表达开发者对代码状态的期望。异常处理则更多关注于程序中可能遇到的外部或内部错误 ，并提供恢复机制。</li><li><strong>调试信息</strong>：<code>assert</code>失败时 ，会提供失败的表达式和所在位置的信息 ，这对于调试非常有帮助。而自定义异常可以携带更丰富的上下文信息，适合对外部用户或下游代码解释错误原因。</li></ul><h3 id="九、异常装饰器" tabindex="-1"><a class="header-anchor" href="#九、异常装饰器" aria-hidden="true">#</a> 九、异常装饰器</h3><p>基础的异常处理装饰器可以捕获并处理被装饰函数可能抛出的异常 ，提供统一的错误处理逻辑。这类方式对于<strong>UI自动化测试</strong>中有奇效，因为异常时自动化测试需要看到当前的页面状态更加方便排查bug</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging

<span class="token keyword">def</span> <span class="token function">log_exceptions</span><span class="token punctuation">(</span>log_to_file<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;捕获到异常: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> log_to_file<span class="token punctuation">:</span>
                    logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;异常信息: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> exc_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> decorator

logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">&#39;app.log&#39;</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@log_exceptions</span><span class="token punctuation">(</span>log_to_file<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">divide_with_logging</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">/</span> y

<span class="token keyword">print</span><span class="token punctuation">(</span>divide_with_logging<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 除了打印异常 ，还会记录到app.log文件中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、异常和性能" tabindex="-1"><a class="header-anchor" href="#_10、异常和性能" aria-hidden="true">#</a> 10、异常和性能</h3><p>在Python应用中，合理使用异常处理机制对于提升程序的健壮性至关重要，但同时也需注意其对性能的影响。</p><p>异常处理在Python中相对昂贵，特别是在异常被频繁触发的场景下。每次异常抛出和捕获都会消耗额外的CPU周期，包括堆栈展开、异常对象的创建、以及异常处理逻辑的执行。因此，在性能敏感的代码段 ，减少不必要的异常使用是非常必要的。</p><p>我来举个<code>Effective Python</code>中的一个例子</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是利用KeyError异常。如果程序抛出了这个异常，那说明要获取的键不在字典里。这种方式虽然可行但是成本比较大。</p><p>举个例子</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> timeit


<span class="token keyword">def</span> <span class="token function">with_exception_check</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Invalid value&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> num
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">def</span> <span class="token function">without_exception</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> num
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>  <span class="token comment"># 或者其他处理方式</span>


<span class="token comment"># 测试两种情况的性能差异</span>
exception_time <span class="token operator">=</span> timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token string">&#39;with_exception_check(0)&#39;</span><span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token operator">=</span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>
no_exception_time <span class="token operator">=</span> timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token string">&#39;without_exception(0)&#39;</span><span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token operator">=</span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;异常处理耗时: </span><span class="token interpolation"><span class="token punctuation">{</span>exception_time<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token comment"># 异常处理耗时: 0.0024798000004011556</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;无异常处理耗时: </span><span class="token interpolation"><span class="token punctuation">{</span>no_exception_time<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token comment"># 无异常处理耗时: 0.00041819999933068175</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子应该比较明显了。</p><p>尽管异常可以作为一种控制流的手段，比如用于替代条件判断 ，但这并不是其设计初衷。频繁使用异常来控制程序流程不仅会影响性能，还可能导致代码逻辑难以理解和维护。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">read_file_contents</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;文件未找到&quot;</span>

<span class="token comment"># 更好的做法是预先检查文件存在</span>
<span class="token keyword">def</span> <span class="token function">read_file_contents_optimized</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> os
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;文件未找到&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","9、Python异常处理策略.html.vue"]]);export{d as default};
