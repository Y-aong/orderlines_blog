import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as s,b as n,d as l,e as p}from"./app-2d0f66e1.js";const i={},r=p(`<h1 id="_12、monkey-patch-all" tabindex="-1"><a class="header-anchor" href="#_12、monkey-patch-all" aria-hidden="true">#</a> 12、monkey.patch_all() ？</h1><h3 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言：</h3><p>曾经在使用flask-socket中不添加monkey.patch_all()遇到一些莫名奇妙的错误。所以这里查了些资料关于monkey.patch_all。</p><h3 id="一、monkey-patch-all-是什么" tabindex="-1"><a class="header-anchor" href="#一、monkey-patch-all-是什么" aria-hidden="true">#</a> 一、<strong><code>monkey.patch_all()</code> 是什么？</strong></h3><p><code>monkey.patch_all()</code> 是 <strong>gevent</strong> 库中的一个核心函数，用于在程序启动时动态替换标准库中的某些模块（如 <code>socket</code>、<code>threading</code>、<code>select</code> 等），使其支持 <strong>非阻塞的协程操作</strong>。<br> 其核心作用是让标准库的阻塞式 I/O 操作（如网络请求、文件读写）在 gevent 的协程（Greenlet）框架下运行，从而实现 <strong>高效的异步编程</strong>。</p><h3 id="二、为什么要添加-monkey-patch-all" tabindex="-1"><a class="header-anchor" href="#二、为什么要添加-monkey-patch-all" aria-hidden="true">#</a> 二、<strong>为什么要添加 <code>monkey.patch_all()</code>？</strong></h3><h4 id="_1-解决阻塞问题" tabindex="-1"><a class="header-anchor" href="#_1-解决阻塞问题" aria-hidden="true">#</a> <strong>1. 解决阻塞问题</strong></h4><p>Python 的全局解释器锁（GIL）使得多线程在 CPU 密集型任务中无法充分利用多核 CPU。而 <strong>gevent 的协程（Greenlet）</strong> 通过 <strong>协作式调度</strong> 实现轻量级的并发，但需要依赖 <strong>非阻塞的 I/O 操作</strong>。</p><ul><li><strong>问题</strong>：标准库中的许多 I/O 操作（如 <code>socket.recv()</code>）是阻塞的，会阻止整个协程的事件循环，导致其他协程无法执行。</li><li><strong>解决方案</strong>：通过 <code>monkey.patch_all()</code> 替换标准库模块，使其调用 gevent 的非阻塞实现（如 <code>gevent.socket</code> 代替 <code>socket</code>），从而避免阻塞。</li></ul><h4 id="_2-兼容性与透明性" tabindex="-1"><a class="header-anchor" href="#_2-兼容性与透明性" aria-hidden="true">#</a> <strong>2. 兼容性与透明性</strong></h4><ul><li><p><strong>无需修改代码</strong>：打补丁后，你的代码可以继续使用标准库的 API（如 <code>socket</code>、<code>requests</code>），但底层已切换为非阻塞模式。</p></li><li><p><strong>示例</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gevent<span class="token punctuation">.</span>monkey
gevent<span class="token punctuation">.</span>monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 替换标准库模块</span>

<span class="token keyword">import</span> socket  <span class="token comment"># 实际使用的是 gevent.socket</span>
s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment"># 非阻塞操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-提升性能" tabindex="-1"><a class="header-anchor" href="#_3-提升性能" aria-hidden="true">#</a> <strong>3. 提升性能</strong></h4><ul><li><strong>高并发场景</strong>：例如，使用 <code>requests</code> 发送多个 HTTP 请求时，若未打补丁，每个请求会阻塞主线程；打补丁后，请求会以非阻塞方式执行，协程可以切换到其他任务，显著提升吞吐量。</li><li><strong>I/O 密集型任务</strong>：如网络爬虫、实时聊天服务器等，通过非阻塞 I/O 实现高并发。</li></ul><h3 id="三、如何使用-monkey-patch-all" tabindex="-1"><a class="header-anchor" href="#三、如何使用-monkey-patch-all" aria-hidden="true">#</a> 三、<strong>如何使用 <code>monkey.patch_all()</code>？</strong></h3><h4 id="_1-在程序入口尽早调用" tabindex="-1"><a class="header-anchor" href="#_1-在程序入口尽早调用" aria-hidden="true">#</a> <strong>1. 在程序入口尽早调用</strong></h4><p>必须在 <strong>导入其他模块之前</strong> 调用 <code>patch_all()</code>，否则补丁可能无效：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gevent<span class="token punctuation">.</span>monkey
gevent<span class="token punctuation">.</span>monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 第一行调用</span>

<span class="token keyword">import</span> socket  <span class="token comment"># 已被替换为 gevent.socket</span>
<span class="token keyword">import</span> requests  <span class="token comment"># 依赖的 socket 也是非阻塞的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-选择性补丁-可选" tabindex="-1"><a class="header-anchor" href="#_2-选择性补丁-可选" aria-hidden="true">#</a> <strong>2. 选择性补丁（可选）</strong></h4><p>如果只需要替换部分模块，可以指定参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>gevent<span class="token punctuation">.</span>monkey<span class="token punctuation">.</span>patch_socket<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 仅替换 socket 模块</span>
gevent<span class="token punctuation">.</span>monkey<span class="token punctuation">.</span>patch_os<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 替换 os 模块的阻塞函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、示例-对比补丁前后的效果" tabindex="-1"><a class="header-anchor" href="#四、示例-对比补丁前后的效果" aria-hidden="true">#</a> 四、<strong>示例：对比补丁前后的效果</strong></h3><h4 id="场景-发送三个-http-请求" tabindex="-1"><a class="header-anchor" href="#场景-发送三个-http-请求" aria-hidden="true">#</a> <strong>场景</strong>：发送三个 HTTP 请求</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> gevent
<span class="token comment"># gevent.monkey.patch_socket() </span>
<span class="token keyword">import</span> requests

<span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Starting </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Finished </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;https://httpbin.org/delay/2&quot;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span>

<span class="token comment"># 未打补丁时：</span>
<span class="token comment"># 各请求串行执行，总耗时 ~6秒</span>
<span class="token comment"># 打补丁后：</span>
<span class="token comment"># 请求并行执行，总耗时 ~2秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="补丁前后的区别" tabindex="-1"><a class="header-anchor" href="#补丁前后的区别" aria-hidden="true">#</a> <strong>补丁前后的区别</strong></h4><table><thead><tr><th>补丁前（阻塞模式）</th><th>补丁后（非阻塞模式）</th></tr></thead><tbody><tr><td><code>requests.get()</code> 阻塞线程，协程无法切换</td><td><code>requests.get()</code> 非阻塞，协程可切换到其他任务</td></tr><tr><td>串行执行，性能低</td><td>并行执行，性能高</td></tr></tbody></table><h3 id="五、注意事项" tabindex="-1"><a class="header-anchor" href="#五、注意事项" aria-hidden="true">#</a> 五、<strong>注意事项</strong></h3><ol><li><strong>版本兼容性</strong>： <ul><li>在 <strong>Python 3.10+</strong> 中，<code>gevent</code> 的某些补丁可能因新版本的 asyncio 机制而失效（需等待 gevent 更新）。</li></ul></li><li><strong>第三方库的兼容性</strong>： <ul><li>部分依赖标准库的库（如某些数据库驱动）可能需要额外处理。例如，<code>psycopg2</code> 需要使用 <code>psycopg2-pool</code> 或 <code>asyncpg</code> 替代。</li></ul></li><li><strong>不要过度补丁</strong>： <ul><li>避免在补丁后混用多线程和协程，可能引发竞争条件。</li></ul></li></ol><h3 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结" aria-hidden="true">#</a> 六、<strong>总结</strong></h3><ul><li><strong><code>monkey.patch_all()</code> 的核心作用</strong>：让标准库的阻塞式 I/O 操作在 gevent 协程中非阻塞执行。</li><li><strong>为什么需要它</strong>： <ol><li>避免阻塞导致的性能瓶颈。</li><li>无需修改代码即可兼容协程模型。</li><li>实现高并发场景下的高效 I/O 处理。</li></ol></li><li><strong>最佳实践</strong>：在程序入口尽早调用，并确保依赖库与 gevent 兼容。</li></ul>`,29),d={href:"http://www.gevent.org/",target:"_blank",rel:"noopener noreferrer"};function u(h,k){const a=t("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("如果需要更深入的了解，可以参考 "),s("a",d,[n("gevent 官方文档"),l(a)]),n(" 或知识库中提到的猴子补丁原理。")])])}const v=e(i,[["render",u],["__file","12、monkey patch_all是什么.html.vue"]]);export{v as default};
