import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as i,a as n,b as e,d as s,e as t}from"./app-2d0f66e1.js";const d={},p=n("h1",{id:"_2、基础概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2、基础概念","aria-hidden":"true"},"#"),e(" 2、基础概念")],-1),c={href:"https://kubernetes.io/zh-cn/docs/concepts/overview/",target:"_blank",rel:"noopener noreferrer"},u=t('<p>详细信息参阅官网</p><h3 id="二、k8s对象" tabindex="-1"><a class="header-anchor" href="#二、k8s对象" aria-hidden="true">#</a> 二、k8s对象</h3><p>k8s里面操作的资源实体就是k8s的对象，可以使用yaml来声明对象，然后让k8s根据yaml的声明来创建出这个对象。Kubernetes对象指的是Kubernetes系统的持久化实体，所有这些对象合起来，代表了你集群的实际情况。常规的应用里，我们把应用程序的数据存储在数据库中，<strong>Kubernetes将其数据以Kubernetes对象的形式通过 api server存储在 etcd 中</strong>。</p><ul><li><p>集群中运行了哪些容器化应用程序</p></li><li><p>集群中对应用程序可用的资源（网络，存储等）</p></li><li><p>应用程序相关的策略定义，例如，重启策略、升级策略、容错策略</p></li><li><p>其他Kubernetes管理应用程序时所需要的信息</p></li></ul><h4 id="对象的spec和status" tabindex="-1"><a class="header-anchor" href="#对象的spec和status" aria-hidden="true">#</a> 对象的spec和status</h4><p>每一个 Kubernetes 对象都包含了两个重要的字段：</p><ul><li><code>spec</code> 必须由您来提供，描述了您对该对象所期望的 <strong>目标状态</strong></li><li><code>status</code> 只能由 Kubernetes 系统来修改，描述了该对象在 Kubernetes 系统中的 <strong>实际状态</strong></li></ul><p>Kubernetes通过对应的 <strong>控制器</strong>，<strong>不断地使实际状态趋向于您期望的目标状态</strong></p><h3 id="三、node对象" tabindex="-1"><a class="header-anchor" href="#三、node对象" aria-hidden="true">#</a> 三、node对象</h3><p>**Pod（容器组）**总是在 <strong>Node（节点）</strong> 上运行。Node（节点）是 kubernetes 集群中的计算机，可以是虚拟机或物理机。每个 Node（节点）都由 master 管理。一个 Node（节点）可以有多个Pod（容器组），kubernetes master 会根据每个 Node（节点）上可用资源的情况，自动调度 Pod（容器组）到最佳的 Node（节点）上。</p><p>每个 Kubernetes Node（节点）至少运行：</p><ul><li><p>Kubelet，负责 master 节点和 worker 节点之间通信的进程；管理 Pod（容器组）和 Pod（容器组）内运行的 Container（容器）。</p></li><li><p>kube-proxy，负责进行流量转发</p></li><li><p>容器运行环境（如Docker）负责下载镜像、创建和运行容器等。</p></li></ul><h3 id="四、pod对象" tabindex="-1"><a class="header-anchor" href="#四、pod对象" aria-hidden="true">#</a> 四、pod对象</h3><p><strong>Pod （容器组）</strong> 是一个k8s中一个抽象的概念，用于存放一组 container（可包含一个或多个 container 容器，即图上正方体)，以及这些 container （容器）的一些共享资源。这些资源包括：</p><ul><li>共享存储，称为卷(Volumes)，即图上紫色圆柱</li><li>网络，每个 Pod（容器组）在集群中有个唯一的 IP，pod（容器组）中的 container（容器）共享该IP地址</li><li>container（容器）的基本信息，例如容器的镜像版本，对外暴露的端口等</li></ul><p><strong>Pod（容器组）是 k8s 集群上的最基本的单元</strong>。当我们在 k8s 上创建 Deployment 时，会在<strong>集群上创建包含容器的 Pod (而不是直接创建容器)</strong>。每个Pod都与运行它的 worker 节点（Node）绑定，并保持在那里直到终止或被删除。如果节点（Node）发生故障，则会在群集中的其他可用节点（Node）上运行相同的 Pod（从同样的镜像创建 Container，使用同样的配置，IP 地址不同，Pod 名字不同）。</p><blockquote><p>TIP</p><p>重要：</p><ul><li>Pod 是一组容器（可包含一个或多个应用程序容器），以及共享存储（卷 Volumes）、IP 地址和有关如何运行容器的信息。</li><li>如果多个容器紧密耦合并且需要共享磁盘等资源，则他们应该被部署在同一个Pod（容器组）中。</li></ul></blockquote><h3 id="五、service-和-label" tabindex="-1"><a class="header-anchor" href="#五、service-和-label" aria-hidden="true">#</a> 五、Service 和 Label</h3><p>Service 通过一组 Pod 路由通信。Service 是一种抽象，它允许 Pod 死亡并在 Kubernetes 中复制，而不会影响应用程序。在依赖的 Pod (如应用程序中的前端和后端组件)之间进行发现和路由是由Kubernetes Service 处理的。</p>',19),b={href:"https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/labels",target:"_blank",rel:"noopener noreferrer"},h=t(`<ul><li><p>指定用于开发，测试和生产的对象</p></li><li><p>嵌入版本标签</p></li><li><p>使用 Label 将对象进行分类</p></li></ul><h3 id="六、deployment-部署" tabindex="-1"><a class="header-anchor" href="#六、deployment-部署" aria-hidden="true">#</a> 六、Deployment（部署）</h3><ul><li>在k8s中，通过发布 Deployment，可以创建应用程序 (docker image) 的实例 (docker container)，这个实例会被包含在称为 <strong>Pod</strong> 的概念中，<strong>Pod</strong> 是 k8s 中最小可管理单元。</li><li>在 k8s 集群中发布 Deployment 后，Deployment 将指示 k8s 如何创建和更新应用程序的实例，master 节点将应用程序实例调度到集群中的具体的节点上。</li><li>创建应用程序实例后，Kubernetes Deployment Controller 会持续监控这些实例。如果运行实例的 worker 节点关机或被删除，则 Kubernetes Deployment Controller 将在群集中资源最优的另一个 worker 节点上重新创建一个新的实例。<strong>这提供了一种自我修复机制来解决机器故障或维护问题。</strong></li><li>在容器编排之前的时代，各种安装脚本通常用于启动应用程序，但是不能够使应用程序从机器故障中恢复。通过创建应用程序实例并确保它们在集群节点中的运行实例个数，Kubernetes Deployment 提供了一种完全不同的方式来管理应用程序。</li><li>Deployment 处于 master 节点上，通过发布 Deployment，master 节点会选择合适的 worker 节点创建 Container（即图中的正方体），Container 会被包含在 Pod （即蓝色圆圈）里。</li></ul><p>自愈：针对使用Deployment等部署的应用。</p><p>kubectl run ：直接启动一个pod； 不会产生一次部署信息。所以删除就没</p><p>kubectl create deploy： <strong>启动一个Pod</strong>，以及<strong>记录这次部署信息</strong>。所以，这个pod即使挂了，这次部署信息有，就会强制同步到这次部署信息期望的最终结果；kubectl get deploy,pod 都有内容</p><h3 id="七、namespaces-名称空间" tabindex="-1"><a class="header-anchor" href="#七、namespaces-名称空间" aria-hidden="true">#</a> 七、namespaces 名称空间</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get namespaces

kubectl describe namespaces <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>

<span class="token comment">#隔离 mysql mapper.xml--》dao.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kubernetes 安装成功后，默认有初始化了三个名称空间：</p><ul><li><strong>default</strong> 默认名称空间，如果 Kubernetes 对象中不定义 <code>metadata.namespace</code> 字段，该对象将放在此名称空间下</li><li><strong>kube-system</strong> Kubernetes系统创建的对象放在此名称空间下</li><li><strong>kube-public</strong> 此名称空间自动在安装集群是自动创建，并且所有用户都是可以读取的（即使是那些未登录的用户）。主要是为集群预留的，例如，某些情况下，某些Kubernetes对象应该被所有集群用户看到。</li></ul><blockquote><p>名称空间未来如何隔离</p><p>1）、基于环境隔离（prod,test）</p><p>​ prod：部署的所有应用</p><p>​ test：部署的所有应用</p><p>​</p><p>2）、基于产品线的名称空间（商城，android，ios，backend）；</p><p>3）、基于团队隔离</p></blockquote><h3 id="八、annotation注解" tabindex="-1"><a class="header-anchor" href="#八、annotation注解" aria-hidden="true">#</a> 八、annotation注解</h3><p>注解（annotation）可以用来向 Kubernetes 对象的 <code>metadata.annotations</code> 字段添加任意的信息。Kubernetes 的客户端或者自动化工具可以存取这些信息以实现其自定义的逻辑。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">key1</span><span class="token punctuation">:</span> value1
    <span class="token key atrule">key2</span><span class="token punctuation">:</span> value2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="九、标签和选择器" tabindex="-1"><a class="header-anchor" href="#九、标签和选择器" aria-hidden="true">#</a> 九、标签和选择器</h3><p>标签（Label）是附加在Kubernetes对象上的一组名值对，其意图是按照对用户有意义的方式来标识Kubernetes对象，同时，又不对Kubernetes的核心逻辑产生影响。标签可以用来组织和选择一组Kubernetes对象。您可以在创建Kubernetes对象时为其添加标签，也可以在创建以后再为其添加标签。每个Kubernetes对象可以有多个标签，同一个对象的标签的 Key 必须唯一，例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">key1</span><span class="token punctuation">:</span> value1
    <span class="token key atrule">key2</span><span class="token punctuation">:</span> value2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用标签（Label）可以高效地查询和监听Kubernetes对象，在Kubernetes界面工具（如 Kubenetes Dashboard 或 Kuboard）和 kubectl 中，标签的使用非常普遍。那些非标识性的信息应该记录在 <strong>注解（annotation）</strong></p><blockquote><p>为什么要使用标签</p></blockquote><p>使用标签，用户可以按照自己期望的形式组织 Kubernetes 对象之间的结构，而无需对 Kubernetes 有任何修改。</p><p>应用程序的部署或者批处理程序的部署通常都是多维度的（例如，多个高可用分区、多个程序版本、多个微服务分层）。管理这些对象时，很多时候要针对某一个维度的条件做整体操作，例如，将某个版本的程序整体删除，这种情况下，如果用户能够事先规划好标签的使用，再通过标签进行选择，就会非常地便捷。</p>`,21);function k(m,v){const a=r("ExternalLinkIcon");return l(),i("div",null,[p,n("p",null,[n("a",c,[e("Kubernetes"),s(a)]),e(" 也称为 K8s，是用于自动部署、扩缩和管理容器化应用程序的开源系统。")]),u,n("p",null,[e("Service 匹配一组 Pod 是使用 "),n("a",b,[e("标签(Label)和选择器(Selector)"),s(a)]),e(", 它们是允许对 Kubernetes 中的对象进行逻辑操作的一种分组原语。标签(Label)是附加在对象上的键/值对，可以以多种方式使用:")]),h])}const K=o(d,[["render",k],["__file","2、k8s的概念.html.vue"]]);export{K as default};
