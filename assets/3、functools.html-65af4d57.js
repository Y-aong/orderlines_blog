const n=JSON.parse(`{"key":"v-cbc66bee","path":"/posts/Python/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3%E3%80%81functools.html","title":"3、内置模块functools","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["functools"],"description":"3、内置模块functools 一、内置lru缓存 LRU是一种常用的缓存算法，即最近最少使用，如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小， LRU算法选择将最近最少使用的数据淘汰，保留那些经常被命中的数据。**** import time from functools import lru_cache @lru_cache() # 测试无缓存时将本行注释掉 def fib_memoization(number: int) -&gt; int: if number == 0: return 0 if number == 1: return 1 return fib_memoization(number-1) + fib_memoization(number-2) start = time.time() res = fib_memoization(33) print(res) print(f'耗时: {time.time() - start}s')","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/Python/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3%E3%80%81functools.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"3、内置模块functools"}],["meta",{"property":"og:description","content":"3、内置模块functools 一、内置lru缓存 LRU是一种常用的缓存算法，即最近最少使用，如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小， LRU算法选择将最近最少使用的数据淘汰，保留那些经常被命中的数据。**** import time from functools import lru_cache @lru_cache() # 测试无缓存时将本行注释掉 def fib_memoization(number: int) -&gt; int: if number == 0: return 0 if number == 1: return 1 return fib_memoization(number-1) + fib_memoization(number-2) start = time.time() res = fib_memoization(33) print(res) print(f'耗时: {time.time() - start}s')"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"functools"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3、内置模块functools\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、内置lru缓存","slug":"一、内置lru缓存","link":"#一、内置lru缓存","children":[]},{"level":3,"title":"二、wraps函数","slug":"二、wraps函数","link":"#二、wraps函数","children":[]},{"level":3,"title":"三、偏函数partial","slug":"三、偏函数partial","link":"#三、偏函数partial","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.93,"words":878},"filePathRelative":"posts/Python/基础知识/3、functools.md","localizedDate":"July 15, 2023","excerpt":"<h1> 3、内置模块functools</h1>\\n<h3> 一、内置lru缓存</h3>\\n<p>LRU是一种常用的缓存算法，即最近最少使用，如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小， LRU算法选择将最近最少使用的数据淘汰，保留那些经常被命中的数据。****</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> time\\n<span class=\\"token keyword\\">from</span> functools <span class=\\"token keyword\\">import</span> lru_cache\\n\\n\\n<span class=\\"token decorator annotation punctuation\\">@lru_cache</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>        <span class=\\"token comment\\"># 测试无缓存时将本行注释掉</span>\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">fib_memoization</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span>\\n    <span class=\\"token keyword\\">if</span> number <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">1</span>\\n\\n    <span class=\\"token keyword\\">return</span> fib_memoization<span class=\\"token punctuation\\">(</span>number<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> fib_memoization<span class=\\"token punctuation\\">(</span>number<span class=\\"token operator\\">-</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n\\nstart <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\nres <span class=\\"token operator\\">=</span> fib_memoization<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">33</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f'耗时: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>time<span class=\\"token punctuation\\">.</span>time<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> start<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">s'</span></span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
