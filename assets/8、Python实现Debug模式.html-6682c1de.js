import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-2d0f66e1.js";const t={},p=e(`<h1 id="_8、使用生成器实现debug" tabindex="-1"><a class="header-anchor" href="#_8、使用生成器实现debug" aria-hidden="true">#</a> 8、使用生成器实现debug</h1><h3 id="一、debug功能" tabindex="-1"><a class="header-anchor" href="#一、debug功能" aria-hidden="true">#</a> 一、debug功能</h3><p>Debug，是程序开发人员必会的一项调试程序的技能。可以说如果你不会调试程序，你就没有办法从事编程工作。那么debug可以帮助我们做什么呢？</p><ul><li>追踪代码的运行流程。</li><li>程序运行异常定位。</li></ul><p>其实可以总结出来一点就是调测功能。我自己在开发一个工作流的框架，其中就需要用到debug功能来帮助实现流程的调测，其中特别针对于UI自动化的调测，这简直就是神器，因为UI自动化需要一步一步的运行，在点击下个元素的时候如果失败可能会造成失败重来的尴尬局面，所以debug对于调测就是神器。</p><h3 id="二、迭代器和生成器" tabindex="-1"><a class="header-anchor" href="#二、迭代器和生成器" aria-hidden="true">#</a> 二、迭代器和生成器</h3><p>那么如何在python中实现debug的功能呢？其实看这个标题就是知道，使用生成器来实现debug功能。为了给下面的讲解提供铺垫我们先来说一下什么是生成器？生成器的一些基础知识吧？</p><h4 id="_2-1、什么是迭代" tabindex="-1"><a class="header-anchor" href="#_2-1、什么是迭代" aria-hidden="true">#</a> 2.1、什么是迭代</h4><p>迭代是一种重复获取数据集合中元素的过程，一次只获取一个元素，直到遍历完所有元素。在Python中，迭代通常用于遍历序列（如列表、元组）或任何可迭代对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cherry&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python的迭代机制依赖于两个特殊方法：<code>__iter__</code>和<code>__next__</code>。<code>__iter__</code>方法返回一个迭代器对象，而<code>__next__</code>方法则负责返回迭代器的下一个值。当没有更多的值可返回时，<code>__next__</code>会抛出<code>StopIteration</code>异常。这使得Python中的所有可迭代对象都可以被自然地用于<code>for</code>循环。</p><h4 id="_2-2、迭代器的概念" tabindex="-1"><a class="header-anchor" href="#_2-2、迭代器的概念" aria-hidden="true">#</a> 2.2、迭代器的概念</h4><p>迭代器是一个对象，它实现了迭代协议，即拥有<code>__iter__</code>和<code>__next__</code>方法。<code>__iter__</code>返回迭代器本身，而<code>__next__</code>返回集合的下一个元素。迭代器在没有更多元素时抛出<code>StopIteration</code>异常。</p><p>下面是一个简单的迭代器类示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SimpleIterator</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>limit <span class="token operator">=</span> limit
        self<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>current <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>limit<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration
        value <span class="token operator">=</span> self<span class="token punctuation">.</span>current
        self<span class="token punctuation">.</span>current <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> value

<span class="token comment"># 使用迭代器</span>
it <span class="token operator">=</span> SimpleIterator<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> it<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Python中，我们通常使用<code>iter()</code>函数来获取一个对象的迭代器，然后用<code>next()</code>函数来获取下一个值。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
my_iterator <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>my_iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>my_iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>my_iterator<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3、生成器" tabindex="-1"><a class="header-anchor" href="#_2-3、生成器" aria-hidden="true">#</a> 2.3、生成器</h4><p>生成器函数是一种特殊的迭代器，<strong>使用<code>yield</code>语句暂停和恢复函数的执行</strong>。</p><p>生成器函数通过<code>yield</code>语句生成值，而不是返回一个值。每次调用<code>next()</code>时，函数从上次暂停的地方继续执行，直到遇到下一个<code>yield</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> a
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b

<span class="token comment"># 使用生成器</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> fibonacci<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4、迭代器和生成器的好处" tabindex="-1"><a class="header-anchor" href="#_2-4、迭代器和生成器的好处" aria-hidden="true">#</a> 2.4、迭代器和生成器的好处</h4><p>迭代器</p><ul><li>最大的优点之一是其<strong>惰性计算特性</strong>。这意味着它不会一次性生成所有数据，而是在需要时按需生成。这对于<strong>处理大数据集或无限序列</strong>特别有用，因为它们只占用有限的内存。</li></ul><p>生成器</p><ul><li><p>生成器可以按需产生结果，而不是立即产生结果，节省内存。</p></li><li><p>生成器函数可以暂停执行并返回中间结果，非常适合在调试过程中查看中间状态。</p></li></ul><h3 id="三、实现debug功能" tabindex="-1"><a class="header-anchor" href="#三、实现debug功能" aria-hidden="true">#</a> 三、实现debug功能</h3><p>那么现在到达正题了就是如何实现debug功能。请注意这么一句话就是生成器函数<strong>可以暂停执行并返回中间结果</strong>，非常适合在调试过程中查看中间状态。</p><p>接下来我们使用个例子来说明如何使用生成器函数实现debug</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random


<span class="token keyword">def</span> <span class="token function">task1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> a <span class="token operator">*</span> b


<span class="token keyword">def</span> <span class="token function">task2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> a <span class="token operator">+</span> b


<span class="token keyword">for</span> func <span class="token keyword">in</span> <span class="token punctuation">[</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">]</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
    generator <span class="token operator">=</span> func<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">参数a::</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">, b::</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    sign <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> sign <span class="token operator">==</span> <span class="token string">&#39;start&#39;</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> generator<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;函数</span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">运行结果&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>task1参数a::6, b::16
start
函数task1运行结果
task2参数a::3, b::13
start
函数task2运行结果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相信我写出来这个例子大家会觉得特别简单，就这！！！</p><p>实际上这个功能就是比较简单，就是要看我们能不能想到使用生成器函数来做了。关于这个生成器函数中间有使用到send方法。</p><p>Python的生成器支持send方法，这可以让<strong>生成器变为双向通道</strong>。send方法可以把参数发给生成器，让它成为上一条yield表达式的求值结果，并将生成器推进到下一条yield表达式，然后把yield右边的值返回给send方法的调用者。</p><p>但是这种debug是存在缺陷的，正常我们使用idea的编辑器是可以实现上一步，或者下一步的，但是这种debug,不可以实现上一步的功能，只可以一路向下走。这里是因为迭代器本身是不可逆的。所以我们使用的生成器函数也是不可逆的。</p><h3 id="四、进阶话题-生成器和协程" tabindex="-1"><a class="header-anchor" href="#四、进阶话题-生成器和协程" aria-hidden="true">#</a> 四、进阶话题：生成器和协程</h3><p>协程和生成器都可以通过<strong>yield语句来暂停执行并保存当前状态</strong>，但协<strong>程可以通过await关键字暂停执行</strong>，等待其他协程完成，而生成器主要用于迭代器编程。</p><p>而且除了基础的生成器，Python还支持带状态的生成器、协程和异步生成器，这些都极大地扩展了迭代器的使用范围。例如，使用<code>asyncio</code>库进行异步操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">yield</span> i

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> async_generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Generated: </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 运行异步主函数</span>
asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(t,[["render",i],["__file","8、Python实现Debug模式.html.vue"]]);export{r as default};
