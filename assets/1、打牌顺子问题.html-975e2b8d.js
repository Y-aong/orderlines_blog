import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as o,a as n,b as s,d as c,e as l}from"./app-2d0f66e1.js";const u={},i=n("h1",{id:"_1、顺子问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、顺子问题","aria-hidden":"true"},"#"),s(" 1、顺子问题")],-1),r={id:"_659-分割数组为连续子序列",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_659-分割数组为连续子序列","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/split-array-into-consecutive-subsequences/",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>给你一个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums</code> 。</p><p>请你判断是否能在将 <code>nums</code> 分割成 <strong>一个或多个子序列</strong> 的同时满足下述 <strong>两个</strong> 条件：</p><ul><li>每个子序列都是一个 <strong>连续递增序列</strong>（即，每个整数 <strong>恰好</strong> 比前一个整数大 <strong>1</strong> ）。</li><li>所有子序列的长度 <strong>至少</strong> 为 <code>3</code> 。</li></ul><p>如果可以分割 <code>nums</code> 并满足上述条件，则返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [1,2,3,3,4,5]
输出：true
解释：nums 可以分割成以下子序列：
[1,2,3,3,4,5] --&gt; 1, 2, 3
[1,2,3,3,4,5] --&gt; 3, 4, 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [1,2,3,3,4,4,5,5]
输出：true
解释：nums 可以分割成以下子序列：
[1,2,3,3,4,4,5,5] --&gt; 1, 2, 3, 4, 5
[1,2,3,3,4,4,5,5] --&gt; 3, 4, 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [1,2,3,4,4,5]
输出：false
解释：无法将 nums 分割成长度至少为 3 的连续递增子序列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路：</p><p>我们需要对于元素进行分配，那些是需要自成一个子序列，那些是需要接到其他子序列的后面</p><p>所以情况有两种</p><ul><li><p><strong>当前元素 <code>v</code> 自成一派，「以自己开头」构成一个长度至少为 3 的序列</strong>。</p></li><li><p><strong>当前元素 <code>v</code> 接到已经存在的子序列后面</strong>。</p></li></ul><p>问题又来了如果元素两个条件都可以满足该怎么办。</p><p>这里是需要先判断是否可以接到其他子序列后面，在判断是否可以自成顺子</p><p>但是我们如何知道当前元素是需要自成顺子还是接到其他的顺子后面，这里肯定需要数据结构的辅助。</p><p>但是需要什么数据结构呢？</p><p>可以使用字典来辅助：一个字典<code>counter</code>用来判断当前元素的数量，另一个字典<code>need</code>用来判断那些数字需要接着其他子序列后面</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isPossible</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        思路：
        我们遍历整个数字，判断数字是需要单成顺子还是作为其他顺子的后续
        这两个情况是需要又先后顺序的，需要先判断是否先为其他顺子的后续，在判断是否自成顺子

        我们如果满足这个情况呢。可以使用两个数据结构来辅助。
        counter用来判断当前字符串剩余的数量
        need 记录哪些元素可以被接到其他子序列后面
        &quot;&quot;&quot;</span>
        counter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        need <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            <span class="token keyword">if</span> counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>

            <span class="token keyword">if</span> need<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                need<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                need<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                need<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要判断把子序列都打印出来怎么办，这个时候<code>need</code>需要修改为记录那些子序列产生的需求</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># need[6] = 2 说明有两个子序列需要 6</span>
need <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment"># need[6] = [</span>
<span class="token comment">#     [3,4,5],</span>
<span class="token comment">#     [2,3,4,5],</span>
<span class="token comment"># ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isPossible</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        counter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        need <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            <span class="token keyword">if</span> counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>need<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                temp <span class="token operator">=</span> need<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
                need<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">[</span>temp<span class="token punctuation">]</span>
            <span class="token keyword">elif</span> counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                counter<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                counter<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                temp <span class="token operator">=</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>
                need<span class="token punctuation">[</span>num <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">[</span>temp<span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> result
        <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> need<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> val
        <span class="token keyword">return</span> result


<span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isPossible<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#[[3, 4, 5], [1, 2, 3, 4, 5]]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如果是求最大的顺子呢</p><p>我们可以使用动态规划的思路来解决</p><ul><li>dp[i]代表着i位置最长的顺子</li><li>递推公式：<code>if nums[i] == nums[j] + 1: dp[i] = dp[j] + 1</code></li><li>初始化：每个数字都是一个长度为1的顺子</li><li>遍历顺序从左到右</li><li>打印dp</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">max_length_subsequence</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function v(b,g){const a=p("ExternalLinkIcon");return t(),o("div",null,[i,n("h3",r,[d,s(),n("a",k,[s("659. 分割数组为连续子序列"),c(a)])]),m])}const f=e(u,[["render",v],["__file","1、打牌顺子问题.html.vue"]]);export{f as default};
