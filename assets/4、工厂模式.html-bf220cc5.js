const t=JSON.parse('{"key":"v-465f4a44","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4%E3%80%81%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html","title":"4、工厂模式","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["工厂模式","设计模式"],"description":"4、工厂模式 一、模式定义 工厂模式（Factory Pattern）是软件工程中一种创建型设计模式，它提供了一种创建对象的最佳方式，通过定义一个用于创建对象的接口，但让子类决定实例化哪一个类。工厂模式使得一个类的实例化延迟到其子类进行。在Python中，工厂模式可以通过多种方式实现，包括简单工厂模式、工厂方法模式和抽象工厂模式。 二、实现方式 1、简单工厂模式 简单工厂模式是最基础的形式，它使用单一的工厂类来封装对象创建的过程，并根据输入参数返回不同类型的对象。这种方式的优点在于易于理解和实现，但它有一个明显的缺点：当需要添加新产品时，必须修改工厂类以支持新的产品类型，这违反了面向对象设计中的开闭原则（Open/Closed Principle）。例如：","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4%E3%80%81%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"4、工厂模式"}],["meta",{"property":"og:description","content":"4、工厂模式 一、模式定义 工厂模式（Factory Pattern）是软件工程中一种创建型设计模式，它提供了一种创建对象的最佳方式，通过定义一个用于创建对象的接口，但让子类决定实例化哪一个类。工厂模式使得一个类的实例化延迟到其子类进行。在Python中，工厂模式可以通过多种方式实现，包括简单工厂模式、工厂方法模式和抽象工厂模式。 二、实现方式 1、简单工厂模式 简单工厂模式是最基础的形式，它使用单一的工厂类来封装对象创建的过程，并根据输入参数返回不同类型的对象。这种方式的优点在于易于理解和实现，但它有一个明显的缺点：当需要添加新产品时，必须修改工厂类以支持新的产品类型，这违反了面向对象设计中的开闭原则（Open/Closed Principle）。例如："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T09:50:53.000Z"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"工厂模式"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T09:50:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4、工厂模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T09:50:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、模式定义","slug":"一、模式定义","link":"#一、模式定义","children":[]},{"level":3,"title":"二、实现方式","slug":"二、实现方式","link":"#二、实现方式","children":[]},{"level":3,"title":"三、应用场景","slug":"三、应用场景","link":"#三、应用场景","children":[]}],"git":{"createdTime":1736258707000,"updatedTime":1742205053000,"contributors":[{"name":"Y-aong","email":"1627469727@qq.com","commits":2}]},"readingTime":{"minutes":3.09,"words":928},"filePathRelative":"posts/设计模式/4、工厂模式.md","localizedDate":"July 15, 2023","excerpt":"<h1> 4、工厂模式</h1>\\n<h3> 一、模式定义</h3>\\n<p>工厂模式（Factory Pattern）是软件工程中一种创建型设计模式，它提供了一种创建对象的最佳方式，通过定义一个用于创建对象的接口，但让子类决定实例化哪一个类。工厂模式使得一个类的实例化延迟到其子类进行。在Python中，工厂模式可以通过多种方式实现，包括简单工厂模式、工厂方法模式和抽象工厂模式。</p>\\n<h3> 二、实现方式</h3>\\n<h4> 1、简单工厂模式</h4>\\n<p>简单工厂模式是最基础的形式，它使用单一的工厂类来封装对象创建的过程，并根据输入参数返回不同类型的对象。这种方式的优点在于易于理解和实现，但它有一个明显的缺点：当需要添加新产品时，必须修改工厂类以支持新的产品类型，这违反了面向对象设计中的开闭原则（Open/Closed Principle）。例如：</p>","autoDesc":true}');export{t as data};
