import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const e={},p=t(`<h1 id="_7、flask-cbv-与-restful-api" tabindex="-1"><a class="header-anchor" href="#_7、flask-cbv-与-restful-api" aria-hidden="true">#</a> 7、Flask CBV 与 RESTful API</h1><p>我曾经在之前的工作中，使用20行代码实现使用传统视图100多行实现的增删改查的功能。之前使用的是flask_restful，但是这个模块没有swagger文档，还挺说这个模块的负责人是物理层面的找不到了，后面我又接触到flask_restx这个模块，实现了文档自动生成这个很重要的功能。</p><h3 id="一、为什么需要-class-based-views-cbv-和-restful-api" tabindex="-1"><a class="header-anchor" href="#一、为什么需要-class-based-views-cbv-和-restful-api" aria-hidden="true">#</a> <strong>一、为什么需要 Class-Based Views（CBV）和 RESTful API</strong></h3><h4 id="_1-1-函数视图的局限性" tabindex="-1"><a class="header-anchor" href="#_1-1-函数视图的局限性" aria-hidden="true">#</a> <strong>1.1 函数视图的局限性</strong></h4><p>传统的 Flask 函数视图（Function-Based Views）虽然简单，但在复杂场景下存在以下问题：</p><ul><li><p><strong>代码重复</strong>：多个视图可能共享逻辑（如权限校验、日志记录）。</p></li><li><p><strong>状态管理困难</strong>：难以在多个方法间共享数据或状态。</p></li><li><p><strong>可维护性差</strong>：大规模 API 需要大量函数，代码结构混乱。</p></li></ul><h4 id="_1-2-class-based-views-cbv-的优势" tabindex="-1"><a class="header-anchor" href="#_1-2-class-based-views-cbv-的优势" aria-hidden="true">#</a> <strong>1.2 Class-Based Views（CBV）的优势</strong></h4><p>Flask 的 <strong>Class-Based Views（CBV）</strong> 通过类来组织视图，提供以下优势：</p><ul><li><p><strong>代码复用</strong>：通过继承和混入（Mixin）共享通用逻辑。</p></li><li><p><strong>清晰的职责划分</strong>：不同 HTTP 方法（GET/POST/PUT 等）对应不同类方法。</p></li><li><p><strong>状态管理</strong>：类实例可保存临时数据（如数据库会话）。</p></li></ul><h4 id="_1-3-restful-api-的核心原则" tabindex="-1"><a class="header-anchor" href="#_1-3-restful-api-的核心原则" aria-hidden="true">#</a> <strong>1.3 RESTful API 的核心原则</strong></h4><p>RESTful API 遵循以下设计原则：</p><ol><li><strong>资源导向</strong>：通过 URL 路径标识资源（如 <code>/users/{id}</code>）。</li><li><strong>HTTP 方法</strong>：使用标准方法（GET/POST/PUT/DELETE）定义操作。</li><li><strong>状态码</strong>：返回语义明确的 HTTP 状态码（如 200 OK, 404 Not Found）。</li><li><strong>无状态通信</strong>：服务器不保存客户端状态，所有信息通过请求传递。</li></ol><h3 id="二、flask-restx-restful-api-的终极解决方案" tabindex="-1"><a class="header-anchor" href="#二、flask-restx-restful-api-的终极解决方案" aria-hidden="true">#</a> <strong>二、Flask-Restx：RESTful API 的终极解决方案</strong></h3><h4 id="_2-1-flask-restx-是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-flask-restx-是什么" aria-hidden="true">#</a> <strong>2.1 Flask-Restx 是什么？</strong></h4><ul><li><strong>前身</strong>：基于 <code>Flask-RESTful</code> 的升级版，解决了其文档不足、验证缺失等问题。</li><li><strong>核心功能</strong>： <ul><li><strong>资源组织</strong>：用类定义 API 资源（Resource）。</li><li><strong>请求验证</strong>：通过 <code>@api.expect</code> 自动校验请求参数。</li><li><strong>自动文档</strong>：生成交互式 Swagger UI 文档。</li><li><strong>命名空间管理</strong>：模块化组织 API 端点。</li></ul></li></ul><h4 id="_2-2-安装与快速入门" tabindex="-1"><a class="header-anchor" href="#_2-2-安装与快速入门" aria-hidden="true">#</a> <strong>2.2 安装与快速入门</strong></h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> flask flask-restx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask_restx <span class="token keyword">import</span> Api<span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> fields

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
api <span class="token operator">=</span> Api<span class="token punctuation">(</span>
    app<span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span>
    title<span class="token operator">=</span><span class="token string">&#39;Sample API&#39;</span><span class="token punctuation">,</span>
    description<span class="token operator">=</span><span class="token string">&#39;A simple RESTful API with Flask-Restx&#39;</span><span class="token punctuation">,</span>
    doc<span class="token operator">=</span><span class="token string">&#39;/docs&#39;</span>  <span class="token comment"># 文档路径</span>
<span class="token punctuation">)</span>

<span class="token comment"># 定义资源模型</span>
user_model <span class="token operator">=</span> api<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>Integer<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">&#39;User ID&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">&#39;User Name&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 定义资源类</span>
<span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/users/&lt;int:user_id&gt;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UserResource</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>doc</span><span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;Get a user by ID&#39;</span><span class="token punctuation">)</span>
    <span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>marshal_with</span><span class="token punctuation">(</span>user_model<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> user_id<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">}</span>

    <span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>expect</span><span class="token punctuation">(</span>user_model<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> api<span class="token punctuation">.</span>payload
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&#39;Updated user </span><span class="token interpolation"><span class="token punctuation">{</span>user_id<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">}</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、flask-restx-核心功能详解" tabindex="-1"><a class="header-anchor" href="#三、flask-restx-核心功能详解" aria-hidden="true">#</a> <strong>三、Flask-Restx 核心功能详解</strong></h3><h4 id="_3-1-资源定义-resource" tabindex="-1"><a class="header-anchor" href="#_3-1-资源定义-resource" aria-hidden="true">#</a> <strong>3.1 资源定义（Resource）</strong></h4><ul><li><strong>继承 <code>Resource</code> 类</strong>：每个资源对应一个或多个 HTTP 方法。</li><li><strong>方法映射</strong>：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserResource</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># GET 请求</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># POST 请求</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># PUT 请求</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># DELETE 请求</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-2-请求参数校验" tabindex="-1"><a class="header-anchor" href="#_3-2-请求参数校验" aria-hidden="true">#</a> <strong>3.2 请求参数校验</strong></h4><ul><li><strong>定义模型（Model）</strong>：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_model <span class="token operator">=</span> api<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>String<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> fields<span class="token punctuation">.</span>Integer<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>绑定参数</strong>：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>expect</span><span class="token punctuation">(</span>user_model<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> api<span class="token punctuation">.</span>payload  <span class="token comment"># 自动校验后的数据</span>
    <span class="token comment"># 处理逻辑</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-3-自动文档生成" tabindex="-1"><a class="header-anchor" href="#_3-3-自动文档生成" aria-hidden="true">#</a> <strong>3.3 自动文档生成</strong></h4><ul><li><strong>Swagger UI</strong>：访问 <code>/docs</code> 路径，自动生成交互式文档。</li><li><strong>API 文档注释</strong>：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>doc</span><span class="token punctuation">(</span>
    description<span class="token operator">=</span><span class="token string">&#39;Create a new user&#39;</span><span class="token punctuation">,</span>
    params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;User ID&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-4-命名空间-namespace" tabindex="-1"><a class="header-anchor" href="#_3-4-命名空间-namespace" aria-hidden="true">#</a> <strong>3.4 命名空间（Namespace）</strong></h4><ul><li><strong>模块化组织 API</strong>：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask_restx <span class="token keyword">import</span> Namespace

api <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">&#39;User operations&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@api<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UserListResource</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="四、flask-restx-的优势与最佳实践" tabindex="-1"><a class="header-anchor" href="#四、flask-restx-的优势与最佳实践" aria-hidden="true">#</a> <strong>四、Flask-Restx 的优势与最佳实践</strong></h3><h4 id="_4-1-优势总结" tabindex="-1"><a class="header-anchor" href="#_4-1-优势总结" aria-hidden="true">#</a> <strong>4.1 优势总结</strong></h4><ul><li><strong>代码组织清晰</strong>：通过类和命名空间分离不同功能。</li><li><strong>自动文档</strong>：减少维护 API 文档的工作量。</li><li><strong>请求验证</strong>：减少手动校验参数的代码。</li><li><strong>可扩展性</strong>：支持插件和自定义验证逻辑。</li></ul><h4 id="_4-2-最佳实践" tabindex="-1"><a class="header-anchor" href="#_4-2-最佳实践" aria-hidden="true">#</a> <strong>4.2 最佳实践</strong></h4><ol><li><strong>分模块管理 API</strong>：使用 <code>Namespace</code> 将资源分组（如 <code>/users</code>, <code>/books</code>）。</li><li><strong>统一错误处理</strong>：通过 <code>@api.errorhandler</code> 自定义错误响应。</li><li><strong>使用数据库 ORM</strong>：结合 <code>SQLAlchemy</code> 或 <code>MongoEngine</code> 简化数据操作。</li><li><strong>性能优化</strong>：缓存高频查询结果（如使用 <code>Flask-Caching</code>）。</li></ol><h4 id="_5-3-与-flask-restful-的对比" tabindex="-1"><a class="header-anchor" href="#_5-3-与-flask-restful-的对比" aria-hidden="true">#</a> <strong>5.3 与 Flask-RESTful 的对比</strong></h4><table><thead><tr><th><strong>特性</strong></th><th><strong>Flask-RESTful</strong></th><th><strong>Flask-Restx</strong></th></tr></thead><tbody><tr><td>文档支持</td><td>无</td><td>内置 Swagger UI</td></tr><tr><td>请求验证</td><td>需第三方库</td><td>内置 <code>@api.expect</code></td></tr><tr><td>模型定义</td><td>简单字段支持</td><td>支持复杂模型（嵌套字段）</td></tr><tr><td>社区活跃度</td><td>停止维护</td><td>活跃维护</td></tr></tbody></table><hr>`,35),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","7、cbv和restful api.html.vue"]]);export{d as default};
