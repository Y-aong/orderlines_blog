import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as l}from"./app-2d0f66e1.js";const r={},t=l(`<h1 id="_7、io多路复用" tabindex="-1"><a class="header-anchor" href="#_7、io多路复用" aria-hidden="true">#</a> 7、IO多路复用</h1><p><strong>问题redis单线程如何处理多并发客户端连接，为什么单线程还可以这么快</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>redis使用epoll来实现IO多路复用，将连接信息和事件放到队列中，一次性的放到文件事件分派器中，事件分配器分发给事件处理器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1、定义" tabindex="-1"><a class="header-anchor" href="#_1、定义" aria-hidden="true">#</a> 1、定义</h3><p>Redis 是跑在单线程中的，所有的操作都是按照顺序线性执行的，但是由于读写操作等待用户输入或输出都是阻塞的，所以 I/O 操作在一般情况下往往不能直接返回，这会导致某一文件的 I/O 阻塞导致整个进程无法对其它客户提供服务，而 I/O 多路复用就是为了解决这个问题而出现</p><p>所谓 I/O 多路复用机制，就是说通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。这种机制的使用需要 select 、 poll 、 epoll 来配合。<strong>多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接</strong>。当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。</p><p>Redis 服务采用 Reactor 的方式来实现文件事件处理器（每一个网络连接其实都对应一个文件描述符）<br> Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器。它的组成结构为4部分：</p><ul><li>多个套接字、</li><li>IO多路复用程序、</li><li>文件事件分派器、</li><li>事件处理器。</li></ul><p>因为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型</p><p><strong><img src="https://s2.loli.net/2023/04/22/MrW3yL7pEquRjnP.png" alt="image-20230422110029407" loading="lazy"></strong></p><h3 id="_2、名称解释" tabindex="-1"><a class="header-anchor" href="#_2、名称解释" aria-hidden="true">#</a> 2、名称解释</h3><ul><li><p>I/O ：网络 I/O</p></li><li><p>多路：多个客户端连接（连接就是套接字描述符，即 socket 或者 channel）</p></li><li><p>复用：复用一个或几个线程。也就是说一个或一组线程处理多个 TCP 连接,使用单进程就能够实现同时处理多个客户端的连接</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> 
所谓 I/O 多路复用机制指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程，就是说通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。这种机制的使用需要 select 、 poll 、 epoll 来配合。
 
多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。
 
当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3、reactor" tabindex="-1"><a class="header-anchor" href="#_3、reactor" aria-hidden="true">#</a> 3、Reactor</h3><p>基于 I/O 复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。</p><p>Reactor 模式，是指通过一个或多个输入同时传递给服务处理器的服务请求的事件驱动处理模式。服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor 模式也叫 Dispatcher 模式。即 I/O 多了复用统一监听事件，收到事件后分发(Dispatch 给某进程)，是编写高性能网络服务器的必备技术。</p><figure><img src="https://s2.loli.net/2023/04/22/sUxJXTqkbZEWNgD.png" alt="image-20230422110407573" tabindex="0" loading="lazy"><figcaption>image-20230422110407573</figcaption></figure><p>Reactor 模式中有 2 个关键组成：<br> 1）Reactor：Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 IO 事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；<br> 2）Handlers：处理程序执行 I/O 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际办理人。Reactor 通过调度适当的处理程序来响应 I/O 事件，处理程序执行非阻塞操作。</p>`,17),n=[t];function s(d,c){return i(),a("div",null,n)}const h=e(r,[["render",s],["__file","redis7、epoll多路复用.html.vue"]]);export{h as default};
