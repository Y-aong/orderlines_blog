const e=JSON.parse('{"key":"v-3959cfe6","path":"/posts/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Flask%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/6%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E7%82%B9.html","title":"6、可自定义的16个扩展点","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2024-03-05T00:00:00.000Z","category":["源码分析","flask"],"tag":["源码分析","flask"],"description":"6、可自定义的16个扩展点 一、自定义扩展点概述 flask是一个极其自由的框架，其实这也是我喜欢这个框架的原因就是我们可以根据自己的需求来自定义框架，这个就像是有一种养成系的感觉，会觉得这个框架越来越好用。 那么既然我们需要更加灵活的使用这个框架，其中框架中一些提供出来的方法我们肯定需要了解，其实flask中的自定义扩展点我们可以分为两类，其中一类是flask的信号机制，还有一类就是一些请求处理函数，包括但是不局限于before_request、after_request等请求处理函数。接下来我们就进入源码来分析flask提供的自定义扩展点。","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Flask%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/6%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"6、可自定义的16个扩展点"}],["meta",{"property":"og:description","content":"6、可自定义的16个扩展点 一、自定义扩展点概述 flask是一个极其自由的框架，其实这也是我喜欢这个框架的原因就是我们可以根据自己的需求来自定义框架，这个就像是有一种养成系的感觉，会觉得这个框架越来越好用。 那么既然我们需要更加灵活的使用这个框架，其中框架中一些提供出来的方法我们肯定需要了解，其实flask中的自定义扩展点我们可以分为两类，其中一类是flask的信号机制，还有一类就是一些请求处理函数，包括但是不局限于before_request、after_request等请求处理函数。接下来我们就进入源码来分析flask提供的自定义扩展点。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T09:50:53.000Z"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"源码分析"}],["meta",{"property":"article:tag","content":"flask"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T09:50:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6、可自定义的16个扩展点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T09:50:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、自定义扩展点概述","slug":"一、自定义扩展点概述","link":"#一、自定义扩展点概述","children":[]},{"level":3,"title":"二、flask信号","slug":"二、flask信号","link":"#二、flask信号","children":[]},{"level":3,"title":"三、flask请求处理函数","slug":"三、flask请求处理函数","link":"#三、flask请求处理函数","children":[]},{"level":3,"title":"四、总结","slug":"四、总结","link":"#四、总结","children":[]}],"git":{"createdTime":1736258707000,"updatedTime":1742205053000,"contributors":[{"name":"Y-aong","email":"1627469727@qq.com","commits":2}]},"readingTime":{"minutes":6.98,"words":2095},"filePathRelative":"posts/源码分析/Flask源码分析/6、自定义扩展点.md","localizedDate":"March 5, 2024","excerpt":"<h1> 6、可自定义的16个扩展点</h1>\\n<h3> 一、自定义扩展点概述</h3>\\n<p>flask是一个极其自由的框架，其实这也是我喜欢这个框架的原因就是我们可以根据自己的需求来自定义框架，这个就像是有一种养成系的感觉，会觉得这个框架越来越好用。</p>\\n<p>那么既然我们需要更加灵活的使用这个框架，其中框架中一些提供出来的方法我们肯定需要了解，其实flask中的自定义扩展点我们可以分为两类，其中一类是flask的信号机制，还有一类就是一些请求处理函数，包括但是不局限于before_request、after_request等请求处理函数。接下来我们就进入源码来分析flask提供的自定义扩展点。</p>","autoDesc":true}');export{e as data};
