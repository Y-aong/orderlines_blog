const e=JSON.parse('{"key":"v-363ad75c","path":"/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/6%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8.html","title":"6、生成器","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["生成器"],"description":"6、生成器 一、定义 在 Python 中，使用了 yield 的函数被称为生成器（generator）。 跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。 在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。 调用一个生成器函数，返回的是一个迭代器对象。 二、特点 是一种典型的以时间换空间的方法","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/6%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"6、生成器"}],["meta",{"property":"og:description","content":"6、生成器 一、定义 在 Python 中，使用了 yield 的函数被称为生成器（generator）。 跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。 在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。 调用一个生成器函数，返回的是一个迭代器对象。 二、特点 是一种典型的以时间换空间的方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"生成器"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6、生成器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、定义","slug":"一、定义","link":"#一、定义","children":[]},{"level":3,"title":"二、特点","slug":"二、特点","link":"#二、特点","children":[]},{"level":3,"title":"三、生成器表达式","slug":"三、生成器表达式","link":"#三、生成器表达式","children":[]},{"level":3,"title":"四、生成器函数","slug":"四、生成器函数","link":"#四、生成器函数","children":[]},{"level":3,"title":"五、生成器的本质","slug":"五、生成器的本质","link":"#五、生成器的本质","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.84,"words":553},"filePathRelative":"posts/Python/进阶知识/6、生成器.md","localizedDate":"July 15, 2023","excerpt":"<h1> 6、生成器</h1>\\n<h3> 一、定义</h3>\\n<p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</p>\\n<p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p>\\n<p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>\\n<p>调用一个生成器函数，返回的是一个迭代器对象。</p>\\n<h3> 二、特点</h3>\\n<p><strong>是一种典型的以时间换空间的方法</strong></p>","autoDesc":true}');export{e as data};
