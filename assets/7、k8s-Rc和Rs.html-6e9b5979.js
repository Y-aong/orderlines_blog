import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o,c,a as l,b as e,d as t,e as n}from"./app-2d0f66e1.js";const d={},s=n('<h1 id="_7、rc和rs" tabindex="-1"><a class="header-anchor" href="#_7、rc和rs" aria-hidden="true">#</a> 7、RC和RS</h1><h3 id="一、什么是控制器" tabindex="-1"><a class="header-anchor" href="#一、什么是控制器" aria-hidden="true">#</a> 一、什么是控制器</h3><p>kubernetes中内建了很多controller（控制器），这些相当于一个状态机，用来控制pod的具体状态和行为。</p><p><strong>部分控制器类型如下：</strong></p><ul><li>ReplicationController 和 ReplicaSet</li><li>Deployment</li><li>DaemonSet</li><li>StatefulSet</li><li>Job/CronJob</li><li>HorizontalPodAutoscaler</li></ul><h3 id="二、replicationcontroller-和-replicaset" tabindex="-1"><a class="header-anchor" href="#二、replicationcontroller-和-replicaset" aria-hidden="true">#</a> 二、ReplicationController 和 ReplicaSet</h3>',6),p={href:"https://cloud.tencent.com/product/tke?from=20065&from_column=20065",target:"_blank",rel:"noopener noreferrer"},h=n('<p>在新版的Kubernetes中建议使用ReplicaSet (RS)来取代ReplicationController。ReplicaSet跟ReplicationController没有本质的不同，只是名字不一样，但ReplicaSet支持集合式selector。</p><p>虽然 ReplicaSets 可以独立使用，但如今它主要被Deployments 用作协调 Pod 的创建、删除和更新的机制。当使用 Deployment 时，你不必担心还要管理它们创建的 ReplicaSet，Deployment 会拥有并管理它们的 ReplicaSet。</p><p><em>ReplicaSet 是下一代的 Replication Controller。 ReplicaSet 和 Replication Controller 的唯一区别是选择器的支持。ReplicaSet 支持新的基于集合的选择器需求，这在标签用户指南中有描述。而 Replication Controller 仅支持基于相等选择器的需求。</em></p><h5 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h5><ul><li>作用：用于确保容器的应用副本数始终保持在用户定义的副本数，容器发生异常可以自动创建新的容器，异常容器会自动回收</li><li>出现：都是deployment用于协调pod的创建，删除，更新。</li></ul><h4 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h4><ul><li>rs支持新的基于集合的选择器需求，rc仅支持基于相等选择器的需求</li></ul><h3 id="三、典型的应用场景" tabindex="-1"><a class="header-anchor" href="#三、典型的应用场景" aria-hidden="true">#</a> 三、典型的应用场景</h3><ul><li>滚动升级，回滚应用</li><li>扩缩容</li><li>暂停和继续deployment</li></ul>',9),u={id:"四、例子",tabindex:"-1"},m=l("a",{class:"header-anchor",href:"#四、例子","aria-hidden":"true"},"#",-1),_={href:"https://cloud.tencent.com/developer/article/1718407",target:"_blank",rel:"noopener noreferrer"},R=n(`<ul><li><p>多 Deployment 动态更新</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>假设创建一个 Deployment 以创建 nginx:1.7.9 的 5 个副本，
然后更新 Deployment 以创建 5 个 nginx:1.9.1 的副本，
而此时只有 3 个nginx:1.7.9 的副本已创建。在这种情况下，
Deployment 会立即开始杀死3个 nginx:1.7.9 Pods，并
开始创建 nginx:1.9.1 Pods。它不等待nginx:1.7.9的 5
个副本完成后再更新为nginx:1.9.1。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1);function x(b,f){const i=a("ExternalLinkIcon");return o(),c("div",null,[s,l("p",null,[e("ReplicationController (RC)用来确保"),l("a",p,[e("容器"),t(i)]),e("应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的pod来替代；而异常多出来的容器也会自动回收。")]),h,l("h3",u,[m,e(" 四、"),l("a",_,[e("例子"),t(i)])]),R])}const g=r(d,[["render",x],["__file","7、k8s-Rc和Rs.html.vue"]]);export{g as default};
