import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const e={},p=t(`<h1 id="_7、python多线程" tabindex="-1"><a class="header-anchor" href="#_7、python多线程" aria-hidden="true">#</a> 7、python多线程</h1><h3 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义" aria-hidden="true">#</a> 一、定义</h3><p>操作系统课上我们都学过，进程是资源的分配单位，而线程是CPU调度运行的基本单位。也就是说，即使是多进程程序，调度依然是按照多个线程去进行调度，由于CPU时间片分配给每个独立调度的线程，拥有四个线程的进程比拥有一个线程的进程拥有更多的CPU时间片。如果一个有四个线程的进程运行在一个四核的CPU机器上，那么核的利用率可以达到100%，即所有的核都可以调度运行一个线程， 不会出现一方有难，八方围观的情况。同样，四个单线程进程也能使四核的CPU机器计算资源利用率达到100%，因为每个进程中的线程被独立调度执行。</p><p>当我们被问到python多线程的时候，回答一般都会涉及到GIL，但是GIL其实不是python本身的特性，而是CPython实现时引入的一种机制， 而JPython的实现里面里就没有GIL。</p><figure><img src="https://ask.qcloudimg.com/draft/6708222/xacmn9mmq9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>总结python的多线程不是真正的多线程，不能发挥出计算机中多核的优点，原因是因为，<code>Cpython</code>中存在着GIL全局线程锁，同时只可以由一个线程进行运行</p><h3 id="二、python多线程的实现" tabindex="-1"><a class="header-anchor" href="#二、python多线程的实现" aria-hidden="true">#</a> 二、python多线程的实现</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 基于方法</span>

<span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>


t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>demo<span class="token punctuation">)</span>
t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 基于类</span>

<span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Demo<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        demo<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、线程锁lock" tabindex="-1"><a class="header-anchor" href="#三、线程锁lock" aria-hidden="true">#</a> 三、线程锁LOCK</h3><p>线程安全是多线程或多进程编程中的一个概念，在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况</p><p>锁是Python提供给我们能够自行操控线程切换的一种手段，使用锁可以让线程的切换变的有序。</p><p>一旦线程的切换变的有序后，各个线程之间对数据的访问、修改就变的可控，所以若要保证线程安全，就必须使用锁</p><h4 id="锁的分类" tabindex="-1"><a class="header-anchor" href="#锁的分类" aria-hidden="true">#</a> 锁的分类</h4><ul><li>同步锁：lock（一次只能放行一个）</li><li>递归锁：rlock（一次只能放行一个）</li><li>条件锁：condition（一次可以放行任意个）</li><li>事件锁：event（一次全部放行）</li><li>信号量锁：semaphore（一次可以放行特定个）</li></ul><h4 id="同步锁介绍" tabindex="-1"><a class="header-anchor" href="#同步锁介绍" aria-hidden="true">#</a> 同步锁介绍</h4><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>threading.Lock</code>()</td><td style="text-align:center;">返回一个同步锁对象</td></tr><tr><td style="text-align:center;"><code>lockObject.acquire</code>(blocking=True, timeout=1)</td><td style="text-align:center;">上锁，当一个线程在执行被上锁代码块时，将不允许切换到其他线程运行，默认锁失效时间为1秒</td></tr><tr><td style="text-align:center;"><code>lockObject.release</code>()</td><td style="text-align:center;">解锁，当一个线程在执行未被上锁代码块时，将允许系统根据策略自行切换到其他线程中运行</td></tr><tr><td style="text-align:center;"><code>lockObject.locaked</code>()</td><td style="text-align:center;">判断该锁对象是否处于上锁状态，返回一个布尔值</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

num <span class="token operator">=</span> <span class="token number">1</span>


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">global</span> num
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10_000_000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num <span class="token operator">+=</span> <span class="token number">1</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">global</span> num
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10_000_000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num <span class="token operator">-=</span> <span class="token number">1</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

    subThread01 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add<span class="token punctuation">)</span>
    subThread02 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>sub<span class="token punctuation">)</span>

    subThread01<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    subThread02<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    subThread01<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    subThread02<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;num result : %s&quot;</span> <span class="token operator">%</span> num<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h4><p>对于同步锁来说，一次acquire()必须对应一次release()，不能出现连续重复使用多次acquire()后再重复使用多次release()的操作，这样会引起死锁造成程序的阻塞，完全不动了，如下所示：</p><h4 id="event事件" tabindex="-1"><a class="header-anchor" href="#event事件" aria-hidden="true">#</a> Event事件</h4><p>事件锁是基于条件锁来做的，它与条件锁的区别在于一次只能放行全部，不能放行任意个数量的子线程继续运行。</p><p>我们可以将事件锁看为红绿灯，当红灯时所有子线程都暂停运行，并进入“等待”状态，当绿灯时所有子线程都恢复“运行”。</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>threading.Event</code>()</td><td style="text-align:center;">返回一个事件锁对象</td></tr><tr><td style="text-align:center;"><code>lockObject.clear</code>()</td><td style="text-align:center;">将事件锁设为红灯状态，即所有线程暂停运行</td></tr><tr><td style="text-align:center;"><code>lockObject.is_set</code>()</td><td style="text-align:center;">用来判断当前事件锁状态，红灯为False，绿灯为True</td></tr><tr><td style="text-align:center;"><code>lockObject.set</code>()</td><td style="text-align:center;">将事件锁设为绿灯状态，即所有线程恢复运行</td></tr><tr><td style="text-align:center;"><code>lockObject.wait</code>(timeout=None)</td><td style="text-align:center;">将当前线程设置为“等待”状态，只有该线程接到“绿灯通知”或者超时时间到期之后才会继续运行，在“等待”状态下的线程将允许系统根据策略自行切换到其他线程中运行</td></tr></tbody></table><h3 id="四、线程池" tabindex="-1"><a class="header-anchor" href="#四、线程池" aria-hidden="true">#</a> 四、线程池</h3><p>线程池是一种用于减少线程本身创建和销毁造成的开销的技术，属于典型的空间换时间操作。如果应用程序需要频繁的将任务派发到线程中执行，线程池就是必选项，因为创建和释放线程涉及到大量的系统底层操作，开销较大，如果能够在应用程序工作期间，将创建和释放线程的操作变成预创建和借还操作，将大大减少底层开销。线程池在应用程序启动后，立即创建一定数量的线程，放入空闲队列中。这些线程最开始都处于阻塞状态，不会消耗CPU资源，但会占用少量的内存空间。当任务到来后，从队列中取出一个空闲线程，把任务派发到这个线程中运行，并将该线程标记为已占用。当线程池中所有的线程都被占用后，可以选择自动创建一定数量的新线程，用于处理更多的任务，也可以选择让任务排队等待直到有空闲的线程可用。在任务执行完毕后，线程并不退出结束，而是继续保持在池中等待下一次的任务。当系统比较空闲时，大部分线程长时间处于闲置状态时，线程池可以自动销毁一部分线程，回收系统资源。基于这种预创建技术，线程池将线程创建和销毁本身所带来的开销分摊到了各个具体的任务上，执行次数越多，每个任务所分担到的线程本身开销则越小。</p><p>一般线程池都必须具备下面几个组成部分：</p><ol><li>线程池管理器：用于创建并管理线程池。</li><li>工作线程和线程队列：线程池中实际执行的线程以及保存这些线程的容器。</li><li>任务接口：将线程执行的任务抽象出来，形成任务接口，确保线程池与具体的任务无关。</li><li>任务队列：线程池中保存等待被执行的任务的容器。</li></ol>`,27),i=[p];function c(o,l){return s(),a("div",null,i)}const r=n(e,[["render",c],["__file","7、多线程.html.vue"]]);export{r as default};
