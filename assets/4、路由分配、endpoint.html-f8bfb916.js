import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const p={},e=t(`<h1 id="_4、路由分配-endpoint" tabindex="-1"><a class="header-anchor" href="#_4、路由分配-endpoint" aria-hidden="true">#</a> 4、路由分配，Endpoint</h1><h3 id="一、路由" tabindex="-1"><a class="header-anchor" href="#一、路由" aria-hidden="true">#</a> 一、路由</h3><p>采用比较官方的话来介绍就是</p><p>网络原理中，路由指的是根据上一接口的数据包中的IP地址，查询路由表转发到另一个接口，它决定的是一个端到端的网络路径。</p><p>web里的话，路由概念也是类似的，根据URL来将请求分配到指定的一个‘端’，另外也可以这样用，在某一个节点设置个转发，将到达这里的每一个’包‘或者说URL重新定向到另一个端并且可以在这个过程中对这个包进行处理。</p><h3 id="二、endpoint" tabindex="-1"><a class="header-anchor" href="#二、endpoint" aria-hidden="true">#</a> 二、Endpoint</h3><p>endpoint是flask中提出来的一个概念，我们先下结论就是<strong>视图函数和url的中间值，我们可以利用endpoint找到url,也可以使用endpoint找到视图函数</strong>。它是为了方便我们通过endpoint找到url,寻找视图函数的值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask

config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;SECRET_KEY&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;woaijmy&quot;</span><span class="token punctuation">}</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span>config<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;1231&#39;</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;url_map::&#39;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>url_map<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;view_funcs::&#39;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>view_functions<span class="token punctuation">)</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># url_map:: Map([&lt;Rule &#39;/static/&lt;filename&gt;&#39; (GET, HEAD, OPTIONS) -&gt; static&gt;, &lt;Rule &#39;/index&#39; (GET, HEAD, OPTIONS) -&gt; index&gt;])</span>
<span class="token comment"># view_funcs:: {&#39;static&#39;: &lt;function Flask.__init__.&lt;locals&gt;.&lt;lambda&gt; at 0x0000022&gt;, &#39;index&#39;: &lt;function index at 0x0000021&gt;}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过打印可以发现url_map中的有endpoint，view_funcs也有endpoint</p><p>通过源码可以发现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@setupmethod</span>
    <span class="token keyword">def</span> <span class="token function">add_url_rule</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        rule<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        endpoint<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        view_func<span class="token punctuation">:</span> ft<span class="token punctuation">.</span>RouteCallable <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        provide_automatic_options<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        <span class="token operator">**</span>options<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Any<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> endpoint <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            endpoint <span class="token operator">=</span> _endpoint_from_view_func<span class="token punctuation">(</span>view_func<span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>
        options<span class="token punctuation">[</span><span class="token string">&quot;endpoint&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> endpoint
        methods <span class="token operator">=</span> options<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&quot;methods&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> methods <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            methods <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>view_func<span class="token punctuation">,</span> <span class="token string">&quot;methods&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>methods<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span>
                <span class="token string">&quot;Allowed methods must be a list of strings, for&quot;</span>
                <span class="token string">&#39; example: @app.route(..., methods=[&quot;POST&quot;])&#39;</span>
            <span class="token punctuation">)</span>
        methods <span class="token operator">=</span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> methods<span class="token punctuation">}</span>

        <span class="token comment"># Methods that should always be added</span>
        required_methods <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>view_func<span class="token punctuation">,</span> <span class="token string">&quot;required_methods&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> provide_automatic_options <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            provide_automatic_options <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>
                view_func<span class="token punctuation">,</span> <span class="token string">&quot;provide_automatic_options&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span>
            <span class="token punctuation">)</span>

        <span class="token keyword">if</span> provide_automatic_options <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">&quot;OPTIONS&quot;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> methods<span class="token punctuation">:</span>
                provide_automatic_options <span class="token operator">=</span> <span class="token boolean">True</span>
                required_methods<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                provide_automatic_options <span class="token operator">=</span> <span class="token boolean">False</span>

        <span class="token comment"># Add the required methods now.</span>
        methods <span class="token operator">|</span><span class="token operator">=</span> required_methods

        rule_obj <span class="token operator">=</span> self<span class="token punctuation">.</span>url_rule_class<span class="token punctuation">(</span>rule<span class="token punctuation">,</span> methods<span class="token operator">=</span>methods<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span>
        rule_obj<span class="token punctuation">.</span>provide_automatic_options <span class="token operator">=</span> provide_automatic_options  <span class="token comment"># type: ignore[attr-defined]</span>

        self<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>add<span class="token punctuation">(</span>rule_obj<span class="token punctuation">)</span>
        <span class="token keyword">if</span> view_func <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            old_func <span class="token operator">=</span> self<span class="token punctuation">.</span>view_functions<span class="token punctuation">.</span>get<span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span>
            <span class="token keyword">if</span> old_func <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> old_func <span class="token operator">!=</span> view_func<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> AssertionError<span class="token punctuation">(</span>
                    <span class="token string">&quot;View function mapping is overwriting an existing&quot;</span>
                    <span class="token string-interpolation"><span class="token string">f&quot; endpoint function: </span><span class="token interpolation"><span class="token punctuation">{</span>endpoint<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
                <span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>view_functions<span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> <span class="token operator">=</span> view_func
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token keyword">def</span> <span class="token function">_endpoint_from_view_func</span><span class="token punctuation">(</span>view_func<span class="token punctuation">:</span> ft<span class="token punctuation">.</span>RouteCallable<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Internal helper that returns the default endpoint for a given
    function.  This always is the function name.
    &quot;&quot;&quot;</span>
    <span class="token keyword">assert</span> view_func <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">&quot;expected view func if endpoint is not provided.&quot;</span>
    <span class="token keyword">return</span> view_func<span class="token punctuation">.</span>__name__

 <span class="token keyword">if</span> endpoint <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    endpoint <span class="token operator">=</span> _endpoint_from_view_func<span class="token punctuation">(</span>view_func<span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>
 options<span class="token punctuation">[</span><span class="token string">&quot;endpoint&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> endpoint
 rule_obj <span class="token operator">=</span> self<span class="token punctuation">.</span>url_rule_class<span class="token punctuation">(</span>rule<span class="token punctuation">,</span> methods<span class="token operator">=</span>methods<span class="token punctuation">,</span> <span class="token operator">**</span>options<span class="token punctuation">)</span>
 self<span class="token punctuation">.</span>url_map<span class="token punctuation">.</span>add<span class="token punctuation">(</span>rule_obj<span class="token punctuation">)</span>
 self<span class="token punctuation">.</span>view_functions<span class="token punctuation">[</span>endpoint<span class="token punctuation">]</span> <span class="token operator">=</span> view_func
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里代码跳着截取的</p><p>可以发现endpoint如果为None就是视图函数的名称，url_map和view_functions中都是存住endpoint的，所以这里我们可以确定以上的说法是正确的。</p><p><strong>那么我们如何使用endpoint呢</strong></p><p>我们可以通过url_for函数可以使用endpoint来进行调用视图函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">url_for</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        <span class="token operator">/</span><span class="token punctuation">,</span>
        endpoint<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        <span class="token operator">*</span><span class="token punctuation">,</span>
        _anchor<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        _method<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        _scheme<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        _external<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">|</span> <span class="token boolean">None</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
        <span class="token operator">**</span>values<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Any<span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        req_ctx <span class="token operator">=</span> _cv_request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> req_ctx <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            url_adapter <span class="token operator">=</span> req_ctx<span class="token punctuation">.</span>url_adapter
            blueprint_name <span class="token operator">=</span> req_ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>blueprint

            <span class="token comment"># If the endpoint starts with &quot;.&quot; and the request matches a</span>
            <span class="token comment"># blueprint, the endpoint is relative to the blueprint.</span>
            <span class="token keyword">if</span> endpoint<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> blueprint_name <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    endpoint <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>blueprint_name<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>endpoint<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    endpoint <span class="token operator">=</span> endpoint<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

            <span class="token keyword">if</span> _external <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                _external <span class="token operator">=</span> _scheme <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            app_ctx <span class="token operator">=</span> _cv_app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> app_ctx <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                url_adapter <span class="token operator">=</span> app_ctx<span class="token punctuation">.</span>url_adapter
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                url_adapter <span class="token operator">=</span> self<span class="token punctuation">.</span>create_url_adapter<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> url_adapter <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> _external <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                _external <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> _scheme <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token keyword">not</span> _external<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;When specifying &#39;_scheme&#39;, &#39;_external&#39; must be True.&quot;</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>inject_url_defaults<span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> values<span class="token punctuation">)</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> url_adapter<span class="token punctuation">.</span>build<span class="token punctuation">(</span>  <span class="token comment"># type: ignore[union-attr]</span>
                endpoint<span class="token punctuation">,</span>
                values<span class="token punctuation">,</span>
                method<span class="token operator">=</span>_method<span class="token punctuation">,</span>
                url_scheme<span class="token operator">=</span>_scheme<span class="token punctuation">,</span>
                force_external<span class="token operator">=</span>_external<span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
        <span class="token keyword">except</span> BuildError <span class="token keyword">as</span> error<span class="token punctuation">:</span>
            values<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
                _anchor<span class="token operator">=</span>_anchor<span class="token punctuation">,</span> _method<span class="token operator">=</span>_method<span class="token punctuation">,</span> _scheme<span class="token operator">=</span>_scheme<span class="token punctuation">,</span> _external<span class="token operator">=</span>_external
            <span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>handle_url_build_error<span class="token punctuation">(</span>error<span class="token punctuation">,</span> endpoint<span class="token punctuation">,</span> values<span class="token punctuation">)</span>

        <span class="token keyword">if</span> _anchor <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            _anchor <span class="token operator">=</span> _url_quote<span class="token punctuation">(</span>_anchor<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">&quot;%!#$&amp;&#39;()*+,/:;=?@&quot;</span><span class="token punctuation">)</span>
            rv <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>rv<span class="token punctuation">}</span></span><span class="token string">#</span><span class="token interpolation"><span class="token punctuation">{</span>_anchor<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>

        <span class="token keyword">return</span> rv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就是可以通过endpoint内部调用flask内部请求</p><h3 id="三、flask如何利用endpoint实现请求分发" tabindex="-1"><a class="header-anchor" href="#三、flask如何利用endpoint实现请求分发" aria-hidden="true">#</a> 三、flask如何利用endpoint实现请求分发</h3>`,19),o=[e];function i(l,c){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","4、路由分配、endpoint.html.vue"]]);export{d as default};
