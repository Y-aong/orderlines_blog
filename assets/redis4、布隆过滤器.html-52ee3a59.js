import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as r}from"./app-2d0f66e1.js";const d={},h=r(`<h1 id="_4、布隆过滤器" tabindex="-1"><a class="header-anchor" href="#_4、布隆过滤器" aria-hidden="true">#</a> 4、布隆过滤器</h1><h3 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义" aria-hidden="true">#</a> 一、定义</h3><p>由一个初值都为零的bit数组和多个哈希函数构成，用来快速判断某个数据是否存在</p><h3 id="二、作用" tabindex="-1"><a class="header-anchor" href="#二、作用" aria-hidden="true">#</a> 二、作用</h3><p>本质就是判断具体数据存不存在一个大的集合中</p><p>布隆过滤器是一种类似set的数据结构，只是统计结果不太准确</p><h3 id="三、特点" tabindex="-1"><a class="header-anchor" href="#三、特点" aria-hidden="true">#</a> 三、特点</h3><ul><li><p>高效地插入和查询，占用空间少，返回的结果是不确定性的。</p></li><li><p>一个元素如果判断结果为存在的时候元素不一定存在，但是判断结果为不存在的时候则一定不存在。</p></li><li><p>布隆过滤器可以添加元素，但是不能删除元素。因为删掉元素会导致误判率增加。</p></li><li><p>误判只会发生在过滤器没有添加过的元素，对于添加过的元素不会发生误判。</p></li></ul><h3 id="四、使用场景" tabindex="-1"><a class="header-anchor" href="#四、使用场景" aria-hidden="true">#</a> 四、使用场景</h3><ul><li><p>解决缓存穿透</p></li><li><p>黑名单校验</p></li></ul><h3 id="五、布隆过滤器误判率" tabindex="-1"><a class="header-anchor" href="#五、布隆过滤器误判率" aria-hidden="true">#</a> 五、布隆过滤器误判率</h3><p>布隆过滤器的误判是指多个输入经过哈希之后在相同的bit位置1了，这样就无法判断究竟是哪个输入产生的，<br> 因此误判的根源在于相同的 bit 位被多次映射且置 1。</p><p>这种情况也造成了布隆过滤器的删除问题，因为布隆过滤器的每一个 bit 并不是独占的，很有可能多个元素共享了某一位。<br> 如果我们直接删除这一位的话，会影响其他的元素</p><p>这里是和发生hash冲突的数据结构有关，发生了hash冲突，冲突的数据组合为一个链表，一个key可能对应着多个数据</p><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h4><p>一个元素判断结果为没有时则一定没有，<br> 如果判断结果为存在的时候元素不一定存在。</p><p>布隆过滤器可以添加元素，但是不能删除元素。因为删掉元素会导致误判率增加。</p><h3 id="六、优缺点" tabindex="-1"><a class="header-anchor" href="#六、优缺点" aria-hidden="true">#</a> 六、优缺点</h3><p><strong>优点</strong></p><p>高效的插入和查询，占用更少的空间</p><p><strong>缺点</strong></p><p>不能删除数据，可能会增加误判率</p><p>存在误判，发生hash冲突，不同的数据可能会出现相同的值</p><h3 id="七、使用建议" tabindex="-1"><a class="header-anchor" href="#七、使用建议" aria-hidden="true">#</a> 七、使用建议</h3><ul><li><p>当实际元素数量超过初始化数量时，应该对布隆过滤器进行重建，重新分配一个 size 更大的过滤器，再将所有的历史元素批量 add 进行</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>原因是因为布隆过滤器不能删除数据，删除数据可能会造成删除多个值，使得误判率增加
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>`,25),n=[h];function t(s,l){return a(),i("div",null,n)}const o=e(d,[["render",t],["__file","redis4、布隆过滤器.html.vue"]]);export{o as default};
