import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const e={},p=t(`<h1 id="_4、python多进程使用" tabindex="-1"><a class="header-anchor" href="#_4、python多进程使用" aria-hidden="true">#</a> 4、python多进程使用</h1><h3 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言：</h3><p>之前在学习airflow时发现，airflow中大量使用多进程来实现任务的运行，所以还是比较奇怪为什么它会选择多进程呢？所以查询了很多的资料来学习下关于python多进程。</p><h3 id="一、多进程的底层实现与原理" tabindex="-1"><a class="header-anchor" href="#一、多进程的底层实现与原理" aria-hidden="true">#</a> <strong>一、多进程的底层实现与原理</strong></h3><h4 id="_1-1-进程-vs-线程" tabindex="-1"><a class="header-anchor" href="#_1-1-进程-vs-线程" aria-hidden="true">#</a> <strong>1.1 进程 vs 线程</strong></h4><ul><li><strong>线程</strong>：共享内存空间，通过锁（Lock）或信号量（Semaphore）控制并发访问，受GIL限制。</li><li><strong>进程</strong>：独立内存空间，无GIL限制，适合CPU密集型任务，但通信开销大。</li></ul><h4 id="_1-2-python-多进程的实现机制" tabindex="-1"><a class="header-anchor" href="#_1-2-python-多进程的实现机制" aria-hidden="true">#</a> <strong>1.2 Python 多进程的实现机制</strong></h4><p>Python的<code>multiprocessing</code>模块通过以下方式实现跨平台进程管理：</p><ul><li><strong>Fork（Unix）</strong>：父进程通过<code>fork()</code>创建子进程，子进程复制父进程内存空间（<strong>写时复制</strong>，Copy-on-Write）。</li><li><strong>Spawn（所有平台）</strong>：父进程通过<code>os.spawn()</code>启动新解释器，进程间通过管道通信。</li><li><strong>ForkServer（混合模式）</strong>：结合Fork和Spawn，避免Spawn的初始化开销。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 设置进程启动方式（Linux默认fork，Windows只能spawn）</span>

<span class="token keyword">import</span> multiprocessing <span class="token keyword">as</span> mp
mp<span class="token punctuation">.</span>set_start_method<span class="token punctuation">(</span><span class="token string">&#39;spawn&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 或 &#39;fork&#39;, &#39;forkserver&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-进程间通信-ipc" tabindex="-1"><a class="header-anchor" href="#_1-3-进程间通信-ipc" aria-hidden="true">#</a> <strong>1.3 进程间通信（IPC）</strong></h4><p>Python提供以下IPC原语：</p><ul><li><strong>Queue/Pipe</strong>：基于文件描述符的管道（<code>Pipe</code>）或队列（<code>Queue</code>），底层使用<code>os.pipe()</code>或<code>mmap</code>。</li><li><strong>共享内存</strong>：<code>Value/Array</code>通过<code>shmget</code>/<code>shmctl</code>系统调用（Unix）或<code>CreateFileMapping</code>（Windows）实现。</li><li><strong>Manager</strong>：通过代理对象（Proxy）实现跨进程对象共享（如字典、列表），底层使用客户端-服务器模型（<code>xmlrpc</code>）。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Value<span class="token punctuation">,</span> Array

<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    counter<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    counter <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 共享整型</span>
    arr <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 共享数组</span>
    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：1 [5.0, 2.0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、多进程的实现方式与性能对比" tabindex="-1"><a class="header-anchor" href="#二、多进程的实现方式与性能对比" aria-hidden="true">#</a> <strong>二、多进程的实现方式与性能对比</strong></h3><h4 id="_2-1-multiprocessing-模块" tabindex="-1"><a class="header-anchor" href="#_2-1-multiprocessing-模块" aria-hidden="true">#</a> <strong>2.1 multiprocessing 模块</strong></h4><ul><li><strong>Process</strong>：手动管理进程生命周期，适合简单任务。</li><li><strong>Pool</strong>：进程池，自动负载均衡，支持<code>map</code>/<code>apply_async</code>等接口。<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool

<span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x

<span class="token keyword">with</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
    results <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 并行计算</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-2-concurrent-futures-processpoolexecutor" tabindex="-1"><a class="header-anchor" href="#_2-2-concurrent-futures-processpoolexecutor" aria-hidden="true">#</a> <strong>2.2 concurrent.futures.ProcessPoolExecutor</strong></h4><ul><li>高层接口，支持<code>submit</code>/<code>as_completed</code>，适合异步任务：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor

<span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span>

<span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>
    futures <span class="token operator">=</span> <span class="token punctuation">[</span>executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>compute<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> future <span class="token keyword">in</span> as_completed<span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-3-性能对比" tabindex="-1"><a class="header-anchor" href="#_2-3-性能对比" aria-hidden="true">#</a> <strong>2.3 性能对比</strong></h4><table><thead><tr><th>方式</th><th>适用场景</th><th>启动开销</th><th>IPC开销</th><th>代码复杂度</th></tr></thead><tbody><tr><td>Process</td><td>简单任务</td><td>高</td><td>高</td><td>低</td></tr><tr><td>Pool</td><td>任务队列</td><td>中</td><td>中</td><td>中</td></tr><tr><td>ProcessPoolExecutor</td><td>异步任务</td><td>中</td><td>中</td><td>低</td></tr></tbody></table><hr><h3 id="三、多进程的优缺点-深度分析" tabindex="-1"><a class="header-anchor" href="#三、多进程的优缺点-深度分析" aria-hidden="true">#</a> <strong>三、多进程的优缺点：深度分析</strong></h3><h4 id="_3-1-优点" tabindex="-1"><a class="header-anchor" href="#_3-1-优点" aria-hidden="true">#</a> <strong>3.1 优点</strong></h4><ul><li><p><strong>突破GIL限制</strong>：每个进程独立解释器，CPU密集型任务可线性加速：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 单进程 vs 多进程计算时间对比</span>
<span class="token keyword">import</span> time
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool

<span class="token keyword">def</span> <span class="token function">sum_squared</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>

start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
    p<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sum_squared<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;多进程耗时：</span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">s&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 约 0.5s</span>

start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sum_squared<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;单进程耗时：</span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">s&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 约 2.0s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>进程隔离</strong>：一个进程崩溃不影响其他进程（需监控重启）。</p></li><li><p><strong>资源控制</strong>：可通过<code>resource</code>模块限制单个进程的内存/CPU使用。</p></li></ul><h4 id="_3-2-缺点" tabindex="-1"><a class="header-anchor" href="#_3-2-缺点" aria-hidden="true">#</a> <strong>3.2 缺点</strong></h4><ul><li><p><strong>内存开销</strong>：每个进程独立内存空间，大对象复制可能导致OOM：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 危险示例：复制大数组</span>
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process

<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>  <span class="token comment"># 进程启动时复制整个数组</span>

arr <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span>  <span class="token comment"># 8GB内存</span>
p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 启动时可能耗尽内存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>IPC性能瓶颈</strong>：跨进程通信需序列化/反序列化，适合批量数据而非高频交互：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 低效的IPC示例（每秒1000次）</span>
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue

<span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>

p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 总耗时约 0.5s（每秒2000次）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="四、airflow-多进程架构解析" tabindex="-1"><a class="header-anchor" href="#四、airflow-多进程架构解析" aria-hidden="true">#</a> <strong>四、Airflow 多进程架构解析</strong></h3><p>Apache Airflow 是一个流行的分布式任务调度框架，其核心设计依赖多进程，主要原因可能为：</p><ul><li><strong>提升任务并行能力</strong><ul><li>Airflow 的 <code>LocalExecutor</code> 使用多进程并行执行多个任务实例。</li><li>通过 <code>CeleryExecutor</code> 结合多进程，实现分布式任务调度</li></ul></li><li><strong>隔离性与稳定性</strong></li><li>每个任务运行在独立进程中，避免因单个任务崩溃影响其他任务。</li><li>可通过进程限制单个任务的资源占用（如内存、CPU）。</li></ul><p>同时Airflow的多进程也会带来一些可能的问题</p><ul><li><strong>数据库连接泄漏</strong>：每个进程需独立连接池，避免连接数超限。</li><li><strong>序列化问题</strong>：DAG定义需避免非序列化对象（如闭包）。</li><li><strong>日志聚合</strong>：多进程日志需集中存储（如远程服务器或ELK）。</li></ul><h3 id="五、多进程实战-常见问题与解决方案" tabindex="-1"><a class="header-anchor" href="#五、多进程实战-常见问题与解决方案" aria-hidden="true">#</a> <strong>五、多进程实战：常见问题与解决方案</strong></h3><h4 id="_5-1-进程间通信优化" tabindex="-1"><a class="header-anchor" href="#_5-1-进程间通信优化" aria-hidden="true">#</a> <strong>5.1 进程间通信优化</strong></h4><ul><li><p><strong>减少序列化开销</strong>：</p><ul><li>使用<code>multiprocessing.shared_memory</code>直接操作内存：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> shared_memory

arr <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
shm <span class="token operator">=</span> shared_memory<span class="token punctuation">.</span>SharedMemory<span class="token punctuation">(</span>create<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> size<span class="token operator">=</span>arr<span class="token punctuation">.</span>nbytes<span class="token punctuation">)</span>
shm_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">(</span>arr<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> dtype<span class="token operator">=</span>arr<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> <span class="token builtin">buffer</span><span class="token operator">=</span>shm<span class="token punctuation">.</span>buf<span class="token punctuation">)</span>
shm_arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>优先用<code>pickle</code>替代<code>dill</code>，或使用二进制协议（如<code>msgpack</code>）。</li></ul></li><li><p><strong>避免频繁通信</strong>：</p><ul><li>批量传输数据而非逐条发送：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">[</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 批量发送</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="_5-2-进程安全与资源管理" tabindex="-1"><a class="header-anchor" href="#_5-2-进程安全与资源管理" aria-hidden="true">#</a> <strong>5.2 进程安全与资源管理</strong></h4><ul><li><p><strong>共享对象的同步</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Lock

lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
shared_counter <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> lock<span class="token punctuation">:</span>
        shared_counter<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>

p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>increment<span class="token punctuation">)</span>
p2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>increment<span class="token punctuation">)</span>
p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>shared_counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 确保输出2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>进程终止与清理</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> signal
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process

<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 发送SIGTERM信号</span>
p<span class="token punctuation">.</span>join<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> p<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 强制终止（发送SIGKILL）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_5-3-跨平台兼容性" tabindex="-1"><a class="header-anchor" href="#_5-3-跨平台兼容性" aria-hidden="true">#</a> <strong>5.3 跨平台兼容性</strong></h4><ul><li><strong>Windows注意事项</strong>： <ul><li><code>fork</code>不可用，进程间共享内存需通过<code>shared_memory</code>显式管理。</li><li><code>__main__</code>模块必须可导入（避免<code>if __name__ == &quot;__main__&quot;</code>外的函数定义）。</li></ul></li></ul><h3 id="六、多进程的典型应用场景与优化" tabindex="-1"><a class="header-anchor" href="#六、多进程的典型应用场景与优化" aria-hidden="true">#</a> <strong>六、多进程的典型应用场景与优化</strong></h3><h4 id="_6-1-科学计算加速" tabindex="-1"><a class="header-anchor" href="#_6-1-科学计算加速" aria-hidden="true">#</a> <strong>6.1 科学计算加速</strong></h4><ul><li><strong>NumPy/SciPy</strong>：通过<code>multiprocessing.Pool</code>并行计算：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool

<span class="token keyword">def</span> <span class="token function">compute_row</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>row<span class="token punctuation">)</span>

data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
    norms <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>compute_row<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token comment"># 并行计算每行的范数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_6-2-web服务器" tabindex="-1"><a class="header-anchor" href="#_6-2-web服务器" aria-hidden="true">#</a> <strong>6.2 Web服务器</strong></h4><ul><li><strong>Gunicorn</strong>：通过多进程模型（<code>sync</code>工作模式）处理HTTP请求：<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gunicorn <span class="token parameter variable">-w</span> <span class="token number">4</span> myapp:app  <span class="token comment"># 启动4个Worker进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_6-3-分布式任务调度" tabindex="-1"><a class="header-anchor" href="#_6-3-分布式任务调度" aria-hidden="true">#</a> <strong>6.3 分布式任务调度</strong></h4><ul><li><strong>Celery+RabbitMQ</strong>：结合多进程和消息队列实现分布式任务：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery

app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">&#39;pyamqp://guest@localhost//&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y

<span class="token comment"># 启动Worker：celery -A tasks worker --concurrency=4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="七、总结-多进程的适用场景与避坑指南" tabindex="-1"><a class="header-anchor" href="#七、总结-多进程的适用场景与避坑指南" aria-hidden="true">#</a> <strong>七、总结：多进程的适用场景与避坑指南</strong></h3><h4 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> <strong>适用场景</strong></h4><ul><li><strong>CPU密集型任务</strong>：科学计算、图像处理、密码破解。</li><li><strong>高可靠性场景</strong>：任务间需严格隔离（如金融交易）。</li><li><strong>分布式系统</strong>：需要跨机器并行的任务调度。</li></ul><h4 id="避坑指南" tabindex="-1"><a class="header-anchor" href="#避坑指南" aria-hidden="true">#</a> <strong>避坑指南</strong></h4><ol><li><strong>避免共享可变状态</strong>：优先用IPC或数据库同步，而非共享内存。</li><li><strong>监控资源使用</strong>：用<code>psutil</code>监控内存/CPU，防止OOM或CPU过载。</li><li><strong>选择合适的IPC方式</strong>：小数据用<code>Queue</code>，大数据用共享内存。</li><li><strong>测试跨平台兼容性</strong>：Windows需额外处理<code>fork</code>和模块导入问题。</li></ol><p>理论上用户最多启动65535个进程，但是实际上，我们可能启动不了这么多进程，一般可能需要具体问题具体分析</p><ul><li><strong>轻量级进程（如HTTP请求处理）</strong>：<br> 每个进程占用 <strong>10-100MB</strong> 内存时，一台 <strong>32GB 内存</strong> 的机器可运行 <strong>300-1000 个进程</strong>。</li><li><strong>中等负载进程（如数据库连接、计算任务）</strong>：<br> 每个进程占用 <strong>100MB-1GB</strong> 内存时，进程数通常控制在 <strong>50-200</strong> 以内。</li><li><strong>重量级进程（如容器/Docker）</strong>：<br> 每个进程占用 <strong>1GB+</strong> 内存时，进程数可能仅 <strong>10-50</strong> 个。</li></ul><p>可以根据当前应用的实际cpu和内存占用来处理。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">calculate_max_processes</span><span class="token punctuation">(</span>cpu_cores<span class="token punctuation">,</span> memory_gb<span class="token punctuation">,</span> process_memory_mb<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># CPU限制：每个核心最多2个进程（保守估计）</span>
    cpu_limit <span class="token operator">=</span> cpu_cores <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token comment"># 内存限制：总内存的80%分配给进程</span>
    memory_limit <span class="token operator">=</span> <span class="token punctuation">(</span>memory_gb <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token operator">//</span> process_memory_mb
    <span class="token comment"># 取最小值并保留安全余量</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>cpu_limit<span class="token punctuation">,</span> memory_limit<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","6、Python多进程使用.html.vue"]]);export{d as default};
