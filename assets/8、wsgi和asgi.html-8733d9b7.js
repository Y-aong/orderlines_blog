import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const o={},e=t(`<h1 id="_8、wsgi-和-asgi" tabindex="-1"><a class="header-anchor" href="#_8、wsgi-和-asgi" aria-hidden="true">#</a> 8、WSGI 和 ASGI</h1><h3 id="一、wsgi-和-asgi-的核心区别" tabindex="-1"><a class="header-anchor" href="#一、wsgi-和-asgi-的核心区别" aria-hidden="true">#</a> <strong>一、WSGI 和 ASGI 的核心区别</strong></h3><h4 id="_1-同步-vs-异步" tabindex="-1"><a class="header-anchor" href="#_1-同步-vs-异步" aria-hidden="true">#</a> <strong>1. 同步 vs 异步</strong></h4><ul><li><p><strong>WSGI（Web Server Gateway Interface）</strong></p><ul><li><strong>同步接口</strong>：基于线程或进程处理请求，每个请求按顺序执行，前一个请求完成后再处理下一个。</li><li><strong>适用场景</strong>：传统同步 Web 应用，如低并发场景、IO 密集型任务（如数据库查询）。</li></ul></li><li><p><strong>ASGI（Asynchronous Server Gateway Interface）</strong></p><ul><li><strong>异步接口</strong>：基于事件循环和协程（如 <code>async/await</code>），支持同时处理多个请求，无需等待前一个请求完成。</li><li><strong>适用场景</strong>：高并发场景、实时应用（如 WebSocket、长连接、聊天应用）、HTTP/2 等协议。</li></ul></li></ul><h4 id="_2-协议支持" tabindex="-1"><a class="header-anchor" href="#_2-协议支持" aria-hidden="true">#</a> <strong>2. 协议支持</strong></h4><ul><li><p><strong>WSGI</strong></p><ul><li><strong>仅支持 HTTP/1.1</strong>，无法处理 WebSocket 或长连接等实时协议。</li><li>通过扩展（如中间件）勉强支持部分异步功能，但效率低下。</li></ul></li><li><p><strong>ASGI</strong></p><ul><li><strong>支持多种协议</strong>：HTTP/1.1、HTTP/2、WebSocket、HTTP/3（QUIC）等。</li><li>原生支持实时通信（如聊天、直播推送、实时数据更新）。</li></ul></li></ul><h4 id="_3-性能" tabindex="-1"><a class="header-anchor" href="#_3-性能" aria-hidden="true">#</a> <strong>3. 性能</strong></h4><ul><li><p><strong>WSGI</strong></p><ul><li><strong>同步处理</strong>：在高并发场景下性能受限，因线程/进程切换开销较大。</li><li>适合中小型应用或低延迟要求的场景。</li></ul></li><li><p><strong>ASGI</strong></p><ul><li><strong>异步非阻塞</strong>：通过事件循环高效处理数千个并发连接，适合高负载场景。</li><li>在长连接和实时通信中表现更优。</li></ul></li></ul><hr><h4 id="_4-兼容性" tabindex="-1"><a class="header-anchor" href="#_4-兼容性" aria-hidden="true">#</a> <strong>4. 兼容性</strong></h4><ul><li><p><strong>WSGI</strong></p><ul><li><strong>广泛兼容</strong>：几乎所有 Python Web 框架（如 Flask、Django）默认支持 WSGI，生态成熟。</li><li>服务器如 Gunicorn、uWSGI、mod_wsgi 都基于 WSGI。</li></ul></li><li><p><strong>ASGI</strong></p><ul><li><strong>较新但快速崛起</strong>：主要由现代异步框架推动，服务器如 Uvicorn、Daphne、Hypercorn 支持 ASGI。</li><li>与 WSGI 兼容：可通过转换器（如 <code>asgiref</code>）将 WSGI 应用运行在 ASGI 服务器上。</li></ul></li></ul><hr><h4 id="_5-示例代码对比" tabindex="-1"><a class="header-anchor" href="#_5-示例代码对比" aria-hidden="true">#</a> <strong>5. 示例代码对比</strong></h4><h5 id="wsgi-示例" tabindex="-1"><a class="header-anchor" href="#wsgi-示例" aria-hidden="true">#</a> <strong>WSGI 示例</strong></h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">application</span><span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    status <span class="token operator">=</span> <span class="token string">&#39;200 OK&#39;</span>
    headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    start_response<span class="token punctuation">(</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">b&quot;Hello, World!&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="asgi-示例" tabindex="-1"><a class="header-anchor" href="#asgi-示例" aria-hidden="true">#</a> <strong>ASGI 示例</strong></h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">application</span><span class="token punctuation">(</span>scope<span class="token punctuation">,</span> receive<span class="token punctuation">,</span> send<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> scope<span class="token punctuation">[</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">await</span> send<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http.response.start&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
            <span class="token string">&quot;headers&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">b&quot;content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">b&quot;text/plain&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> send<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http.response.body&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">b&quot;Hello, World!&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、主流框架与服务器的接口支持" tabindex="-1"><a class="header-anchor" href="#二、主流框架与服务器的接口支持" aria-hidden="true">#</a> <strong>二、主流框架与服务器的接口支持</strong></h3><h4 id="_1-使用-wsgi-的框架" tabindex="-1"><a class="header-anchor" href="#_1-使用-wsgi-的框架" aria-hidden="true">#</a> <strong>1. 使用 WSGI 的框架</strong></h4><ul><li><strong>Flask</strong><ul><li>默认基于 WSGI，但可通过扩展（如 <code>aiohttp</code>）支持异步。</li></ul></li><li><strong>Django（传统模式）</strong><ul><li>默认使用 WSGI，但自 3.0 版本后支持通过 <code>Django Channels</code> 转向 ASGI。</li></ul></li><li><strong>Bottle</strong>、<strong>CherryPy</strong><ul><li>轻量级框架，原生支持 WSGI。</li></ul></li></ul><h4 id="_2-使用-asgi-的框架" tabindex="-1"><a class="header-anchor" href="#_2-使用-asgi-的框架" aria-hidden="true">#</a> <strong>2. 使用 ASGI 的框架</strong></h4><ul><li><p><strong>FastAPI</strong></p><ul><li>专为高性能异步设计，原生支持 WebSocket 和 OpenAPI 文档。</li></ul></li><li><p><strong>Django Channels</strong></p><ul><li>Django 的扩展，支持 ASGI 和 WebSocket、长轮询等。</li></ul></li></ul><h4 id="_3-服务器对比" tabindex="-1"><a class="header-anchor" href="#_3-服务器对比" aria-hidden="true">#</a> <strong>3. 服务器对比</strong></h4><table><thead><tr><th><strong>接口</strong></th><th><strong>服务器</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>WSGI</td><td>Gunicorn、uWSGI、mod_wsgi</td><td>成熟稳定，适合同步应用。</td></tr><tr><td>ASGI</td><td>Uvicorn、Daphne、Hypercorn</td><td>支持异步，适合高并发和实时协议。</td></tr></tbody></table><hr><h3 id="三、如何选择" tabindex="-1"><a class="header-anchor" href="#三、如何选择" aria-hidden="true">#</a> <strong>三、如何选择？</strong></h3><table><thead><tr><th><strong>需求</strong></th><th><strong>选择 WSGI</strong></th><th><strong>选择 ASGI</strong></th></tr></thead><tbody><tr><td><strong>协议支持</strong></td><td>仅需 HTTP/1.1</td><td>需要 WebSocket、HTTP/2 或实时推送</td></tr><tr><td><strong>并发能力</strong></td><td>低/中等并发</td><td>高并发、长连接或实时通信</td></tr><tr><td><strong>框架偏好</strong></td><td>Flask、传统 Django</td><td>FastAPI、Starlette、Django Channels</td></tr><tr><td><strong>开发效率</strong></td><td>简单同步代码，学习曲线低</td><td>需熟悉异步编程（<code>async/await</code>）</td></tr></tbody></table><h3 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> <strong>四、总结</strong></h3><ul><li><strong>WSGI</strong> 是 Python Web 开发的基石，适合传统同步场景，生态成熟。</li><li><strong>ASGI</strong> 是下一代接口，专为异步、高并发和实时通信设计，是现代 Web 和实时应用的首选。</li><li><strong>过渡方案</strong>：Django 通过 <code>Channels</code> 兼容 ASGI，而 FastAPI 等框架原生支持 ASGI，提供了无缝的异步体验。</li></ul>`,29),i=[e];function r(l,p){return s(),a("div",null,i)}const d=n(o,[["render",r],["__file","8、wsgi和asgi.html.vue"]]);export{d as default};
