import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const e={},p=t(`<h1 id="_1、广度优先遍历" tabindex="-1"><a class="header-anchor" href="#_1、广度优先遍历" aria-hidden="true">#</a> 1、广度优先遍历</h1><h3 id="一、基础概念" tabindex="-1"><a class="header-anchor" href="#一、基础概念" aria-hidden="true">#</a> 一、基础概念</h3><p>bfs，这个算法我一开始接触的时候简直就是一脸懵，在学习回溯算法的时候就看到有的题解中提到了dfs,学习递归的时候也有人提到bfs，它的出现频率特别高。在学习二叉树时候bfs的出现频率更高。终于在学习图论的时候我来把它搞清楚。</p><p>dfs是<strong>可一个方向去搜，不到黄河不回头，直到遇到绝境了，搜不下去了，再换方向</strong>（换方向的过程就涉及到了回溯）。</p><p>下面我借用代码随想录中的图片进行解释</p><p>上面说道dfs是可一个方向搜，不到黄河不回头。 那么我们来举一个例子。</p><p>如图一，是一个无向图，我们要搜索从节点1到节点6的所有路径。</p><figure><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220707093643.png" alt="图一" tabindex="0" loading="lazy"><figcaption>图一</figcaption></figure><p>那么dfs搜索的第一条路径是这样的： （假设第一次延默认方向，就找到了节点6），图二</p><figure><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220707093807.png" alt="图二" tabindex="0" loading="lazy"><figcaption>图二</figcaption></figure><p>此时我们找到了节点6，（遇到黄河了，是不是应该回头了），那么应该再去搜索其他方向了。 如图三：</p><figure><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220707094011.png" alt="图三" tabindex="0" loading="lazy"><figcaption>图三</figcaption></figure><p>路径2撤销了，改变了方向，走路径3（红色线）， 接着也找到终点6。 那么撤销路径2，改为路径3，在dfs中其实就是回溯的过程（这一点很重要，很多录友不理解dfs代码中回溯是用来干什么的）</p><p>又找到了一条从节点1到节点6的路径，又到黄河了，此时再回头，下图图四中，路径4撤销（回溯的过程），改为路径5。</p><figure><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220707094322.png" alt="图四" tabindex="0" loading="lazy"><figcaption>图四</figcaption></figure><ul><li>搜索方向，是认准一个方向搜，直到碰壁之后再换方向</li><li>换方向是撤销原路径，改为节点链接的下一个路径，回溯的过程。</li></ul><h3 id="二、dfs其他" tabindex="-1"><a class="header-anchor" href="#二、dfs其他" aria-hidden="true">#</a> 二、dfs其他</h3><h4 id="_2-1、dfs和递归" tabindex="-1"><a class="header-anchor" href="#_2-1、dfs和递归" aria-hidden="true">#</a> 2.1、dfs和递归</h4><p>正是因为dfs搜索可一个方向，并需要回溯，所以用递归的方式来实现是最方便的。</p><p>递归是一种代码技巧，dfs把递归更加具象化，是一种解决特定问题的方式，也是递归的一种。</p><p>所以递归三部曲中同样也适用于dfs</p><h4 id="_2-1、dfs和回溯" tabindex="-1"><a class="header-anchor" href="#_2-1、dfs和回溯" aria-hidden="true">#</a> 2.1、dfs和回溯</h4><p>回溯是dfs中的一种解决类似二叉树问题的一种具体解决方式。但是dfs不仅可以解决二叉树问题也可以解决图论中的问题。</p><p>关于回溯算法之前的算法模版类似于</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        存放结果<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        处理节点<span class="token punctuation">;</span>
        backtracking<span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">//</span> 递归
        回溯，撤销处理结果
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是图论中的dfs又是这样的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 记录被遍历过的节点</span>
visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment"># 记录从起点到当前节点的路径</span>
onPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot; 图遍历框架 &quot;&quot;&quot;</span>
<span class="token keyword">def</span> <span class="token function">traverse</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> visited<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token comment"># 经过节点 s，标记为已遍历</span>
    visited<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token comment"># 做选择：标记节点 s 在路径上</span>
    onPath<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">.</span>neighbors<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        traverse<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> neighbor<span class="token punctuation">)</span>
    <span class="token comment"># 撤销选择：节点 s 离开路径</span>
    onPath<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有没有发现回溯的地方不一致。这里是因为</p><ul><li>DFS 算法，关注点在节点</li><li>回溯算法，关注点在树枝</li></ul><p>如果执行这段代码，你会发现根节点被漏掉了：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token keyword">for</span> child <span class="token keyword">in</span> root<span class="token punctuation">.</span>children<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;进入节点 {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
        traverse<span class="token punctuation">(</span>child<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;离开节点 {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),i=[p];function o(c,l){return s(),a("div",null,i)}const r=n(e,[["render",o],["__file","1、广度优先遍历.html.vue"]]);export{r as default};
