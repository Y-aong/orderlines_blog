const t=JSON.parse('{"key":"v-46f4666c","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2%E3%80%81%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"2、策略模式","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["策略模式","设计模式"],"description":"2、策略模式 一、定义 策略模式（Strategy Pattern）是行为设计模式的一种，它定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。在Python中实现策略模式通常涉及创建一个接口或基类，以及多个实现了该接口或继承自该基类的具体策略类。 二、策略模式结构 上下文 （Context） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。 策略 （Strategy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。 具体策略 （Concrete Strategies） 实现了上下文所用算法的各种不同变体。","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2%E3%80%81%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"2、策略模式"}],["meta",{"property":"og:description","content":"2、策略模式 一、定义 策略模式（Strategy Pattern）是行为设计模式的一种，它定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。在Python中实现策略模式通常涉及创建一个接口或基类，以及多个实现了该接口或继承自该基类的具体策略类。 二、策略模式结构 上下文 （Context） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。 策略 （Strategy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。 具体策略 （Concrete Strategies） 实现了上下文所用算法的各种不同变体。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-17T09:50:53.000Z"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"策略模式"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-17T09:50:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2、策略模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-17T09:50:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、定义","slug":"一、定义","link":"#一、定义","children":[]},{"level":3,"title":"二、策略模式结构","slug":"二、策略模式结构","link":"#二、策略模式结构","children":[]}],"git":{"createdTime":1736258707000,"updatedTime":1742205053000,"contributors":[{"name":"Y-aong","email":"1627469727@qq.com","commits":2}]},"readingTime":{"minutes":4.13,"words":1239},"filePathRelative":"posts/设计模式/2、策略模式.md","localizedDate":"July 15, 2023","excerpt":"<h1> 2、策略模式</h1>\\n<h3> 一、定义</h3>\\n<p>策略模式（Strategy Pattern）是行为设计模式的一种，它定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。在Python中实现策略模式通常涉及创建一个接口或基类，以及多个实现了该接口或继承自该基类的具体策略类。</p>\\n<h3> 二、策略模式结构</h3>\\n<ol>\\n<li><strong>上下文</strong> （Context） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。</li>\\n<li><strong>策略</strong> （Strategy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。</li>\\n<li><strong>具体策略</strong> （Concrete Strategies） 实现了上下文所用算法的各种不同变体。</li>\\n</ol>","autoDesc":true}');export{t as data};
