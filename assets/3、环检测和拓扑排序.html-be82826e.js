import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-2d0f66e1.js";const l={},u=n("h1",{id:"_3、环检测和拓扑排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、环检测和拓扑排序","aria-hidden":"true"},"#"),s(" 3、环检测和拓扑排序")],-1),r=n("p",null,"图这种数据结构有一些比较特殊的算法，比如二分图判断，有环图无环图的判断，拓扑排序等。",-1),d=n("p",null,"而对于拓扑排序首先就是要判断图中是不是有环，如果有环就没有必要进行排序了。",-1),k=n("p",null,"而什么叫做拓扑排序呢就是",-1),v=n("p",null,[n("strong",null,"直观地说就是，让你把一幅图「拉平」，而且这个「拉平」的图里面，所有箭头方向都是一致的"),s("，比如上图所有箭头都是朝右的。")],-1),m=n("p",null,"如果一幅有向图中存在环，是无法进行拓扑排序的，因为肯定做不到所有箭头方向一致；反过来，如果一幅图是「有向无环图」，那么一定可以进行拓扑排序。",-1),b={id:"一、环检测——207-课程表",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#一、环检测——207-课程表","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/course-schedule/",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>你这个学期必须选修 <code>numCourses</code> 门课程，记为 <code>0</code> 到 <code>numCourses - 1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 先修课程按数组 <code>prerequisites</code> 给出，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示如果要学习课程 <code>ai</code> 则 <strong>必须</strong> 先学习课程 <code>bi</code> 。</p><ul><li>例如，先修课程对 <code>[0, 1]</code> 表示：想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> 。</li></ul><p>请你判断是否可能完成所有课程的学习？如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：numCourses = 2, prerequisites = [[1,0]]
输出：true
解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：numCourses = 2, prerequisites = [[1,0],[0,1]]
输出：false
解释：总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= numCourses &lt;= 2000</code></li><li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li><li><code>prerequisites[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt; numCourses</code></li><li><code>prerequisites[i]</code> 中的所有课程对 <strong>互不相同</strong></li></ul><p>思路：</p><p>这里题目求得是课程之间是否存在相互依赖的关系，如果存在相互依赖关系，那么课程之间就不可能学习完成，如果不存在相互依赖那么就可以学习完成全部的课程。</p><p>因为求得是相互依赖的关系所以我们可以使用有向图来表示，求是不是相互依赖，这里指的是所有的节点是否存在相互依赖的关系，那么我们就可以转化为求图中是否存在环。</p><p>题目中给的是一个图的边，</p><p>第一步我们需要将边的信息转化为图的信息。这里需要注意我们是使用依赖的关系还是被依赖的关系，比如<code>[1,0]</code>我们需要转化为<code>[[], [0]]</code>这种关系</p><p>第二步我们需要检测图中每个节点是否存在互相依赖的关系</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>on_path <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numCourses<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> prerequisites<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token comment"># 创建邻接表</span>
        graph <span class="token operator">=</span> self<span class="token punctuation">.</span>build_graph<span class="token punctuation">(</span>numCourses<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span>
        <span class="token comment"># 判断节点之间是否存在互相依赖，这里需要注意需要遍历所有的节点</span>
        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> numCourses
        self<span class="token punctuation">.</span>on_path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> numCourses
        <span class="token comment"># 注意图中并不是所有节点都相连，所以要用一个for循环将所有节点都作为起点调用一次 DFS 搜索算法。</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>flag

    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>on_path<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        
        self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>on_path<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> val<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>on_path<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">build_graph</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numCourses<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span><span class="token punctuation">:</span>
        graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> edge <span class="token keyword">in</span> prerequisites<span class="token punctuation">:</span>
            from_<span class="token punctuation">,</span> to_ <span class="token operator">=</span> edge
            graph<span class="token punctuation">[</span>from_<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>to_<span class="token punctuation">)</span>
        <span class="token keyword">return</span> graph

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),h={id:"_210-课程表-ii——拓扑排序",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_210-课程表-ii——拓扑排序","aria-hidden":"true"},"#",-1),w={href:"https://leetcode.cn/problems/course-schedule-ii/",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>现在你总共有 <code>numCourses</code> 门课需要选，记为 <code>0</code> 到 <code>numCourses - 1</code>。给你一个数组 <code>prerequisites</code> ，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示在选修课程 <code>ai</code> 前 <strong>必须</strong> 先选修 <code>bi</code> 。</p><ul><li>例如，想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> ，我们用一个匹配来表示：<code>[0,1]</code> 。</li></ul><p>返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 <strong>任意一种</strong> 就可以了。如果不可能完成所有课程，返回 <strong>一个空数组</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：numCourses = 2, prerequisites = [[1,0]]
输出：[0,1]
解释：总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
输出：[0,2,1,3]
解释：总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。
因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：numCourses = 1, prerequisites = []
输出：[0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= numCourses &lt;= 2000</code></li><li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li><li><code>prerequisites[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt; numCourses</code></li><li><code>ai != bi</code></li><li>所有<code>[ai, bi]</code> <strong>互不相同</strong></li></ul><p>这里课程表的第一题有一点不同的就是这里不仅仅要得到是否可以学完全部的课程还要得到课程的排序</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        visited <span class="token operator">=</span> <span class="token boolean">None</span>
        on_path <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 这里的True就是有环，不可以学完全部的课程</span>
        self<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">findOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numCourses<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> prerequisites<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment"># 构建图</span>
        graph <span class="token operator">=</span> self<span class="token punctuation">.</span>build_graph<span class="token punctuation">(</span>numCourses<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> numCourses
        self<span class="token punctuation">.</span>on_path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> numCourses

        <span class="token comment"># 环检测加收集信息</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;result::&quot;, self.result, self.flag)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>flag <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>result<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>on_path<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            <span class="token keyword">return</span>

        self<span class="token punctuation">.</span>on_path<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> val<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>on_path<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">build_graph</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numCourses<span class="token punctuation">,</span> prerequisites<span class="token punctuation">)</span><span class="token punctuation">:</span>
        graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> temp <span class="token keyword">in</span> prerequisites<span class="token punctuation">:</span>
            to_<span class="token punctuation">,</span> from_ <span class="token operator">=</span> temp
            graph<span class="token punctuation">[</span>from_<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>to_<span class="token punctuation">)</span>
        <span class="token keyword">return</span> graph

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function C(q,F){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,d,k,v,m,n("h3",b,[f,s(" 一、环检测——"),n("a",g,[s("207. 课程表"),e(a)])]),_,n("h3",h,[y,s(),n("a",w,[s("210. 课程表 II"),e(a)]),s("——拓扑排序")]),x])}const L=p(l,[["render",C],["__file","3、环检测和拓扑排序.html.vue"]]);export{L as default};
