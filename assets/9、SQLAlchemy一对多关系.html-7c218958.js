const n=JSON.parse(`{"key":"v-b35d06f4","path":"/posts/Python/Flask%E5%AD%A6%E4%B9%A0/9%E3%80%81SQLAlchemy%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.html","title":"9、sqlalchemy 一对多关系","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python","flask"],"tag":["sqlalchemy","序列化"],"description":"9、sqlalchemy 一对多关系 一、模型类 # !/usr/bin/env python # -*-coding:utf-8 -*- \\"\\"\\" # File : teacher_student_model.py # Time ：2023/7/16 10:42 # Author ：Y-aong # version ：python 3.7 # Description：sqlalchemy一对多，一对一，多对多关系配置 \\"\\"\\" from public.base_model import db, Base # 配置一对多关系 class Student(Base): __tablename__ = 'test_student' name = db.Column(db.String(64), comment='学生名称') teacher_id = db.Column(db.Integer, db.ForeignKey('test_teacher.id')) # 方式二 # teacher = db.relationship(\\"Teacher\\", back_populates=\\"student\\") class Teacher(Base): __tablename__ = 'test_teacher' name = db.Column(db.String(64), comment='教师名称') # 方式一、backref，要在一对多中建立双向关系，“反向”端是多对一， student = db.relationship('Student', backref='test_teacher') # 方式二、back_populates # student = db.relationship('Student', back_populates='student')","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/Python/Flask%E5%AD%A6%E4%B9%A0/9%E3%80%81SQLAlchemy%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"9、sqlalchemy 一对多关系"}],["meta",{"property":"og:description","content":"9、sqlalchemy 一对多关系 一、模型类 # !/usr/bin/env python # -*-coding:utf-8 -*- \\"\\"\\" # File : teacher_student_model.py # Time ：2023/7/16 10:42 # Author ：Y-aong # version ：python 3.7 # Description：sqlalchemy一对多，一对一，多对多关系配置 \\"\\"\\" from public.base_model import db, Base # 配置一对多关系 class Student(Base): __tablename__ = 'test_student' name = db.Column(db.String(64), comment='学生名称') teacher_id = db.Column(db.Integer, db.ForeignKey('test_teacher.id')) # 方式二 # teacher = db.relationship(\\"Teacher\\", back_populates=\\"student\\") class Teacher(Base): __tablename__ = 'test_teacher' name = db.Column(db.String(64), comment='教师名称') # 方式一、backref，要在一对多中建立双向关系，“反向”端是多对一， student = db.relationship('Student', backref='test_teacher') # 方式二、back_populates # student = db.relationship('Student', back_populates='student')"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"sqlalchemy"}],["meta",{"property":"article:tag","content":"序列化"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9、sqlalchemy 一对多关系\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、模型类","slug":"一、模型类","link":"#一、模型类","children":[]},{"level":3,"title":"二、序列化类","slug":"二、序列化类","link":"#二、序列化类","children":[]},{"level":3,"title":"三、视图类","slug":"三、视图类","link":"#三、视图类","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.21,"words":362},"filePathRelative":"posts/Python/Flask学习/9、SQLAlchemy一对多关系.md","localizedDate":"July 15, 2023","excerpt":"<h1> 9、sqlalchemy 一对多关系</h1>\\n<h3> 一、模型类</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token comment\\"># !/usr/bin/env python</span>\\n<span class=\\"token comment\\"># -*-coding:utf-8 -*-</span>\\n<span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n# File       : teacher_student_model.py\\n# Time       ：2023/7/16 10:42\\n# Author     ：Y-aong\\n# version    ：python 3.7\\n# Description：sqlalchemy一对多，一对一，多对多关系配置\\n\\"\\"\\"</span>\\n<span class=\\"token keyword\\">from</span> public<span class=\\"token punctuation\\">.</span>base_model <span class=\\"token keyword\\">import</span> db<span class=\\"token punctuation\\">,</span> Base\\n\\n\\n<span class=\\"token comment\\"># 配置一对多关系</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">(</span>Base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    __tablename__ <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'test_student'</span>\\n\\n    name <span class=\\"token operator\\">=</span> db<span class=\\"token punctuation\\">.</span>Column<span class=\\"token punctuation\\">(</span>db<span class=\\"token punctuation\\">.</span>String<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">64</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> comment<span class=\\"token operator\\">=</span><span class=\\"token string\\">'学生名称'</span><span class=\\"token punctuation\\">)</span>\\n    teacher_id <span class=\\"token operator\\">=</span> db<span class=\\"token punctuation\\">.</span>Column<span class=\\"token punctuation\\">(</span>db<span class=\\"token punctuation\\">.</span>Integer<span class=\\"token punctuation\\">,</span> db<span class=\\"token punctuation\\">.</span>ForeignKey<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'test_teacher.id'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\"># 方式二</span>\\n    <span class=\\"token comment\\"># teacher = db.relationship(\\"Teacher\\", back_populates=\\"student\\")</span>\\n\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Teacher</span><span class=\\"token punctuation\\">(</span>Base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    __tablename__ <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'test_teacher'</span>\\n    name <span class=\\"token operator\\">=</span> db<span class=\\"token punctuation\\">.</span>Column<span class=\\"token punctuation\\">(</span>db<span class=\\"token punctuation\\">.</span>String<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">64</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> comment<span class=\\"token operator\\">=</span><span class=\\"token string\\">'教师名称'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\"># 方式一、backref，要在一对多中建立双向关系，“反向”端是多对一，</span>\\n    student <span class=\\"token operator\\">=</span> db<span class=\\"token punctuation\\">.</span>relationship<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Student'</span><span class=\\"token punctuation\\">,</span> backref<span class=\\"token operator\\">=</span><span class=\\"token string\\">'test_teacher'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\"># 方式二、back_populates</span>\\n    <span class=\\"token comment\\"># student = db.relationship('Student', back_populates='student')</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
