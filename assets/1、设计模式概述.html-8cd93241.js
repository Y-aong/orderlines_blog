import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as r}from"./app-2d0f66e1.js";const a={},p=r('<h1 id="_1、设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#_1、设计模式的六大原则" aria-hidden="true">#</a> 1、设计模式的六大原则</h1><h3 id="一、设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#一、设计模式的六大原则" aria-hidden="true">#</a> 一、设计模式的六大原则</h3><ul><li><p>单一职责原则</p><ul><li>单一职责原则的定义描述非常简单，也不难理解。</li></ul><p>一个类只负责完成一个职责或者功能。也就是说在类的设计中 我们不要设计大而全的类,而是要设计粒度小、功能单一的类。</p><p>比如 我们设计一个类里面既包含了用户的一些操作,又包含了支付的一些操作,那这个类的职责就不够单一,应该将该类进行<br> 拆分,拆分成多个功能更加单一的,粒度更细的类.</p></li><li><p>开放封闭原则</p><ul><li>定义：对扩展开放，对修改关闭</li></ul><p>对扩展开放和对修改关闭表示当一个类或一个方法有新需求或者需求发生改变时应该采用扩展的方式而不应该采用修改原有<br> 逻辑的方式来实现。因为扩展了新的逻辑如果有问题只会影响新的业务，不会影响老业务；而如果采用修改的方式，很有可<br> 能就会影响到老业务受影响。</p><p>优点：</p><ol><li>新老逻辑解耦，需求发生改变不会影响老业务的逻辑</li><li>改动成本最小，只需要追加新逻辑，不需要改的老逻辑</li><li>提供代码的稳定性和可扩展性</li></ol></li><li><p>里氏替换原则</p><p>1 ) 什么是替换 ?</p><p>替换的前提是面向对象语言所支持的多态特性，同一个行为具有多个不同表现形式或形态的能力。</p><blockquote><p><strong>以 JDK 的集合框架为例，</strong><code>List</code>接口的定义为有序集合，<code>List</code>接口有多个派生类，比如<br> 大家耳熟能详的 <code>ArrayList</code>, <code>LinkedList</code>。那当某个方法参数或变量是 <code>List</code>接口类型时，<br> 既可以是 <code>ArrayList</code>的实现, 也可以是 <code>LinkedList</code>的实现，这就是替换。</p></blockquote><p>2 ) 什么是与期望行为一致的替换？</p><p>在不了解派生类的情况下，仅通过接口或基类的方法，即可清楚的知道方法的行为，而不管哪种派<br> 生类的实现，都与接口或基类方法的期望行为一致。</p><blockquote><p><strong>不需要关心是哪个类对接口进行了实现,因为不管底层如何实现,最终的结果都会符合接口中关于方法的描述(也就是与接口中方法的期望行为一致).</strong></p><p><strong>或者说接口或基类的方法是一种契约，使用方按照这个契约来使用，派生类也按照这个契约来实现。这就是与期望行为一致的替换。</strong></p></blockquote></li><li><p>接口隔离原则</p><p>定义：要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p><p>接口隔离原则与单一职责原则的区别</p><p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</p><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建</li></ul></li><li><p>依赖倒置原则</p><p>定义：依赖倒置原则（Dependence Inversion Principle，DIP）是指在设计代码架构时，高层模块不应该依赖于底层模块，二者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><p>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。</p><p>依赖倒置原则的好处:</p><ul><li>减少类间的耦合性，提高系统的稳定性 . (根据类与类之间的耦合度从弱到强排列：依赖关系、关联关系、<br> 聚合关系、组合关系、泛化关系和实现关系 )</li><li>降低并行开发引起的风险 (两个类之间有依赖关系，只要制定出两者之间的接口（或抽象类）就可以独立开发了)</li><li>提高代码的可读性和可维护性</li></ul></li><li><p>迪米特法则</p><p>简单来说迪米特法则想要表达的思想就是: <strong>不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。</strong></p><blockquote><p><strong>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</strong></p></blockquote></li></ul><h3 id="二、单例模式的作用和意义" tabindex="-1"><a class="header-anchor" href="#二、单例模式的作用和意义" aria-hidden="true">#</a> 二、单例模式的作用和意义</h3><p>保证某一个类在运行期间只有一个实例对外提供服务</p><p>使用单例模式要做的两件事</p><ol><li>保证一个类只有一个实例</li><li>为该实例提供一个全局访问节点</li></ol><h3 id="三、工厂模式有哪些-有什么区别" tabindex="-1"><a class="header-anchor" href="#三、工厂模式有哪些-有什么区别" aria-hidden="true">#</a> 三、工厂模式有哪些，有什么区别</h3><p>《设计模式》一书中，工厂模式被分为了三种：简单工厂、工厂方法和抽象工厂。</p><h4 id="_3-1、简单工厂" tabindex="-1"><a class="header-anchor" href="#_3-1、简单工厂" aria-hidden="true">#</a> 3.1、简单工厂</h4><p>适用场景：<br> 　　（1）需要创建的对象较少。<br> 　　（2）客户端不关心对象的创建过程。</p><p>优点：</p><ul><li>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</li></ul><p>缺点：</p><ul><li>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</li></ul><h4 id="_3-2、工厂方法" tabindex="-1"><a class="header-anchor" href="#_3-2、工厂方法" aria-hidden="true">#</a> 3.2、工厂方法</h4><p><strong>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</strong></p><p>工厂方法模优缺点</p><p>优点：</p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p>缺点：</p><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h4 id="_3-3、抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#_3-3、抽象工厂模式" aria-hidden="true">#</a> 3.3、抽象工厂模式</h4><p>抽象工厂模式（Abstract Factory Pattern）属于创建型模式，它实际上是对工厂方法模式的扩展，相当于一个超级工厂，用于创建其他工厂的模式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，而且每个工厂都能按照工厂模式提供对象。其实抽象工厂也是为了减少工厂方法中的子类和工厂类数量，基于此提出的设计模式。</p><p>抽象工厂模式优点</p><ol><li>对于不同产品系列有比较多共性特征时，可以使用抽象工厂模式，有助于提升组件的复用性.</li><li>当需要提升代码的扩展性并降低维护成本时，把对象的创建和使用过程分开，能有效地将代码统一到一个级别上</li><li>解决跨平台带来的兼容性问题</li></ol><p>抽象工厂模式缺点</p><ul><li>增加新的产品等级结构麻烦,需要对原有结构进行较大的修改,甚至需要修改抽象层代码,这显然会带来较大不变,违背了开闭原则.</li></ul><h3 id="四、装饰器和代理模式" tabindex="-1"><a class="header-anchor" href="#四、装饰器和代理模式" aria-hidden="true">#</a> 四、装饰器和代理模式</h3><h4 id="一、代理模式-proxy-design-pattern" tabindex="-1"><a class="header-anchor" href="#一、代理模式-proxy-design-pattern" aria-hidden="true">#</a> 一、代理模式(Proxy Design Pattern )</h4><p>原始定义是：让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许将请求提交给对象前后进行一些处理。</p><p><strong>代理模式的适用场景</strong></p><ul><li><p>功能增强<br> 当需要对一个对象的访问提供一些额外操作时,可以使用代理模式</p></li><li><p>远程（Remote）代理<br> 实际上，RPC 框架也可以看作一种代理模式，GoF 的《设计模式》一书中把它称作远程代理。通过远程代理，将网络通信、数据编解码等细节隐藏起来。客户端在使用 RPC 服务的时候，就像使用本地函数一样，无需了解跟服务器交互的细节。除此之外，RPC 服务的开发者也只需要开发业务逻辑，就像开发本地使用的函数一样，不需要关注跟客户端的交互细节。</p></li><li><p>防火墙（Firewall）代理<br> 当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。</p></li><li><p>保护（Protect or Access）代理<br> 控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p></li></ul><h4 id="二、装饰器模式-decorator-pattern" tabindex="-1"><a class="header-anchor" href="#二、装饰器模式-decorator-pattern" aria-hidden="true">#</a> 二、装饰器模式(decorator pattern)</h4><p>的原始定义是：动态的给一个对象添加一些额外的职责. 就扩展功能而言,装饰器模式提供了一种比使用子类更加灵活的替代方案.</p><p><strong>装饰器模式的适用场景</strong></p><ul><li>快速动态扩展和撤销一个类的功能场景。 比如，有的场景下对 API 接口的安全性要求较高，那么就可以使用装饰模式对传输的字符串数据进行压缩或加密。如果安全性要求不高，则可以不使用。</li><li>不支持继承扩展类的场景。 比如，使用 final 关键字的类，或者系统中存在大量通过继承产生的子类。</li></ul><h4 id="三、装饰器模式与代理模式的区别" tabindex="-1"><a class="header-anchor" href="#三、装饰器模式与代理模式的区别" aria-hidden="true">#</a> 三、装饰器模式与代理模式的区别</h4><p>对装饰器模式来说，装饰者（decorator）和被装饰者（decoratee）都实现同一个 接口。</p><p>对代理模式来说，代理类（proxy class）和真实处理的类（real class）都实现同一个接口。</p><p>他们之间的边界确实比较模糊，两者都是对类的方法进行扩展，具体区别如下：</p><ol><li>装饰器模式强调的是增强自身，在被装饰之后你能够在被增强的类上使用增强后的功能。增强后你还是你，只不过能力更强了而已；代理模式强调要让别人帮你去做一些本身与你业务没有太多关系的职责（记录日志、设置缓存）。代理模式是为了实现对象的控制，因为被代理的对象往往难以直接获得或者是其内部不想暴露出来。</li><li>装饰模式是以对客户端透明的方式扩展对象的功能，是继承方案的一个替代方案；代理模式则是给一个对象提供一个代理对象，并由代理对象来控制对原有对象的引用；</li><li>装饰模式是为装饰的对象增强功能；而代理模式对代理的对象施加控制，但不对对象本身的功能进行增强；</li></ol>',43),o=[p];function t(d,n){return e(),l("div",null,o)}const s=i(a,[["render",t],["__file","1、设计模式概述.html.vue"]]);export{s as default};
