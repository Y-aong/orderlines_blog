import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-2d0f66e1.js";const t={},p=e(`<h1 id="_6、可自定义的16个扩展点" tabindex="-1"><a class="header-anchor" href="#_6、可自定义的16个扩展点" aria-hidden="true">#</a> 6、可自定义的16个扩展点</h1><h3 id="一、自定义扩展点概述" tabindex="-1"><a class="header-anchor" href="#一、自定义扩展点概述" aria-hidden="true">#</a> 一、自定义扩展点概述</h3><p>flask是一个极其自由的框架，其实这也是我喜欢这个框架的原因就是我们可以根据自己的需求来自定义框架，这个就像是有一种养成系的感觉，会觉得这个框架越来越好用。</p><p>那么既然我们需要更加灵活的使用这个框架，其中框架中一些提供出来的方法我们肯定需要了解，其实flask中的自定义扩展点我们可以分为两类，其中一类是flask的信号机制，还有一类就是一些请求处理函数，包括但是不局限于before_request、after_request等请求处理函数。接下来我们就进入源码来分析flask提供的自定义扩展点。</p><h3 id="二、flask信号" tabindex="-1"><a class="header-anchor" href="#二、flask信号" aria-hidden="true">#</a> 二、flask信号</h3><h4 id="_1、所有信号" tabindex="-1"><a class="header-anchor" href="#_1、所有信号" aria-hidden="true">#</a> 1、所有信号</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>template_rendered <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;template-rendered&quot;</span><span class="token punctuation">)</span><span class="token comment">#  模板渲染后执行</span>
before_render_template <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;before-render-template&quot;</span><span class="token punctuation">)</span><span class="token comment">#  模板渲染前执行</span>
request_started <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;request-started&quot;</span><span class="token punctuation">)</span><span class="token comment"># 请求到来前执行</span>
request_finished <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;request-finished&quot;</span><span class="token punctuation">)</span><span class="token comment"># 请求结束后执行</span>
request_tearing_down <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;request-tearing-down&quot;</span><span class="token punctuation">)</span><span class="token comment"># 请求执行完毕后自动执行(无论成功与否)</span>
got_request_exception <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;got-request-exception&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 请求执行出现异常时执行</span>
appcontext_tearing_down <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;appcontext-tearing-down&quot;</span><span class="token punctuation">)</span><span class="token comment">#)# 应用上下文执行完毕后自动执行(无论成功与否)</span>
appcontext_pushed <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;appcontext-pushed&quot;</span><span class="token punctuation">)</span><span class="token comment"># 应用上下文push时执行</span>
appcontext_popped <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;appcontext-popped&quot;</span><span class="token punctuation">)</span><span class="token comment"># 应用上下文pop时执行</span>
message_flashed <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;message-flashed&quot;</span><span class="token punctuation">)</span><span class="token comment"># 闪现——调用flask在其中添加数据时，自动触发</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、信号的定义" tabindex="-1"><a class="header-anchor" href="#_2、信号的定义" aria-hidden="true">#</a> 2、信号的定义</h4><p>这里是flask的全部信号，由于flask的信号实现比较简单，我们以一个例子来举例说明singal的实现原理</p><p><strong>eg：request-started</strong></p><ul><li>首先我们需要定义一个信号,flask中是使用blinker进行定义的。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> blinker <span class="token keyword">import</span> Namespace

<span class="token comment"># This namespace is only for signals provided by Flask itself.</span>
_signals <span class="token operator">=</span> Namespace<span class="token punctuation">(</span><span class="token punctuation">)</span>

request_started <span class="token operator">=</span> _signals<span class="token punctuation">.</span>signal<span class="token punctuation">(</span><span class="token string">&quot;request-started&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其次在需要的时候定义一个入口，这个入口我们什么都没有操作，只是为了方便我们用户进行自定义操作</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Flask</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">full_dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Response<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_got_first_request <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            request_started<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">,</span> _async_wrapper<span class="token operator">=</span>self<span class="token punctuation">.</span>ensure_sync<span class="token punctuation">)</span>
            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>preprocess_request<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                rv <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>handle_user_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>finalize_request<span class="token punctuation">(</span>rv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的信号定义也都是这样这里就不一一展开了。</p><h4 id="_3、信号的使用" tabindex="-1"><a class="header-anchor" href="#_3、信号的使用" aria-hidden="true">#</a> 3、信号的使用</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> g
<span class="token keyword">from</span> flask <span class="token keyword">import</span> signals

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@signals<span class="token punctuation">.</span>request_started<span class="token punctuation">.</span>connect</span>
<span class="token keyword">def</span> <span class="token function">signal_before_render_template</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;signal_before_render_template&#39;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>before_request</span>
<span class="token keyword">def</span> <span class="token function">before_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before_func&#39;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">}</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送请求结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>127.0.0.1 - - [04/Mar/2024 23:09:28] &quot;GET /index/ HTTP/1.1&quot; 200 -
signal_before_render_template
before_func
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到信号中的request_started是早于before_request这个请求处理函数的，这个其实我们也是可以从源码中发现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Flask</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">full_dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Response<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_got_first_request <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token comment"># 这里是信号的处理</span>
            request_started<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">,</span> _async_wrapper<span class="token operator">=</span>self<span class="token punctuation">.</span>ensure_sync<span class="token punctuation">)</span>
            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>preprocess_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># before_request_func是在这里进行的</span>
            <span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                rv <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>handle_user_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>finalize_request<span class="token punctuation">(</span>rv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、信号的总结" tabindex="-1"><a class="header-anchor" href="#_4、信号的总结" aria-hidden="true">#</a> 4、信号的总结</h4><h5 id="request-started" tabindex="-1"><a class="header-anchor" href="#request-started" aria-hidden="true">#</a> request_started</h5><ul><li>request_started是一个信号，在每个请求到来之前执行。<br> 可以通过连接到这个信号来执行一些初始化操作或记录日志。</li></ul><h5 id="request-finished" tabindex="-1"><a class="header-anchor" href="#request-finished" aria-hidden="true">#</a> request_finished</h5><ul><li>request_finished是一个信号，在每个请求结束后执行。<br> 可以通过连接到这个信号来进行一些清理操作或处理请求完成后的逻辑。</li></ul><h5 id="before-render-template" tabindex="-1"><a class="header-anchor" href="#before-render-template" aria-hidden="true">#</a> before_render_template</h5><ul><li>before_render_template是一个信号，在模板渲染之前执行。<br> 可以通过连接到这个信号来修改要渲染的模板或添加一些数据。</li></ul><h5 id="template-rendered" tabindex="-1"><a class="header-anchor" href="#template-rendered" aria-hidden="true">#</a> template_rendered</h5><ul><li>template_rendered是一个信号，在模板渲染之后执行。<br> 可以通过连接到这个信号来进行一些后处理操作。</li></ul><h5 id="got-request-exception" tabindex="-1"><a class="header-anchor" href="#got-request-exception" aria-hidden="true">#</a> got_request_exception</h5><ul><li>got_request_exception是一个信号，在请求执行过程中出现异常时执行。<br> 可以通过连接到这个信号来处理请求异常并记录错误信息。</li></ul><h5 id="request-tearing-down" tabindex="-1"><a class="header-anchor" href="#request-tearing-down" aria-hidden="true">#</a> request_tearing_down</h5><ul><li>request_tearing_down是一个信号，会在请求执行完毕后自动执行，无论请求成功与否。<br> 可以通过连接到这个信号来进行一些收尾工作或资源释放操作。</li></ul><h5 id="appcontext-tearing-down" tabindex="-1"><a class="header-anchor" href="#appcontext-tearing-down" aria-hidden="true">#</a> appcontext_tearing_down</h5><ul><li>appcontext_tearing_down是一个信号，会在应用上下文执行完毕后自动执行，无论成功与否。<br> 可以通过连接到这个信号来进行一些应用上下文的收尾工作或资源释放操作。</li></ul><h5 id="appcontext-pushed" tabindex="-1"><a class="header-anchor" href="#appcontext-pushed" aria-hidden="true">#</a> appcontext_pushed</h5><ul><li>appcontext_pushed是一个信号，在应用上下文被push时执行。<br> 可以通过连接到这个信号来执行一些与应用上下文相关的操作。</li></ul><h5 id="appcontext-popped" tabindex="-1"><a class="header-anchor" href="#appcontext-popped" aria-hidden="true">#</a> appcontext_popped</h5><ul><li>appcontext_popped是一个信号，在应用上下文被pop时执行。<br> 可以通过连接到这个信号来执行一些与应用上下文相关的清理操作。</li></ul><h5 id="message-flashed" tabindex="-1"><a class="header-anchor" href="#message-flashed" aria-hidden="true">#</a> message_flashed</h5><ul><li>message_flashed是一个信号，在调用Flask中的消息闪现(flash)方法时自动触发。<br> 可以通过连接到这个信号来做一些闪现消息的处理逻辑。</li></ul><h3 id="三、flask请求处理函数" tabindex="-1"><a class="header-anchor" href="#三、flask请求处理函数" aria-hidden="true">#</a> 三、flask请求处理函数</h3><p>flask中其他的处理函数</p><ul><li><p>url_value_processor：处理url</p></li><li><p>before_reuqest：请求开始</p></li><li><p>after_request：请求结束</p></li><li><p>context_processor：注册模板上下文处理程序函数。这些函数在返回模板前调用。</p></li><li><p>teardown_request：在请求上下文时调用pop时执行的。</p></li><li><p>url_defaults：所有视图函数的URL默认回调函数应用程序。</p></li></ul><p>其实这些方法都是比较常见的了，使用也是比较简单了。那么我也简单举几个例子来说明如何使用。</p><p><strong>before_request</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>g
<span class="token keyword">from</span> flask <span class="token keyword">import</span> signals
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>before_request</span>
<span class="token keyword">def</span> <span class="token function">before_request_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    g<span class="token punctuation">.</span>xx <span class="token operator">=</span> <span class="token number">123</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;before_request_func&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/order&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;order.html&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>after_request</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>g
<span class="token keyword">from</span> flask <span class="token keyword">import</span> signals
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>after_request</span>
<span class="token keyword">def</span> <span class="token function">after_request_func</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;after_request_func&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> response

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/order&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">&#39;order.html&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>url_value_preprocessor</strong>需要传入endpoint</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> g
<span class="token keyword">from</span> flask <span class="token keyword">import</span> signals

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>url_value_preprocessor</span>
<span class="token keyword">def</span> <span class="token function">url_value_preprocessor_func</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 这里我们需要传入endpoint</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;url_value_preprocessor_func&#39;</span><span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token comment"># url_value_preprocessor_func index</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/index/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">}</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h3><p>目前flask中一个有13个自定义扩展点，如有遗漏敬请指正。分别为10个信号，6个请求处理函数</p><h4 id="_1、flask信号" tabindex="-1"><a class="header-anchor" href="#_1、flask信号" aria-hidden="true">#</a> 1、flask信号</h4><h5 id="request-started-1" tabindex="-1"><a class="header-anchor" href="#request-started-1" aria-hidden="true">#</a> request_started</h5><ul><li>request_started是一个信号，在每个请求到来之前执行。<br> 可以通过连接到这个信号来执行一些初始化操作或记录日志。</li></ul><h5 id="request-finished-1" tabindex="-1"><a class="header-anchor" href="#request-finished-1" aria-hidden="true">#</a> request_finished</h5><ul><li>request_finished是一个信号，在每个请求结束后执行。<br> 可以通过连接到这个信号来进行一些清理操作或处理请求完成后的逻辑。</li></ul><h5 id="before-render-template-1" tabindex="-1"><a class="header-anchor" href="#before-render-template-1" aria-hidden="true">#</a> before_render_template</h5><ul><li>before_render_template是一个信号，在模板渲染之前执行。<br> 可以通过连接到这个信号来修改要渲染的模板或添加一些数据。</li></ul><h5 id="template-rendered-1" tabindex="-1"><a class="header-anchor" href="#template-rendered-1" aria-hidden="true">#</a> template_rendered</h5><ul><li>template_rendered是一个信号，在模板渲染之后执行。<br> 可以通过连接到这个信号来进行一些后处理操作。</li></ul><h5 id="got-request-exception-1" tabindex="-1"><a class="header-anchor" href="#got-request-exception-1" aria-hidden="true">#</a> got_request_exception</h5><ul><li>got_request_exception是一个信号，在请求执行过程中出现异常时执行。<br> 可以通过连接到这个信号来处理请求异常并记录错误信息。</li></ul><h5 id="request-tearing-down-1" tabindex="-1"><a class="header-anchor" href="#request-tearing-down-1" aria-hidden="true">#</a> request_tearing_down</h5><ul><li>request_tearing_down是一个信号，会在请求执行完毕后自动执行，无论请求成功与否。<br> 可以通过连接到这个信号来进行一些收尾工作或资源释放操作。</li></ul><h5 id="appcontext-tearing-down-1" tabindex="-1"><a class="header-anchor" href="#appcontext-tearing-down-1" aria-hidden="true">#</a> appcontext_tearing_down</h5><ul><li>appcontext_tearing_down是一个信号，会在应用上下文执行完毕后自动执行，无论成功与否。<br> 可以通过连接到这个信号来进行一些应用上下文的收尾工作或资源释放操作。</li></ul><h5 id="appcontext-pushed-1" tabindex="-1"><a class="header-anchor" href="#appcontext-pushed-1" aria-hidden="true">#</a> appcontext_pushed</h5><ul><li>appcontext_pushed是一个信号，在应用上下文被push时执行。<br> 可以通过连接到这个信号来执行一些与应用上下文相关的操作。</li></ul><h5 id="appcontext-popped-1" tabindex="-1"><a class="header-anchor" href="#appcontext-popped-1" aria-hidden="true">#</a> appcontext_popped</h5><ul><li>appcontext_popped是一个信号，在应用上下文被pop时执行。<br> 可以通过连接到这个信号来执行一些与应用上下文相关的清理操作。</li></ul><h5 id="message-flashed-1" tabindex="-1"><a class="header-anchor" href="#message-flashed-1" aria-hidden="true">#</a> message_flashed</h5><ul><li>message_flashed是一个信号，在调用Flask中的消息闪现(flash)方法时自动触发。<br> 可以通过连接到这个信号来做一些闪现消息的处理逻辑。</li></ul><h4 id="_2、请求处理函数" tabindex="-1"><a class="header-anchor" href="#_2、请求处理函数" aria-hidden="true">#</a> 2、请求处理函数</h4><ul><li><p><strong>url_value_processor</strong>：处理url</p></li><li><p><strong>before_reuqest</strong>：请求开始</p></li><li><p><strong>after_request</strong>：请求结束</p></li><li><p><strong>context_processor</strong>：注册模板上下文处理程序函数。这些函数在返回模板前调用。</p></li><li><p><strong>teardown_request</strong>：在请求上下文时调用pop时执行的。</p></li><li><p><strong>url_defaults</strong>：所有视图函数的URL默认回调函数应用程序。</p></li></ul>`,77),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","6、自定义扩展点.html.vue"]]);export{d as default};
