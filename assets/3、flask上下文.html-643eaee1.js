import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-2d0f66e1.js";const t={},o=e(`<h1 id="_3、flask上下文contextvars" tabindex="-1"><a class="header-anchor" href="#_3、flask上下文contextvars" aria-hidden="true">#</a> 3、Flask上下文Contextvars</h1><h3 id="一-为什么迁移到-contextvars" tabindex="-1"><a class="header-anchor" href="#一-为什么迁移到-contextvars" aria-hidden="true">#</a> 一. 为什么迁移到 <code>contextvars</code>？</h3><p>Python 3.7 引入的 <code>contextvars</code> 模块提供了更灵活的上下文变量管理能力，支持 <strong>异步编程</strong> 和 <strong>更细粒度的上下文绑定</strong>。Flask 3.0 的迁移主要基于以下优势：</p><ul><li><strong>异步支持</strong>：<code>contextvars</code> 天生支持异步/协程环境（如 <code>asyncio</code>），而 Werkzeug 的 <code>Local</code> 主要针对多线程。</li><li><strong>轻量级</strong>：标准库的 <code>contextvars</code> 性能更高，且无需依赖第三方库（如 Werkzeug）。</li><li><strong>更清晰的上下文管理</strong>：通过 <code>Token</code> 机制可更方便地管理上下文的嵌套和恢复。</li></ul><h3 id="二-flask-3-0-2-上下文的核心变化" tabindex="-1"><a class="header-anchor" href="#二-flask-3-0-2-上下文的核心变化" aria-hidden="true">#</a> <strong>二. Flask 3.0.2 上下文的核心变化</strong></h3><h4 id="_2-1-上下文对象的实现" tabindex="-1"><a class="header-anchor" href="#_2-1-上下文对象的实现" aria-hidden="true">#</a> <strong>2.1 上下文对象的实现</strong></h4><p>Flask 3.0 的上下文（App Context 和 Request Context）现在基于 <code>contextvars</code> 实现，而非 Werkzeug 的 <code>LocalStack</code>。关键改动如下：</p><ul><li><strong><code>contextvars.ContextVar</code></strong>：每个上下文（如 <code>app_ctx</code> 和 <code>request_ctx</code>）通过 <code>ContextVar</code> 绑定到当前执行上下文。</li><li><strong><code>async</code>/<code>await</code> 支持</strong>：原生支持异步请求处理，无需额外适配。</li></ul><h4 id="_2-2-核心代码对比" tabindex="-1"><a class="header-anchor" href="#_2-2-核心代码对比" aria-hidden="true">#</a> <strong>2.2 核心代码对比</strong></h4><h4 id="旧版-基于-werkzeug-的-localstack" tabindex="-1"><a class="header-anchor" href="#旧版-基于-werkzeug-的-localstack" aria-hidden="true">#</a> <strong>旧版（基于 Werkzeug 的 LocalStack）</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Flask 2.x 及之前版本</span>
<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalStack

_request_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 请求上下文栈</span>
_app_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 应用上下文栈</span>

<span class="token keyword">class</span> <span class="token class-name">RequestContext</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        _request_ctx_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        _request_ctx_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="新版-基于-contextvars" tabindex="-1"><a class="header-anchor" href="#新版-基于-contextvars" aria-hidden="true">#</a> <strong>新版（基于 contextvars）</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Flask 3.0+ 的实现（简化版）</span>
<span class="token keyword">import</span> contextvars

_request_ctx_var <span class="token operator">=</span> contextvars<span class="token punctuation">.</span>ContextVar<span class="token punctuation">(</span><span class="token string">&quot;request_ctx&quot;</span><span class="token punctuation">)</span>
_app_ctx_var <span class="token operator">=</span> contextvars<span class="token punctuation">.</span>ContextVar<span class="token punctuation">(</span><span class="token string">&quot;app_ctx&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">RequestContext</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_token <span class="token operator">=</span> _request_ctx_var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        _request_ctx_var<span class="token punctuation">.</span>reset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-上下文的生命周期与管理" tabindex="-1"><a class="header-anchor" href="#三-上下文的生命周期与管理" aria-hidden="true">#</a> <strong>三. 上下文的生命周期与管理</strong></h3><h4 id="_3-1-应用上下文-app-context" tabindex="-1"><a class="header-anchor" href="#_3-1-应用上下文-app-context" aria-hidden="true">#</a> <strong>3.1 应用上下文（App Context）</strong></h4><ul><li><strong>创建</strong>：通过 <code>app.app_context()</code> 或请求处理时自动创建。</li><li><strong>绑定</strong>：使用 <code>contextvars.ContextVar.set()</code> 将 <code>AppContext</code> 绑定到当前执行上下文。</li><li><strong>销毁</strong>：通过 <code>ContextVar.reset(token)</code> 恢复上下文状态。</li></ul><h4 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> <strong>示例代码</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> current_app

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> app<span class="token punctuation">.</span>app_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>current_app<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># 访问应用配置</span>
        <span class="token comment"># 上下文随 with 作用域自动销毁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-请求上下文-request-context" tabindex="-1"><a class="header-anchor" href="#_3-2-请求上下文-request-context" aria-hidden="true">#</a> <strong>3.2 请求上下文（Request Context）</strong></h4><ul><li><strong>创建</strong>：通过 <code>app.request_context(environ)</code> 在 WSGI 处理器中创建。</li><li><strong>绑定</strong>：将 <code>RequestContext</code> 绑定到当前线程/协程的 <code>contextvars</code>。</li><li><strong>异步支持</strong>：在异步视图中，<code>contextvars</code> 可自动传递上下文。</li></ul><h4 id="异步示例" tabindex="-1"><a class="header-anchor" href="#异步示例" aria-hidden="true">#</a> <strong>异步示例</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/async&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 异步请求处理</span>
    data <span class="token operator">=</span> <span class="token keyword">await</span> some_async_operation<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-contextvars-的核心机制" tabindex="-1"><a class="header-anchor" href="#四-contextvars-的核心机制" aria-hidden="true">#</a> <strong>四. <code>contextvars</code> 的核心机制</strong></h3><h4 id="_4-1-contextvar-的基本用法" tabindex="-1"><a class="header-anchor" href="#_4-1-contextvar-的基本用法" aria-hidden="true">#</a> <strong>4.1 ContextVar 的基本用法</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> contextvars

<span class="token comment"># 定义一个上下文变量</span>
my_var <span class="token operator">=</span> contextvars<span class="token punctuation">.</span>ContextVar<span class="token punctuation">(</span><span class="token string">&quot;my_var&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 设置值并获取 Token</span>
token <span class="token operator">=</span> my_var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_var<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 &quot;value1&quot;</span>

<span class="token comment"># 恢复原始值</span>
my_var<span class="token punctuation">.</span>reset<span class="token punctuation">(</span>token<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_var<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出原始值（默认 None 或自定义默认值）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-flask-如何使用-contextvar" tabindex="-1"><a class="header-anchor" href="#_4-2-flask-如何使用-contextvar" aria-hidden="true">#</a> <strong>4.2 Flask 如何使用 ContextVar</strong></h4><p>Flask 内部通过 <code>ContextVar</code> 管理核心对象：</p><ul><li><strong><code>current_app</code></strong>：通过 <code>app_ctx_var.get()</code> 获取当前应用实例。</li><li><strong><code>request</code></strong>：通过 <code>request_ctx_var.get()</code> 获取当前请求对象。</li></ul><h3 id="五-源码关键路径-flask-3-0" tabindex="-1"><a class="header-anchor" href="#五-源码关键路径-flask-3-0" aria-hidden="true">#</a> 五. 源码关键路径（Flask 3.0+）</h3><h4 id="_6-1-请求处理流程" tabindex="-1"><a class="header-anchor" href="#_6-1-请求处理流程" aria-hidden="true">#</a> <strong>6.1 请求处理流程</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">wsgi_app</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> environ<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建请求上下文</span>
    request_ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>request_context<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        request_ctx<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 绑定到 contextvars</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        request_ctx<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 恢复上下文</span>
    <span class="token keyword">return</span> response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-appcontext-的-push-pop-实现" tabindex="-1"><a class="header-anchor" href="#_6-2-appcontext-的-push-pop-实现" aria-hidden="true">#</a> <strong>6.2 AppContext 的 push/pop 实现</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AppContext</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_token <span class="token operator">=</span> _app_ctx_var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        _app_ctx_var<span class="token punctuation">.</span>reset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六-优势与最佳实践" tabindex="-1"><a class="header-anchor" href="#六-优势与最佳实践" aria-hidden="true">#</a> <strong>六. 优势与最佳实践</strong></h3><h4 id="_6-1-主要优势" tabindex="-1"><a class="header-anchor" href="#_6-1-主要优势" aria-hidden="true">#</a> <strong>6.1 主要优势</strong></h4><ul><li><strong>异步友好</strong>：原生支持 <code>async</code>/<code>await</code>，无需额外适配。</li><li><strong>轻量级</strong>：标准库的 <code>contextvars</code> 性能更高，内存占用更低。</li><li><strong>上下文嵌套</strong>：通过 <code>Token</code> 可灵活管理多层上下文。</li></ul><h4 id="_6-2-最佳实践" tabindex="-1"><a class="header-anchor" href="#_6-2-最佳实践" aria-hidden="true">#</a> <strong>6.2 最佳实践</strong></h4><ol><li><strong>避免直接操作 <code>contextvars</code></strong>：使用 Flask 提供的 <code>current_app</code>、<code>request</code> 等代理。</li><li><strong>处理异步场景</strong>：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">some_async_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 异步函数中仍可访问 request</span>
    user_id <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;user_id&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> do_something<span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>自定义上下文变量</strong>：<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_ctx_var <span class="token operator">=</span> contextvars<span class="token punctuation">.</span>ContextVar<span class="token punctuation">(</span><span class="token string">&quot;my_ctx_var&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">set_my_var</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    token <span class="token operator">=</span> my_ctx_var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment"># 执行逻辑</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        my_ctx_var<span class="token punctuation">.</span>reset<span class="token punctuation">(</span>token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="七-总结" tabindex="-1"><a class="header-anchor" href="#七-总结" aria-hidden="true">#</a> <strong>七. 总结</strong></h3><p>Flask 3.0.2 的上下文机制通过 <strong><code>contextvars</code></strong> 实现了以下改进：</p><ul><li><strong>统一了同步/异步环境</strong>：无需为异步场景单独适配。</li><li><strong>更清晰的上下文管理</strong>：通过 <code>Token</code> 精确控制上下文状态。</li><li><strong>更高效的性能</strong>：基于标准库的实现减少了依赖开销。</li></ul>`,41),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","3、flask上下文.html.vue"]]);export{d as default};
