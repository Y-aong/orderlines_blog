import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as s,b as n,d as e,e as t}from"./app-2d0f66e1.js";const i={},r=t('<h1 id="_4、运行容器" tabindex="-1"><a class="header-anchor" href="#_4、运行容器" aria-hidden="true">#</a> 4、运行容器</h1><h3 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念" aria-hidden="true">#</a> 一、概念</h3><h4 id="_1-1、容器" tabindex="-1"><a class="header-anchor" href="#_1-1、容器" aria-hidden="true">#</a> 1.1、容器</h4><p>每个运行的容器都是可重复的； 包含依赖环境在内的标准，意味着无论你在哪里运行它都会得到相同的行为。</p><p>容器将应用程序从底层的主机设施中解耦。 这使得在不同的云或 OS 环境中部署更加容易。</p>',5),u={href:"https://kubernetes.io/zh-cn/docs/concepts/architecture/nodes/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/",target:"_blank",rel:"noopener noreferrer"},k=s("h4",{id:"_1-2-、容器镜像",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-2-、容器镜像","aria-hidden":"true"},"#"),n(" 1.2 、容器镜像")],-1),v={href:"https://kubernetes.io/zh-cn/docs/concepts/containers/images/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://glossary.cncf.io/immutable-infrastructure/",target:"_blank",rel:"noopener noreferrer"},b=t(`<h4 id="_1-3、容器运行时" tabindex="-1"><a class="header-anchor" href="#_1-3、容器运行时" aria-hidden="true">#</a> 1.3、容器运行时</h4><p>容器运行环境是负责运行容器的软件。</p><h3 id="二、容器中字段解释" tabindex="-1"><a class="header-anchor" href="#二、容器中字段解释" aria-hidden="true">#</a> 二、容器中字段解释</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FIELDS:
   args	<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token operator">&gt;</span>给command进行运行的参数
   <span class="token builtin class-name">command</span>	<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token operator">&gt;</span>运行命令
   <span class="token function">env</span>	<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">&gt;</span>环境变量
   envFrom	<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">&gt;</span>    
   image	<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>镜像名称
   imagePullPolicy	<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>镜像下载方式 Always, Never, IfNotPresent. Defaults to Always    
   lifecycle	<span class="token operator">&lt;</span>Object<span class="token operator">&gt;</span>生命周期 
   livenessProbe	<span class="token operator">&lt;</span>Object<span class="token operator">&gt;</span>生存探针
   name	<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> -required-容器名称
   ports	<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">&gt;</span>要暴漏的端口
   readinessProbe	<span class="token operator">&lt;</span>Object<span class="token operator">&gt;</span>就绪探针
   resources	<span class="token operator">&lt;</span>Object<span class="token operator">&gt;</span>资源限制
   securityContext	<span class="token operator">&lt;</span>Object<span class="token operator">&gt;</span>安全策略
   startupProbe	<span class="token operator">&lt;</span>Object<span class="token operator">&gt;</span>启动探针
   stdin	<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>
   该容器是否应该为容器中的stdin分配缓冲区
   运行时。如果没有设置，从容器中的stdin读取将始终导致EOF。默认为false。
   stdinOnce	<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>
   terminationMessagePath	<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>容器终止到的文件的路径将要写入的消息被安装到容器的文件系统中。
   terminationMessagePolicy	<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> 指示应该如何填充终止消息。
   <span class="token function">tty</span>	<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span>这个容器是否应该为自己分配一个TTY，也需要<span class="token string">&#39;stdin&#39;</span>是真的
   volumeDevices	<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">&gt;</span>是容器要使用的卷的列表。
   volumeMounts	<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">&gt;</span>将Pod卷安装到容器的文件系统中。不能更新。
   workingDir	<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>容器的工作目录。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、环境变量" tabindex="-1"><a class="header-anchor" href="#三、环境变量" aria-hidden="true">#</a> 三、环境变量</h3><p><strong>使用环境变量来设置参数</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">env</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MESSAGE
  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;hello world&quot;</span>
<span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/echo&quot;</span><span class="token punctuation">]</span>
<span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;$(MESSAGE)&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、生命周期钩子" tabindex="-1"><a class="header-anchor" href="#四、生命周期钩子" aria-hidden="true">#</a> 四、生命周期钩子</h3><p>Kubernetes中为容器提供了两个 hook（钩子函数）：</p><ul><li><p><code>PostStart</code></p><p>此钩子函数在容器创建后将立刻执行。但是，并不能保证该钩子函数在容器的 <code>ENTRYPOINT</code> 之前执行。该钩子函数没有输入参数。</p></li><li><p><code>PreStop</code></p><p>此钩子函数在容器被 terminate（终止）之前执行，例如：</p><ul><li>通过接口调用删除容器所在 Pod</li><li>某些管理事件的发生：健康检查失败、资源紧缺等</li></ul><p>如果容器已经被关闭或者进入了 <code>completed</code> 状态，preStop 钩子函数的调用将失败。该函数的执行是同步的，即，kubernetes 将在该函数完成执行之后才删除容器。该钩子函数没有输入参数。</p></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle<span class="token punctuation">-</span>demo
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;echo hello; &quot;</span><span class="token punctuation">]</span>
    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mount1
       	 <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /app
    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>
      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;echo world;&quot;</span><span class="token punctuation">]</span>
      <span class="token key atrule">preStop</span><span class="token punctuation">:</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;echo 66666;&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在容器启动后立刻发送 postStart 事件，但是并不能确保 postStart 事件处理程序在容器的 EntryPoint 之前执行。postStart 事件处理程序相对于容器中的进程来说是异步的（同时执行），然而，Kubernetes 在管理容器时，将一直等到 postStart 事件处理程序结束之后，才会将容器的状态标记为 Running。</p></li><li><p>Kubernetes 在决定关闭容器时，立刻发送 preStop 事件，并且，将一直等到 preStop 事件处理程序结束或者 Pod 的 <code>--grace-period</code> 超时，才删除容器</p></li></ul><h3 id="五、资源限制" tabindex="-1"><a class="header-anchor" href="#五、资源限制" aria-hidden="true">#</a> 五、资源限制</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> qos<span class="token punctuation">-</span>demo
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> qos<span class="token punctuation">-</span>example
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> qos<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>ctr
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token comment"># </span>
      <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token comment"># 限制最大大小   -Xmx</span>
        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;200Mi&quot;</span>
        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;700m&quot;</span> 
        <span class="token comment"># 启动默认给分配的大小   -Xms</span>
      <span class="token key atrule">requests</span><span class="token punctuation">:</span>
        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;200Mi&quot;</span>
        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;700m&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function h(g,y){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,s("p",null,[n("Kubernetes 集群中的每个"),s("a",u,[n("节点"),e(a)]),n("都会运行容器， 这些容器构成分配给该节点的 "),s("a",d,[n("Pod"),e(a)]),n("。 单个 Pod 中的容器会在共同调度下，于同一位置运行在相同的节点上。")]),k,s("p",null,[s("a",v,[n("容器镜像"),e(a)]),n("是一个随时可以运行的软件包， 包含运行应用程序所需的一切：代码和它需要的所有运行时、应用程序和系统库，以及一些基本设置的默认值。")]),s("p",null,[n("容器旨在设计成无状态且"),s("a",m,[n("不可变的"),e(a)]),n("： 你不应更改已经运行的容器的代码。如果有一个容器化的应用程序需要修改， 正确的流程是：先构建包含更改的新镜像，再基于新构建的镜像重新运行容器。")]),b])}const f=p(i,[["render",h],["__file","4、k8s容器.html.vue"]]);export{f as default};
