import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as n,b as s,d as e,e as t}from"./app-2d0f66e1.js";const i={},u=n("h1",{id:"_4、贪心双指针问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4、贪心双指针问题","aria-hidden":"true"},"#"),s(" 4、贪心双指针问题")],-1),r={id:"_605-种花问题——种花问题",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_605-种花问题——种花问题","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/can-place-flowers/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</p><p>给你一个整数数组 <code>flowerbed</code> 表示花坛，由若干 <code>0</code> 和 <code>1</code> 组成，其中 <code>0</code> 表示没种植花，<code>1</code> 表示种植了花。另有一个数 <code>n</code> ，能否在不打破种植规则的情况下种入 <code>n</code> 朵花？能则返回 <code>true</code> ，不能则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：flowerbed = [1,0,0,0,1], n = 1
输出：true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：flowerbed = [1,0,0,0,1], n = 2
输出：false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= flowerbed.length &lt;= 2 * 104</code></li><li><code>flowerbed[i]</code> 为 <code>0</code> 或 <code>1</code></li><li><code>flowerbed</code> 中不存在相邻的两朵花</li><li><code>0 &lt;= n &lt;= flowerbed.length</code></li></ul><p>我觉得这道题非常巧妙，难度也不算太大，但是思路也还是比较巧妙的，让你觉得有思路但是又有点难以下手。其实只要把条件处理清楚了也是比较好做的。</p><p><code>1 0 0 0 1 0 0 1</code></p><p>情况一：当i = 0, nums[i]==1,我们需要判断i=3的情况，</p><p>情况二：当i=3，nums[i] =0，我们有需要分两个情况：</p><ul><li>情况一：nums[i+1] == 1,i = i+1+2,加一是到情况一，再加2是从情况一开始判断</li><li>情况二：nums[i+1] == 0,这个位置我们是可以种花的</li></ul><p>问题一，能不能种n个花：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flowerbed<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
     
        left <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span> <span class="token keyword">and</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> flowerbed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">2</span>
            <span class="token keyword">elif</span> flowerbed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span> <span class="token keyword">or</span> flowerbed<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    n <span class="token operator">-=</span> <span class="token number">1</span>
                    left <span class="token operator">+=</span> <span class="token number">2</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    left <span class="token operator">+=</span> <span class="token number">3</span>
        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题二：最多中多少个花</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flowerbed<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        result <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> flowerbed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">2</span>
            <span class="token keyword">elif</span> flowerbed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span> <span class="token keyword">or</span> flowerbed<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    result <span class="token operator">+=</span> <span class="token number">1</span>
                    left <span class="token operator">+=</span> <span class="token number">2</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    left <span class="token operator">+=</span> <span class="token number">3</span>
        <span class="token keyword">return</span> result

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题三：返回种完花的花坛</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">canPlaceFlowers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flowerbed<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> flowerbed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">2</span>
            <span class="token keyword">elif</span> flowerbed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flowerbed<span class="token punctuation">)</span> <span class="token keyword">or</span> flowerbed<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    flowerbed<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    left <span class="token operator">+=</span> <span class="token number">2</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    left <span class="token operator">+=</span> <span class="token number">3</span>
        <span class="token keyword">return</span> flowerbed

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),b={id:"_11-盛最多水的容器",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_11-盛最多水的容器","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>**说明：**你不能倾斜容器。</p><p><strong>示例 1：</strong></p><figure><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：[1,8,6,2,5,4,8,3,7]
输出：49 
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：height = [1,1]
输出：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>思路：</p><p>当前矩形的面积是多少：(right-left)*min(height[left], height[right])</p><p>只要能想到这里就很好解决了</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token number">0</span>

        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            cur_area <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token punctuation">)</span>
            result <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>cur_area<span class="token punctuation">,</span> result<span class="token punctuation">)</span>

            <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> result

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),f={id:"_881-救生艇",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_881-救生艇","aria-hidden":"true"},"#",-1),w={href:"https://leetcode.cn/problems/boats-to-save-people/",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>给定数组 <code>people</code> 。<code>people[i]</code>表示第 <code>i</code> 个人的体重 ，<strong>船的数量不限</strong>，每艘船可以承载的最大重量为 <code>limit</code>。</p><p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为 <code>limit</code>。</p><p>返回 <em>承载所有人所需的最小船数</em> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：people = [1,2], limit = 3
输出：1
解释：1 艘船载 (1, 2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：people = [3,2,2,1], limit = 3
输出：3
解释：3 艘船分别载 (1, 2), (2) 和 (3)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：people = [3,5,3,4], limit = 5
输出：4
解释：4 艘船分别载 (3), (3), (4), (5)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路：</p><p>优先让船装重量小的两个人，然后在装重量大的一个人的，那么我们需要先对重量进行排序，让重量少的尽量在一起且有序，然后使用双指针进行遍历</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">numRescueBoats</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> people<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token number">0</span>

        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

        people<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> people<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> people<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> limit<span class="token punctuation">:</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>

            result <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token keyword">return</span> result

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),x={id:"_611-有效三角形的个数",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#_611-有效三角形的个数","aria-hidden":"true"},"#",-1),L={href:"https://leetcode.cn/problems/valid-triangle-number/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>给定一个包含非负整数的数组 <code>nums</code> ，返回其中可以组成三角形三条边的三元组个数。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [2,2,3,4]
输出: 3
解释:有效的组合是: 
2,3,4 (使用第一个 2)
2,3,4 (使用第二个 2)
2,2,3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [4,2,3,4]
输出: 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><p>这题我一开始使用的回溯算法，因为我看到了这个是求的是组合</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">triangleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>back_tracking<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> path
        <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">&gt;</span> z <span class="token keyword">and</span> x <span class="token operator">+</span> z <span class="token operator">&gt;</span> y <span class="token keyword">and</span> y <span class="token operator">+</span> z <span class="token operator">&gt;</span> x

    <span class="token keyword">def</span> <span class="token function">back_tracking</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> path<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> result<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>check<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>back_tracking<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> path<span class="token punctuation">,</span> result<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确思路：</p><p>三角形的定义，任意两边之和要大于第三边，因此我们需要先对数据进行排序，然后遍历数据用较短的两个边相加和第三个边进行比较，判断是否满足条件，感觉和三数之和有点相似</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">triangleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># x, y, z从小到大，一定满足x+y &gt; z</span>
        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">for</span> right <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> <span class="token number">0</span>
            middle <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span>
			<span class="token comment"># 先确定最右边</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> middle <span class="token punctuation">:</span>
                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token comment"># 这里一旦满足条件就可以证明[left, middle]之间的所有数都是可以组合为三角形的</span>
                    result <span class="token operator">+=</span> middle <span class="token operator">-</span> left
                    middle <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    left <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> result                

       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：为什么要先确定最右边，先确定最左边结果如何算，先确定中间做不到</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> left <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
    right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">while</span> middle <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> ?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),j={id:"_524-通过删除字母匹配到字典里最长单词",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#_524-通过删除字母匹配到字典里最长单词","aria-hidden":"true"},"#",-1),N={href:"https://leetcode.cn/problems/longest-word-in-dictionary-through-deleting/",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>给你一个字符串 <code>s</code> 和一个字符串数组 <code>dictionary</code> ，找出并返回 <code>dictionary</code> 中最长的字符串，该字符串可以通过删除 <code>s</code> 中的某些字符得到。</p><p>如果答案不止一个，返回长度最长且字母序最小的字符串。如果答案不存在，则返回空字符串。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;abpcplea&quot;, dictionary = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]
输出：&quot;apple&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：s = &quot;abpcplea&quot;, dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]
输出：&quot;a&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>1 &lt;= dictionary.length &lt;= 1000</code></li><li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li><li><code>s</code> 和 <code>dictionary[i]</code> 仅由小写英文字母组成</li></ul><p>思路：</p><p>求dictionary长度最长且字母序最小的字符串是否在s中出现</p><p>我们首先可以通过双指针判断字符串a是否存在于字符串b中，接下来就是字母序最小，长度最长，这个可以通过排序实现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>dictionary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;ale&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;monkey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;plea&quot;</span><span class="token punctuation">]</span>

dictionary<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> obj<span class="token punctuation">)</span>
dictionary<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span>
<span class="token comment"># [&#39;monkey&#39;, &#39;apple&#39;, &#39;plea&#39;, &#39;ale&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个排序有可能不熟，其实我也不熟</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findLongestWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> dictionary<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token comment"># 排序字典序最小且长度最长</span>
        dictionary<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span>

        s_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        <span class="token keyword">for</span> word <span class="token keyword">in</span> dictionary<span class="token punctuation">:</span>
            word_index <span class="token operator">=</span> <span class="token number">0</span>
            s_index <span class="token operator">=</span> <span class="token number">0</span>
            word_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>
            
            <span class="token keyword">while</span> word_index <span class="token operator">&lt;</span> word_length <span class="token keyword">and</span> s_index <span class="token operator">&lt;</span> s_length<span class="token punctuation">:</span>
                <span class="token keyword">if</span> word<span class="token punctuation">[</span>word_index<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>s_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    word_index <span class="token operator">+=</span> <span class="token number">1</span>
                s_index <span class="token operator">+=</span> <span class="token number">1</span>

                <span class="token keyword">if</span> word_index <span class="token operator">==</span> word_length<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> word
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function V(E,F){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("h3",r,[d,s(),n("a",k,[s("605. 种花问题"),e(a)]),s("——种花问题")]),v,n("h3",b,[m,s(),n("a",g,[s("11. 盛最多水的容器"),e(a)])]),h,n("h3",f,[y,s(),n("a",w,[s("881. 救生艇"),e(a)])]),_,n("h3",x,[q,s(),n("a",L,[s("611. 有效三角形的个数"),e(a)])]),S,n("h3",j,[z,s(),n("a",N,[s("524. 通过删除字母匹配到字典里最长单词"),e(a)])]),B])}const T=p(i,[["render",V],["__file","4、贪心双指针.html.vue"]]);export{T as default};
