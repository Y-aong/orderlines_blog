import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as n,b as s,d as p,e as a}from"./app-2d0f66e1.js";const c={},r=a(`<h1 id="_1、位运算" tabindex="-1"><a class="header-anchor" href="#_1、位运算" aria-hidden="true">#</a> 1、位运算</h1><h3 id="一、基本概念" tabindex="-1"><a class="header-anchor" href="#一、基本概念" aria-hidden="true">#</a> 一、基本概念</h3><p>位运算是用来操作二进制的。</p><p>python中一共有六中位运算的操作符。二进制在python中表示为”0b”。例如 a = 0b100110。bin函数可以把十进制转化为二进制数。</p><h4 id="与" tabindex="-1"><a class="header-anchor" href="#与" aria-hidden="true">#</a> &amp;与</h4><p>如果两个二进制相同位数为1，返回1，否则为0</p><h4 id="或" tabindex="-1"><a class="header-anchor" href="#或" aria-hidden="true">#</a> |或</h4><p>如果两个二进制相同位数至少有一个1，则返回的数字的二进制在该位置值也为1，否则为0。</p><h4 id="异或" tabindex="-1"><a class="header-anchor" href="#异或" aria-hidden="true">#</a> ^ 异或</h4><p>简单理解就是非进位相加，相同为0，不同为1</p><p>异或运算有很多的技巧，首先就是</p><ul><li><p>异或运算就是无进位相加</p></li><li><p>满足交换律，即 a ^ b = b ^ a，也就是异或运算满足交换律、结合律，也就是同一批数字，不管异或顺序是什么，最终的结果都是一个。</p></li><li><p>相同两个数异或为0 ，即 a ^ a = 0，0异或一个数为那个数本身，即 0 ^ a = a。</p></li><li><p>整体异或和如果是x，整体中某个部分的异或和如果是y，那么剩下部分的异或和是x^y</p></li></ul><h4 id="取反" tabindex="-1"><a class="header-anchor" href="#取反" aria-hidden="true">#</a> ~ 取反</h4><p>将数字转化为二进制后，数字前加一个负号，二进制加1，再返回变换后二进制对应的数。</p><p><code>~a = -(a+1)</code>所以<code>-a=~a+1</code></p><h4 id="左移" tabindex="-1"><a class="header-anchor" href="#左移" aria-hidden="true">#</a> &lt;&lt; 左移</h4><p>将数字转化为二进制后，向二进制里添加几个零（取决于左移的位数），再返回变换后二进制对应的数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a = 2
a &lt;&lt; 1# 等于 2**2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="右移" tabindex="-1"><a class="header-anchor" href="#右移" aria-hidden="true">#</a> &gt;&gt;右移</h4><p>将数字转化为二进制后，将二进制里最后面的几个数剔除（取决于右移的位数），再返回变换后二进制对应的数。</p><h3 id="二、常用技巧" tabindex="-1"><a class="header-anchor" href="#二、常用技巧" aria-hidden="true">#</a> 二、常用技巧</h3><p>袋子里一共a个白球，b个黑球，每次从袋子里拿2个球，每个球每次被拿出机会均等如果拿出的是2个白球、或者2个黑球，那么就往袋子里重新放入1个白球如果拿出的是1个白球和1个黑球，那么就往袋子里重新放入1个黑球那么最终袋子里一定会只剩1个球，请问最终的球是黑的概率是多少?用a和b来表达这个概率。</p><p>答案:<br> 黑球的数量如果是偶数，最终的球是黑的概率是0%</p><p>黑球的数量如果是奇数，最终的球是黑的概率是100%完全和白球的数量无关。</p><h4 id="_1、打印32位的二进制的数字" tabindex="-1"><a class="header-anchor" href="#_1、打印32位的二进制的数字" aria-hidden="true">#</a> 1、打印32位的二进制的数字</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">print_binary</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token keyword">if</span> num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>


print_binary<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、交换顺序-a需要不等于b" tabindex="-1"><a class="header-anchor" href="#_2、交换顺序-a需要不等于b" aria-hidden="true">#</a> 2、交换顺序, a需要不等于b</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
a <span class="token operator">=</span> a <span class="token operator">^</span> b  <span class="token comment"># a ^ b</span>
b <span class="token operator">=</span> a <span class="token operator">^</span> b  <span class="token comment"># a ^ b ^ b </span>
a <span class="token operator">=</span> a <span class="token operator">^</span> b  <span class="token comment"># a ^ b ^ a ^ b ^ b </span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),u={id:"_3、面试题-17-04-消失的数字",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_3、面试题-17-04-消失的数字","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/missing-number-lcci/",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 数组nums包含从0到n的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗？</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        all_num <span class="token operator">=</span> <span class="token number">0</span>
        has_num <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            all_num <span class="token operator">^</span><span class="token operator">=</span> i
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            has_num <span class="token operator">^</span><span class="token operator">=</span> num
        <span class="token keyword">return</span> all_num <span class="token operator">^</span> has_num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、判断奇数偶数" tabindex="-1"><a class="header-anchor" href="#_4、判断奇数偶数" aria-hidden="true">#</a> 4、判断奇数偶数</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>
a <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>
b <span class="token operator">=</span> <span class="token number">2</span>
b $ <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、找到右边第一个为1的数字" tabindex="-1"><a class="header-anchor" href="#_5、找到右边第一个为1的数字" aria-hidden="true">#</a> 5、找到右边第一个为1的数字</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>right <span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="三、经典题目" tabindex="-1"><a class="header-anchor" href="#三、经典题目" aria-hidden="true">#</a> 三、经典题目</h3>`,6),v={id:"面试题-17-04-消失的数字",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#面试题-17-04-消失的数字","aria-hidden":"true"},"#",-1),h={href:"https://leetcode.cn/problems/missing-number-lcci/",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>数组<code>nums</code>包含从<code>0</code>到<code>n</code>的所有整数，但其中缺了一个。请编写代码找出那个缺失的整数。你有办法在O(n)时间内完成吗？</p><p>**注意：**本题相对书上原题稍作改动</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：[3,0,1]
输出：2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：[9,6,4,2,3,5,7,0,1]
输出：8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>思路：</p><p>任何数<sup>本身都是0，我们先把0-n之间的所有数都</sup>一遍，得到<code>a1^a2^a3...^an</code></p><p>再把数组中所有的数<sup>一遍，再把两个结果进行</sup>,就得到缺失的数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        temp1 <span class="token operator">=</span> <span class="token number">0</span>
        temp2 <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp1 <span class="token operator">^</span><span class="token operator">=</span> i
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            temp2 <span class="token operator">^</span><span class="token operator">=</span> num
        
        <span class="token keyword">return</span> temp1 <span class="token operator">^</span> temp2

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),_={id:"_136-只出现一次的数字",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_136-只出现一次的数字","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},x=a(`<p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code> ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><p><strong>示例 1 ：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [2,2,1]
输出：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2 ：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [4,1,2,1,2]
输出：4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3 ：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [1]
输出：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-3 * 104 &lt;= nums[i] &lt;= 3 * 104</code></li><li>除了某个元素只出现一次以外，其余每个元素均出现两次。</li></ul><h5 id="思路一" tabindex="-1"><a class="header-anchor" href="#思路一" aria-hidden="true">#</a> 思路一</h5><p>任何数字^本身都是0，那么出现偶数的数字异或结果都会是0，留下来的数字就会是那个出现一次的数字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            result <span class="token operator">^</span><span class="token operator">=</span> num
        <span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="思路二" tabindex="-1"><a class="header-anchor" href="#思路二" aria-hidden="true">#</a> 思路二</h5><p>题目给定的是一个数组，那么我们是不是可以先进行排序，每次跳跃两个索引，如果当前索引和下一个索引不一致那么它就是不同的数字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token comment"># result = 0</span>
        <span class="token comment"># for num in nums:</span>
        <span class="token comment">#     result ^= num</span>
        <span class="token comment"># return result</span>
        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;inf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 我们加个一个元素就是防止越界</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),w={id:"_137-只出现一次的数字-ii",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#_137-只出现一次的数字-ii","aria-hidden":"true"},"#",-1),N={href:"https://leetcode.cn/problems/single-number-ii/",target:"_blank",rel:"noopener noreferrer"},S=a(`<p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 **三次 。**请你找出并返回那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [2,2,3,2]
输出：3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [0,1,0,1,0,1,99]
输出：99
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li><code>nums</code> 中，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong></li></ul><p>思路一：</p><p>和上题一致</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路二：</p><p>这个题和上一题相比就差别比较大了</p><p>上题是有偶数个，求出现一次的数，本题是都是出现了奇数个，求出现一次的个数</p><p>我们可以统计每个数在32位下1的出现个数，然后除以3，看那个数字不是3的倍数，在使用或|运算计算每位1的影响值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">32</span>
        <span class="token comment"># 统计每个数32位下出现的个数</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span>

        result <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">31</span><span class="token punctuation">:</span>
                    <span class="token comment"># 这个判断条件是因为Python的特殊性</span>
                    result <span class="token operator">-=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token comment"># 使用或|运算计算每位1对于结果的影响值</span>
                    result <span class="token operator">=</span> result <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i
        <span class="token keyword">return</span> result

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),I={id:"_260-只出现一次的数字-iii",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_260-只出现一次的数字-iii","aria-hidden":"true"},"#",-1),V={href:"https://leetcode.cn/problems/single-number-iii/",target:"_blank",rel:"noopener noreferrer"},E=a(`<p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [1,2,1,3,2,5]
输出：[3,5]
解释：[5, 3] 也是有效的答案。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [-1,0]
输出：[-1,0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [0,1]
输出：[1,0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li>除两个只出现一次的整数外，<code>nums</code> 中的其他数字都出现两次</li></ul><p>思路：</p><p>当我们发现出现了偶数次我们第一反应就是使用<sup>,因为可以消除掉偶数次数的影响，那么把结果全部都</sup>完得到的就是那两个不同的数a^b</p><p>得到a^b之后，我们如何得到a和b不同的数呢？</p><ul><li><p>由于a和b不相同，所以啊a^b一定有一，所以我们可以得出其中一个数最右边一定不为1，另外一个最右边一定是1</p></li><li><p>我们可以获取到右边第一个不为一的数right_one =（num &amp; (-num)）</p></li><li><p>我们将数组中所有的数字都和右边第一个不为一的数进行&amp;运算，当num &amp; right_one == 0,代表着这里面一定有a或b其中一个</p></li><li><p>所以我们在和a<sup>b进行</sup>运算即可消除</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        num1 <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            num1 <span class="token operator">^</span><span class="token operator">=</span> num
        
        right_one <span class="token operator">=</span> num1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>num1<span class="token punctuation">)</span>
        <span class="token comment"># print(right_one)</span>
        num2 <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
            <span class="token keyword">if</span> num <span class="token operator">&amp;</span> right_one<span class="token punctuation">:</span>
                num2 <span class="token operator">^</span><span class="token operator">=</span> num

        <span class="token keyword">return</span> <span class="token punctuation">[</span>num2<span class="token punctuation">,</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),O={id:"_2595-奇偶位数",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#_2595-奇偶位数","aria-hidden":"true"},"#",-1),C={href:"https://leetcode.cn/problems/number-of-even-and-odd-bits/",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>给你一个 <strong>正</strong> 整数 <code>n</code> 。</p><p>用 <code>even</code> 表示在 <code>n</code> 的二进制形式（下标从 <strong>0</strong> 开始）中值为 <code>1</code> 的偶数下标的个数。用 <code>odd</code> 表示在 <code>n</code> 的二进制形式（下标从 <strong>0</strong> 开始）中值为 <code>1</code> 的奇数下标的个数。请注意，在数字的二进制表示中，位下标的顺序 <strong>从右到左</strong>。返回整数数组 <code>answer</code> ，其中 <code>answer = [even, odd]</code> 。</p><p><strong>示例 1：</strong></p><p>**输入：**n = 50</p><p><strong>输出：</strong>[1,2]</p><p>**解释：**50 的二进制表示是 <code>110010</code>。在下标 1，4，5 对应的值为 1。</p><p><strong>示例 2：</strong></p><p>**输入：**n = 2</p><p><strong>输出：</strong>[0,1]</p><p>**解释：**2 的二进制表示是 <code>10</code>。只有下标 1 对应的值为 1。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><p><strong>思路：</strong></p><p>把<em>n</em>当成一个二进制数来遍历。</p><p>遍历的顺序是从低位到高位。具体来说，通过<code>n &amp; 1</code>取二进制的最低位，然后把<em>n</em>右移一位，继续计算<code>n &amp; 1</code>，这样可以取到次低位。如此循环，直到<em>n</em>=0为止。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">evenOddBit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
        i <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> n<span class="token punctuation">:</span>
            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span>
            n <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span>
            i <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function T($,j){const e=o("ExternalLinkIcon");return i(),l("div",null,[r,n("h4",u,[d,s(" 3、"),n("a",k,[s("面试题 17.04. 消失的数字"),p(e)])]),m,n("h4",v,[b,s(),n("a",h,[s("面试题 17.04. 消失的数字"),p(e)])]),g,n("h4",_,[y,s(),n("a",f,[s("136. 只出现一次的数字"),p(e)])]),x,n("h4",w,[L,s(),n("a",N,[s("137. 只出现一次的数字 II"),p(e)])]),S,n("h4",I,[B,s(),n("a",V,[s("260. 只出现一次的数字 III"),p(e)])]),E,n("h4",O,[q,s(),n("a",C,[s("2595. 奇偶位数"),p(e)])]),P])}const D=t(c,[["render",T],["__file","1、位运算.html.vue"]]);export{D as default};
