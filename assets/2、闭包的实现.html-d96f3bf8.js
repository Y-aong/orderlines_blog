const n=JSON.parse(`{"key":"v-e200f82a","path":"/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/2%E3%80%81%E9%97%AD%E5%8C%85%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"2、python闭包","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2023-07-15T00:00:00.000Z","category":["python"],"tag":["闭包"],"description":"2、python闭包 一、定义 闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。 一、闭包的作用 闭包可以保存当前的运行环境 外函数返回了内函数的引用 外函数把临时变量绑定给内函数 闭包是装饰器的基础 二、闭包实例 #闭包函数的实例 # outer是外部函数 a和b都是外函数的临时变量 def outer( a ): b = 10 # inner是内函数 def inner(): #在内函数中 用到了外函数的临时变量 print(a+b) # 外函数的返回值是内函数的引用 return inner if __name__ == '__main__': # 在这里我们调用外函数传入参数5 #此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo # 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数 demo = outer(5) # 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量 # demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数 demo() # 15 demo2 = outer(7) demo2()#17","head":[["meta",{"property":"og:url","content":"https://y-aong.github.io/orderlines_blog/orderlines_blog/posts/Python/%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/2%E3%80%81%E9%97%AD%E5%8C%85%E7%9A%84%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"ORDERLINES"}],["meta",{"property":"og:title","content":"2、python闭包"}],["meta",{"property":"og:description","content":"2、python闭包 一、定义 闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。 一、闭包的作用 闭包可以保存当前的运行环境 外函数返回了内函数的引用 外函数把临时变量绑定给内函数 闭包是装饰器的基础 二、闭包实例 #闭包函数的实例 # outer是外部函数 a和b都是外函数的临时变量 def outer( a ): b = 10 # inner是内函数 def inner(): #在内函数中 用到了外函数的临时变量 print(a+b) # 外函数的返回值是内函数的引用 return inner if __name__ == '__main__': # 在这里我们调用外函数传入参数5 #此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo # 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数 demo = outer(5) # 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量 # demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数 demo() # 15 demo2 = outer(7) demo2()#17"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Y-aong"}],["meta",{"property":"article:tag","content":"闭包"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2、python闭包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Y-aong\\",\\"url\\":\\"https://github.com/Y-aong\\"}]}"]]},"headers":[{"level":3,"title":"一、定义","slug":"一、定义","link":"#一、定义","children":[]},{"level":3,"title":"一、闭包的作用","slug":"一、闭包的作用","link":"#一、闭包的作用","children":[]},{"level":3,"title":"二、闭包实例","slug":"二、闭包实例","link":"#二、闭包实例","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.27,"words":381},"filePathRelative":"posts/Python/进阶知识/2、闭包的实现.md","localizedDate":"July 15, 2023","excerpt":"<h1> 2、python闭包</h1>\\n<h3> 一、定义</h3>\\n<p>闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。</p>\\n<h3> 一、闭包的作用</h3>\\n<ul>\\n<li>闭包可以保存当前的运行环境</li>\\n<li>外函数返回了内函数的引用</li>\\n<li>外函数把临时变量绑定给内函数</li>\\n<li>闭包是装饰器的基础</li>\\n</ul>\\n<h3> 二、闭包实例</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token comment\\">#闭包函数的实例</span>\\n<span class=\\"token comment\\"># outer是外部函数 a和b都是外函数的临时变量</span>\\n<span class=\\"token keyword\\">def</span> outer<span class=\\"token punctuation\\">(</span> a <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span>\\n    <span class=\\"token comment\\"># inner是内函数</span>\\n    <span class=\\"token keyword\\">def</span> inner<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token comment\\">#在内函数中 用到了外函数的临时变量</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token operator\\">+</span>b<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\"># 外函数的返回值是内函数的引用</span>\\n    <span class=\\"token keyword\\">return</span> inner\\n\\n<span class=\\"token keyword\\">if</span> __name__ <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'__main__'</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token comment\\"># 在这里我们调用外函数传入参数5</span>\\n    <span class=\\"token comment\\">#此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo</span>\\n    <span class=\\"token comment\\"># 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数</span>\\n    demo <span class=\\"token operator\\">=</span> outer<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\"># 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量</span>\\n    <span class=\\"token comment\\"># demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数</span>\\n    demo<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\"># 15</span>\\n\\n    demo2 <span class=\\"token operator\\">=</span> outer<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">)</span>\\n    demo2<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">#17</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
