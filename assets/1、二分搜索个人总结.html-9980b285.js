import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a as n,b as e,d as t,e as s}from"./app-2d0f66e1.js";const c={},d=s('<h1 id="_1、二分搜索个人总结" tabindex="-1"><a class="header-anchor" href="#_1、二分搜索个人总结" aria-hidden="true">#</a> 1、二分搜索个人总结</h1><h3 id="一、二分查找定义" tabindex="-1"><a class="header-anchor" href="#一、二分查找定义" aria-hidden="true">#</a> 一、二分查找定义</h3><p>二分查找的基本思想是很简单的可能很多小学生都可以思考出来，但是实际去 写又会遇到很多问题。因为里面有很多细节需要注意。一不小心就会写失败。</p><p>二分查找的基本算法思想为：通过确定目标元素所在的区间范围，反复将查找范围减半，直到找到元素或找不到该元素为止。</p><h3 id="二、二分查找的算法步骤" tabindex="-1"><a class="header-anchor" href="#二、二分查找的算法步骤" aria-hidden="true">#</a> 二、二分查找的算法步骤</h3><ol><li><strong>初始化</strong>：首先，确定要查找的有序数据集合。可以是一个数组或列表，确保其中的元素按照升序或者降序排列。</li><li><strong>确定查找范围</strong>：将整个有序数组集合的查找范围确定为整个数组范围区间，即左边界 left 和右边界 right。</li><li><strong>计算中间元素</strong>：根据 mid=⌊(left+right)/2⌋ 计算出中间元素下标位置 <strong>mid</strong>。</li><li><strong>比较中间元素</strong>：将目标元素target 与中间元素 nums[mid]进行比较： <ul><li><code>target == nums[mid]</code>找到目标索引</li><li><code>target &lt; nums[mid]</code>目标位置在[left, mid-1], right=mid-1</li><li><code>target &gt; nums[mid]</code>目标位置在[mid+1, right],left=mid+1</li></ul></li></ol><p>我们可以使用一个简单的例子来说明</p>',7),r={href:"https://leetcode.cn/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [-1,0,3,5,9,12], target = 9
输出: 4
解释: 9 出现在 nums 中并且下标为 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: nums = [-1,0,3,5,9,12], target = 2
输出: -1
解释: 2 不存在 nums 中因此返回 -1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        
        <span class="token comment"># 在区间 [left, right] 内查找 target</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            <span class="token comment"># 取区间中间节点</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            <span class="token comment"># 如果找到目标值，则直接返回中心位置</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid
            <span class="token comment"># 如果 nums[mid] 小于目标值，则在 [mid + 1, right] 中继续搜索</span>
            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token comment"># 如果 nums[mid] 大于目标值，则在 [left, mid - 1] 中继续搜索</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token comment"># 未搜索到元素，返回 -1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、二分查找中的注意点" tabindex="-1"><a class="header-anchor" href="#三、二分查找中的注意点" aria-hidden="true">#</a> 三、二分查找中的注意点</h3><p>关于二分查找思路是非常简单的，但是实际写代码可能是非常容易写失败的，因为其中有很多的注意点</p><ul><li><p>区间的开闭问题，开区间、闭区间，左开右闭，左闭右开</p></li><li><p>mid的取值问题，mid = (left+ right) // 2, mid = (left+right+1) // 2</p></li><li><p>出界条件的判断,while left &lt; right, while left &lt;= right</p></li><li><p>搜索区间范围的选择，left = mid + 1, left = mid, right=mid-1，right= mid</p></li></ul><h4 id="_3-1、区间的开闭问题" tabindex="-1"><a class="header-anchor" href="#_3-1、区间的开闭问题" aria-hidden="true">#</a> 3.1、区间的开闭问题</h4><p>关于二分查找算法的左闭右闭区间、左闭右开区间都是可以实现的，但是一般来说左闭右开区间这种写法在解决问题的过程中，会使得问题变得复杂，需要考虑的情况更多，所以不建议使用左闭右开区间这种写法，而是建议：<strong>全部使用「左闭右闭区间」这种写法</strong>。</p><h4 id="_3-2、mid的取值问题" tabindex="-1"><a class="header-anchor" href="#_3-2、mid的取值问题" aria-hidden="true">#</a> 3.2、mid的取值问题</h4><ol><li><code>mid = (left + right) // 2</code>。</li><li><code>mid = (left + right + 1) // 2 </code>。</li></ol><p>式子中 <code>//</code> 所代表的含义是「中间数向下取整」。当待查找区间中的元素个数为奇数个，使用这两种取值公式都能取到中间元素的下标位置。</p><p>除了上面提到的这两种写法，我们还经常能看到下面两个公式：</p><ol><li><code>mid = left + (right - left) // 2</code>。</li><li><code>mid = left + (right - left + 1) // 2</code>。</li></ol><p>这两个公式其实分别等同于之前两个公式，可以看做是之前两个公式的另一种写法。这种写法能够防止整型溢出问题（Python 语言中整型不会溢出，其他语言可能会有整型溢出问题）。</p><p>在 <code>left+right</code>的数据量不会超过整型变量最大值时，这两种写法都没有问题。在 left+right 的数据量可能会超过整型变量最大值时，最好使用第二种写法。所以，为了统一和简化二分查找算法的写法，建议统一写成第二种写法：</p><ol><li><p><code>mid = left + (right - left) // 2</code>。</p></li><li><p><code>mid = left + (right - left + 1) // 2</code>。</p></li></ol><p>3.3、出界条件的判断</p><p>二分查找算法的写法中，<code>while</code> 语句出界判断条件通常有两种：</p><ol><li><code>left &lt;= right</code>。</li><li><code>left &lt; right</code>。</li></ol><p>我们究竟应该使用哪一种写法呢？</p><ol><li>如果判断语句为left &lt;= right，并且查找的元素不在有序数组中，则while语句的出界条件是left &gt; right，也就是left == right + 1，写成区间形式就是[right+1,right][<em>r<strong>i</strong>g<strong>h</strong>t</em>+1,<em>r<strong>i</strong>g<strong>h</strong>t</em>]，此时待查找区间为空，待查找区间中没有元素存在，此时终止循环时，可以直接返回−1。 <ul><li>比如说区间[3,2]， 此时左边界大于右边界，直接终止循环，返回 −1即可。</li></ul></li><li>如果判断语句为left &lt; right，并且查找的元素不在有序数组中，则while语句出界条件是left == right，写成区间形式就是[right,right][<em>r<strong>i</strong>g<strong>h</strong>t</em>,<em>r<strong>i</strong>g<strong>h</strong>t</em>]。此时区间不为空，待查找区间还有一个元素存在，我们并不能确定查找的元素不在这个区间中，此时终止循环时，如果直接返回−1就是错误的。 <ul><li>比如说区间 [2,2][2,2]，如果元素 nums[2] 刚好就是目标元素 target，此时终止循环，返回 −1 就漏掉了。</li></ul></li></ol><p>但是如果我们还是想要使用 <code>left &lt; right</code> 的话，怎么办？</p><p>可以在出界之后增加一层判断，判断 left所指向位置是否等于目标元素，如果是的话就返回 left<em>l<strong>e</strong>f**t</em>，如果不是的话返回 −1−1。即：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
    <span class="token comment"># ...</span>
<span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-搜索区间范围的选择" tabindex="-1"><a class="header-anchor" href="#_3-4-搜索区间范围的选择" aria-hidden="true">#</a> 3.4 搜索区间范围的选择</h4><p>在进行区间范围选择的时候，通常有三种写法：</p><ol><li><code>left = mid + 1</code>，<code>right = mid - 1</code>。</li><li><code>left = mid + 1 </code>，<code>right = mid</code>。</li><li><code>left = mid</code>，<code>right = mid - 1</code>。</li></ol><p>这是二分查找的一个难点，写错了很容易造成死循环，或者得不到正确结果。</p><p>这其实跟二分查找算法的两种不同思路和三种写法有关。</p><ul><li>思路 1：「直接法」—— 在循环体中找到元素后直接返回结果。</li><li>思路 2：「排除法」—— 在循环体中排除目标元素一定不存在区间。</li></ul><h3 id="三、经典例题" tabindex="-1"><a class="header-anchor" href="#三、经典例题" aria-hidden="true">#</a> 三、经典例题</h3>`,36),k={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"},m=s(`<p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [], target = 0
输出：[-1,-1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>nums</code> 是一个非递减数组</li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><p>这道题就把以上的注意点很好的概括出来的，中间有涉及到mid的取值问题，left，right的取值范围，while的判断条件。</p><p>首先这道题是求得是等于target元素的第一的位置和等于target元素的最后一个元素</p><p>举例说明</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[1, 2, 2, 3, 4, 5, 5]
 0, 1, 2, 3, 4, 5, 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假如target为5求得也就是[5, 6]</p><p>第一次middle = (left + right) // 2为3，区间范围为[middle+1, right]<strong>值的范围</strong>，我们要时刻保证我们要取的值在[left,right]区间中</p><ul><li>目标是找到<code>target</code>在数组中的<strong>起始位置</strong>。</li><li>使用二分查找法，通过调整搜索范围来逼近目标值的开始位置。</li><li>当<code>nums[middle] &lt; target</code>时，说明目标值至少在<code>middle + 1</code>及之后，因此将<code>left</code>更新为<code>middle + 1</code>。</li><li>否则，当<code>nums[middle] &gt;= target</code>时，缩小右边界至<code>middle</code>，因为目标值可能在<code>middle</code>或其左边。</li><li>最终检查<code>left</code>是否指向了目标值，如果是，则返回其索引；否则返回-1表示未找到。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">find_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            right <span class="token operator">=</span> middle
    <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>目标是找到<code>target</code>在数组中的<strong>结束位置</strong>。</li><li>同样使用二分查找法，但为了正确地定位到目标值的最后出现位置，计算中间点<code>middle</code>的方式略有不同：<code>(left + right + 1) // 2</code>。这确保了当<code>left</code>和<code>right</code>相邻时，优先选择右边的元素作为<code>middle</code>，从而避免陷入无限循环。</li><li>如果<code>nums[middle] &gt; target</code>，说明目标值最多只到<code>middle - 1</code>，因此将<code>right</code>更新为<code>middle - 1</code>。</li><li>否则，当<code>nums[middle] &lt;= target</code>时，移动左边界至<code>middle</code>，以继续向可能的目标值结束位置搜索。</li><li>最后检查<code>left</code>是否指向了目标值，如果是，则返回其索引；否则返回-1。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">find_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
            right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> middle

    <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>

        <span class="token keyword">def</span> <span class="token function">find_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                    left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    right <span class="token operator">=</span> middle
            <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>

        <span class="token keyword">def</span> <span class="token function">find_end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                middle <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                    right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    left <span class="token operator">=</span> middle

            <span class="token keyword">return</span> left <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>

        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>find_start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> find_end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种在有序数组中寻找第一个和最后一个位置，也是在很多算法中出现的，可能记起来会比较复杂当然也可以记住一个口诀就是<code>左加右减，右加一</code></p><p>左加：left = middle + 1</p><p>右减：right = middle - 1</p><p>右加一：middle = (left + right + 1) // 2</p>`,26);function v(g,h){const a=p("ExternalLinkIcon");return l(),i("div",null,[d,n("p",null,[n("a",r,[e("704. 二分查找"),t(a)])]),u,n("p",null,[n("a",k,[e("34. 在排序数组中查找元素的第一个和最后一个位置"),t(a)])]),m])}const y=o(c,[["render",v],["__file","1、二分搜索个人总结.html.vue"]]);export{y as default};
