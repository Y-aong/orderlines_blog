import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as l,c as i,a as t,b as e,d as a,e as r}from"./app-2d0f66e1.js";const d={},h=r('<h1 id="_8、daemonset和statefulset" tabindex="-1"><a class="header-anchor" href="#_8、daemonset和statefulset" aria-hidden="true">#</a> 8、DaemonSet和StatefulSet</h1><h3 id="一、daemonset" tabindex="-1"><a class="header-anchor" href="#一、daemonset" aria-hidden="true">#</a> 一、DaemonSet</h3><h4 id="_1、定义" tabindex="-1"><a class="header-anchor" href="#_1、定义" aria-hidden="true">#</a> 1、定义</h4><p>DaemonSet 控制器确保所有（或一部分）的节点都运行了一个指定的 Pod 副本。</p><ul><li>每当向集群中添加一个节点时，指定的 Pod 副本也将添加到该节点上</li><li>当节点从集群中移除时，Pod 也就被垃圾回收了</li><li>删除一个 DaemonSet 可以清理所有由其创建的 Pod</li></ul><h4 id="_2、使用场景" tabindex="-1"><a class="header-anchor" href="#_2、使用场景" aria-hidden="true">#</a> 2、使用场景：</h4><ul><li>在每个节点上运行集群的<strong>存储守护进程</strong></li><li>在每个节点上运行<strong>日志收集守护进程</strong></li><li>在每个节点上运行<strong>监控守护进程</strong></li></ul><h3 id="二、statefulset" tabindex="-1"><a class="header-anchor" href="#二、statefulset" aria-hidden="true">#</a> 二、StatefulSet</h3><h4 id="_1、定义-1" tabindex="-1"><a class="header-anchor" href="#_1、定义-1" aria-hidden="true">#</a> 1、定义</h4><p>有状态副本集；Deployment等属于无状态的应用部署（stateless）</p><h4 id="_2、特点" tabindex="-1"><a class="header-anchor" href="#_2、特点" aria-hidden="true">#</a> 2、特点</h4>',11),c={href:"https://github.com/kubernetes/examples/tree/master/staging/persistent-volume-provisioning/README.md",target:"_blank",rel:"noopener noreferrer"},u=t("code",null,"storage class",-1),_=t("li",null,[e("删除或者收缩 StatefulSet 并"),t("em",null,"不会"),e("删除它关联的存储卷")],-1),f={href:"https://kubernetes.io/zh/docs/concepts/services-networking/service/#headless-services",target:"_blank",rel:"noopener noreferrer"},p=t("li",null,"当删除 StatefulSets 时，StatefulSet 不提供任何终止 Pod 的保证。 为了实现 StatefulSet 中的 Pod 可以有序地且体面地终止，可以在删除之前将 StatefulSet 缩放为 0。",-1),m={href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/#pod-management-policies",target:"_blank",rel:"noopener noreferrer"},S=t("code",null,"OrderedReady",-1),g={href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/#rolling-updates",target:"_blank",rel:"noopener noreferrer"},b={href:"https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/#forced-rollback",target:"_blank",rel:"noopener noreferrer"},k=t("li",null,"按照顺序进行创建和删除pod",-1),x=r('<h4 id="_3、使用场景" tabindex="-1"><a class="header-anchor" href="#_3、使用场景" aria-hidden="true">#</a> 3、使用场景</h4><ul><li><strong>稳定、唯一的网络标识（dnsname）</strong><ul><li>StatefulSet<strong>通过与其相关的无头服务为每个pod提供DNS解析条目</strong></li></ul></li><li><strong>稳定的、持久的存储；【每个Pod始终对应各自的存储路径（PersistantVolumeClaimTemplate）】</strong></li><li><strong>有序的、优雅的部署和缩放。【按顺序地增加副本、减少副本，并在减少副本时执行清理】</strong></li><li><strong>有序的、自动的滚动更新。【按顺序自动地执行滚动更新】</strong></li></ul>',2);function P(D,v){const o=n("ExternalLinkIcon");return l(),i("div",null,[h,t("ul",null,[t("li",null,[e("给定 Pod 的存储必须由 "),t("a",c,[e("PersistentVolume 驱动"),a(o)]),e(" 基于所请求的 "),u,e(" 来提供，或者由管理员预先提供")]),_,t("li",null,[e("StatefulSet 当前需要"),t("a",f,[e("无头服务"),a(o)]),e(" 来负责 Pod 的网络标识。")]),p,t("li",null,[e("在默认 "),t("a",m,[e("Pod 管理策略"),a(o)]),e("("),S,e(") 时使用 "),t("a",g,[e("滚动更新"),a(o)]),e("，可能进入需要"),t("a",b,[e("人工干预"),a(o)]),e(" 才能修复的损坏状态。")]),k]),x])}const N=s(d,[["render",P],["__file","8、k8s-DaemonSet和StatefulSet.html.vue"]]);export{N as default};
