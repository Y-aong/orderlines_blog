import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as s,b as n,d as t,e as i}from"./app-2d0f66e1.js";const r={},l=i(`<h1 id="_5、适配器模式" tabindex="-1"><a class="header-anchor" href="#_5、适配器模式" aria-hidden="true">#</a> 5、适配器模式</h1><h3 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义" aria-hidden="true">#</a> 一、定义</h3><p><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。它通过引入一个中间件——适配器，将一个类的接口转换成客户期望的另一个接口，从而使原本因接口不兼容而不能一起工作的类能够协同工作。适配器模式的核心思想在于创建一个新的类或对象，作为现有类和目标接口之间的桥梁，使得它们可以相互协作。</p><p>在python的pandas是大名鼎鼎的数据处理模块，提供了强大的数据结构如 <code>Series</code>和 <code>DataFrame</code>，同时支持excel,csv等数据格式的相互转换，明确地以“适配器模式”的名义实现其功能，然而，在某些方面，Pandas确实体现了适配器模式的核心思想——即通过某种机制使不同的接口或数据源能够协同工作。</p><p><strong>数据类型转换</strong>：Pandas可以读取多种不同格式的数据文件（CSV、Excel、SQL数据库等），并将这些数据统一为 <code>DataFrame</code>对象进行处理。</p><p><strong>与NumPy的集成</strong>：Pandas是基于NumPy构建的，但又扩展了NumPy的功能，允许处理更复杂的数据类型（如字符串、时间序列等）。在这种意义上，Pandas也起到了适配器的作用，因为它让原本只适用于数值数组的NumPy工具能够处理更加多样化和结构化的表格型数据。</p><h3 id="二、解决的问题" tabindex="-1"><a class="header-anchor" href="#二、解决的问题" aria-hidden="true">#</a> 二、解决的问题</h3><p>适配器模式主要解决了以下几种情况下的问题：</p><ul><li>系统需要使用现有的类，但此类不符合系统的需要。</li><li>想要建立一个可重复使用的类，用于与一些彼此间没有太多关联的类合作。</li><li>需要统一输出接口，但是输出类型不可预知。</li></ul><h3 id="三、适配器模式结构" tabindex="-1"><a class="header-anchor" href="#三、适配器模式结构" aria-hidden="true">#</a> 三、适配器模式结构</h3><ol><li><strong>客户端</strong> （Client） 是包含当前程序业务逻辑的类。</li><li><strong>客户端接口</strong> （Client Interface） 描述了其他类与客户端代码合作时必须遵循的协议。</li><li><strong>服务</strong> （Service） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。</li><li><strong>适配器</strong> （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时封装了服务对象。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Target</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Target: The default target&#39;s behavior.&quot;</span>


<span class="token keyword">class</span> <span class="token class-name">Adaptee</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">specific_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;.eetpadA eht fo roivaheb laicepS&quot;</span>


<span class="token keyword">class</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>Target<span class="token punctuation">,</span> Adaptee<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Adapter: (TRANSLATED) </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>specific_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token format-spec">-1]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>


<span class="token keyword">def</span> <span class="token function">client_code</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token string">&quot;Target&quot;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Client: I can work just fine with the Target objects:&quot;</span><span class="token punctuation">)</span>
    target <span class="token operator">=</span> Target<span class="token punctuation">(</span><span class="token punctuation">)</span>
    client_code<span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

    adaptee <span class="token operator">=</span> Adaptee<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Client: The Adaptee class has a weird interface. &quot;</span>
          <span class="token string">&quot;See, I don&#39;t understand it:&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Adaptee: </span><span class="token interpolation"><span class="token punctuation">{</span>adaptee<span class="token punctuation">.</span>specific_request<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Client: But I can work with it via the Adapter:&quot;</span><span class="token punctuation">)</span>
    adapter <span class="token operator">=</span> Adapter<span class="token punctuation">(</span><span class="token punctuation">)</span>
    client_code<span class="token punctuation">(</span>adapter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、和其他模式的关系" tabindex="-1"><a class="header-anchor" href="#四、和其他模式的关系" aria-hidden="true">#</a> 四、和其他模式的关系</h3>`,13),u={href:"https://refactoringguru.cn/design-patterns/bridge",target:"_blank",rel:"noopener noreferrer"},d={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},k={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},v={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"},g=s("em",null,"装饰",-1),h=s("em",null,"适配器",-1),_={href:"https://refactoringguru.cn/design-patterns/adapter",target:"_blank",rel:"noopener noreferrer"},m={href:"https://refactoringguru.cn/design-patterns/proxy",target:"_blank",rel:"noopener noreferrer"},b={href:"https://refactoringguru.cn/design-patterns/decorator",target:"_blank",rel:"noopener noreferrer"};function f(q,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[l,s("ul",null,[s("li",null,[s("a",u,[n("桥接模式"),t(a)]),n("通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， "),s("a",d,[n("适配器模式"),t(a)]),n("通常在已有程序中使用， 让相互不兼容的类能很好地合作。")]),s("li",null,[s("a",k,[n("适配器"),t(a)]),n("可以对已有对象的接口进行修改， "),s("a",v,[n("装饰模式"),t(a)]),n("则能在不改变对象接口的前提下强化对象功能。 此外， "),g,n("还支持递归组合， "),h,n("则无法实现。")]),s("li",null,[s("a",_,[n("适配器"),t(a)]),n("能为被封装对象提供不同的接口， "),s("a",m,[n("代理模式"),t(a)]),n("能为对象提供相同的接口， "),s("a",b,[n("装饰"),t(a)]),n("则能为对象提供加强的接口。")])])])}const A=e(r,[["render",f],["__file","5、适配器模式.html.vue"]]);export{A as default};
