import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as p,e as a}from"./app-2d0f66e1.js";const i={},u=a(`<h1 id="_2、二分图" tabindex="-1"><a class="header-anchor" href="#_2、二分图" aria-hidden="true">#</a> 2、二分图</h1><h3 id="一、二分图的定义" tabindex="-1"><a class="header-anchor" href="#一、二分图的定义" aria-hidden="true">#</a> 一、二分图的定义</h3><p>官方定义比较绕口，<code>二分图的顶点集可分割为两个互不相交的子集，图中每条边依附的两个顶点都分属于这两个子集，且两个子集内的顶点不相邻。</code>但是通俗理解就是能不能将一个边的两个节点分别属于不同颜色的集合中</p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/gibkIz0MVqdEHc01wZTpaCcy92roIW5z5zmVYfGHRnfEeuJgPnDDko1AgrZkvVibicqbhaKgoergMv3ibDdleauJibA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" style="zoom:50%;"><p>，如何存储电影演员和电影之间的关系？</p><p>如果用哈希表存储，需要两个哈希表分别存储「每个演员到电影列表」的映射和「每部电影到演员列表」的映射。</p><p>但如果用「图」结构存储，将电影和参演的演员连接，很自然地就成为了一幅二分图：</p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/gibkIz0MVqdEHc01wZTpaCcy92roIW5z5pnNIDxicOibLk6BKUq5MdhyOySOia63kRFh3y0p2qxDcZv59BHFaIXAZg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" style="zoom:50%;"><p>每个电影节点的相邻节点就是参演该电影的所有演员，每个演员的相邻节点就是该演员参演过的所有电影，非常方便直观。</p><h3 id="二分图的判定方法" tabindex="-1"><a class="header-anchor" href="#二分图的判定方法" aria-hidden="true">#</a> 二分图的判定方法</h3><p>我们可以遍历一遍图，边遍历边进行染色，看看能不能使用两种颜色给所有的节点进行染色，且相邻节点的颜色都不同</p><p>图的遍历框架为</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span>
    visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
	<span class="token keyword">for</span> val <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
		dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个标准的后序遍历，后序遍历的优点就是可以在我们遍历完数据后得到返回值后进行处理。</p><p>二分图是要求我们获取到该节点和其相邻节点的颜色都不一致。如果该节点和它的相邻节点颜色一致了，那么这就不是一个二分图了</p><p>那么我们稍微修改一下，可以写成这样边遍历边进行染色</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
	visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
	<span class="token keyword">for</span> val <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
		<span class="token keyword">if</span> visited<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">:</span>
			<span class="token comment"># 这里就不是一个二分图</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),d={id:"_785-判断二分图",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#_785-判断二分图","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/is-graph-bipartite/",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>存在一个 <strong>无向图</strong> ，图中有 <code>n</code> 个节点。其中每个节点都有一个介于 <code>0</code> 到 <code>n - 1</code> 之间的唯一编号。给你一个二维数组 <code>graph</code> ，其中 <code>graph[u]</code> 是一个节点数组，由节点 <code>u</code> 的邻接节点组成。形式上，对于 <code>graph[u]</code> 中的每个 <code>v</code> ，都存在一条位于节点 <code>u</code> 和节点 <code>v</code> 之间的无向边。该无向图同时具有以下属性：</p><ul><li>不存在自环（<code>graph[u]</code> 不包含 <code>u</code>）。</li><li>不存在平行边（<code>graph[u]</code> 不包含重复值）。</li><li>如果 <code>v</code> 在 <code>graph[u]</code> 内，那么 <code>u</code> 也应该在 <code>graph[v]</code> 内（该图是无向图）</li><li>这个图可能不是连通图，也就是说两个节点 <code>u</code> 和 <code>v</code> 之间可能不存在一条连通彼此的路径。</li></ul><p><strong>二分图</strong> 定义：如果能将一个图的节点集合分割成两个独立的子集 <code>A</code> 和 <code>B</code> ，并使图中的每一条边的两个节点一个来自 <code>A</code> 集合，一个来自 <code>B</code> 集合，就将这个图称为 <strong>二分图</strong> 。</p><p>如果图是二分图，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
输出：false
解释：不能将节点分割成两个独立的子集，以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：graph = [[1,3],[0,2],[1,3],[0,2]]
输出：true
解释：可以将节点分成两组: {0, 2} 和 {1, 3} 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>graph.length == n</code></li><li><code>1 &lt;= n &lt;= 100</code></li><li><code>0 &lt;= graph[u].length &lt; n</code></li><li><code>0 &lt;= graph[u][i] &lt;= n - 1</code></li><li><code>graph[u]</code> 不会包含 <code>u</code></li><li><code>graph[u]</code> 的所有值 <strong>互不相同</strong></li><li>如果 <code>graph[u]</code> 包含 <code>v</code>，那么 <code>graph[v]</code> 也会包含 <code>u</code></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution12</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 表示不能将图的每个节点分到两个不同集合中，也就是表示不是二分图</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">False</span>
        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">isBipartite</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>flag

    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token keyword">for</span> val <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),m={id:"_886-可能的二分法——有向图-需要自己构造图",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_886-可能的二分法——有向图-需要自己构造图","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/possible-bipartition/",target:"_blank",rel:"noopener noreferrer"},f=a(`<p>给定一组 <code>n</code> 人（编号为 <code>1, 2, ..., n</code>）， 我们想把每个人分进<strong>任意</strong>大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p><p>给定整数 <code>n</code> 和数组 <code>dislikes</code> ，其中 <code>dislikes[i] = [ai, bi]</code> ，表示不允许将编号为 <code>ai</code> 和 <code>bi</code>的人归入同一组。当可以用这种方法将所有人分进两组时，返回 <code>true</code>；否则返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 4, dislikes = [[1,2],[1,3],[2,4]]
输出：true
解释：group1 [1,4], group2 [2,3]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 3, dislikes = [[1,2],[1,3],[2,3]]
输出：false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
输出：false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2000</code></li><li><code>0 &lt;= dislikes.length &lt;= 104</code></li><li><code>dislikes[i].length == 2</code></li><li><code>1 &lt;= dislikes[i][j] &lt;= n</code></li><li><code>ai &lt; bi</code></li><li><code>dislikes</code> 中每一组都 <strong>不同</strong></li></ul><p>思路：</p><p>本题和上题最大的不同就是本题是有向图，上一道题为无向图，且本题的图需要自己构造。</p><p>整体思路都是一致的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 是二分图</span>

    <span class="token keyword">def</span> <span class="token function">possibleBipartition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> dislikes<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>

        self<span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        self<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        <span class="token comment"># 构造图</span>
        graph <span class="token operator">=</span> self<span class="token punctuation">.</span>build_graph<span class="token punctuation">(</span>n<span class="token punctuation">,</span> dislikes<span class="token punctuation">)</span>
        <span class="token comment"># 进行二分判定</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>flag

    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>flag<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">for</span> val <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>visited<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 不是二分图</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>color<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> val<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">build_graph</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> dislikes<span class="token punctuation">)</span><span class="token punctuation">:</span>
        graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> edge <span class="token keyword">in</span> dislikes<span class="token punctuation">:</span>
            _from<span class="token punctuation">,</span> _to <span class="token operator">=</span> edge
            graph<span class="token punctuation">[</span>_from <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>_to <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            graph<span class="token punctuation">[</span>_to <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>_from <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> graph

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码需要注意两点</p><ul><li>我们要判断从每个节点开始都可不可以放到两个集合中</li><li>需要注意当前节点和上个的相邻节点是不是同一种颜色</li></ul>`,16);function h(_,y){const e=o("ExternalLinkIcon");return c(),l("div",null,[u,n("h3",d,[r,s(),n("a",k,[s("785. 判断二分图"),p(e)])]),v,n("h3",m,[b,s(),n("a",g,[s("886. 可能的二分法"),p(e)]),s("——有向图，需要自己构造图")]),f])}const z=t(i,[["render",h],["__file","2、二分图的判定方法.html.vue"]]);export{z as default};
