import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-2d0f66e1.js";const p={},e=t(`<h1 id="关键字驱动的思路" tabindex="-1"><a class="header-anchor" href="#关键字驱动的思路" aria-hidden="true">#</a> 关键字驱动的思路</h1><p><code>robotframework</code>是一个以关键字驱动的测试框架，我也在编写一个工作流的框架，其中也会用到动态生成关键字方面的需求。我觉得robot中关键字比较好用，是值得我来借鉴的地方，所以我想学习下robot 关键字相关的实现方式。</p><h3 id="一、获取关键字" tabindex="-1"><a class="header-anchor" href="#一、获取关键字" aria-hidden="true">#</a> 一、获取关键字</h3><ul><li>KeywordCreator使用library和name创建所用的关键字，并保存到keywords列表中 <ul><li>具体实现需要KeywordCreator调用create方法，这里返回的是关键字library,关键字名称,参数，文档和tag的集合 <ul><li>create方法又是使用LibraryKeyword来进行创建的</li><li>DynamicKeyword作为LibraryKeyword的子类其中一个重要的属性method，这个method实际上就是一个可执行的对象</li><li>这个method就是KeywordCreator调用create的返回值</li></ul></li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">KeywordCreator</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> library<span class="token punctuation">:</span> TestLibrary<span class="token punctuation">,</span> getting_method_failed_level<span class="token operator">=</span><span class="token string">&#39;INFO&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>library <span class="token operator">=</span> library
        self<span class="token punctuation">.</span>getting_method_failed_level <span class="token operator">=</span> getting_method_failed_level

    <span class="token keyword">def</span> <span class="token function">create_keywords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> names<span class="token punctuation">:</span> <span class="token string">&#39;list[str]|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        library <span class="token operator">=</span> self<span class="token punctuation">.</span>library
        library<span class="token punctuation">.</span>keyword_finder<span class="token punctuation">.</span>invalidate_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>
        instance <span class="token operator">=</span> library<span class="token punctuation">.</span>instance
        keywords <span class="token operator">=</span> library<span class="token punctuation">.</span>keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> names <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            names <span class="token operator">=</span> self<span class="token punctuation">.</span>get_keyword_names<span class="token punctuation">(</span><span class="token punctuation">)</span>
        seen <span class="token operator">=</span> NormalizedDict<span class="token punctuation">(</span>ignore<span class="token operator">=</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token comment"># 这里调用的就是KeywordCreator的create方法，生成关键字</span>
                kw <span class="token operator">=</span> self<span class="token punctuation">.</span>_create_keyword<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
            <span class="token keyword">except</span> DataError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>_adding_keyword_failed<span class="token punctuation">(</span>name<span class="token punctuation">,</span> err<span class="token punctuation">,</span> self<span class="token punctuation">.</span>getting_method_failed_level<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> kw<span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> kw<span class="token punctuation">.</span>embedded<span class="token punctuation">:</span>
                        self<span class="token punctuation">.</span>_validate_embedded<span class="token punctuation">(</span>kw<span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        self<span class="token punctuation">.</span>_handle_duplicates<span class="token punctuation">(</span>kw<span class="token punctuation">,</span> seen<span class="token punctuation">)</span>
                <span class="token keyword">except</span> DataError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>_adding_keyword_failed<span class="token punctuation">(</span>kw<span class="token punctuation">.</span>name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    keywords<span class="token punctuation">.</span>append<span class="token punctuation">(</span>kw<span class="token punctuation">)</span>
                    library<span class="token punctuation">.</span>_logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Created keyword &#39;</span><span class="token interpolation"><span class="token punctuation">{</span>kw<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;.&quot;</span></span><span class="token punctuation">)</span>
                    
K <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;K&#39;</span><span class="token punctuation">,</span> bound<span class="token operator">=</span><span class="token string">&#39;LibraryKeyword&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">KeywordCreator</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    keyword_class<span class="token punctuation">:</span> <span class="token string">&#39;type[K]&#39;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> library<span class="token punctuation">:</span> <span class="token string">&#39;TestLibrary|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>library <span class="token operator">=</span> library
        self<span class="token punctuation">.</span>extra <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">if</span> library <span class="token keyword">and</span> RUN_KW_REGISTER<span class="token punctuation">.</span>is_run_keyword<span class="token punctuation">(</span>library<span class="token punctuation">.</span>real_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
            resolve_until <span class="token operator">=</span> RUN_KW_REGISTER<span class="token punctuation">.</span>get_args_to_process<span class="token punctuation">(</span>library<span class="token punctuation">.</span>real_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>extra<span class="token punctuation">[</span><span class="token string">&#39;resolve_args_until&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> resolve_until

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">instance</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>library<span class="token punctuation">.</span>instance

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>extra<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> K<span class="token punctuation">:</span>
        tags <span class="token operator">=</span> self<span class="token punctuation">.</span>get_tags<span class="token punctuation">(</span><span class="token punctuation">)</span>
        doc<span class="token punctuation">,</span> doc_tags <span class="token operator">=</span> split_tags_from_doc<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_doc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        kw <span class="token operator">=</span> self<span class="token punctuation">.</span>keyword_class<span class="token punctuation">(</span>
            owner<span class="token operator">=</span>self<span class="token punctuation">.</span>library<span class="token punctuation">,</span>
            name<span class="token operator">=</span>self<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            args<span class="token operator">=</span>self<span class="token punctuation">.</span>get_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            doc<span class="token operator">=</span>doc<span class="token punctuation">,</span>
            tags<span class="token operator">=</span>tags <span class="token operator">+</span> doc_tags<span class="token punctuation">,</span>
            <span class="token operator">**</span>self<span class="token punctuation">.</span>extra<span class="token punctuation">,</span>
            <span class="token operator">**</span>extra
        <span class="token punctuation">)</span>
        kw<span class="token punctuation">.</span>args<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> kw<span class="token punctuation">.</span>full_name
        <span class="token keyword">return</span> kw


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、运行关键字" tabindex="-1"><a class="header-anchor" href="#二、运行关键字" aria-hidden="true">#</a> 二、运行关键字</h3><ul><li>DynamicMethod： <ul><li>通过传入library, 关键字名称，参数动态生成可执行的关键字</li><li>其中有个重要的属性method，就是我们要运行的关键字</li></ul></li><li>RunKeyword： <ul><li><code>__call__</code>通过关键字名称获取可执行对象。</li><li>返回的self.method也是父类的_get_method(self, instance)的返回值，是个可执行函数</li><li>原理：使用getattr反射方式获取的callable对象</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DynamicMethod</span><span class="token punctuation">:</span>
    _underscore_name <span class="token operator">=</span> NotImplemented

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>instance <span class="token operator">=</span> instance
        self<span class="token punctuation">.</span>method <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_method<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">_get_method</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> name <span class="token keyword">in</span> self<span class="token punctuation">.</span>_underscore_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_camelCaseName<span class="token punctuation">:</span>
            method <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">callable</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> method
        <span class="token keyword">return</span> no_dynamic_method


<span class="token keyword">class</span> <span class="token class-name">RunKeyword</span><span class="token punctuation">(</span>DynamicMethod<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _underscore_name <span class="token operator">=</span> <span class="token string">&#39;run_keyword&#39;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> keyword_name<span class="token punctuation">:</span> <span class="token string">&#39;str|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> supports_named_args<span class="token punctuation">:</span> <span class="token string">&#39;bool|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>keyword_name <span class="token operator">=</span> keyword_name
        self<span class="token punctuation">.</span>_supports_named_args <span class="token operator">=</span> supports_named_args

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">supports_named_args</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_supports_named_args <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            spec <span class="token operator">=</span> PythonArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>method<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>_supports_named_args <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span>positional<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_supports_named_args

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>positional<span class="token punctuation">,</span> <span class="token operator">**</span>named<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>supports_named_args<span class="token punctuation">:</span>
            args <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>keyword_name<span class="token punctuation">,</span> positional<span class="token punctuation">,</span> named<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> named<span class="token punctuation">:</span>
            <span class="token comment"># This should never happen.</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;&#39;named&#39; should not be used when named-argument &quot;</span></span> <span class="token string-interpolation"><span class="token string">f&quot;support is not enabled, got </span><span class="token interpolation"><span class="token punctuation">{</span>named<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            args <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>keyword_name<span class="token punctuation">,</span> positional<span class="token punctuation">)</span>
        <span class="token comment"># 这里的self.method是它父类的_get_method(self, instance)的返回值，是个可执行函数</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>method<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">DynamicKeyword</span><span class="token punctuation">(</span>LibraryKeyword<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Represents a keyword in a dynamic library.&quot;&quot;&quot;</span>
    owner<span class="token punctuation">:</span> <span class="token string">&#39;DynamicLibrary&#39;</span>
    __slots__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;run_keyword&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_orig_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__source_info&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> owner<span class="token punctuation">:</span> <span class="token string">&#39;DynamicLibrary&#39;</span><span class="token punctuation">,</span>
                 name<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                 args<span class="token punctuation">:</span> <span class="token string">&#39;ArgumentSpec|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
                 doc<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                 tags<span class="token punctuation">:</span> <span class="token string">&#39;Tags|Sequence[str]&#39;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                 resolve_args_until<span class="token punctuation">:</span> <span class="token string">&#39;int|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
                 parent<span class="token punctuation">:</span> <span class="token string">&#39;BodyItemParent|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
                 error<span class="token punctuation">:</span> <span class="token string">&#39;str|None&#39;</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>owner<span class="token punctuation">,</span> printable_name<span class="token punctuation">(</span>name<span class="token punctuation">,</span> code_style<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> doc<span class="token punctuation">,</span> tags<span class="token punctuation">,</span> resolve_args_until<span class="token punctuation">,</span> parent<span class="token punctuation">,</span>
                         error<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_orig_name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__source_info <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Dynamic \`\`run_keyword\`\` method.&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> RunKeyword<span class="token punctuation">(</span>self<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>instance<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_orig_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>supports_named_args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结<br> 其实robot的运行关键字思路也是比较简单的</p><ul><li><p>获取关键字</p><ul><li>robot先获取所用的关键字放在一个list中，这些关键字对象包括library、关键字名称，可执行对象，参数，文档。也是相当于导包的作用</li></ul></li><li><p>运行关键字</p><ul><li>运行关键字是通过关键字名称，library获取可执行对象，把参数放进来就是执行关键字了</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>positional<span class="token punctuation">,</span> <span class="token operator">**</span>named<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>supports_named_args<span class="token punctuation">:</span>
            args <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>keyword_name<span class="token punctuation">,</span> positional<span class="token punctuation">,</span> named<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> named<span class="token punctuation">:</span>
            <span class="token comment"># This should never happen.</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;&#39;named&#39; should not be used when named-argument &quot;</span></span> <span class="token string-interpolation"><span class="token string">f&quot;support is not enabled, got </span><span class="token interpolation"><span class="token punctuation">{</span>named<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            args <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>keyword_name<span class="token punctuation">,</span> positional<span class="token punctuation">)</span>
        <span class="token comment"># 这里的self.method是它父类的_get_method(self, instance)的返回值，是个可执行函数</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>method<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、个人实现" tabindex="-1"><a class="header-anchor" href="#三、个人实现" aria-hidden="true">#</a> 三、个人实现</h3><p>我自己也实现了个类似的功能，我实现的代码比较简单，但是原理和robot类似都是使用反射的机制来运行关键字，<br> 不过有一点不同，我不是一开始就把所有的内置组件类全部实例化一遍，把他们存起来等待使用。我是使用的时候在进行实例化对应的组件库，进行了一个懒加载。<br> 我这样做有个好处就是有些不用的组件库可以在这次运行中不加载，减少机器内存消耗，但是也有点不好就是运行到一半发现对应的组件库没有，可能发现问题的<br> 时机会延后。不过我是通过UI来生成流程的所有上面说的这个问题可以大概率避免。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> importlib
<span class="token keyword">import</span> inspect
<span class="token keyword">from</span> typing <span class="token keyword">import</span> List

<span class="token keyword">def</span> <span class="token function">dynamic_import</span><span class="token punctuation">(</span>module_name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> class_names<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    动态导入组件库，这里类名必须要和模块名一致
    Import component libraries dynamically, where the class name must match the module name
    :param module_name: 模块名，参考配置文件中的标准库.Module name, refer to the standard library in the configuration file
    :param class_names: 类名数组.Class names
    :return:
    &quot;&quot;&quot;</span>
    modules <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> _class <span class="token keyword">in</span> class_names<span class="token punctuation">:</span>
        module_str <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>module_name<span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span>_class<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
        module <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span>module_str<span class="token punctuation">)</span>
        <span class="token keyword">for</span> name<span class="token punctuation">,</span> sub <span class="token keyword">in</span> inspect<span class="token punctuation">.</span>getmembers<span class="token punctuation">(</span>module<span class="token punctuation">,</span> inspect<span class="token punctuation">.</span>isclass<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;class name </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> already exists&#39;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> sub<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">&#39;BaseTask&#39;</span><span class="token punctuation">:</span>
                modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> sub
    <span class="token keyword">return</span> modules
<span class="token keyword">print</span><span class="token punctuation">(</span>dynamic_import<span class="token punctuation">(</span><span class="token string">&#39;orderlines.libraries&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;BuiltIn&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># {&#39;BuiltIn&#39;: &lt;class &#39;orderlines.libraries.BuiltIn.BuiltIn&#39;&gt;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dynamic_import(&#39;orderlines.libraries&#39;, [&#39;BuiltIn&#39;]</code>这个代码相当于<strong>from module_name import class_name</strong>把组件类放到modules中<br> 当我们传过来一个关键字的时候，通过library和method_name可以通过反射<code>getattr</code>获取可执行对象，通过传过来的参数运行函数<br> 我们传来的参数格式大概如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;module_name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;BuiltIn&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;method_name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;start&quot;</span>
<span class="token punctuation">}</span>
modules <span class="token operator">=</span> dynamic_import<span class="token punctuation">(</span><span class="token string">&#39;orderlines.libraries&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;BuiltIn&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
module <span class="token operator">=</span> modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;module_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">getattr</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;method_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","2、关键字驱动.html.vue"]]);export{k as default};
