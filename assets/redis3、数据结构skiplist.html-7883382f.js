import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as r}from"./app-2d0f66e1.js";const t={},s=r('<h1 id="_3、skip-list跳表" tabindex="-1"><a class="header-anchor" href="#_3、skip-list跳表" aria-hidden="true">#</a> 3、skip-list跳表</h1><h3 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义" aria-hidden="true">#</a> 一、定义</h3><p>跳表是可以实现二分查找的有序链表，跳表=链表+多级索引</p><p>skiplist是一种以空间换取时间的结构。由于链表，无法进行二分查找，因此借鉴数据库索引的思想，提取出链表中关键节点（索引），先在关键节点上查找，再进入下层链表查找。提取多层关键节点，就形成了跳跃表</p><h3 id="二、跳表的实现" tabindex="-1"><a class="header-anchor" href="#二、跳表的实现" aria-hidden="true">#</a> 二、跳表的实现</h3><figure><img src="https://s2.loli.net/2023/04/22/puRBJ5FzgoIAkbZ.png" alt="image-20230422100426672" tabindex="0" loading="lazy"><figcaption>image-20230422100426672</figcaption></figure><h3 id="三、复杂度" tabindex="-1"><a class="header-anchor" href="#三、复杂度" aria-hidden="true">#</a> 三、复杂度</h3><ul><li><p>时间负载度 Olog(N)</p></li><li><p>空间复杂度O(N)</p></li></ul><h3 id="四、优缺点" tabindex="-1"><a class="header-anchor" href="#四、优缺点" aria-hidden="true">#</a> 四、优缺点</h3><p><strong>优点</strong></p><p>跳表是一个最典型的空间换时间解决方案，而且只有在数据量较大的情况下才能体现出来优势。而且应该是读多写少的情况下才能使用，所以它的适用范围应该还是比较有限的</p><p><strong>缺点</strong></p><p>维护成本相对要高 - 新增或者删除时需要把所有索引都更新一遍；<br> 最后在新增和删除的过程中的更新，时间复杂度也是O(log n)</p>',13),n=[s];function d(h,o){return a(),i("div",null,n)}const c=e(t,[["render",d],["__file","redis3、数据结构skiplist.html.vue"]]);export{c as default};
